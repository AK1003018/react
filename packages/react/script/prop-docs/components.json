{
  "schemaVersion": 2,
  "components": {
    "dialog": {
      "id": "dialog",
      "docsId": "dialog",
      "name": "Dialog",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-dialog--default",
          "code": "() => {\n  const [isOpen, setIsOpen] = useState(false)\n  const returnFocusRef = useRef(null)\n  return (\n    <div>\n      <Box\n        sx={{\n          mb: 3,\n        }}\n      >\n        <Banner\n          title=\"Planned for deprecation\"\n          description={\n            <div data-a11y-link-underlines=\"true\">\n              There are plans to deprecate this component in a future release.\n              We recommend using{' '}\n              <Link\n                inline={true}\n                href=\"/?path=/story/components-dialog--default\"\n              >\n                Dialog\n              </Link>{' '}\n              instead.\n            </div>\n          }\n          variant=\"warning\"\n        />\n      </Box>\n      <Button\n        data-testid=\"trigger-button\"\n        ref={returnFocusRef}\n        onClick={() => setIsOpen(true)}\n      >\n        Show Dialog\n      </Button>\n      <Dialog\n        returnFocusRef={returnFocusRef}\n        isOpen={isOpen}\n        onDismiss={() => setIsOpen(false)}\n        aria-labelledby=\"header\"\n      >\n        <div data-testid=\"inner\">\n          <Dialog.Header id=\"header\">Title</Dialog.Header>\n          <Box p={3}>\n            <Text>Some content</Text>\n          </Box>\n        </div>\n      </Dialog>\n    </div>\n  )\n}"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "initialFocusRef",
          "type": "RefObject<HTMLElement>",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "isOpen",
          "type": "boolean",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "narrow",
          "type": "boolean",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "onDismiss",
          "type": "() => void",
          "required": false,
          "description": "",
          "defaultValue": "() => null"
        },
        {
          "name": "returnFocusRef",
          "type": "RefObject<HTMLElement>",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        },
        {
          "name": "wide",
          "type": "boolean",
          "required": false,
          "description": "",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "actionbar": {
      "id": "actionbar",
      "name": "ActionBar",
      "status": "alpha",
      "a11yReviewed": true,
      "stories": [
        {
          "id": "components-actionbar--default",
          "code": "() => (\n  <ActionBar aria-label=\"Toolbar\">\n    <ActionBar.IconButton\n      icon={BoldIcon}\n      aria-label=\"Bold\"\n    ></ActionBar.IconButton>\n    <ActionBar.IconButton\n      icon={ItalicIcon}\n      aria-label=\"Italic\"\n    ></ActionBar.IconButton>\n    <ActionBar.IconButton\n      icon={CodeIcon}\n      aria-label=\"Code\"\n    ></ActionBar.IconButton>\n    <ActionBar.IconButton\n      icon={LinkIcon}\n      aria-label=\"Link\"\n    ></ActionBar.IconButton>\n    <ActionBar.Divider />\n    <ActionBar.IconButton\n      icon={FileAddedIcon}\n      aria-label=\"File Added\"\n    ></ActionBar.IconButton>\n    <ActionBar.IconButton\n      icon={SearchIcon}\n      aria-label=\"Search\"\n    ></ActionBar.IconButton>\n    <ActionBar.IconButton\n      icon={QuoteIcon}\n      aria-label=\"Insert Quote\"\n    ></ActionBar.IconButton>\n    <ActionBar.IconButton\n      icon={ListUnorderedIcon}\n      aria-label=\"Unordered List\"\n    ></ActionBar.IconButton>\n    <ActionBar.IconButton\n      icon={ListOrderedIcon}\n      aria-label=\"Ordered List\"\n    ></ActionBar.IconButton>\n    <ActionBar.IconButton\n      icon={TasklistIcon}\n      aria-label=\"Task List\"\n    ></ActionBar.IconButton>\n  </ActionBar>\n)"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "aria-label",
          "type": "string",
          "required": false,
          "description": "When provided, a label is added to the action bar",
          "defaultValue": ""
        },
        {
          "name": "aria-labelledby",
          "type": "string",
          "required": false,
          "description": "When provided, uses the element with that ID as the accessible name for the ActionBar",
          "defaultValue": ""
        },
        {
          "name": "children",
          "type": "ReactNode",
          "required": false,
          "description": "Buttons in the action bar",
          "defaultValue": ""
        },
        {
          "name": "size",
          "type": "\"small\" | \"large\" | \"medium\"",
          "required": false,
          "description": "Size of the action bar",
          "defaultValue": ""
        }
      ],
      "subcomponents": [
        {
          "name": "ActionBar.Divider",
          "props": []
        },
        {
          "name": "ActionBar.IconButton",
          "props": [
            {
              "name": "icon",
              "type": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
              "required": true,
              "description": "Provide an octicon. It will be placed in the center of the button",
              "defaultValue": ""
            },
            {
              "name": "aria-label",
              "type": "string",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "aria-labelledby",
              "type": "string",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "block",
              "type": "boolean",
              "required": false,
              "description": "Allow button width to fill its container.",
              "defaultValue": ""
            },
            {
              "name": "description",
              "type": "string",
              "required": false,
              "description": "If `description` is provided, we will use a Tooltip to describe the button. Then `aria-label` is used to label the button.",
              "defaultValue": ""
            },
            {
              "name": "disabled",
              "type": "boolean",
              "required": false,
              "description": "Items that are disabled can not be clicked, selected, or navigated through.",
              "defaultValue": ""
            },
            {
              "name": "inactive",
              "type": "boolean",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "keyshortcuts",
              "type": "string",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "labelWrap",
              "type": "boolean",
              "required": false,
              "description": "Whether the button label should wrap to multiple lines of it is longer than the button width.",
              "defaultValue": ""
            },
            {
              "name": "loading",
              "type": "boolean",
              "required": false,
              "description": "When true, the button is in a loading state.",
              "defaultValue": ""
            },
            {
              "name": "loadingAnnouncement",
              "type": "string",
              "required": false,
              "description": "The content to announce to screen readers when loading.",
              "defaultValue": ""
            },
            {
              "name": "size",
              "type": "\"small\" | \"large\" | \"medium\"",
              "required": false,
              "description": "Size of button and fontSize of text in button",
              "defaultValue": ""
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            },
            {
              "name": "tooltipDirection",
              "type": "\"s\" | \"nw\" | \"n\" | \"ne\" | \"e\" | \"se\" | \"sw\" | \"w\"",
              "required": false,
              "description": "Sets where the tooltip renders in relation to the target.",
              "defaultValue": ""
            },
            {
              "name": "unsafeDisableTooltip",
              "type": "boolean",
              "required": false,
              "description": "Do not use. This is planned to be a temporary prop until the default tooltip on icon buttons are fully rolled out.",
              "defaultValue": ""
            },
            {
              "name": "variant",
              "type": "\"link\" | \"default\" | \"danger\" | \"primary\" | \"invisible\"",
              "required": false,
              "description": "Determine's the styles on a button one of 'default' | 'primary' | 'invisible' | 'danger'",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    "action_list": {
      "id": "action_list",
      "name": "ActionList",
      "status": "beta",
      "a11yReviewed": false,
      "stories": [],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "as",
          "type": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<unknown, any> | FunctionComponent<unknown>",
          "required": true,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "role",
          "type": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | \"list\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"grid\" | \"gridcell\" | \"group\" | \"heading\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"region\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\"",
          "required": false,
          "description": "The ARIA role describing the function of `List` component. `listbox` or `menu` are a common values.",
          "defaultValue": ""
        },
        {
          "name": "selectionVariant",
          "type": "\"multiple\" | \"single\"",
          "required": false,
          "description": "Whether multiple Items or a single Item can be selected.",
          "defaultValue": ""
        },
        {
          "name": "showDividers",
          "type": "boolean",
          "required": false,
          "description": "Display a divider above each `Item` in this `List` when it does not follow a `Header` or `Divider`.",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        },
        {
          "name": "variant",
          "type": "\"inset\" | \"full\"",
          "required": false,
          "description": "`inset` children are offset (vertically and horizontally) from `List`’s edges, `full` children are flush (vertically and horizontally) with `List` edges",
          "defaultValue": ""
        }
      ],
      "subcomponents": [
        {
          "name": "ActionList.Item",
          "props": [
            {
              "name": "as",
              "type": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<unknown, any> | FunctionComponent<unknown>",
              "required": true,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "_PrivateItemWrapper",
              "type": "FC<PropsWithChildren<MenuItemProps>>",
              "required": false,
              "description": "Private API for use internally only. Used by LinkItem to wrap contents in an anchor",
              "defaultValue": ""
            },
            {
              "name": "active",
              "type": "boolean",
              "required": false,
              "description": "Indicate whether the item is active. There should never be more than one active item.",
              "defaultValue": ""
            },
            {
              "name": "children",
              "type": "ReactNode",
              "required": false,
              "description": "Primary content for an Item",
              "defaultValue": ""
            },
            {
              "name": "disabled",
              "type": "boolean",
              "required": false,
              "description": "Items that are disabled can not be clicked, selected, or navigated through.",
              "defaultValue": ""
            },
            {
              "name": "id",
              "type": "string",
              "required": false,
              "description": "id to attach to the root element of the Item",
              "defaultValue": ""
            },
            {
              "name": "inactiveText",
              "type": "string",
              "required": false,
              "description": "Text describing why the item is inactive. This may be used when an item's usual functionality\nis unavailable due to a system error such as a database outage.",
              "defaultValue": ""
            },
            {
              "name": "loading",
              "type": "boolean",
              "required": false,
              "description": "Whether the item is loading",
              "defaultValue": ""
            },
            {
              "name": "onSelect",
              "type": "(event: KeyboardEvent<HTMLElement> | MouseEvent<HTMLElement, MouseEvent>) => void",
              "required": false,
              "description": "Callback that will trigger both on click selection and keyboard selection.\nThis is not called for disabled or inactive items.",
              "defaultValue": ""
            },
            {
              "name": "role",
              "type": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | \"list\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"grid\" | \"gridcell\" | \"group\" | \"heading\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"region\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\"",
              "required": false,
              "description": "The ARIA role describing the function of `Item` component. `option` is a common value.",
              "defaultValue": ""
            },
            {
              "name": "selected",
              "type": "boolean",
              "required": false,
              "description": "Is the `Item` is currently selected?",
              "defaultValue": ""
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            },
            {
              "name": "variant",
              "type": "\"default\" | \"danger\"",
              "required": false,
              "description": "Style variations associated with various `Item` types.\n\n- `\"default\"` - An action `Item`.\n- `\"danger\"` - A destructive action `Item`.",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "ActionList.LinkItem",
          "props": [
            {
              "name": "as",
              "type": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<unknown, any> | FunctionComponent<unknown>",
              "required": true,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "active",
              "type": "boolean",
              "required": false,
              "description": "Indicate whether the item is active. There should never be more than one active item.",
              "defaultValue": ""
            },
            {
              "name": "children",
              "type": "ReactNode",
              "required": false,
              "description": "Primary content for an Item",
              "defaultValue": ""
            },
            {
              "name": "download",
              "type": "string",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "href",
              "type": "string",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "hrefLang",
              "type": "string",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "inactiveText",
              "type": "string",
              "required": false,
              "description": "Text describing why the item is inactive. This may be used when an item's usual functionality\nis unavailable due to a system error such as a database outage.",
              "defaultValue": ""
            },
            {
              "name": "media",
              "type": "string",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "ping",
              "type": "string",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "referrerPolicy",
              "type": "\"\" | \"origin\" | \"no-referrer\" | \"no-referrer-when-downgrade\" | \"origin-when-cross-origin\" | \"same-origin\" | \"strict-origin\" | \"strict-origin-when-cross-origin\" | \"unsafe-url\"",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "rel",
              "type": "string",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            },
            {
              "name": "target",
              "type": "string",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "type",
              "type": "string",
              "required": false,
              "description": "",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "ActionList.Heading",
          "props": [
            {
              "name": "as",
              "type": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"h1\" & ComponentClass<unknown, any> | \"h1\" & FunctionComponent<unknown> | \"h2\" & ComponentClass<unknown, any> | \"h2\" & FunctionComponent<unknown> | \"h3\" & ComponentClass<unknown, any> | \"h3\" & FunctionComponent<unknown> | \"h4\" & ComponentClass<unknown, any> | \"h4\" & FunctionComponent<unknown> | \"h5\" & ComponentClass<unknown, any> | \"h5\" & FunctionComponent<unknown> | \"h6\" & ComponentClass<unknown, any> | \"h6\" & FunctionComponent<unknown>",
              "required": true,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            },
            {
              "name": "visuallyHidden",
              "type": "boolean",
              "required": false,
              "description": "",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "ActionList.Description",
          "props": [
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": "{}"
            },
            {
              "name": "variant",
              "type": "\"block\" | \"inline\"",
              "required": false,
              "description": "Secondary text style variations.\n\n- `\"inline\"` - Secondary text is positioned beside primary text.\n- `\"block\"` - Secondary text is positioned below primary text.",
              "defaultValue": "inline"
            }
          ]
        },
        {
          "name": "ActionList.Divider",
          "props": [
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": "{}"
            }
          ]
        },
        {
          "name": "ActionList.Group",
          "props": [
            {
              "name": "auxiliaryText",
              "type": "string",
              "required": false,
              "description": "Secondary text which provides additional information about a `Group`.",
              "defaultValue": ""
            },
            {
              "name": "role",
              "type": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | \"list\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"grid\" | \"gridcell\" | \"group\" | \"heading\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"region\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\"",
              "required": false,
              "description": "The ARIA role describing the function of the list inside `Group` component. `listbox` or `menu` are a common values.",
              "defaultValue": ""
            },
            {
              "name": "selectionVariant",
              "type": "false | \"multiple\" | \"single\"",
              "required": false,
              "description": "Whether multiple Items or a single Item can be selected in the Group. Overrides value on ActionList root.",
              "defaultValue": ""
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": "__DEV__\n  ? Object.freeze<BetterSystemStyleObject>({})\n  : {}"
            },
            {
              "name": "title",
              "type": "string",
              "required": false,
              "description": "@deprecated (Use `ActionList.GroupHeading` instead. i.e. <ActionList.Group title=\"Group title\"> → <ActionList.GroupHeading>Group title</ActionList.GroupHeading>)",
              "defaultValue": ""
            },
            {
              "name": "variant",
              "type": "\"subtle\" | \"filled\"",
              "required": false,
              "description": "Style variations. Usage is discretionary.\n\n- `\"filled\"` - Superimposed on a background, offset from nearby content\n- `\"subtle\"` - Relatively less offset from nearby content",
              "defaultValue": "subtle"
            }
          ]
        },
        {
          "name": "ActionList.GroupHeading",
          "props": [
            {
              "name": "_internalBackwardCompatibleTitle",
              "type": "string",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "as",
              "type": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\"",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "auxiliaryText",
              "type": "string",
              "required": false,
              "description": "Secondary text which provides additional information about a `Group`.",
              "defaultValue": ""
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": "__DEV__\n  ? Object.freeze<BetterSystemStyleObject>({})\n  : {}"
            },
            {
              "name": "variant",
              "type": "\"subtle\" | \"filled\"",
              "required": false,
              "description": "Style variations. Usage is discretionary.\n\n- `\"filled\"` - Superimposed on a background, offset from nearby content\n- `\"subtle\"` - Relatively less offset from nearby content",
              "defaultValue": "subtle"
            },
            {
              "name": "visuallyHidden",
              "type": "boolean",
              "required": false,
              "description": "",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "ActionList.LeadingVisual",
          "props": [
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": "{}"
            }
          ]
        },
        {
          "name": "ActionList.TrailingAction",
          "props": [
            {
              "name": "label",
              "type": "string",
              "required": true,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "as",
              "type": "\"a\" | \"button\" | \"button\" & ComponentClass<unknown, any> | \"button\" & FunctionComponent<unknown> | \"a\" & ComponentClass<unknown, any> | \"a\" & FunctionComponent<unknown>",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "href",
              "type": "string",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "icon",
              "type": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
              "required": false,
              "description": "",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "ActionList.TrailingVisual",
          "props": [
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": "{}"
            }
          ]
        }
      ]
    },
    "action_menu": {
      "id": "action_menu",
      "name": "ActionMenu",
      "status": "beta",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-actionmenu--default",
          "code": "() => (\n  <ActionMenu>\n    <ActionMenu.Button>Open menu</ActionMenu.Button>\n    <ActionMenu.Overlay width=\"medium\">\n      <ActionList>\n        <ActionList.Item onSelect={() => alert('Copy link clicked')}>\n          Copy link\n          <ActionList.TrailingVisual>⌘C</ActionList.TrailingVisual>\n        </ActionList.Item>\n        <ActionList.Item onSelect={() => alert('Quote reply clicked')}>\n          Quote reply\n          <ActionList.TrailingVisual>⌘Q</ActionList.TrailingVisual>\n        </ActionList.Item>\n        <ActionList.Item onSelect={() => alert('Edit comment clicked')}>\n          Edit comment\n          <ActionList.TrailingVisual>⌘E</ActionList.TrailingVisual>\n        </ActionList.Item>\n        <ActionList.Divider />\n        <ActionList.Item\n          variant=\"danger\"\n          onSelect={() => alert('Delete file clicked')}\n        >\n          Delete file\n          <ActionList.TrailingVisual>⌘D</ActionList.TrailingVisual>\n        </ActionList.Item>\n      </ActionList>\n    </ActionMenu.Overlay>\n  </ActionMenu>\n)"
        },
        {
          "id": "components-actionmenu-features--links-and-actions",
          "code": "() => (\n  <ActionMenu>\n    <ActionMenu.Button>Open menu</ActionMenu.Button>\n    <ActionMenu.Overlay width=\"auto\">\n      <ActionList>\n        <ActionList.Item onSelect={() => alert('Workflows clicked')}>\n          Workflows\n          <ActionList.LeadingVisual>\n            <WorkflowIcon />\n          </ActionList.LeadingVisual>\n        </ActionList.Item>\n        <ActionList.Item onSelect={() => alert('Archived items clicked')}>\n          Archived items\n          <ActionList.LeadingVisual>\n            <ArchiveIcon />\n          </ActionList.LeadingVisual>\n        </ActionList.Item>\n        <ActionList.LinkItem href=\"/\">\n          Settings\n          <ActionList.LeadingVisual>\n            <GearIcon />\n          </ActionList.LeadingVisual>\n        </ActionList.LinkItem>\n        <ActionList.Item onSelect={() => alert('Make a copy clicked')}>\n          Make a copy\n          <ActionList.LeadingVisual>\n            <CopyIcon />\n          </ActionList.LeadingVisual>\n        </ActionList.Item>\n        <ActionList.Divider />\n        <ActionList.Group>\n          <ActionList.GroupHeading>GitHub projects</ActionList.GroupHeading>\n          <ActionList.LinkItem href=\"/\">\n            What&apos;s new\n            <ActionList.LeadingVisual>\n              <RocketIcon />\n            </ActionList.LeadingVisual>\n          </ActionList.LinkItem>\n          <ActionList.LinkItem href=\"/\">\n            Give feedback\n            <ActionList.LeadingVisual>\n              <CommentIcon />\n            </ActionList.LeadingVisual>\n          </ActionList.LinkItem>\n          <ActionList.LinkItem href=\"/\">\n            GitHub Docs\n            <ActionList.LeadingVisual>\n              <BookIcon />\n            </ActionList.LeadingVisual>\n          </ActionList.LinkItem>\n        </ActionList.Group>\n      </ActionList>\n    </ActionMenu.Overlay>\n  </ActionMenu>\n)"
        },
        {
          "id": "components-actionmenu-features--single-select",
          "code": "() => {\n  const options = [\n    {\n      name: 'Fast forward',\n    },\n    {\n      name: 'Recursive',\n    },\n    {\n      name: 'Ours',\n    },\n    {\n      name: 'Octopus',\n    },\n    {\n      name: 'Resolve',\n    },\n    {\n      name: 'Subtree',\n    },\n  ]\n  const [selectedIndex, setSelectedIndex] = React.useState(0)\n  const selectedType = options[selectedIndex]\n  return (\n    <ActionMenu>\n      <ActionMenu.Button>\n        <Box\n          sx={{\n            color: 'fg.muted',\n            display: 'inline-block',\n          }}\n        >\n          Options:\n        </Box>{' '}\n        {selectedType.name}\n      </ActionMenu.Button>\n      <ActionMenu.Overlay width=\"auto\">\n        <ActionList selectionVariant=\"single\">\n          {options.map((options, index) => (\n            <ActionList.Item\n              key={index}\n              selected={index === selectedIndex}\n              onSelect={() => setSelectedIndex(index)}\n            >\n              {options.name}\n            </ActionList.Item>\n          ))}\n        </ActionList>\n      </ActionMenu.Overlay>\n    </ActionMenu>\n  )\n}"
        },
        {
          "id": "components-actionmenu-features--multi-select",
          "code": "() => {\n  type Option = {\n    name: string\n    selected: boolean\n  }\n  const [options, setOptions] = React.useState<Option[]>([\n    {\n      name: 'Show code folding buttons',\n      selected: true,\n    },\n    {\n      name: 'Wrap lines',\n      selected: false,\n    },\n    {\n      name: 'Center content',\n      selected: false,\n    },\n  ])\n  const toggle = (name: string) => {\n    setOptions(\n      options.map((option) => {\n        if (option.name === name) option.selected = !option.selected\n        return option\n      }),\n    )\n  }\n  return (\n    <ActionMenu>\n      <ActionMenu.Button>Display</ActionMenu.Button>\n      <ActionMenu.Overlay width=\"auto\">\n        <ActionList selectionVariant=\"multiple\">\n          {options.map((options) => (\n            <ActionList.Item\n              key={options.name}\n              selected={options.selected}\n              onSelect={() => toggle(options.name)}\n            >\n              {options.name}\n            </ActionList.Item>\n          ))}\n        </ActionList>\n      </ActionMenu.Overlay>\n    </ActionMenu>\n  )\n}"
        },
        {
          "id": "components-actionmenu-features--inactive-items",
          "code": "() => (\n  <ActionMenu>\n    <ActionMenu.Button>Open menu</ActionMenu.Button>\n    <ActionMenu.Overlay width=\"auto\">\n      <ActionList>\n        <ActionList.Item\n          onSelect={() => alert('Workflows clicked')}\n          inactiveText=\"Unavailable due to an outage\"\n        >\n          Workflows\n          <ActionList.LeadingVisual>\n            <WorkflowIcon />\n          </ActionList.LeadingVisual>\n        </ActionList.Item>\n        <ActionList.Item\n          onSelect={() => alert('Archived items clicked')}\n          inactiveText=\"Unavailable due to an outage\"\n        >\n          Archived items\n          <ActionList.LeadingVisual>\n            <ArchiveIcon />\n          </ActionList.LeadingVisual>\n        </ActionList.Item>\n        <ActionList.LinkItem\n          href=\"/\"\n          inactiveText=\"Unavailable due to an outage\"\n        >\n          Settings\n          <ActionList.LeadingVisual>\n            <GearIcon />\n          </ActionList.LeadingVisual>\n        </ActionList.LinkItem>\n        <ActionList.Item\n          variant=\"danger\"\n          onSelect={() => alert('Make a copy clicked')}\n          inactiveText=\"Unavailable due to an outage\"\n        >\n          Make a copy\n          <ActionList.LeadingVisual>\n            <CopyIcon />\n          </ActionList.LeadingVisual>\n        </ActionList.Item>\n        <ActionList.Divider />\n        <ActionList.Group>\n          <ActionList.GroupHeading>Github projects</ActionList.GroupHeading>\n          <ActionList.LinkItem href=\"/\">\n            What&apos;s new\n            <ActionList.LeadingVisual>\n              <RocketIcon />\n            </ActionList.LeadingVisual>\n          </ActionList.LinkItem>\n          <ActionList.LinkItem href=\"/\">\n            Give feedback\n            <ActionList.LeadingVisual>\n              <CommentIcon />\n            </ActionList.LeadingVisual>\n          </ActionList.LinkItem>\n          <ActionList.LinkItem href=\"/\">\n            GitHub Docs\n            <ActionList.LeadingVisual>\n              <BookIcon />\n            </ActionList.LeadingVisual>\n          </ActionList.LinkItem>\n        </ActionList.Group>\n      </ActionList>\n    </ActionMenu.Overlay>\n  </ActionMenu>\n)"
        },
        {
          "id": "components-actionmenu-features--loading-items",
          "code": "() => (\n  <ActionMenu>\n    <ActionMenu.Button>Open menu</ActionMenu.Button>\n    <ActionMenu.Overlay width=\"auto\">\n      <ActionList>\n        <ActionList.Item onSelect={() => alert('Workflows clicked')} loading>\n          Workflows\n          <ActionList.LeadingVisual>\n            <WorkflowIcon />\n          </ActionList.LeadingVisual>\n        </ActionList.Item>\n        <ActionList.Item\n          onSelect={() => alert('Archived items clicked')}\n          loading\n        >\n          Archived items\n          <ActionList.LeadingVisual>\n            <ArchiveIcon />\n          </ActionList.LeadingVisual>\n        </ActionList.Item>\n        <ActionList.Item onSelect={() => alert('Make a copy clicked')} loading>\n          Make a copy\n          <ActionList.LeadingVisual>\n            <CopyIcon />\n          </ActionList.LeadingVisual>\n        </ActionList.Item>\n        <ActionList.Divider />\n        <ActionList.Group>\n          <ActionList.GroupHeading>Github projects</ActionList.GroupHeading>\n          <ActionList.LinkItem href=\"/\">\n            What&apos;s new\n            <ActionList.LeadingVisual>\n              <RocketIcon />\n            </ActionList.LeadingVisual>\n          </ActionList.LinkItem>\n          <ActionList.LinkItem href=\"/\">\n            Give feedback\n            <ActionList.LeadingVisual>\n              <CommentIcon />\n            </ActionList.LeadingVisual>\n          </ActionList.LinkItem>\n          <ActionList.LinkItem href=\"/\">\n            GitHub Docs\n            <ActionList.LeadingVisual>\n              <BookIcon />\n            </ActionList.LeadingVisual>\n          </ActionList.LinkItem>\n        </ActionList.Group>\n      </ActionList>\n    </ActionMenu.Overlay>\n  </ActionMenu>\n)"
        },
        {
          "id": "components-actionmenu-features--submenus",
          "code": "() => (\n  <ActionMenu>\n    <ActionMenu.Button>Edit</ActionMenu.Button>\n    <ActionMenu.Overlay>\n      <ActionList>\n        <ActionList.Item>Cut</ActionList.Item>\n        <ActionList.Item>Copy</ActionList.Item>\n        <ActionList.Item>Paste</ActionList.Item>\n        <ActionMenu>\n          <ActionMenu.Anchor>\n            <ActionList.Item>\n              <ActionList.LeadingVisual>\n                <SparkleFillIcon />\n              </ActionList.LeadingVisual>\n              Paste special\n            </ActionList.Item>\n          </ActionMenu.Anchor>\n          <ActionMenu.Overlay>\n            <ActionList>\n              <ActionList.Item>Paste plain text</ActionList.Item>\n              <ActionList.Item>Paste formulas</ActionList.Item>\n              <ActionList.Item>Paste with formatting</ActionList.Item>\n              <ActionMenu>\n                <ActionMenu.Anchor>\n                  <ActionList.Item>Paste from</ActionList.Item>\n                </ActionMenu.Anchor>\n                <ActionMenu.Overlay>\n                  <ActionList>\n                    <ActionList.Item>Current clipboard</ActionList.Item>\n                    <ActionList.Item>History</ActionList.Item>\n                    <ActionList.Item>Another device</ActionList.Item>\n                  </ActionList>\n                </ActionMenu.Overlay>\n              </ActionMenu>\n            </ActionList>\n          </ActionMenu.Overlay>\n        </ActionMenu>\n      </ActionList>\n    </ActionMenu.Overlay>\n  </ActionMenu>\n)"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "anchorRef",
          "type": "RefObject<HTMLElement>",
          "required": false,
          "description": "An override to the internal ref that will be spread on to the renderAnchor\nAn override to the internal renderAnchor ref that will be used to position the overlay.\nWhen renderAnchor is null this can be used to make an anchor that is detached from ActionMenu.",
          "defaultValue": ""
        },
        {
          "name": "children",
          "type": "ReactElement<any, string | JSXElementConstructor<any>> & string | ReactElement<any, string | JSXElementConstructor<any>> & number | ReactElement<any, string | JSXElementConstructor<any>> & false | ReactElement<any, string | JSXElementConstructor<any>> & true | ReactElement<any, string | JSXElementConstructor<any>> & ReactElement<any, string | JSXElementConstructor<any>> | ReactElement<any, string | JSXElementConstructor<any>> & Iterable<ReactNode> | ReactElement<any, string | JSXElementConstructor<any>> & ReactPortal | ReactElement<any, string | JSXElementConstructor<any>>[] & string | ReactElement<any, string | JSXElementConstructor<any>>[] & number | ReactElement<any, string | JSXElementConstructor<any>>[] & false | ReactElement<any, string | JSXElementConstructor<any>>[] & true | ReactElement<any, string | JSXElementConstructor<any>>[] & ReactElement<any, string | JSXElementConstructor<any>> | ReactElement<any, string | JSXElementConstructor<any>>[] & Iterable<ReactNode> | ReactElement<any, string | JSXElementConstructor<any>>[] & ReactPortal",
          "required": false,
          "description": "Recommended: `ActionMenu.Button` or `ActionMenu.Anchor` with `ActionMenu.Overlay`",
          "defaultValue": ""
        },
        {
          "name": "onOpenChange",
          "type": "(s: boolean) => void",
          "required": false,
          "description": "If defined, will control the open/closed state of the overlay. Must be used in conjunction with `open`.",
          "defaultValue": ""
        },
        {
          "name": "open",
          "type": "boolean",
          "required": false,
          "description": "If defined, will control the open/closed state of the overlay. Must be used in conjunction with `onOpenChange`.",
          "defaultValue": ""
        }
      ],
      "subcomponents": [
        {
          "name": "ActionMenu.Anchor",
          "props": [
            {
              "name": "children",
              "type": "ReactElement<any, string | JSXElementConstructor<any>>",
              "required": true,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "id",
              "type": "string",
              "required": false,
              "description": "",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "ActionMenu.Button",
          "props": [
            {
              "name": "as",
              "type": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<unknown, any> | FunctionComponent<unknown>",
              "required": true,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "children",
              "type": "ReactNode",
              "required": true,
              "description": "The button that triggers the action menu",
              "defaultValue": ""
            },
            {
              "name": "alignContent",
              "type": "\"center\" | \"start\"",
              "required": false,
              "description": "Content alignment for when visuals are present",
              "defaultValue": ""
            },
            {
              "name": "block",
              "type": "boolean",
              "required": false,
              "description": "Allow button width to fill its container.",
              "defaultValue": ""
            },
            {
              "name": "count",
              "type": "number",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "disabled",
              "type": "boolean",
              "required": false,
              "description": "Items that are disabled can not be clicked, selected, or navigated through.",
              "defaultValue": ""
            },
            {
              "name": "icon",
              "type": "null | \"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
              "required": false,
              "description": "The icon for the IconButton",
              "defaultValue": ""
            },
            {
              "name": "inactive",
              "type": "boolean",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "labelWrap",
              "type": "boolean",
              "required": false,
              "description": "Whether the button label should wrap to multiple lines of it is longer than the button width.",
              "defaultValue": ""
            },
            {
              "name": "leadingVisual",
              "type": "null | \"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
              "required": false,
              "description": "The leading visual which comes before the button content",
              "defaultValue": ""
            },
            {
              "name": "loading",
              "type": "boolean",
              "required": false,
              "description": "When true, the button is in a loading state.",
              "defaultValue": ""
            },
            {
              "name": "loadingAnnouncement",
              "type": "string",
              "required": false,
              "description": "The content to announce to screen readers when loading.",
              "defaultValue": ""
            },
            {
              "name": "size",
              "type": "\"small\" | \"large\" | \"medium\"",
              "required": false,
              "description": "Size of button and fontSize of text in button",
              "defaultValue": ""
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            },
            {
              "name": "trailingAction",
              "type": "null | \"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
              "required": false,
              "description": "Trailing action appears to the right of the trailing visual and is always locked to the end",
              "defaultValue": ""
            },
            {
              "name": "trailingVisual",
              "type": "null | \"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
              "required": false,
              "description": "The trailing visual which comes after the button content",
              "defaultValue": ""
            },
            {
              "name": "variant",
              "type": "\"link\" | \"default\" | \"danger\" | \"primary\" | \"invisible\"",
              "required": false,
              "description": "Determine's the styles on a button one of 'default' | 'primary' | 'invisible' | 'danger'",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "ActionMenu.Overlay",
          "props": [
            {
              "name": "anchorSide",
              "type": "\"inside-top\" | \"inside-bottom\" | \"inside-left\" | \"inside-right\" | \"inside-center\" | \"outside-top\" | \"outside-bottom\" | \"outside-left\" | \"outside-right\"",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "as",
              "type": "\"div\"",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "bottom",
              "type": "string | number | string & {}",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "children",
              "type": "ReactNode",
              "required": false,
              "description": "Recommended: `ActionList`",
              "defaultValue": ""
            },
            {
              "name": "data-test-id",
              "type": "unknown",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "height",
              "type": "\"small\" | \"initial\" | \"large\" | \"medium\" | \"auto\" | \"fit-content\" | \"xsmall\" | \"xlarge\"",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "ignoreClickRefs",
              "type": "RefObject<HTMLElement>[]",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "initialFocusRef",
              "type": "RefObject<HTMLElement>",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "left",
              "type": "string | number | string & {}",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "maxHeight",
              "type": "\"small\" | \"large\" | \"medium\" | \"fit-content\" | \"xsmall\" | \"xlarge\"",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "maxWidth",
              "type": "\"small\" | \"large\" | \"medium\" | \"xlarge\" | \"xxlarge\"",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "onClickOutside",
              "type": "(e: TouchOrMouseEvent) => void",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "onEscape",
              "type": "(e: KeyboardEvent) => void",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "overflow",
              "type": "\"hidden\" | \"scroll\" | \"auto\" | \"visible\"",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "portalContainerName",
              "type": "string",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "position",
              "type": "\"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"fixed\" | \"-webkit-sticky\" | \"absolute\" | \"relative\" | \"static\" | \"sticky\"",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "preventFocusOnOpen",
              "type": "boolean",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "returnFocusRef",
              "type": "RefObject<HTMLElement>",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "right",
              "type": "string | number | string & {}",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "role",
              "type": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | \"list\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"grid\" | \"gridcell\" | \"group\" | \"heading\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"region\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\"",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "style",
              "type": "CSSProperties",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            },
            {
              "name": "top",
              "type": "string | number | string & {}",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "visibility",
              "type": "\"hidden\" | \"visible\"",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "width",
              "type": "\"small\" | \"large\" | \"medium\" | \"auto\" | \"xlarge\" | \"xxlarge\"",
              "required": false,
              "description": "",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    "anchored_overlay": {
      "id": "anchored_overlay",
      "name": "AnchoredOverlay",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-anchoredoverlay--default",
          "code": "() => {\n  const [open, setOpen] = useState(false)\n  return (\n    <AnchoredOverlay\n      open={open}\n      onOpen={() => setOpen(true)}\n      onClose={() => setOpen(false)}\n      renderAnchor={(props) => <Button {...props}>Button</Button>}\n    >\n      <Box\n        width=\"100%\"\n        height=\"100%\"\n        backgroundColor=\"thistle\"\n        display=\"flex\"\n        flexDirection=\"column\"\n      >\n        <img src={`//placekitten.com/200/300`} alt=\"kitten\" />\n      </Box>\n    </AnchoredOverlay>\n  )\n}"
        },
        {
          "id": "components-anchoredoverlay-features--portal-inside-scrolling-element",
          "code": "(args: Args) => {\n  const rows = 20\n  const columns = 10\n  return (\n    <HeaderAndLayout>\n      <table>\n        <tbody>\n          {Array(rows)\n            .fill(null)\n            .map((_, i) => (\n              <tr key={i}>\n                {Array(columns)\n                  .fill(null)\n                  .map((_1, j) => (\n                    <td key={`${i}${j}`}>\n                      <Box m={2}>\n                        <Playground\n                          {...{\n                            ...args,\n                            portalContainerName: 'scrollingPortal',\n                          }}\n                        />\n                      </Box>\n                    </td>\n                  ))}\n              </tr>\n            ))}\n        </tbody>\n      </table>\n    </HeaderAndLayout>\n  )\n}"
        },
        {
          "id": "components-anchoredoverlay-features--custom-anchor-id",
          "code": "() => {\n  const [open, setOpen] = useState(false)\n  return (\n    <AnchoredOverlay\n      open={open}\n      onOpen={() => setOpen(true)}\n      onClose={() => setOpen(false)}\n      renderAnchor={(props) => <Button {...props}>Button</Button>}\n      anchorId=\"my-custom-anchor-id\"\n    >\n      <Box\n        width=\"100%\"\n        height=\"100%\"\n        backgroundColor=\"thistle\"\n        display=\"flex\"\n        flexDirection=\"column\"\n      >\n        <img src={`//placekitten.com/200/300`} alt=\"kitten\" />\n      </Box>\n    </AnchoredOverlay>\n  )\n}"
        },
        {
          "id": "components-anchoredoverlay-features--height",
          "code": "() => {\n  const [open, setOpen] = useState(false)\n  return (\n    <AnchoredOverlay\n      open={open}\n      onOpen={() => setOpen(true)}\n      onClose={() => setOpen(false)}\n      renderAnchor={(props) => <Button {...props}>Button</Button>}\n      height=\"large\"\n    >\n      <Box\n        width=\"100%\"\n        height=\"100%\"\n        backgroundColor=\"thistle\"\n        display=\"flex\"\n        flexDirection=\"column\"\n      >\n        <img src={`//placekitten.com/200/300`} alt=\"kitten\" />\n      </Box>\n    </AnchoredOverlay>\n  )\n}"
        },
        {
          "id": "components-anchoredoverlay-features--width",
          "code": "() => {\n  const [open, setOpen] = useState(false)\n  return (\n    <AnchoredOverlay\n      open={open}\n      onOpen={() => setOpen(true)}\n      onClose={() => setOpen(false)}\n      renderAnchor={(props) => <Button {...props}>Button</Button>}\n      width=\"large\"\n    >\n      <Box\n        width=\"100%\"\n        height=\"100%\"\n        backgroundColor=\"thistle\"\n        display=\"flex\"\n        flexDirection=\"column\"\n      >\n        <img src={`//placekitten.com/200/300`} alt=\"kitten\" />\n      </Box>\n    </AnchoredOverlay>\n  )\n}"
        },
        {
          "id": "components-anchoredoverlay-features--anchor-alignment",
          "code": "() => {\n  const [open, setOpen] = useState(false)\n  return (\n    <AnchoredOverlay\n      open={open}\n      onOpen={() => setOpen(true)}\n      onClose={() => setOpen(false)}\n      renderAnchor={(props) => (\n        <Button {...props} block>\n          Button\n        </Button>\n      )}\n      align=\"center\"\n    >\n      <Box\n        width=\"100%\"\n        height=\"100%\"\n        backgroundColor=\"thistle\"\n        display=\"flex\"\n        flexDirection=\"column\"\n      >\n        <img src={`//placekitten.com/200/300`} alt=\"kitten\" />\n      </Box>\n    </AnchoredOverlay>\n  )\n}"
        },
        {
          "id": "components-anchoredoverlay-features--anchor-side",
          "code": "() => {\n  const [open, setOpen] = useState(false)\n  return (\n    <AnchoredOverlay\n      open={open}\n      onOpen={() => setOpen(true)}\n      onClose={() => setOpen(false)}\n      renderAnchor={(props) => <Button {...props}>Button</Button>}\n      side=\"outside-right\"\n    >\n      <Box\n        width=\"100%\"\n        height=\"100%\"\n        backgroundColor=\"thistle\"\n        display=\"flex\"\n        flexDirection=\"column\"\n      >\n        <img src={`//placekitten.com/200/300`} alt=\"kitten\" />\n      </Box>\n    </AnchoredOverlay>\n  )\n}"
        },
        {
          "id": "components-anchoredoverlay-features--offset-position-from-anchor",
          "code": "() => {\n  const [open, setOpen] = useState(false)\n  return (\n    <AnchoredOverlay\n      open={open}\n      onOpen={() => setOpen(true)}\n      onClose={() => setOpen(false)}\n      renderAnchor={(props) => <Button {...props}>Button</Button>}\n      anchorOffset={100}\n    >\n      <Box\n        width=\"100%\"\n        height=\"100%\"\n        backgroundColor=\"thistle\"\n        display=\"flex\"\n        flexDirection=\"column\"\n      >\n        <img src={`//placekitten.com/200/300`} alt=\"kitten\" />\n      </Box>\n    </AnchoredOverlay>\n  )\n}"
        },
        {
          "id": "components-anchoredoverlay-features--offset-alignment-from-anchor",
          "code": "() => {\n  const [open, setOpen] = useState(false)\n  return (\n    <AnchoredOverlay\n      open={open}\n      onOpen={() => setOpen(true)}\n      onClose={() => setOpen(false)}\n      renderAnchor={(props) => <Button {...props}>Button</Button>}\n      alignmentOffset={100}\n    >\n      <Box\n        width=\"100%\"\n        height=\"100%\"\n        backgroundColor=\"thistle\"\n        display=\"flex\"\n        flexDirection=\"column\"\n      >\n        <img src={`//placekitten.com/200/300`} alt=\"kitten\" />\n      </Box>\n    </AnchoredOverlay>\n  )\n}"
        },
        {
          "id": "components-anchoredoverlay-features--focus-trap-overrides",
          "code": "() => {\n  const initialFocusRef = useRef<HTMLButtonElement>(null)\n  const [open, setOpen] = useState(false)\n  return (\n    <AnchoredOverlay\n      open={open}\n      onOpen={() => setOpen(true)}\n      onClose={() => setOpen(false)}\n      renderAnchor={(props) => <Button {...props}>Button</Button>}\n      focusTrapSettings={{\n        initialFocusRef,\n      }}\n    >\n      <Button>First button</Button>\n      <Button ref={initialFocusRef}>Initial focus</Button>\n    </AnchoredOverlay>\n  )\n}"
        },
        {
          "id": "components-anchoredoverlay-features--focus-zone-overrides",
          "code": "() => {\n  const [open, setOpen] = useState(false)\n  return (\n    <AnchoredOverlay\n      open={open}\n      onOpen={() => setOpen(true)}\n      onClose={() => setOpen(false)}\n      renderAnchor={(props) => <Button {...props}>Button</Button>}\n      focusZoneSettings={{\n        bindKeys: FocusKeys.JK,\n      }}\n    >\n      <p>\n        Use <kbd>J</kbd> and <kbd>K</kbd> keys to move focus.\n      </p>\n      <Button>First</Button>\n      <Button>Second</Button>\n      <Button>Third</Button>\n    </AnchoredOverlay>\n  )\n}"
        },
        {
          "id": "components-anchoredoverlay-features--overlay-props-overrides",
          "code": "() => {\n  const [open, setOpen] = useState(false)\n  return (\n    <AnchoredOverlay\n      open={open}\n      onOpen={() => setOpen(true)}\n      onClose={() => setOpen(false)}\n      renderAnchor={(props) => <Button {...props}>Button</Button>}\n      overlayProps={{\n        overflow: 'auto',\n        maxHeight: 'xsmall',\n      }}\n    >\n      <div>Overlay props have been overridden to set: </div>\n      <pre>\n        <li>overflow: `auto`</li>\n        <li>maxHeight: `xsmall`</li>\n      </pre>\n      <Box\n        width=\"100%\"\n        height=\"100%\"\n        backgroundColor=\"thistle\"\n        display=\"flex\"\n        flexDirection=\"column\"\n      >\n        <img src={`//placekitten.com/200/300`} alt=\"kitten\" />\n      </Box>\n    </AnchoredOverlay>\n  )\n}"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "open",
          "type": "boolean",
          "required": true,
          "description": "Determines whether the overlay portion of the component should be shown or not",
          "defaultValue": ""
        },
        {
          "name": "renderAnchor",
          "type": "null | <T extends HTMLAttributes<HTMLElement>>(props: T) => Element",
          "required": true,
          "description": "A custom function component used to render the anchor element.\nWill receive the selected text as `children` prop when an item is activated.\nA custom function component used to render the anchor element.\nWhen renderAnchor is null, an anchorRef is required.",
          "defaultValue": ""
        },
        {
          "name": "anchorId",
          "type": "string",
          "required": false,
          "description": "An override to the internal id that will be spread on to the renderAnchor",
          "defaultValue": ""
        },
        {
          "name": "anchorRef",
          "type": "RefObject<HTMLElement>",
          "required": false,
          "description": "An override to the internal ref that will be spread on to the renderAnchor\nAn override to the internal renderAnchor ref that will be used to position the overlay.\nWhen renderAnchor is null this can be used to make an anchor that is detached from ActionMenu.",
          "defaultValue": ""
        },
        {
          "name": "className",
          "type": "string",
          "required": false,
          "description": "Optional className to be added to the overlay component.",
          "defaultValue": ""
        },
        {
          "name": "focusTrapSettings",
          "type": "Partial<FocusTrapHookSettings>",
          "required": false,
          "description": "Settings to apply to the Focus Zone on the internal `Overlay` component.",
          "defaultValue": ""
        },
        {
          "name": "focusZoneSettings",
          "type": "Partial<FocusZoneHookSettings>",
          "required": false,
          "description": "Settings to apply to the Focus Zone on the internal `Overlay` component.",
          "defaultValue": ""
        },
        {
          "name": "height",
          "type": "\"small\" | \"initial\" | \"large\" | \"medium\" | \"auto\" | \"fit-content\" | \"xsmall\" | \"xlarge\"",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "onClose",
          "type": "(gesture: \"anchor-click\" | \"click-outside\" | \"escape\") => unknown",
          "required": false,
          "description": "A callback which is called whenever the overlay is currently open and a \"close gesture\" is detected.",
          "defaultValue": ""
        },
        {
          "name": "onOpen",
          "type": "(gesture: \"anchor-click\" | \"anchor-key-press\", event?: KeyboardEvent<HTMLElement> | undefined) => unknown",
          "required": false,
          "description": "A callback which is called whenever the overlay is currently closed and an \"open gesture\" is detected.",
          "defaultValue": ""
        },
        {
          "name": "overlayProps",
          "type": "Partial<Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"ref\"> & { ...; }, \"style\" | ... 8 more ... | keyof BaseOverlayProps> & Omit<...> & BaseOverlayProps & { ...; }>",
          "required": false,
          "description": "Props to be spread on the internal `Overlay` component.",
          "defaultValue": ""
        },
        {
          "name": "width",
          "type": "\"small\" | \"large\" | \"medium\" | \"auto\" | \"xlarge\" | \"xxlarge\"",
          "required": false,
          "description": "",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "autocomplete": {
      "id": "autocomplete",
      "name": "Autocomplete",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-autocomplete--default",
          "code": "(args: FormControlArgs<AutocompleteArgs>) => {\n  const { parentArgs, labelArgs, captionArgs, validationArgs } =\n    getFormControlArgsByChildComponent(args)\n  const { menuArgs, inputArgs, overlayArgs, textInputArgs } =\n    getArgsByChildComponent(args)\n  const isMultiselect = menuArgs.selectionVariant === 'multiple'\n  const [selectedItemIds, setSelectedItemIds] = useState<Array<string>>([])\n  const onSelectedChange = (newlySelectedItems: Datum | Datum[]) => {\n    if (!Array.isArray(newlySelectedItems)) {\n      return\n    }\n    setSelectedItemIds(newlySelectedItems.map((item) => item.id))\n  }\n  const autocompleteInput = {\n    ...inputArgs,\n    ...textInputArgs,\n  }\n  const formValidationId = 'validation-field'\n  return (\n    <Box\n      as=\"form\"\n      sx={{\n        p: 3,\n      }}\n      onSubmit={(event) => event.preventDefault()}\n    >\n      <FormControl {...parentArgs}>\n        <FormControl.Label id=\"autocompleteLabel\" {...labelArgs} />\n        <Autocomplete>\n          <Autocomplete.Input\n            aria-describedby={formValidationId}\n            {...autocompleteInput}\n            size={textInputArgs.inputSize}\n            data-testid=\"autocompleteInput\"\n          />\n          <Autocomplete.Overlay {...overlayArgs}>\n            <Autocomplete.Menu\n              items={items}\n              selectedItemIds={isMultiselect ? selectedItemIds : []}\n              onSelectedChange={isMultiselect ? onSelectedChange : undefined}\n              aria-labelledby=\"autocompleteLabel\"\n              {...menuArgs}\n            />\n          </Autocomplete.Overlay>\n        </Autocomplete>\n        {captionArgs.children && <FormControl.Caption {...captionArgs} />}\n        {validationArgs.children && validationArgs.variant && (\n          <FormControl.Validation\n            id={formValidationId}\n            {...validationArgs}\n            variant={validationArgs.variant}\n          />\n        )}\n      </FormControl>\n    </Box>\n  )\n}"
        },
        {
          "id": "components-autocomplete-features--with-token-input",
          "code": "(args: FormControlArgs<AutocompleteArgs>) => {\n  const { parentArgs, labelArgs, captionArgs, validationArgs } =\n    getFormControlArgsByChildComponent(args)\n  const { menuArgs, overlayArgs, textInputWithTokensArgs } =\n    getArgsByChildComponent(args)\n  const [tokens, setTokens] = useState<Datum[]>([])\n  const selectedTokenIds = tokens.map((token) => token.id)\n  const [selectedItemIds, setSelectedItemIds] =\n    useState<Array<string>>(selectedTokenIds)\n  const onTokenRemove: (tokenId: string | number) => void = (tokenId) => {\n    setTokens(tokens.filter((token) => token.id !== tokenId))\n    setSelectedItemIds(selectedItemIds.filter((id) => id !== tokenId))\n  }\n  const onSelectedChange = (newlySelectedItems: Datum | Datum[]) => {\n    if (!Array.isArray(newlySelectedItems)) {\n      return\n    }\n    setSelectedItemIds(newlySelectedItems.map((item) => item.id))\n    if (newlySelectedItems.length < selectedItemIds.length) {\n      const newlySelectedItemIds = newlySelectedItems.map(({ id }) => id)\n      const removedItemIds = selectedTokenIds.filter(\n        (id) => !newlySelectedItemIds.includes(id),\n      )\n      for (const removedItemId of removedItemIds) {\n        onTokenRemove(removedItemId)\n      }\n      return\n    }\n    setTokens(\n      newlySelectedItems.map(({ id, text }) => ({\n        id,\n        text,\n      })),\n    )\n  }\n  return (\n    <Box\n      as=\"form\"\n      sx={{\n        p: 3,\n      }}\n    >\n      <FormControl {...parentArgs}>\n        <FormControl.Label id=\"autocompleteLabel\" {...labelArgs} />\n        <Autocomplete>\n          <Autocomplete.Input\n            as={TextInputTokens}\n            tokens={tokens}\n            onTokenRemove={onTokenRemove}\n            {...textInputWithTokensArgs}\n          />\n          <Autocomplete.Overlay {...menuArgs}>\n            <Autocomplete.Menu\n              items={items}\n              selectedItemIds={selectedItemIds}\n              onSelectedChange={onSelectedChange}\n              selectionVariant=\"multiple\"\n              aria-labelledby=\"autocompleteLabel\"\n              {...overlayArgs}\n            />\n          </Autocomplete.Overlay>\n        </Autocomplete>\n        {captionArgs.children && <FormControl.Caption {...captionArgs} />}\n        {validationArgs.children && validationArgs.variant && (\n          <FormControl.Validation\n            {...validationArgs}\n            variant={validationArgs.variant}\n          />\n        )}\n      </FormControl>\n    </Box>\n  )\n}"
        },
        {
          "id": "components-autocomplete-features--add-new-item",
          "code": "(args: FormControlArgs<AutocompleteArgs>) => {\n  const { parentArgs, labelArgs, captionArgs, validationArgs } =\n    getFormControlArgsByChildComponent(args)\n  const { menuArgs, overlayArgs, textInputWithTokensArgs } =\n    getArgsByChildComponent(args)\n  const [localItemsState, setLocalItemsState] = useState<Datum[]>(\n    items.slice(0, 3),\n  )\n  const [filterVal, setFilterVal] = useState<string>('')\n  const [tokens, setTokens] = useState<Datum[]>(mockTokens)\n  const selectedTokenIds = tokens.map((token) => token.id)\n  const [selectedItemIds, setSelectedItemIds] =\n    useState<Array<string>>(selectedTokenIds)\n  const onTokenRemove: (tokenId: string | number) => void = (tokenId) => {\n    setTokens(tokens.filter((token) => token.id !== tokenId))\n    setSelectedItemIds(selectedItemIds.filter((id) => id !== tokenId))\n  }\n  const onSelectedChange = (newlySelectedItems: Datum | Datum[]) => {\n    if (!Array.isArray(newlySelectedItems)) {\n      return\n    }\n    setSelectedItemIds(newlySelectedItems.map((item) => item.id))\n    if (newlySelectedItems.length < selectedItemIds.length) {\n      const newlySelectedItemIds = newlySelectedItems.map(({ id }) => id)\n      const removedItemIds = selectedTokenIds.filter(\n        (id) => !newlySelectedItemIds.includes(id),\n      )\n      for (const removedItemId of removedItemIds) {\n        onTokenRemove(removedItemId)\n      }\n      return\n    }\n    setTokens(\n      newlySelectedItems.map(({ id, text }) => ({\n        id,\n        text,\n      })),\n    )\n  }\n  const onItemSelect: (item: Datum) => void = (item) => {\n    onSelectedChange([\n      ...selectedItemIds.map(\n        (id) =>\n          localItemsState.find(\n            (selectedItem) => selectedItem.id === id,\n          ) as Datum,\n      ),\n      item,\n    ])\n    if (!localItemsState.some((localItem) => localItem.id === item.id)) {\n      setLocalItemsState([...localItemsState, item])\n    }\n  }\n  const handleChange: ChangeEventHandler<HTMLInputElement> = (e) => {\n    setFilterVal(e.currentTarget.value)\n  }\n  return (\n    <Box\n      as=\"form\"\n      sx={{\n        p: 3,\n      }}\n    >\n      <FormControl {...parentArgs}>\n        <FormControl.Label id=\"autocompleteLabel\" {...labelArgs} />\n        <Autocomplete>\n          <Autocomplete.Input\n            as={TextInputTokens}\n            tokens={tokens}\n            onTokenRemove={onTokenRemove}\n            onChange={handleChange}\n            {...textInputWithTokensArgs}\n          />\n          <Autocomplete.Overlay {...overlayArgs}>\n            <Autocomplete.Menu\n              addNewItem={\n                filterVal &&\n                !localItemsState\n                  .map((localItem) => localItem.text)\n                  .includes(filterVal)\n                  ? {\n                      id: filterVal,\n                      text: `Add '${filterVal}'`,\n                      handleAddItem: (item) => {\n                        onItemSelect({\n                          ...item,\n                          text: filterVal,\n                          selected: true,\n                          id: `${tokens.length}`,\n                        })\n                        setFilterVal('')\n                      },\n                    }\n                  : undefined\n              }\n              items={localItemsState}\n              selectedItemIds={selectedItemIds}\n              onSelectedChange={onSelectedChange}\n              aria-labelledby=\"autocompleteLabel\"\n              {...menuArgs}\n            />\n          </Autocomplete.Overlay>\n        </Autocomplete>\n        {captionArgs.children && <FormControl.Caption {...captionArgs} />}\n        {validationArgs.children && validationArgs.variant && (\n          <FormControl.Validation\n            {...validationArgs}\n            variant={validationArgs.variant}\n          />\n        )}\n      </FormControl>\n    </Box>\n  )\n}"
        },
        {
          "id": "components-autocomplete-features--custom-search-filter-fn",
          "code": "(args: FormControlArgs<AutocompleteArgs>) => {\n  const { parentArgs, labelArgs, captionArgs, validationArgs } =\n    getFormControlArgsByChildComponent(args)\n  const { menuArgs, overlayArgs, textInputArgs } = getArgsByChildComponent(args)\n  const [filterVal, setFilterVal] = useState<string>('')\n  const handleChange: ChangeEventHandler<HTMLInputElement> = (e) => {\n    setFilterVal(e.currentTarget.value)\n  }\n  const customFilterFn = (item: Datum) => item.text.includes(filterVal)\n  return (\n    <Box\n      as=\"form\"\n      sx={{\n        p: 3,\n      }}\n    >\n      <FormControl {...parentArgs}>\n        <FormControl.Label id=\"autocompleteLabel\" {...labelArgs} />\n        <Autocomplete>\n          <Autocomplete.Input\n            onChange={handleChange}\n            {...textInputArgs}\n            size={textInputArgs.inputSize}\n          />\n          <Autocomplete.Overlay {...overlayArgs}>\n            <Autocomplete.Menu\n              items={items}\n              selectedItemIds={[]}\n              filterFn={customFilterFn}\n              aria-labelledby=\"autocompleteLabel\"\n              {...menuArgs}\n            />\n          </Autocomplete.Overlay>\n        </Autocomplete>\n        {captionArgs.children && <FormControl.Caption {...captionArgs} />}\n        {validationArgs.children && validationArgs.variant && (\n          <FormControl.Validation\n            {...validationArgs}\n            variant={validationArgs.variant}\n          />\n        )}\n      </FormControl>\n    </Box>\n  )\n}"
        },
        {
          "id": "components-autocomplete-features--custom-sort-after-menu-close",
          "code": "(args: FormControlArgs<AutocompleteArgs>) => {\n  const { parentArgs, labelArgs, captionArgs, validationArgs } =\n    getFormControlArgsByChildComponent(args)\n  const { menuArgs, overlayArgs, textInputArgs } = getArgsByChildComponent(args)\n  const [selectedItemIds, setSelectedItemIds] = useState<Array<string>>([])\n  const isItemSelected = (itemId: string) => selectedItemIds.includes(itemId)\n  const onSelectedChange = (newlySelectedItems: Datum | Datum[]) => {\n    if (!Array.isArray(newlySelectedItems)) {\n      return\n    }\n    setSelectedItemIds(newlySelectedItems.map((item) => item.id))\n  }\n  const customSortFn = (itemIdA: string, itemIdB: string) =>\n    isItemSelected(itemIdA) === isItemSelected(itemIdB)\n      ? 0\n      : isItemSelected(itemIdA)\n      ? 1\n      : -1\n  return (\n    <Box\n      as=\"form\"\n      sx={{\n        p: 3,\n      }}\n    >\n      <FormControl {...parentArgs}>\n        <FormControl.Label id=\"autocompleteLabel\" {...labelArgs} />\n        <Autocomplete>\n          <Autocomplete.Input\n            {...textInputArgs}\n            size={textInputArgs.inputSize}\n          />\n          <Autocomplete.Overlay {...overlayArgs}>\n            <Autocomplete.Menu\n              items={items}\n              selectedItemIds={selectedItemIds}\n              onSelectedChange={onSelectedChange}\n              sortOnCloseFn={customSortFn}\n              aria-labelledby=\"autocompleteLabel\"\n              {...menuArgs}\n            />\n          </Autocomplete.Overlay>\n        </Autocomplete>\n        {captionArgs.children && <FormControl.Caption {...captionArgs} />}\n        {validationArgs.children && validationArgs.variant && (\n          <FormControl.Validation\n            {...validationArgs}\n            variant={validationArgs.variant}\n          />\n        )}\n      </FormControl>\n    </Box>\n  )\n}"
        },
        {
          "id": "components-autocomplete-features--with-callback-when-overlay-open-state-changes",
          "code": "(args: FormControlArgs<AutocompleteArgs>) => {\n  const { parentArgs, labelArgs, captionArgs, validationArgs } =\n    getFormControlArgsByChildComponent(args)\n  const { menuArgs, overlayArgs, textInputArgs } = getArgsByChildComponent(args)\n  const [isMenuOpen, setIsMenuOpen] = useState<boolean>(false)\n  const onOpenChange = (isOpen: boolean) => {\n    setIsMenuOpen(isOpen)\n  }\n  return (\n    <Box\n      as=\"form\"\n      display=\"flex\"\n      sx={{\n        gap: '1em',\n        p: 3,\n      }}\n    >\n      <FormControl {...parentArgs}>\n        <FormControl.Label id=\"autocompleteLabel\" {...labelArgs} />\n        <Autocomplete>\n          <Autocomplete.Input\n            {...textInputArgs}\n            size={textInputArgs.inputSize}\n          />\n          <Autocomplete.Overlay {...overlayArgs}>\n            <Autocomplete.Menu\n              items={items}\n              selectedItemIds={[]}\n              onOpenChange={onOpenChange}\n              aria-labelledby=\"autocompleteLabel\"\n              {...menuArgs}\n            />\n          </Autocomplete.Overlay>\n        </Autocomplete>\n        {captionArgs.children && <FormControl.Caption {...captionArgs} />}\n        {validationArgs.children && validationArgs.variant && (\n          <FormControl.Validation\n            {...validationArgs}\n            variant={validationArgs.variant}\n          />\n        )}\n      </FormControl>\n      <div>\n        The menu is <strong>{isMenuOpen ? 'opened' : 'closed'}</strong>\n      </div>\n    </Box>\n  )\n}"
        },
        {
          "id": "components-autocomplete-features--async-loading-of-items",
          "code": "(args: FormControlArgs<AutocompleteArgs>) => {\n  const { parentArgs, labelArgs, captionArgs, validationArgs } =\n    getFormControlArgsByChildComponent(args)\n  const { menuArgs, overlayArgs, textInputArgs } = getArgsByChildComponent(args)\n  const [loadedItems, setLoadedItems] = useState<Datum[]>([])\n  const onOpenChange = () => {\n    setTimeout(() => {\n      setLoadedItems(items)\n    }, 1500)\n  }\n  return (\n    <Box\n      as=\"form\"\n      sx={{\n        p: 3,\n      }}\n    >\n      <FormControl {...parentArgs}>\n        <FormControl.Label id=\"autocompleteLabel\" {...labelArgs} />\n        <Autocomplete>\n          <Autocomplete.Input\n            {...textInputArgs}\n            size={textInputArgs.inputSize}\n          />\n          <Autocomplete.Overlay {...overlayArgs}>\n            <Autocomplete.Menu\n              items={loadedItems}\n              selectedItemIds={[]}\n              onOpenChange={onOpenChange}\n              aria-labelledby=\"autocompleteLabel\"\n              {...menuArgs}\n              loading={loadedItems.length === 0}\n            />\n          </Autocomplete.Overlay>\n        </Autocomplete>\n        {captionArgs.children && <FormControl.Caption {...captionArgs} />}\n        {validationArgs.children && validationArgs.variant && (\n          <FormControl.Validation\n            {...validationArgs}\n            variant={validationArgs.variant}\n          />\n        )}\n      </FormControl>\n    </Box>\n  )\n}"
        },
        {
          "id": "components-autocomplete-features--rendering-the-menu-outside-an-overlay",
          "code": "(args: FormControlArgs<AutocompleteArgs>) => {\n  const { parentArgs, labelArgs, captionArgs, validationArgs } =\n    getFormControlArgsByChildComponent(args)\n  const { menuArgs, textInputArgs } = getArgsByChildComponent(args)\n  return (\n    <Box\n      as=\"form\"\n      sx={{\n        p: 3,\n      }}\n    >\n      <FormControl {...parentArgs}>\n        <FormControl.Label id=\"autocompleteLabel\" {...labelArgs} />\n        <Autocomplete>\n          <Autocomplete.Input\n            {...textInputArgs}\n            size={textInputArgs.inputSize}\n          />\n          <Autocomplete.Menu\n            items={items}\n            selectedItemIds={[]}\n            aria-labelledby=\"autocompleteLabel\"\n            {...menuArgs}\n          />\n        </Autocomplete>\n        {captionArgs.children && <FormControl.Caption {...captionArgs} />}\n        {validationArgs.children && validationArgs.variant && (\n          <FormControl.Validation\n            {...validationArgs}\n            variant={validationArgs.variant}\n          />\n        )}\n      </FormControl>\n    </Box>\n  )\n}"
        },
        {
          "id": "components-autocomplete-features--custom-overlay-menu-anchor",
          "code": "(args: FormControlArgs<AutocompleteArgs>) => {\n  const { parentArgs, labelArgs, captionArgs, validationArgs } =\n    getFormControlArgsByChildComponent(args)\n  const { menuArgs, overlayArgs, textInputArgs } = getArgsByChildComponent(args)\n  const menuAnchorRef = useRef<HTMLElement>(null)\n  const anchorWrapperStyles = {\n    display: 'flex',\n    alignItems: 'center',\n    flexGrow: 1,\n    flexShrink: 0,\n    flexBasis: '25%',\n    border: '1px solid black',\n    padding: '1em',\n  }\n  return (\n    <Box\n      as=\"form\"\n      sx={{\n        p: 3,\n      }}\n    >\n      <FormControl {...parentArgs}>\n        <FormControl.Label\n          htmlFor=\"autocompleteInput\"\n          id=\"autocompleteLabel\"\n          {...labelArgs}\n        />\n        <Box\n          {...anchorWrapperStyles}\n          ref={menuAnchorRef as React.RefObject<HTMLDivElement>}\n        >\n          <Autocomplete>\n            <Autocomplete.Input\n              id=\"autocompleteInput\"\n              aria-describedby=\"autocompleteCaption autocompleteValidation\"\n              sx={{\n                border: '0',\n                padding: '0',\n                boxShadow: 'none',\n                ':focus-within': {\n                  border: '0',\n                  boxShadow: 'none',\n                },\n              }}\n              {...textInputArgs}\n              size={textInputArgs.inputSize}\n            />\n            <Autocomplete.Overlay\n              menuAnchorRef={menuAnchorRef}\n              {...overlayArgs}\n            >\n              <Autocomplete.Menu\n                items={items}\n                selectedItemIds={[]}\n                aria-labelledby=\"autocompleteLabel\"\n                {...menuArgs}\n              />\n            </Autocomplete.Overlay>\n          </Autocomplete>\n        </Box>\n        {captionArgs.children && (\n          <FormControl.Caption id=\"autocompleteCaption\" {...captionArgs} />\n        )}\n        {validationArgs.children && validationArgs.variant && (\n          <FormControl.Validation\n            id=\"autocompleteValidation\"\n            {...validationArgs}\n            variant={validationArgs.variant}\n          />\n        )}\n      </FormControl>\n    </Box>\n  )\n}"
        },
        {
          "id": "components-autocomplete-features--in-overlay-with-custom-scroll-container-ref",
          "code": "(args: FormControlArgs<AutocompleteArgs>) => {\n  const { menuArgs, textInputArgs } = getArgsByChildComponent(args)\n  const scrollContainerRef = useRef<HTMLElement>(null)\n  const inputRef = useRef<HTMLInputElement>(null)\n  const triggerRef = useRef<HTMLButtonElement>(null)\n  const [isOpen, setIsOpen] = useState(false)\n  const [selectedItem, setSelectedItem] = useState<Datum>()\n  const handleOpen = () => {\n    setIsOpen(true)\n    inputRef.current && inputRef.current.focus()\n  }\n  const selectChange = (item: Datum[] | Datum) => {\n    setIsOpen(false)\n    if (Array.isArray(item) && item.length) setSelectedItem(item[0])\n    triggerRef.current?.focus()\n  }\n  return (\n    <Box\n      as=\"form\"\n      sx={{\n        p: 3,\n      }}\n    >\n      Selected item: {selectedItem ? selectedItem.text : 'none'}\n      <AnchoredOverlay\n        open={isOpen}\n        onOpen={handleOpen}\n        onClose={() => setIsOpen(false)}\n        width=\"large\"\n        focusTrapSettings={{\n          initialFocusRef: inputRef,\n        }}\n        side=\"inside-top\"\n        anchorRef={triggerRef}\n        renderAnchor={(props) => <Button {...props}>open overlay</Button>}\n      >\n        <Autocomplete>\n          <Box display=\"flex\" flexDirection=\"column\" height=\"100%\">\n            <Box\n              borderWidth={0}\n              borderBottomWidth={1}\n              borderColor=\"border.default\"\n              borderStyle=\"solid\"\n            >\n              <Autocomplete.Input\n                ref={inputRef}\n                sx={{\n                  display: 'flex',\n                  border: '0',\n                  paddingX: 3,\n                  paddingY: 1,\n                  boxShadow: 'none',\n                  ':focus-within': {\n                    border: '0',\n                    boxShadow: 'none',\n                  },\n                }}\n                {...textInputArgs}\n                size={textInputArgs.inputSize}\n                block\n              />\n            </Box>\n            <Box\n              overflow=\"auto\"\n              flexGrow={1}\n              ref={scrollContainerRef as RefObject<HTMLDivElement>}\n            >\n              <Autocomplete.Menu\n                items={items}\n                selectedItemIds={[]}\n                customScrollContainerRef={scrollContainerRef}\n                aria-labelledby=\"autocompleteLabel\"\n                onSelectedChange={selectChange}\n                {...menuArgs}\n              />\n            </Box>\n          </Box>\n        </Autocomplete>\n      </AnchoredOverlay>\n    </Box>\n  )\n}"
        },
        {
          "id": "components-autocomplete-features--in-a-dialog",
          "code": "(args: FormControlArgs<AutocompleteArgs>) => {\n  const { overlayArgs } = getArgsByChildComponent(args)\n  const outerContainerRef = useRef<HTMLDivElement>(null)\n  const [mounted, setMounted] = useState(false)\n  const [isDialogOpen, setIsDialogOpen] = useState(false)\n  useEffect(() => {\n    if (outerContainerRef.current instanceof HTMLElement) {\n      registerPortalRoot(outerContainerRef.current, 'outerContainer')\n      setMounted(true)\n    }\n  }, [isDialogOpen])\n  return (\n    <>\n      <Button onClick={() => setIsDialogOpen(true)}>Show dialog</Button>\n      <Dialog\n        id=\"dialog-with-autocomplete\"\n        isOpen={isDialogOpen}\n        onDismiss={() => setIsDialogOpen(false)}\n      >\n        <div ref={outerContainerRef}>\n          <Box\n            as=\"form\"\n            sx={{\n              p: 3,\n            }}\n          >\n            {mounted ? (\n              <FormControl>\n                <FormControl.Label id=\"autocompleteLabel\" />\n                <Autocomplete>\n                  <Autocomplete.Input data-testid=\"autocompleteInput\" />\n                  <Autocomplete.Overlay\n                    {...overlayArgs}\n                    portalContainerName=\"outerContainer\"\n                  >\n                    <Autocomplete.Menu\n                      items={items}\n                      selectedItemIds={[]}\n                      aria-labelledby=\"autocompleteLabel\"\n                    />\n                  </Autocomplete.Overlay>\n                </Autocomplete>\n              </FormControl>\n            ) : null}\n          </Box>\n        </div>\n      </Dialog>\n      <p>\n        The Autocomplete.Overlay is portalled to a div inside the Dialog to\n        ensure it appears above the dialog in the stacking context.\n      </p>\n    </>\n  )\n}"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "id",
          "type": "string",
          "required": false,
          "description": "May be used to customize how the ID is set on the text input to be used by ARIA attributes on related elements.",
          "defaultValue": ""
        }
      ],
      "subcomponents": [
        {
          "name": "Autocomplete.Input",
          "props": [
            {
              "name": "as",
              "type": "ComponentClass<any, any> & \"symbol\" | FunctionComponent<any> & \"symbol\" | \"symbol\" & ComponentClass<any, any> | \"symbol\" & FunctionComponent<any> | \"object\" & ComponentClass<any, any> | \"object\" & FunctionComponent<any> | \"a\" & ComponentClass<any, any> | \"a\" & FunctionComponent<any> | \"abbr\" & ComponentClass<any, any> | \"abbr\" & FunctionComponent<any> | \"address\" & ComponentClass<any, any> | \"address\" & FunctionComponent<any> | \"area\" & ComponentClass<any, any> | \"area\" & FunctionComponent<any> | \"article\" & ComponentClass<any, any> | \"article\" & FunctionComponent<any> | \"aside\" & ComponentClass<any, any> | \"aside\" & FunctionComponent<any> | \"audio\" & ComponentClass<any, any> | \"audio\" & FunctionComponent<any> | \"b\" & ComponentClass<any, any> | \"b\" & FunctionComponent<any> | \"base\" & ComponentClass<any, any> | \"base\" & FunctionComponent<any> | \"bdi\" & ComponentClass<any, any> | \"bdi\" & FunctionComponent<any> | \"bdo\" & ComponentClass<any, any> | \"bdo\" & FunctionComponent<any> | \"big\" & ComponentClass<any, any> | \"big\" & FunctionComponent<any> | \"blockquote\" & ComponentClass<any, any> | \"blockquote\" & FunctionComponent<any> | \"body\" & ComponentClass<any, any> | \"body\" & FunctionComponent<any> | \"br\" & ComponentClass<any, any> | \"br\" & FunctionComponent<any> | \"button\" & ComponentClass<any, any> | \"button\" & FunctionComponent<any> | \"canvas\" & ComponentClass<any, any> | \"canvas\" & FunctionComponent<any> | \"caption\" & ComponentClass<any, any> | \"caption\" & FunctionComponent<any> | \"center\" & ComponentClass<any, any> | \"center\" & FunctionComponent<any> | \"cite\" & ComponentClass<any, any> | \"cite\" & FunctionComponent<any> | \"code\" & ComponentClass<any, any> | \"code\" & FunctionComponent<any> | \"col\" & ComponentClass<any, any> | \"col\" & FunctionComponent<any> | \"colgroup\" & ComponentClass<any, any> | \"colgroup\" & FunctionComponent<any> | \"data\" & ComponentClass<any, any> | \"data\" & FunctionComponent<any> | \"datalist\" & ComponentClass<any, any> | \"datalist\" & FunctionComponent<any> | \"dd\" & ComponentClass<any, any> | \"dd\" & FunctionComponent<any> | \"del\" & ComponentClass<any, any> | \"del\" & FunctionComponent<any> | \"details\" & ComponentClass<any, any> | \"details\" & FunctionComponent<any> | \"dfn\" & ComponentClass<any, any> | \"dfn\" & FunctionComponent<any> | \"dialog\" & ComponentClass<any, any> | \"dialog\" & FunctionComponent<any> | \"div\" & ComponentClass<any, any> | \"div\" & FunctionComponent<any> | \"dl\" & ComponentClass<any, any> | \"dl\" & FunctionComponent<any> | \"dt\" & ComponentClass<any, any> | \"dt\" & FunctionComponent<any> | \"em\" & ComponentClass<any, any> | \"em\" & FunctionComponent<any> | \"embed\" & ComponentClass<any, any> | \"embed\" & FunctionComponent<any> | \"fieldset\" & ComponentClass<any, any> | \"fieldset\" & FunctionComponent<any> | \"figcaption\" & ComponentClass<any, any> | \"figcaption\" & FunctionComponent<any> | \"figure\" & ComponentClass<any, any> | \"figure\" & FunctionComponent<any> | \"footer\" & ComponentClass<any, any> | \"footer\" & FunctionComponent<any> | \"form\" & ComponentClass<any, any> | \"form\" & FunctionComponent<any> | \"h1\" & ComponentClass<any, any> | \"h1\" & FunctionComponent<any> | \"h2\" & ComponentClass<any, any> | \"h2\" & FunctionComponent<any> | \"h3\" & ComponentClass<any, any> | \"h3\" & FunctionComponent<any> | \"h4\" & ComponentClass<any, any> | \"h4\" & FunctionComponent<any> | \"h5\" & ComponentClass<any, any> | \"h5\" & FunctionComponent<any> | \"h6\" & ComponentClass<any, any> | \"h6\" & FunctionComponent<any> | \"head\" & ComponentClass<any, any> | \"head\" & FunctionComponent<any> | \"header\" & ComponentClass<any, any> | \"header\" & FunctionComponent<any> | \"hgroup\" & ComponentClass<any, any> | \"hgroup\" & FunctionComponent<any> | \"hr\" & ComponentClass<any, any> | \"hr\" & FunctionComponent<any> | \"html\" & ComponentClass<any, any> | \"html\" & FunctionComponent<any> | \"i\" & ComponentClass<any, any> | \"i\" & FunctionComponent<any> | \"iframe\" & ComponentClass<any, any> | \"iframe\" & FunctionComponent<any> | \"img\" & ComponentClass<any, any> | \"img\" & FunctionComponent<any> | \"input\" & ComponentClass<any, any> | \"input\" & FunctionComponent<any> | \"ins\" & ComponentClass<any, any> | \"ins\" & FunctionComponent<any> | \"kbd\" & ComponentClass<any, any> | \"kbd\" & FunctionComponent<any> | \"keygen\" & ComponentClass<any, any> | \"keygen\" & FunctionComponent<any> | \"label\" & ComponentClass<any, any> | \"label\" & FunctionComponent<any> | \"legend\" & ComponentClass<any, any> | \"legend\" & FunctionComponent<any> | \"li\" & ComponentClass<any, any> | \"li\" & FunctionComponent<any> | \"link\" & ComponentClass<any, any> | \"link\" & FunctionComponent<any> | \"main\" & ComponentClass<any, any> | \"main\" & FunctionComponent<any> | \"map\" & ComponentClass<any, any> | \"map\" & FunctionComponent<any> | \"mark\" & ComponentClass<any, any> | \"mark\" & FunctionComponent<any> | \"menu\" & ComponentClass<any, any> | \"menu\" & FunctionComponent<any> | \"menuitem\" & ComponentClass<any, any> | \"menuitem\" & FunctionComponent<any> | \"meta\" & ComponentClass<any, any> | \"meta\" & FunctionComponent<any> | \"meter\" & ComponentClass<any, any> | \"meter\" & FunctionComponent<any> | \"nav\" & ComponentClass<any, any> | \"nav\" & FunctionComponent<any> | \"noindex\" & ComponentClass<any, any> | \"noindex\" & FunctionComponent<any> | \"noscript\" & ComponentClass<any, any> | \"noscript\" & FunctionComponent<any> | \"ol\" & ComponentClass<any, any> | \"ol\" & FunctionComponent<any> | \"optgroup\" & ComponentClass<any, any> | \"optgroup\" & FunctionComponent<any> | \"option\" & ComponentClass<any, any> | \"option\" & FunctionComponent<any> | \"output\" & ComponentClass<any, any> | \"output\" & FunctionComponent<any> | \"p\" & ComponentClass<any, any> | \"p\" & FunctionComponent<any> | \"param\" & ComponentClass<any, any> | \"param\" & FunctionComponent<any> | \"picture\" & ComponentClass<any, any> | \"picture\" & FunctionComponent<any> | \"pre\" & ComponentClass<any, any> | \"pre\" & FunctionComponent<any> | \"progress\" & ComponentClass<any, any> | \"progress\" & FunctionComponent<any> | \"q\" & ComponentClass<any, any> | \"q\" & FunctionComponent<any> | \"rp\" & ComponentClass<any, any> | \"rp\" & FunctionComponent<any> | \"rt\" & ComponentClass<any, any> | \"rt\" & FunctionComponent<any> | \"ruby\" & ComponentClass<any, any> | \"ruby\" & FunctionComponent<any> | \"s\" & ComponentClass<any, any> | \"s\" & FunctionComponent<any> | \"samp\" & ComponentClass<any, any> | \"samp\" & FunctionComponent<any> | \"search\" & ComponentClass<any, any> | \"search\" & FunctionComponent<any> | \"slot\" & ComponentClass<any, any> | \"slot\" & FunctionComponent<any> | \"script\" & ComponentClass<any, any> | \"script\" & FunctionComponent<any> | \"section\" & ComponentClass<any, any> | \"section\" & FunctionComponent<any> | \"select\" & ComponentClass<any, any> | \"select\" & FunctionComponent<any> | \"small\" & ComponentClass<any, any> | \"small\" & FunctionComponent<any> | \"source\" & ComponentClass<any, any> | \"source\" & FunctionComponent<any> | \"span\" & ComponentClass<any, any> | \"span\" & FunctionComponent<any> | \"strong\" & ComponentClass<any, any> | \"strong\" & FunctionComponent<any> | \"style\" & ComponentClass<any, any> | \"style\" & FunctionComponent<any> | \"sub\" & ComponentClass<any, any> | \"sub\" & FunctionComponent<any> | \"summary\" & ComponentClass<any, any> | \"summary\" & FunctionComponent<any> | \"sup\" & ComponentClass<any, any> | \"sup\" & FunctionComponent<any> | \"table\" & ComponentClass<any, any> | \"table\" & FunctionComponent<any> | \"template\" & ComponentClass<any, any> | \"template\" & FunctionComponent<any> | \"tbody\" & ComponentClass<any, any> | \"tbody\" & FunctionComponent<any> | \"td\" & ComponentClass<any, any> | \"td\" & FunctionComponent<any> | \"textarea\" & ComponentClass<any, any> | \"textarea\" & FunctionComponent<any> | \"tfoot\" & ComponentClass<any, any> | \"tfoot\" & FunctionComponent<any> | \"th\" & ComponentClass<any, any> | \"th\" & FunctionComponent<any> | \"thead\" & ComponentClass<any, any> | \"thead\" & FunctionComponent<any> | \"time\" & ComponentClass<any, any> | \"time\" & FunctionComponent<any> | \"title\" & ComponentClass<any, any> | \"title\" & FunctionComponent<any> | \"tr\" & ComponentClass<any, any> | \"tr\" & FunctionComponent<any> | \"track\" & ComponentClass<any, any> | \"track\" & FunctionComponent<any> | \"u\" & ComponentClass<any, any> | \"u\" & FunctionComponent<any> | \"ul\" & ComponentClass<any, any> | \"ul\" & FunctionComponent<any> | \"var\" & ComponentClass<any, any> | \"var\" & FunctionComponent<any> | \"video\" & ComponentClass<any, any> | \"video\" & FunctionComponent<any> | \"wbr\" & ComponentClass<any, any> | \"wbr\" & FunctionComponent<any> | \"webview\" & ComponentClass<any, any> | \"webview\" & FunctionComponent<any> | \"svg\" & ComponentClass<any, any> | \"svg\" & FunctionComponent<any> | \"animate\" & ComponentClass<any, any> | \"animate\" & FunctionComponent<any> | \"animateMotion\" & ComponentClass<any, any> | \"animateMotion\" & FunctionComponent<any> | \"animateTransform\" & ComponentClass<any, any> | \"animateTransform\" & FunctionComponent<any> | \"circle\" & ComponentClass<any, any> | \"circle\" & FunctionComponent<any> | \"clipPath\" & ComponentClass<any, any> | \"clipPath\" & FunctionComponent<any> | \"defs\" & ComponentClass<any, any> | \"defs\" & FunctionComponent<any> | \"desc\" & ComponentClass<any, any> | \"desc\" & FunctionComponent<any> | \"ellipse\" & ComponentClass<any, any> | \"ellipse\" & FunctionComponent<any> | \"feBlend\" & ComponentClass<any, any> | \"feBlend\" & FunctionComponent<any> | \"feColorMatrix\" & ComponentClass<any, any> | \"feColorMatrix\" & FunctionComponent<any> | \"feComponentTransfer\" & ComponentClass<any, any> | \"feComponentTransfer\" & FunctionComponent<any> | \"feComposite\" & ComponentClass<any, any> | \"feComposite\" & FunctionComponent<any> | \"feConvolveMatrix\" & ComponentClass<any, any> | \"feConvolveMatrix\" & FunctionComponent<any> | \"feDiffuseLighting\" & ComponentClass<any, any> | \"feDiffuseLighting\" & FunctionComponent<any> | \"feDisplacementMap\" & ComponentClass<any, any> | \"feDisplacementMap\" & FunctionComponent<any> | \"feDistantLight\" & ComponentClass<any, any> | \"feDistantLight\" & FunctionComponent<any> | \"feDropShadow\" & ComponentClass<any, any> | \"feDropShadow\" & FunctionComponent<any> | \"feFlood\" & ComponentClass<any, any> | \"feFlood\" & FunctionComponent<any> | \"feFuncA\" & ComponentClass<any, any> | \"feFuncA\" & FunctionComponent<any> | \"feFuncB\" & ComponentClass<any, any> | \"feFuncB\" & FunctionComponent<any> | \"feFuncG\" & ComponentClass<any, any> | \"feFuncG\" & FunctionComponent<any> | \"feFuncR\" & ComponentClass<any, any> | \"feFuncR\" & FunctionComponent<any> | \"feGaussianBlur\" & ComponentClass<any, any> | \"feGaussianBlur\" & FunctionComponent<any> | \"feImage\" & ComponentClass<any, any> | \"feImage\" & FunctionComponent<any> | \"feMerge\" & ComponentClass<any, any> | \"feMerge\" & FunctionComponent<any> | \"feMergeNode\" & ComponentClass<any, any> | \"feMergeNode\" & FunctionComponent<any> | \"feMorphology\" & ComponentClass<any, any> | \"feMorphology\" & FunctionComponent<any> | \"feOffset\" & ComponentClass<any, any> | \"feOffset\" & FunctionComponent<any> | \"fePointLight\" & ComponentClass<any, any> | \"fePointLight\" & FunctionComponent<any> | \"feSpecularLighting\" & ComponentClass<any, any> | \"feSpecularLighting\" & FunctionComponent<any> | \"feSpotLight\" & ComponentClass<any, any> | \"feSpotLight\" & FunctionComponent<any> | \"feTile\" & ComponentClass<any, any> | \"feTile\" & FunctionComponent<any> | \"feTurbulence\" & ComponentClass<any, any> | \"feTurbulence\" & FunctionComponent<any> | \"filter\" & ComponentClass<any, any> | \"filter\" & FunctionComponent<any> | \"foreignObject\" & ComponentClass<any, any> | \"foreignObject\" & FunctionComponent<any> | \"g\" & ComponentClass<any, any> | \"g\" & FunctionComponent<any> | \"image\" & ComponentClass<any, any> | \"image\" & FunctionComponent<any> | \"line\" & ComponentClass<any, any> | \"line\" & FunctionComponent<any> | \"linearGradient\" & ComponentClass<any, any> | \"linearGradient\" & FunctionComponent<any> | \"marker\" & ComponentClass<any, any> | \"marker\" & FunctionComponent<any> | \"mask\" & ComponentClass<any, any> | \"mask\" & FunctionComponent<any> | \"metadata\" & ComponentClass<any, any> | \"metadata\" & FunctionComponent<any> | \"mpath\" & ComponentClass<any, any> | \"mpath\" & FunctionComponent<any> | \"path\" & ComponentClass<any, any> | \"path\" & FunctionComponent<any> | \"pattern\" & ComponentClass<any, any> | \"pattern\" & FunctionComponent<any> | \"polygon\" & ComponentClass<any, any> | \"polygon\" & FunctionComponent<any> | \"polyline\" & ComponentClass<any, any> | \"polyline\" & FunctionComponent<any> | \"radialGradient\" & ComponentClass<any, any> | \"radialGradient\" & FunctionComponent<any> | \"rect\" & ComponentClass<any, any> | \"rect\" & FunctionComponent<any> | \"set\" & ComponentClass<any, any> | \"set\" & FunctionComponent<any> | \"stop\" & ComponentClass<any, any> | \"stop\" & FunctionComponent<any> | \"switch\" & ComponentClass<any, any> | \"switch\" & FunctionComponent<any> | \"text\" & ComponentClass<any, any> | \"text\" & FunctionComponent<any> | \"textPath\" & ComponentClass<any, any> | \"textPath\" & FunctionComponent<any> | \"tspan\" & ComponentClass<any, any> | \"tspan\" & FunctionComponent<any> | \"use\" & ComponentClass<any, any> | \"use\" & FunctionComponent<any> | \"view\" & ComponentClass<any, any> | \"view\" & FunctionComponent<any> | \"relative-time\" & ComponentClass<any, any> | \"relative-time\" & FunctionComponent<any> | \"tab-container\" & ComponentClass<any, any> | \"tab-container\" & FunctionComponent<any> | ComponentClass<any, any> & ComponentClass<unknown, any> | ComponentClass<any, any> & FunctionComponent<unknown> | FunctionComponent<any> & ComponentClass<unknown, any> | FunctionComponent<any> & FunctionComponent<unknown> | ComponentClass<any, any> & \"object\" | ComponentClass<any, any> & \"a\" | ComponentClass<any, any> & \"abbr\" | ComponentClass<any, any> & \"address\" | ComponentClass<any, any> & \"area\" | ComponentClass<any, any> & \"article\" | ComponentClass<any, any> & \"aside\" | ComponentClass<any, any> & \"audio\" | ComponentClass<any, any> & \"b\" | ComponentClass<any, any> & \"base\" | ComponentClass<any, any> & \"bdi\" | ComponentClass<any, any> & \"bdo\" | ComponentClass<any, any> & \"big\" | ComponentClass<any, any> & \"blockquote\" | ComponentClass<any, any> & \"body\" | ComponentClass<any, any> & \"br\" | ComponentClass<any, any> & \"button\" | ComponentClass<any, any> & \"canvas\" | ComponentClass<any, any> & \"caption\" | ComponentClass<any, any> & \"center\" | ComponentClass<any, any> & \"cite\" | ComponentClass<any, any> & \"code\" | ComponentClass<any, any> & \"col\" | ComponentClass<any, any> & \"colgroup\" | ComponentClass<any, any> & \"data\" | ComponentClass<any, any> & \"datalist\" | ComponentClass<any, any> & \"dd\" | ComponentClass<any, any> & \"del\" | ComponentClass<any, any> & \"details\" | ComponentClass<any, any> & \"dfn\" | ComponentClass<any, any> & \"dialog\" | ComponentClass<any, any> & \"div\" | ComponentClass<any, any> & \"dl\" | ComponentClass<any, any> & \"dt\" | ComponentClass<any, any> & \"em\" | ComponentClass<any, any> & \"embed\" | ComponentClass<any, any> & \"fieldset\" | ComponentClass<any, any> & \"figcaption\" | ComponentClass<any, any> & \"figure\" | ComponentClass<any, any> & \"footer\" | ComponentClass<any, any> & \"form\" | ComponentClass<any, any> & \"h1\" | ComponentClass<any, any> & \"h2\" | ComponentClass<any, any> & \"h3\" | ComponentClass<any, any> & \"h4\" | ComponentClass<any, any> & \"h5\" | ComponentClass<any, any> & \"h6\" | ComponentClass<any, any> & \"head\" | ComponentClass<any, any> & \"header\" | ComponentClass<any, any> & \"hgroup\" | ComponentClass<any, any> & \"hr\" | ComponentClass<any, any> & \"html\" | ComponentClass<any, any> & \"i\" | ComponentClass<any, any> & \"iframe\" | ComponentClass<any, any> & \"img\" | ComponentClass<any, any> & \"input\" | ComponentClass<any, any> & \"ins\" | ComponentClass<any, any> & \"kbd\" | ComponentClass<any, any> & \"keygen\" | ComponentClass<any, any> & \"label\" | ComponentClass<any, any> & \"legend\" | ComponentClass<any, any> & \"li\" | ComponentClass<any, any> & \"link\" | ComponentClass<any, any> & \"main\" | ComponentClass<any, any> & \"map\" | ComponentClass<any, any> & \"mark\" | ComponentClass<any, any> & \"menu\" | ComponentClass<any, any> & \"menuitem\" | ComponentClass<any, any> & \"meta\" | ComponentClass<any, any> & \"meter\" | ComponentClass<any, any> & \"nav\" | ComponentClass<any, any> & \"noindex\" | ComponentClass<any, any> & \"noscript\" | ComponentClass<any, any> & \"ol\" | ComponentClass<any, any> & \"optgroup\" | ComponentClass<any, any> & \"option\" | ComponentClass<any, any> & \"output\" | ComponentClass<any, any> & \"p\" | ComponentClass<any, any> & \"param\" | ComponentClass<any, any> & \"picture\" | ComponentClass<any, any> & \"pre\" | ComponentClass<any, any> & \"progress\" | ComponentClass<any, any> & \"q\" | ComponentClass<any, any> & \"rp\" | ComponentClass<any, any> & \"rt\" | ComponentClass<any, any> & \"ruby\" | ComponentClass<any, any> & \"s\" | ComponentClass<any, any> & \"samp\" | ComponentClass<any, any> & \"search\" | ComponentClass<any, any> & \"slot\" | ComponentClass<any, any> & \"script\" | ComponentClass<any, any> & \"section\" | ComponentClass<any, any> & \"select\" | ComponentClass<any, any> & \"small\" | ComponentClass<any, any> & \"source\" | ComponentClass<any, any> & \"span\" | ComponentClass<any, any> & \"strong\" | ComponentClass<any, any> & \"style\" | ComponentClass<any, any> & \"sub\" | ComponentClass<any, any> & \"summary\" | ComponentClass<any, any> & \"sup\" | ComponentClass<any, any> & \"table\" | ComponentClass<any, any> & \"template\" | ComponentClass<any, any> & \"tbody\" | ComponentClass<any, any> & \"td\" | ComponentClass<any, any> & \"textarea\" | ComponentClass<any, any> & \"tfoot\" | ComponentClass<any, any> & \"th\" | ComponentClass<any, any> & \"thead\" | ComponentClass<any, any> & \"time\" | ComponentClass<any, any> & \"title\" | ComponentClass<any, any> & \"tr\" | ComponentClass<any, any> & \"track\" | ComponentClass<any, any> & \"u\" | ComponentClass<any, any> & \"ul\" | ComponentClass<any, any> & \"var\" | ComponentClass<any, any> & \"video\" | ComponentClass<any, any> & \"wbr\" | ComponentClass<any, any> & \"webview\" | ComponentClass<any, any> & \"svg\" | ComponentClass<any, any> & \"animate\" | ComponentClass<any, any> & \"animateMotion\" | ComponentClass<any, any> & \"animateTransform\" | ComponentClass<any, any> & \"circle\" | ComponentClass<any, any> & \"clipPath\" | ComponentClass<any, any> & \"defs\" | ComponentClass<any, any> & \"desc\" | ComponentClass<any, any> & \"ellipse\" | ComponentClass<any, any> & \"feBlend\" | ComponentClass<any, any> & \"feColorMatrix\" | ComponentClass<any, any> & \"feComponentTransfer\" | ComponentClass<any, any> & \"feComposite\" | ComponentClass<any, any> & \"feConvolveMatrix\" | ComponentClass<any, any> & \"feDiffuseLighting\" | ComponentClass<any, any> & \"feDisplacementMap\" | ComponentClass<any, any> & \"feDistantLight\" | ComponentClass<any, any> & \"feDropShadow\" | ComponentClass<any, any> & \"feFlood\" | ComponentClass<any, any> & \"feFuncA\" | ComponentClass<any, any> & \"feFuncB\" | ComponentClass<any, any> & \"feFuncG\" | ComponentClass<any, any> & \"feFuncR\" | ComponentClass<any, any> & \"feGaussianBlur\" | ComponentClass<any, any> & \"feImage\" | ComponentClass<any, any> & \"feMerge\" | ComponentClass<any, any> & \"feMergeNode\" | ComponentClass<any, any> & \"feMorphology\" | ComponentClass<any, any> & \"feOffset\" | ComponentClass<any, any> & \"fePointLight\" | ComponentClass<any, any> & \"feSpecularLighting\" | ComponentClass<any, any> & \"feSpotLight\" | ComponentClass<any, any> & \"feTile\" | ComponentClass<any, any> & \"feTurbulence\" | ComponentClass<any, any> & \"filter\" | ComponentClass<any, any> & \"foreignObject\" | ComponentClass<any, any> & \"g\" | ComponentClass<any, any> & \"image\" | ComponentClass<any, any> & \"line\" | ComponentClass<any, any> & \"linearGradient\" | ComponentClass<any, any> & \"marker\" | ComponentClass<any, any> & \"mask\" | ComponentClass<any, any> & \"metadata\" | ComponentClass<any, any> & \"mpath\" | ComponentClass<any, any> & \"path\" | ComponentClass<any, any> & \"pattern\" | ComponentClass<any, any> & \"polygon\" | ComponentClass<any, any> & \"polyline\" | ComponentClass<any, any> & \"radialGradient\" | ComponentClass<any, any> & \"rect\" | ComponentClass<any, any> & \"set\" | ComponentClass<any, any> & \"stop\" | ComponentClass<any, any> & \"switch\" | ComponentClass<any, any> & \"text\" | ComponentClass<any, any> & \"textPath\" | ComponentClass<any, any> & \"tspan\" | ComponentClass<any, any> & \"use\" | ComponentClass<any, any> & \"view\" | ComponentClass<any, any> & \"relative-time\" | ComponentClass<any, any> & \"tab-container\" | FunctionComponent<any> & \"object\" | FunctionComponent<any> & \"a\" | FunctionComponent<any> & \"abbr\" | FunctionComponent<any> & \"address\" | FunctionComponent<any> & \"area\" | FunctionComponent<any> & \"article\" | FunctionComponent<any> & \"aside\" | FunctionComponent<any> & \"audio\" | FunctionComponent<any> & \"b\" | FunctionComponent<any> & \"base\" | FunctionComponent<any> & \"bdi\" | FunctionComponent<any> & \"bdo\" | FunctionComponent<any> & \"big\" | FunctionComponent<any> & \"blockquote\" | FunctionComponent<any> & \"body\" | FunctionComponent<any> & \"br\" | FunctionComponent<any> & \"button\" | FunctionComponent<any> & \"canvas\" | FunctionComponent<any> & \"caption\" | FunctionComponent<any> & \"center\" | FunctionComponent<any> & \"cite\" | FunctionComponent<any> & \"code\" | FunctionComponent<any> & \"col\" | FunctionComponent<any> & \"colgroup\" | FunctionComponent<any> & \"data\" | FunctionComponent<any> & \"datalist\" | FunctionComponent<any> & \"dd\" | FunctionComponent<any> & \"del\" | FunctionComponent<any> & \"details\" | FunctionComponent<any> & \"dfn\" | FunctionComponent<any> & \"dialog\" | FunctionComponent<any> & \"div\" | FunctionComponent<any> & \"dl\" | FunctionComponent<any> & \"dt\" | FunctionComponent<any> & \"em\" | FunctionComponent<any> & \"embed\" | FunctionComponent<any> & \"fieldset\" | FunctionComponent<any> & \"figcaption\" | FunctionComponent<any> & \"figure\" | FunctionComponent<any> & \"footer\" | FunctionComponent<any> & \"form\" | FunctionComponent<any> & \"h1\" | FunctionComponent<any> & \"h2\" | FunctionComponent<any> & \"h3\" | FunctionComponent<any> & \"h4\" | FunctionComponent<any> & \"h5\" | FunctionComponent<any> & \"h6\" | FunctionComponent<any> & \"head\" | FunctionComponent<any> & \"header\" | FunctionComponent<any> & \"hgroup\" | FunctionComponent<any> & \"hr\" | FunctionComponent<any> & \"html\" | FunctionComponent<any> & \"i\" | FunctionComponent<any> & \"iframe\" | FunctionComponent<any> & \"img\" | FunctionComponent<any> & \"input\" | FunctionComponent<any> & \"ins\" | FunctionComponent<any> & \"kbd\" | FunctionComponent<any> & \"keygen\" | FunctionComponent<any> & \"label\" | FunctionComponent<any> & \"legend\" | FunctionComponent<any> & \"li\" | FunctionComponent<any> & \"link\" | FunctionComponent<any> & \"main\" | FunctionComponent<any> & \"map\" | FunctionComponent<any> & \"mark\" | FunctionComponent<any> & \"menu\" | FunctionComponent<any> & \"menuitem\" | FunctionComponent<any> & \"meta\" | FunctionComponent<any> & \"meter\" | FunctionComponent<any> & \"nav\" | FunctionComponent<any> & \"noindex\" | FunctionComponent<any> & \"noscript\" | FunctionComponent<any> & \"ol\" | FunctionComponent<any> & \"optgroup\" | FunctionComponent<any> & \"option\" | FunctionComponent<any> & \"output\" | FunctionComponent<any> & \"p\" | FunctionComponent<any> & \"param\" | FunctionComponent<any> & \"picture\" | FunctionComponent<any> & \"pre\" | FunctionComponent<any> & \"progress\" | FunctionComponent<any> & \"q\" | FunctionComponent<any> & \"rp\" | FunctionComponent<any> & \"rt\" | FunctionComponent<any> & \"ruby\" | FunctionComponent<any> & \"s\" | FunctionComponent<any> & \"samp\" | FunctionComponent<any> & \"search\" | FunctionComponent<any> & \"slot\" | FunctionComponent<any> & \"script\" | FunctionComponent<any> & \"section\" | FunctionComponent<any> & \"select\" | FunctionComponent<any> & \"small\" | FunctionComponent<any> & \"source\" | FunctionComponent<any> & \"span\" | FunctionComponent<any> & \"strong\" | FunctionComponent<any> & \"style\" | FunctionComponent<any> & \"sub\" | FunctionComponent<any> & \"summary\" | FunctionComponent<any> & \"sup\" | FunctionComponent<any> & \"table\" | FunctionComponent<any> & \"template\" | FunctionComponent<any> & \"tbody\" | FunctionComponent<any> & \"td\" | FunctionComponent<any> & \"textarea\" | FunctionComponent<any> & \"tfoot\" | FunctionComponent<any> & \"th\" | FunctionComponent<any> & \"thead\" | FunctionComponent<any> & \"time\" | FunctionComponent<any> & \"title\" | FunctionComponent<any> & \"tr\" | FunctionComponent<any> & \"track\" | FunctionComponent<any> & \"u\" | FunctionComponent<any> & \"ul\" | FunctionComponent<any> & \"var\" | FunctionComponent<any> & \"video\" | FunctionComponent<any> & \"wbr\" | FunctionComponent<any> & \"webview\" | FunctionComponent<any> & \"svg\" | FunctionComponent<any> & \"animate\" | FunctionComponent<any> & \"animateMotion\" | FunctionComponent<any> & \"animateTransform\" | FunctionComponent<any> & \"circle\" | FunctionComponent<any> & \"clipPath\" | FunctionComponent<any> & \"defs\" | FunctionComponent<any> & \"desc\" | FunctionComponent<any> & \"ellipse\" | FunctionComponent<any> & \"feBlend\" | FunctionComponent<any> & \"feColorMatrix\" | FunctionComponent<any> & \"feComponentTransfer\" | FunctionComponent<any> & \"feComposite\" | FunctionComponent<any> & \"feConvolveMatrix\" | FunctionComponent<any> & \"feDiffuseLighting\" | FunctionComponent<any> & \"feDisplacementMap\" | FunctionComponent<any> & \"feDistantLight\" | FunctionComponent<any> & \"feDropShadow\" | FunctionComponent<any> & \"feFlood\" | FunctionComponent<any> & \"feFuncA\" | FunctionComponent<any> & \"feFuncB\" | FunctionComponent<any> & \"feFuncG\" | FunctionComponent<any> & \"feFuncR\" | FunctionComponent<any> & \"feGaussianBlur\" | FunctionComponent<any> & \"feImage\" | FunctionComponent<any> & \"feMerge\" | FunctionComponent<any> & \"feMergeNode\" | FunctionComponent<any> & \"feMorphology\" | FunctionComponent<any> & \"feOffset\" | FunctionComponent<any> & \"fePointLight\" | FunctionComponent<any> & \"feSpecularLighting\" | FunctionComponent<any> & \"feSpotLight\" | FunctionComponent<any> & \"feTile\" | FunctionComponent<any> & \"feTurbulence\" | FunctionComponent<any> & \"filter\" | FunctionComponent<any> & \"foreignObject\" | FunctionComponent<any> & \"g\" | FunctionComponent<any> & \"image\" | FunctionComponent<any> & \"line\" | FunctionComponent<any> & \"linearGradient\" | FunctionComponent<any> & \"marker\" | FunctionComponent<any> & \"mask\" | FunctionComponent<any> & \"metadata\" | FunctionComponent<any> & \"mpath\" | FunctionComponent<any> & \"path\" | FunctionComponent<any> & \"pattern\" | FunctionComponent<any> & \"polygon\" | FunctionComponent<any> & \"polyline\" | FunctionComponent<any> & \"radialGradient\" | FunctionComponent<any> & \"rect\" | FunctionComponent<any> & \"set\" | FunctionComponent<any> & \"stop\" | FunctionComponent<any> & \"switch\" | FunctionComponent<any> & \"text\" | FunctionComponent<any> & \"textPath\" | FunctionComponent<any> & \"tspan\" | FunctionComponent<any> & \"use\" | FunctionComponent<any> & \"view\" | FunctionComponent<any> & \"relative-time\" | FunctionComponent<any> & \"tab-container\"",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "openOnFocus",
              "type": "boolean",
              "required": false,
              "description": "@deprecated `openOnFocus` is deprecated and will be removed in v38.\nWhen `true`, autocomplete menu will show on focus or click.",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "Autocomplete.Menu",
          "props": [
            {
              "name": "aria-labelledby",
              "type": "string",
              "required": true,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "items",
              "type": "T[]",
              "required": true,
              "description": "The options for field values that are displayed in the dropdown menu.\nOne or more may be selected depending on the value of the `selectionVariant` prop.",
              "defaultValue": ""
            },
            {
              "name": "selectedItemIds",
              "type": "string[]",
              "required": true,
              "description": "The IDs of the selected items",
              "defaultValue": ""
            },
            {
              "name": "addNewItem",
              "type": "Omit<ActionListItemProps, \"id\"> & { id: string; } & { leadingVisual?: FunctionComponent<PropsWithChildren<IconProps>> | undefined; text?: string | undefined; trailingVisual?: FunctionComponent<...> | undefined; } & { ...; } & { ...; }",
              "required": false,
              "description": "A menu item that is used to allow users make a selection that is not available in the array passed to the `items` prop.\nThis menu item gets appended to the end of the list of options.",
              "defaultValue": ""
            },
            {
              "name": "customScrollContainerRef",
              "type": "MutableRefObject<HTMLElement | null>",
              "required": false,
              "description": "If the menu is rendered in a scrolling element other than the `Autocomplete.Overlay` component,\npass the ref of that element to `customScrollContainerRef` to ensure the container automatically\nscrolls when the user highlights an item in the menu that is outside the scroll container",
              "defaultValue": ""
            },
            {
              "name": "emptyStateText",
              "type": "ReactNode",
              "required": false,
              "description": "The text that appears in the menu when there are no options in the array passed to the `items` prop.",
              "defaultValue": ""
            },
            {
              "name": "filterFn",
              "type": "(item: T, i: number) => boolean",
              "required": false,
              "description": "A custom function used to filter the options in the array passed to the `items` prop.\nBy default, we filter out items that don't match the value of the autocomplete text input. The default filter is not case-sensitive.",
              "defaultValue": ""
            },
            {
              "name": "loading",
              "type": "boolean",
              "required": false,
              "description": "Whether the data is loaded for the menu items",
              "defaultValue": ""
            },
            {
              "name": "onOpenChange",
              "type": "(open: boolean) => void",
              "required": false,
              "description": "Function that gets called when the menu is opened or closed",
              "defaultValue": ""
            },
            {
              "name": "onSelectedChange",
              "type": "OnSelectedChange<T>",
              "required": false,
              "description": "The function that is called when an item in the list is selected or deselected",
              "defaultValue": ""
            },
            {
              "name": "selectionVariant",
              "type": "\"multiple\" | \"single\"",
              "required": false,
              "description": "Whether there can be one item selected from the menu or multiple items selected from the menu",
              "defaultValue": ""
            },
            {
              "name": "sortOnCloseFn",
              "type": "(itemIdA: string, itemIdB: string) => number",
              "required": false,
              "description": "The sort function that is applied to the options in the array passed to the `items` prop after the user closes the menu.\nBy default, selected items are sorted to the top after the user closes the menu.",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "Autocomplete.Overlay",
          "props": [
            {
              "name": "anchorSide",
              "type": "\"inside-top\" | \"inside-bottom\" | \"inside-left\" | \"inside-right\" | \"inside-center\" | \"outside-top\" | \"outside-bottom\" | \"outside-left\" | \"outside-right\"",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "as",
              "type": "\"div\"",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "bottom",
              "type": "string | number | string & {}",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "children",
              "type": "ReactNode",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "data-test-id",
              "type": "unknown",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "height",
              "type": "\"small\" | \"initial\" | \"large\" | \"medium\" | \"auto\" | \"fit-content\" | \"xsmall\" | \"xlarge\"",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "ignoreClickRefs",
              "type": "RefObject<HTMLElement>[]",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "initialFocusRef",
              "type": "RefObject<HTMLElement>",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "left",
              "type": "string | number | string & {}",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "maxHeight",
              "type": "\"small\" | \"large\" | \"medium\" | \"fit-content\" | \"xsmall\" | \"xlarge\"",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "maxWidth",
              "type": "\"small\" | \"large\" | \"medium\" | \"xlarge\" | \"xxlarge\"",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "menuAnchorRef",
              "type": "RefObject<HTMLElement>",
              "required": false,
              "description": "The ref of the element that the position of the menu is based on. By default, the menu is positioned based on the text input",
              "defaultValue": ""
            },
            {
              "name": "onClickOutside",
              "type": "(e: TouchOrMouseEvent) => void",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "onEscape",
              "type": "(e: KeyboardEvent) => void",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "overflow",
              "type": "\"hidden\" | \"scroll\" | \"auto\" | \"visible\"",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "overlayProps",
              "type": "Partial<Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"ref\"> & { ...; }, \"style\" | ... 8 more ... | keyof BaseOverlayProps> & Omit<...> & BaseOverlayProps & { ...; }>",
              "required": false,
              "description": "Props to be spread on the internal `Overlay` component.",
              "defaultValue": ""
            },
            {
              "name": "portalContainerName",
              "type": "string",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "position",
              "type": "\"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"fixed\" | \"-webkit-sticky\" | \"absolute\" | \"relative\" | \"static\" | \"sticky\"",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "preventFocusOnOpen",
              "type": "boolean",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "returnFocusRef",
              "type": "RefObject<HTMLElement>",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "right",
              "type": "string | number | string & {}",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "role",
              "type": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | \"list\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"grid\" | \"gridcell\" | \"group\" | \"heading\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"region\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\"",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "style",
              "type": "CSSProperties",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            },
            {
              "name": "top",
              "type": "string | number | string & {}",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "visibility",
              "type": "\"hidden\" | \"visible\"",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "width",
              "type": "\"small\" | \"large\" | \"medium\" | \"auto\" | \"xlarge\" | \"xxlarge\"",
              "required": false,
              "description": "",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    "avatar": {
      "id": "avatar",
      "name": "Avatar",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-avatar--default",
          "code": "() => <Avatar src=\"https://avatars.githubusercontent.com/u/92997159?v=4\" />"
        },
        {
          "id": "components-avatar-features--square",
          "code": "() => (\n  <Avatar\n    square\n    alt=\"primer\"\n    src=\"https://avatars.githubusercontent.com/primer\"\n  />\n)"
        },
        {
          "id": "components-avatar-features--size",
          "code": "() => (\n  <div>\n    <Avatar\n      size={4}\n      alt=\"mona\"\n      src=\"https://avatars.githubusercontent.com/u/92997159?v=4\"\n    />\n    <Avatar\n      size={8}\n      alt=\"mona\"\n      src=\"https://avatars.githubusercontent.com/u/92997159?v=4\"\n    />\n    <Avatar\n      size={12}\n      alt=\"mona\"\n      src=\"https://avatars.githubusercontent.com/u/92997159?v=4\"\n    />\n    <Avatar\n      size={16}\n      alt=\"mona\"\n      src=\"https://avatars.githubusercontent.com/u/92997159?v=4\"\n    />\n    <Avatar\n      size={20}\n      alt=\"mona\"\n      src=\"https://avatars.githubusercontent.com/u/92997159?v=4\"\n    />\n    <Avatar\n      size={24}\n      alt=\"mona\"\n      src=\"https://avatars.githubusercontent.com/u/92997159?v=4\"\n    />\n    <Avatar\n      size={28}\n      alt=\"mona\"\n      src=\"https://avatars.githubusercontent.com/u/92997159?v=4\"\n    />\n    <Avatar\n      size={32}\n      alt=\"mona\"\n      src=\"https://avatars.githubusercontent.com/u/92997159?v=4\"\n    />\n    <Avatar\n      size={40}\n      alt=\"mona\"\n      src=\"https://avatars.githubusercontent.com/u/92997159?v=4\"\n    />\n    <Avatar\n      size={48}\n      alt=\"mona\"\n      src=\"https://avatars.githubusercontent.com/u/92997159?v=4\"\n    />\n    <Avatar\n      size={56}\n      alt=\"mona\"\n      src=\"https://avatars.githubusercontent.com/u/92997159?v=4\"\n    />\n    <Avatar\n      size={64}\n      alt=\"mona\"\n      src=\"https://avatars.githubusercontent.com/u/92997159?v=4\"\n    />\n  </div>\n)"
        },
        {
          "id": "components-avatar-features--size-responsive",
          "code": "() => (\n  <div>\n    <Avatar\n      size={{\n        narrow: 4,\n        regular: 8,\n        wide: 12,\n      }}\n      alt=\"mona\"\n      src=\"https://avatars.githubusercontent.com/u/92997159?v=4\"\n    />\n    <Avatar\n      size={{\n        narrow: 8,\n        regular: 12,\n        wide: 16,\n      }}\n      alt=\"mona\"\n      src=\"https://avatars.githubusercontent.com/u/92997159?v=4\"\n    />\n    <Avatar\n      size={{\n        narrow: 12,\n        regular: 16,\n        wide: 20,\n      }}\n      alt=\"mona\"\n      src=\"https://avatars.githubusercontent.com/u/92997159?v=4\"\n    />\n    <Avatar\n      size={{\n        narrow: 16,\n        regular: 20,\n        wide: 24,\n      }}\n      alt=\"mona\"\n      src=\"https://avatars.githubusercontent.com/u/92997159?v=4\"\n    />\n    <Avatar\n      size={{\n        narrow: 20,\n        regular: 24,\n        wide: 28,\n      }}\n      alt=\"mona\"\n      src=\"https://avatars.githubusercontent.com/u/92997159?v=4\"\n    />\n    <Avatar\n      size={{\n        narrow: 24,\n        regular: 28,\n        wide: 32,\n      }}\n      alt=\"mona\"\n      src=\"https://avatars.githubusercontent.com/u/92997159?v=4\"\n    />\n    <Avatar\n      size={{\n        narrow: 28,\n        regular: 32,\n        wide: 40,\n      }}\n      alt=\"mona\"\n      src=\"https://avatars.githubusercontent.com/u/92997159?v=4\"\n    />\n    <Avatar\n      size={{\n        narrow: 32,\n        regular: 40,\n        wide: 48,\n      }}\n      alt=\"mona\"\n      src=\"https://avatars.githubusercontent.com/u/92997159?v=4\"\n    />\n    <Avatar\n      size={{\n        narrow: 40,\n        regular: 48,\n        wide: 56,\n      }}\n      alt=\"mona\"\n      src=\"https://avatars.githubusercontent.com/u/92997159?v=4\"\n    />\n    <Avatar\n      size={{\n        narrow: 48,\n        regular: 56,\n        wide: 64,\n      }}\n      alt=\"mona\"\n      src=\"https://avatars.githubusercontent.com/u/92997159?v=4\"\n    />\n  </div>\n)"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "alt",
          "type": "string",
          "required": false,
          "description": "Provide alt text when the Avatar is used without the user's name next to it.",
          "defaultValue": ""
        },
        {
          "name": "size",
          "type": "number | ResponsiveValue<number>",
          "required": false,
          "description": "Sets the width and height of the avatar.",
          "defaultValue": 20
        },
        {
          "name": "square",
          "type": "boolean",
          "required": false,
          "description": "Sets the shape of the avatar to a square if true. If false, the avatar will be circular.",
          "defaultValue": false
        },
        {
          "name": "src",
          "type": "string",
          "required": false,
          "description": "URL of the avatar image.",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "avatar_pair": {
      "id": "avatar_pair",
      "name": "AvatarPair",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-avatarpair--default",
          "code": "() => (\n  <AvatarPair>\n    <Avatar src=\"https://avatars.githubusercontent.com/u/92997159?v=4\" />\n    <Avatar src=\"https://avatars.githubusercontent.com/primer\" />\n  </AvatarPair>\n)"
        },
        {
          "id": "components-avatarpair-features--parent-circle",
          "code": "() => (\n  <AvatarPair>\n    <Avatar src=\"https://avatars.githubusercontent.com/u/92997159?v=4\" />\n    <Avatar square src=\"https://avatars.githubusercontent.com/primer\" />\n  </AvatarPair>\n)"
        },
        {
          "id": "components-avatarpair-features--parent-square",
          "code": "() => (\n  <AvatarPair>\n    <Avatar square src=\"https://avatars.githubusercontent.com/primer\" />\n    <Avatar src=\"https://avatars.githubusercontent.com/u/92997159?v=4\" />\n  </AvatarPair>\n)"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "avatar_stack": {
      "id": "avatar_stack",
      "name": "AvatarStack",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-avatarstack--default",
          "code": "() => (\n  <AvatarStack>\n    <Avatar\n      alt=\"Primer logo\"\n      src=\"https://avatars.githubusercontent.com/primer\"\n    />\n    <Avatar\n      alt=\"GitHub logo\"\n      src=\"https://avatars.githubusercontent.com/github\"\n    />\n    <Avatar alt=\"Atom logo\" src=\"https://avatars.githubusercontent.com/atom\" />\n    <Avatar\n      alt=\"GitHub Desktop logo\"\n      src=\"https://avatars.githubusercontent.com/desktop\"\n    />\n  </AvatarStack>\n)"
        },
        {
          "id": "components-avatarstack-features--align-left",
          "code": "() => (\n  <AvatarStack>\n    <Avatar\n      alt=\"Primer logo\"\n      src=\"https://avatars.githubusercontent.com/primer\"\n    />\n    <Avatar\n      alt=\"GitHub logo\"\n      src=\"https://avatars.githubusercontent.com/github\"\n    />\n    <Avatar alt=\"Atom logo\" src=\"https://avatars.githubusercontent.com/atom\" />\n    <Avatar\n      alt=\"GitHub Desktop logo\"\n      src=\"https://avatars.githubusercontent.com/desktop\"\n    />\n  </AvatarStack>\n)"
        },
        {
          "id": "components-avatarstack-features--align-right",
          "code": "() => (\n  <AvatarStack alignRight>\n    <Avatar\n      alt=\"Primer logo\"\n      src=\"https://avatars.githubusercontent.com/primer\"\n    />\n    <Avatar\n      alt=\"GitHub logo\"\n      src=\"https://avatars.githubusercontent.com/github\"\n    />\n    <Avatar alt=\"Atom logo\" src=\"https://avatars.githubusercontent.com/atom\" />\n    <Avatar\n      alt=\"GitHub Desktop logo\"\n      src=\"https://avatars.githubusercontent.com/desktop\"\n    />\n  </AvatarStack>\n)"
        },
        {
          "id": "components-avatarstack-features--disable-expand-on-hover",
          "code": "() => (\n  <AvatarStack disableExpand>\n    <Avatar\n      alt=\"Primer logo\"\n      src=\"https://avatars.githubusercontent.com/primer\"\n    />\n    <Avatar\n      alt=\"GitHub logo\"\n      src=\"https://avatars.githubusercontent.com/github\"\n    />\n    <Avatar alt=\"Atom logo\" src=\"https://avatars.githubusercontent.com/atom\" />\n    <Avatar\n      alt=\"GitHub Desktop logo\"\n      src=\"https://avatars.githubusercontent.com/desktop\"\n    />\n  </AvatarStack>\n)"
        },
        {
          "id": "components-avatarstack-features--custom-size-on-parent",
          "code": "() => (\n  <AvatarStack size={32}>\n    <Avatar\n      alt=\"Primer logo\"\n      src=\"https://avatars.githubusercontent.com/primer\"\n    />\n    <Avatar\n      alt=\"GitHub logo\"\n      src=\"https://avatars.githubusercontent.com/github\"\n    />\n    <Avatar alt=\"Atom logo\" src=\"https://avatars.githubusercontent.com/atom\" />\n    <Avatar\n      alt=\"GitHub Desktop logo\"\n      src=\"https://avatars.githubusercontent.com/desktop\"\n    />\n  </AvatarStack>\n)"
        },
        {
          "id": "components-avatarstack-features--custom-size-on-parent-responsive",
          "code": "() => (\n  <AvatarStack\n    size={{\n      narrow: 32,\n      regular: 48,\n      wide: 64,\n    }}\n  >\n    <Avatar\n      alt=\"Primer logo\"\n      src=\"https://avatars.githubusercontent.com/primer\"\n    />\n    <Avatar\n      alt=\"GitHub logo\"\n      src=\"https://avatars.githubusercontent.com/github\"\n    />\n    <Avatar alt=\"Atom logo\" src=\"https://avatars.githubusercontent.com/atom\" />\n    <Avatar\n      alt=\"GitHub Desktop logo\"\n      src=\"https://avatars.githubusercontent.com/desktop\"\n    />\n  </AvatarStack>\n)"
        },
        {
          "id": "components-avatarstack-features--custom-size-on-children",
          "code": "() => (\n  <AvatarStack>\n    <Avatar\n      size={20}\n      alt=\"Primer logo\"\n      src=\"https://avatars.githubusercontent.com/primer\"\n    />\n    <Avatar\n      size={32}\n      alt=\"GitHub logo\"\n      src=\"https://avatars.githubusercontent.com/github\"\n    />\n    <Avatar\n      size={48}\n      alt=\"Atom logo\"\n      src=\"https://avatars.githubusercontent.com/atom\"\n    />\n    <Avatar\n      size={64}\n      alt=\"GitHub Desktop logo\"\n      src=\"https://avatars.githubusercontent.com/desktop\"\n    />\n  </AvatarStack>\n)"
        },
        {
          "id": "components-avatarstack-features--custom-size-on-children-responsive",
          "code": "() => (\n  <AvatarStack>\n    <Avatar\n      size={{\n        narrow: 16,\n        regular: 32,\n        wide: 48,\n      }}\n      alt=\"Primer logo\"\n      src=\"https://avatars.githubusercontent.com/primer\"\n    />\n    <Avatar\n      size={{\n        narrow: 32,\n        regular: 48,\n        wide: 64,\n      }}\n      alt=\"GitHub logo\"\n      src=\"https://avatars.githubusercontent.com/github\"\n    />\n    <Avatar\n      size={{\n        narrow: 48,\n        regular: 64,\n        wide: 96,\n      }}\n      alt=\"Atom logo\"\n      src=\"https://avatars.githubusercontent.com/atom\"\n    />\n    <Avatar\n      size={{\n        narrow: 64,\n        regular: 96,\n        wide: 120,\n      }}\n      alt=\"GitHub Desktop logo\"\n      src=\"https://avatars.githubusercontent.com/desktop\"\n    />\n  </AvatarStack>\n)"
        },
        {
          "id": "components-avatarstack-features--with-single-avatar",
          "code": "() => (\n  <AvatarStack>\n    <Avatar\n      alt=\"Primer logo\"\n      src=\"https://avatars.githubusercontent.com/primer\"\n    />\n  </AvatarStack>\n)"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "children",
          "type": "ReactNode",
          "required": true,
          "description": "A set of Avatar components to stack",
          "defaultValue": ""
        },
        {
          "name": "alignRight",
          "type": "boolean",
          "required": false,
          "description": "Align the avatars to the right",
          "defaultValue": ""
        },
        {
          "name": "disableExpand",
          "type": "boolean",
          "required": false,
          "description": "Do not spread the avatars on hover",
          "defaultValue": ""
        },
        {
          "name": "size",
          "type": "number | ResponsiveValue<number>",
          "required": false,
          "description": "The size of the avatar children in pixels",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "banner": {
      "id": "banner",
      "name": "Banner",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-banner--default",
          "code": "() => {\n  return (\n    <Banner\n      onDismiss={action('onDismiss')}\n      title=\"Info\"\n      description={\n        <>\n          GitHub users are{' '}\n          <Link inline underline href=\"#\">\n            now required\n          </Link>{' '}\n          to enable two-factor authentication as an additional security measure.\n        </>\n      }\n      primaryAction={<Banner.PrimaryAction>Button</Banner.PrimaryAction>}\n      secondaryAction={<Banner.SecondaryAction>Button</Banner.SecondaryAction>}\n    />\n  )\n}"
        },
        {
          "id": "components-banner-features--critical",
          "code": "() => {\n  return (\n    <Banner\n      title=\"Critical\"\n      description={\n        <>\n          GitHub users are{' '}\n          <Link inline underline href=\"#\">\n            now required\n          </Link>{' '}\n          to enable two-factor authentication as an additional security measure.\n        </>\n      }\n      variant=\"critical\"\n    />\n  )\n}"
        },
        {
          "id": "components-banner-features--info",
          "code": "() => {\n  return (\n    <Banner\n      title=\"Info\"\n      description={\n        <>\n          GitHub users are{' '}\n          <Link inline underline href=\"#\">\n            now required\n          </Link>{' '}\n          to enable two-factor authentication as an additional security measure.\n        </>\n      }\n      onDismiss={action('onDismiss')}\n      variant=\"info\"\n    ></Banner>\n  )\n}"
        },
        {
          "id": "components-banner-features--success",
          "code": "() => {\n  return (\n    <Banner\n      title=\"Success\"\n      description={\n        <>\n          GitHub users are{' '}\n          <Link inline underline href=\"#\">\n            now required\n          </Link>{' '}\n          to enable two-factor authentication as an additional security measure.\n        </>\n      }\n      onDismiss={action('onDismiss')}\n      variant=\"success\"\n    />\n  )\n}"
        },
        {
          "id": "components-banner-features--upsell",
          "code": "() => {\n  return (\n    <Banner\n      title=\"Upsell\"\n      description={\n        <>\n          GitHub users are{' '}\n          <Link inline underline href=\"#\">\n            now required\n          </Link>{' '}\n          to enable two-factor authentication as an additional security measure.\n        </>\n      }\n      onDismiss={action('onDismiss')}\n      variant=\"upsell\"\n    />\n  )\n}"
        },
        {
          "id": "components-banner-features--warning",
          "code": "() => {\n  return (\n    <Banner\n      title=\"Warning\"\n      description={\n        <>\n          GitHub users are{' '}\n          <Link inline underline href=\"#\">\n            now required\n          </Link>{' '}\n          to enable two-factor authentication as an additional security measure.\n        </>\n      }\n      onDismiss={action('onDismiss')}\n      variant=\"warning\"\n    />\n  )\n}"
        },
        {
          "id": "components-banner-features--dismiss",
          "code": "() => {\n  return (\n    <Banner\n      title=\"Notice\"\n      description={\n        <>\n          GitHub users are{' '}\n          <Link inline underline href=\"#\">\n            now required\n          </Link>{' '}\n          to enable two-factor authentication as an additional security measure.\n        </>\n      }\n      onDismiss={action('onDismiss')}\n    />\n  )\n}"
        },
        {
          "id": "components-banner-features--dismiss-with-actions",
          "code": "() => {\n  return (\n    <Banner\n      title=\"Notice\"\n      description={\n        <>\n          GitHub users are{' '}\n          <Link inline underline href=\"#\">\n            now required\n          </Link>{' '}\n          to enable two-factor authentication as an additional security measure.\n        </>\n      }\n      onDismiss={action('onDismiss')}\n      primaryAction={<Banner.PrimaryAction>Button</Banner.PrimaryAction>}\n      secondaryAction={<Banner.SecondaryAction>Button</Banner.SecondaryAction>}\n    />\n  )\n}"
        },
        {
          "id": "components-banner-features--with-hidden-title",
          "code": "() => {\n  return (\n    <Banner\n      title=\"Warning\"\n      hideTitle\n      description={\n        <>\n          GitHub users are{' '}\n          <Link inline underline href=\"#\">\n            now required\n          </Link>{' '}\n          to enable two-factor authentication as an additional security measure.\n        </>\n      }\n      variant=\"warning\"\n    />\n  )\n}"
        },
        {
          "id": "components-banner-features--with-hidden-title-and-actions",
          "code": "() => {\n  return (\n    <Banner\n      title=\"Warning\"\n      hideTitle\n      description={\n        <>\n          GitHub users are{' '}\n          <Link inline underline href=\"#\">\n            now required\n          </Link>{' '}\n          to enable two-factor authentication as an additional security measure.\n        </>\n      }\n      variant=\"warning\"\n      primaryAction={<Banner.PrimaryAction>Button</Banner.PrimaryAction>}\n      secondaryAction={<Banner.SecondaryAction>Button</Banner.SecondaryAction>}\n    />\n  )\n}"
        },
        {
          "id": "components-banner-features--with-actions",
          "code": "() => {\n  return (\n    <Banner\n      title=\"Warning\"\n      description={\n        <>\n          GitHub users are{' '}\n          <Link inline underline href=\"#\">\n            now required\n          </Link>{' '}\n          to enable two-factor authentication as an additional security measure.\n        </>\n      }\n      primaryAction={<Banner.PrimaryAction>Button</Banner.PrimaryAction>}\n      secondaryAction={<Banner.SecondaryAction>Button</Banner.SecondaryAction>}\n      variant=\"warning\"\n    />\n  )\n}"
        },
        {
          "id": "components-banner-features--custom-icon",
          "code": "() => {\n  return (\n    <Banner\n      title=\"Upsell\"\n      description=\"An example banner with a custom icon\"\n      icon={<CopilotIcon />}\n      onDismiss={action('onDismiss')}\n      variant=\"upsell\"\n    />\n  )\n}"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "aria-label",
          "type": "string",
          "required": false,
          "description": "Defines a string value that labels the current element.\nProvide an optional label to override the default name for the Banner\nlandmark region\n@see aria-labelledby.",
          "defaultValue": ""
        },
        {
          "name": "description",
          "type": "ReactNode",
          "required": false,
          "description": "Provide an optional description for the Banner. This should provide\nsupplemental information about the Banner",
          "defaultValue": ""
        },
        {
          "name": "hideTitle",
          "type": "boolean",
          "required": false,
          "description": "Specify whether the title of the Banner should be visible or not.",
          "defaultValue": ""
        },
        {
          "name": "icon",
          "type": "ReactNode",
          "required": false,
          "description": "Provide a custom icon for the Banner. This is only available when `variant` is `info` or `upsell`",
          "defaultValue": ""
        },
        {
          "name": "onDismiss",
          "type": "() => void",
          "required": false,
          "description": "Optionally provide a handler to be called when the banner is dismissed.\nProviding this prop will show a dismiss button.\n\nNote: This is not available for critical banners.",
          "defaultValue": ""
        },
        {
          "name": "primaryAction",
          "type": "ReactNode",
          "required": false,
          "description": "Provide an optional primary action for the Banner.",
          "defaultValue": ""
        },
        {
          "name": "secondaryAction",
          "type": "ReactNode",
          "required": false,
          "description": "Provide an optional secondary action for the Banner",
          "defaultValue": ""
        },
        {
          "name": "title",
          "type": "string | string & ReactElement<any, string | JSXElementConstructor<any>> | string & Iterable<ReactNode> | string & ReactPortal",
          "required": false,
          "description": "The title for the Banner. This will be used as the accessible name and is\nrequired unless `Banner.Title` is used as a child.",
          "defaultValue": ""
        },
        {
          "name": "variant",
          "type": "\"success\" | \"critical\" | \"info\" | \"upsell\" | \"warning\"",
          "required": false,
          "description": "Specify the type of the Banner",
          "defaultValue": "info"
        }
      ],
      "subcomponents": [
        {
          "name": "Banner.Description",
          "props": [
            {
              "name": "className",
              "type": "string",
              "required": false,
              "description": "Class name(s) used for custom styling",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "Banner.PrimaryAction",
          "props": [
            {
              "name": "alignContent",
              "type": "\"center\" | \"start\"",
              "required": false,
              "description": "Content alignment for when visuals are present",
              "defaultValue": ""
            },
            {
              "name": "as",
              "type": "\"button\"",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "block",
              "type": "boolean",
              "required": false,
              "description": "Allow button width to fill its container.",
              "defaultValue": ""
            },
            {
              "name": "children",
              "type": "ReactNode",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "count",
              "type": "number",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "disabled",
              "type": "boolean",
              "required": false,
              "description": "Items that are disabled can not be clicked, selected, or navigated through.",
              "defaultValue": ""
            },
            {
              "name": "icon",
              "type": "null | \"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
              "required": false,
              "description": "The icon for the IconButton",
              "defaultValue": ""
            },
            {
              "name": "inactive",
              "type": "boolean",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "labelWrap",
              "type": "boolean",
              "required": false,
              "description": "Whether the button label should wrap to multiple lines of it is longer than the button width.",
              "defaultValue": ""
            },
            {
              "name": "leadingVisual",
              "type": "null | \"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
              "required": false,
              "description": "The leading visual which comes before the button content",
              "defaultValue": ""
            },
            {
              "name": "loading",
              "type": "boolean",
              "required": false,
              "description": "When true, the button is in a loading state.",
              "defaultValue": ""
            },
            {
              "name": "loadingAnnouncement",
              "type": "string",
              "required": false,
              "description": "The content to announce to screen readers when loading.",
              "defaultValue": ""
            },
            {
              "name": "size",
              "type": "\"small\" | \"large\" | \"medium\"",
              "required": false,
              "description": "Size of button and fontSize of text in button",
              "defaultValue": ""
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            },
            {
              "name": "trailingAction",
              "type": "null | \"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
              "required": false,
              "description": "Trailing action appears to the right of the trailing visual and is always locked to the end",
              "defaultValue": ""
            },
            {
              "name": "trailingVisual",
              "type": "null | \"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
              "required": false,
              "description": "The trailing visual which comes after the button content",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "Banner.SecondaryAction",
          "props": [
            {
              "name": "alignContent",
              "type": "\"center\" | \"start\"",
              "required": false,
              "description": "Content alignment for when visuals are present",
              "defaultValue": ""
            },
            {
              "name": "as",
              "type": "\"button\"",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "block",
              "type": "boolean",
              "required": false,
              "description": "Allow button width to fill its container.",
              "defaultValue": ""
            },
            {
              "name": "children",
              "type": "ReactNode",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "count",
              "type": "number",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "disabled",
              "type": "boolean",
              "required": false,
              "description": "Items that are disabled can not be clicked, selected, or navigated through.",
              "defaultValue": ""
            },
            {
              "name": "icon",
              "type": "null | \"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
              "required": false,
              "description": "The icon for the IconButton",
              "defaultValue": ""
            },
            {
              "name": "inactive",
              "type": "boolean",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "labelWrap",
              "type": "boolean",
              "required": false,
              "description": "Whether the button label should wrap to multiple lines of it is longer than the button width.",
              "defaultValue": ""
            },
            {
              "name": "leadingVisual",
              "type": "null | \"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
              "required": false,
              "description": "The leading visual which comes before the button content",
              "defaultValue": ""
            },
            {
              "name": "loading",
              "type": "boolean",
              "required": false,
              "description": "When true, the button is in a loading state.",
              "defaultValue": ""
            },
            {
              "name": "loadingAnnouncement",
              "type": "string",
              "required": false,
              "description": "The content to announce to screen readers when loading.",
              "defaultValue": ""
            },
            {
              "name": "size",
              "type": "\"small\" | \"large\" | \"medium\"",
              "required": false,
              "description": "Size of button and fontSize of text in button",
              "defaultValue": ""
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            },
            {
              "name": "trailingAction",
              "type": "null | \"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
              "required": false,
              "description": "Trailing action appears to the right of the trailing visual and is always locked to the end",
              "defaultValue": ""
            },
            {
              "name": "trailingVisual",
              "type": "null | \"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
              "required": false,
              "description": "The trailing visual which comes after the button content",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "Banner.Title",
          "props": [
            {
              "name": "as",
              "type": "\"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\"",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "className",
              "type": "string",
              "required": false,
              "description": "",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    "blankslate": {
      "id": "blankslate",
      "name": "Blankslate",
      "status": "draft",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "drafts-components-blankslate--default",
          "code": "() => (\n  <Blankslate>\n    <Blankslate.Visual>\n      <BookIcon size=\"medium\" />\n    </Blankslate.Visual>\n    <Blankslate.Heading>Welcome to the mona wiki!</Blankslate.Heading>\n    <Blankslate.Description>\n      Wikis provide a place in your repository to lay out the roadmap of your\n      project, show the current status, and document software better, together.\n    </Blankslate.Description>\n    <Blankslate.PrimaryAction href=\"#\">\n      Create the first page\n    </Blankslate.PrimaryAction>\n    <Blankslate.SecondaryAction href=\"#\">\n      Learn more about wikis\n    </Blankslate.SecondaryAction>\n  </Blankslate>\n)"
        },
        {
          "id": "drafts-components-blankslate-features--with-visual",
          "code": "() => (\n  <Blankslate>\n    <Blankslate.Visual>\n      <BookIcon size=\"medium\" />\n    </Blankslate.Visual>\n    <Blankslate.Heading>Blankslate heading</Blankslate.Heading>\n    <Blankslate.Description>\n      Use it to provide information when no dynamic content exists.\n    </Blankslate.Description>\n  </Blankslate>\n)"
        },
        {
          "id": "drafts-components-blankslate-features--with-primary-action",
          "code": "() => (\n  <Blankslate>\n    <Blankslate.Visual>\n      <BookIcon size=\"medium\" />\n    </Blankslate.Visual>\n    <Blankslate.Heading>Blankslate heading</Blankslate.Heading>\n    <Blankslate.Description>\n      Use it to provide information when no dynamic content exists.\n    </Blankslate.Description>\n    <Blankslate.PrimaryAction href=\"#\">Primary action</Blankslate.PrimaryAction>\n  </Blankslate>\n)"
        },
        {
          "id": "drafts-components-blankslate-features--with-secondary-action",
          "code": "() => (\n  <Blankslate>\n    <Blankslate.Visual>\n      <BookIcon size=\"medium\" />\n    </Blankslate.Visual>\n    <Blankslate.Heading>Blankslate heading</Blankslate.Heading>\n    <Blankslate.Description>\n      Use it to provide information when no dynamic content exists.\n    </Blankslate.Description>\n    <Blankslate.SecondaryAction href=\"#\">\n      Secondary action\n    </Blankslate.SecondaryAction>\n  </Blankslate>\n)"
        },
        {
          "id": "drafts-components-blankslate-features--with-border",
          "code": "() => (\n  <Blankslate border>\n    <Blankslate.Visual>\n      <BookIcon size=\"medium\" />\n    </Blankslate.Visual>\n    <Blankslate.Heading>Blankslate heading</Blankslate.Heading>\n    <Blankslate.Description>\n      Use it to provide information when no dynamic content exists.\n    </Blankslate.Description>\n  </Blankslate>\n)"
        },
        {
          "id": "drafts-components-blankslate-features--narrow",
          "code": "() => (\n  <Blankslate narrow>\n    <Blankslate.Visual>\n      <BookIcon size=\"medium\" />\n    </Blankslate.Visual>\n    <Blankslate.Heading>Blankslate heading</Blankslate.Heading>\n    <Blankslate.Description>\n      Use it to provide information when no dynamic content exists.\n    </Blankslate.Description>\n  </Blankslate>\n)"
        },
        {
          "id": "drafts-components-blankslate-features--spacious",
          "code": "() => (\n  <Blankslate spacious>\n    <Blankslate.Visual>\n      <BookIcon size=\"medium\" />\n    </Blankslate.Visual>\n    <Blankslate.Heading>Blankslate heading</Blankslate.Heading>\n    <Blankslate.Description>\n      Use it to provide information when no dynamic content exists.\n    </Blankslate.Description>\n  </Blankslate>\n)"
        }
      ],
      "importPath": "@primer/react/drafts",
      "props": [
        {
          "name": "border",
          "type": "boolean",
          "required": false,
          "description": "Add a border around this component",
          "defaultValue": ""
        },
        {
          "name": "className",
          "type": "string",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "narrow",
          "type": "boolean",
          "required": false,
          "description": "Constrain the maximum width of this component",
          "defaultValue": ""
        },
        {
          "name": "spacious",
          "type": "boolean",
          "required": false,
          "description": "Increase the padding of this component",
          "defaultValue": ""
        }
      ],
      "subcomponents": [
        {
          "name": "Blankslate.Description",
          "props": []
        },
        {
          "name": "Blankslate.Heading",
          "props": [
            {
              "name": "as",
              "type": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\"",
              "required": false,
              "description": "",
              "defaultValue": "h2"
            }
          ]
        },
        {
          "name": "Blankslate.PrimaryAction",
          "props": [
            {
              "name": "href",
              "type": "string",
              "required": true,
              "description": "Link to complete primary action",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "Blankslate.SecondaryAction",
          "props": [
            {
              "name": "href",
              "type": "string",
              "required": true,
              "description": "Link to complete secondary action",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "Blankslate.Visual",
          "props": []
        }
      ]
    },
    "box": {
      "id": "box",
      "name": "Box",
      "status": "beta",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-box--default",
          "code": "() => <Box>Default Box</Box>"
        },
        {
          "id": "components-box-features--border",
          "code": "() => (\n  <Box\n    sx={{\n      borderWidth: 1,\n      borderStyle: 'solid',\n      borderColor: 'border.default',\n      p: 3,\n    }}\n  >\n    Box with border\n  </Box>\n)"
        },
        {
          "id": "components-box-features--border-bottom",
          "code": "() => (\n  <Box\n    sx={{\n      borderBottomWidth: 1,\n      borderBottomStyle: 'solid',\n      borderColor: 'border.default',\n      p: 3,\n    }}\n  >\n    Box with bottom border\n  </Box>\n)"
        },
        {
          "id": "components-box-features--flexbox",
          "code": "() => (\n  <Box\n    sx={{\n      display: 'flex',\n    }}\n  >\n    <Box\n      sx={{\n        p: 3,\n        borderWidth: 1,\n        borderStyle: 'solid',\n        borderColor: 'border.default',\n      }}\n    >\n      1\n    </Box>\n    <Box\n      sx={{\n        flexGrow: 1,\n        p: 3,\n        borderWidth: 1,\n        borderStyle: 'solid',\n        borderColor: 'border.default',\n      }}\n    >\n      2\n    </Box>\n    <Box\n      sx={{\n        p: 3,\n        borderWidth: 1,\n        borderStyle: 'solid',\n        borderColor: 'border.default',\n      }}\n    >\n      3\n    </Box>\n  </Box>\n)"
        },
        {
          "id": "components-box-features--grid",
          "code": "() => (\n  <Box\n    sx={{\n      display: 'grid',\n      gridTemplateColumns: '1fr 1fr',\n      gap: 3,\n    }}\n  >\n    <Box\n      sx={{\n        p: 3,\n        borderWidth: 1,\n        borderStyle: 'solid',\n        borderColor: 'border.default',\n      }}\n    >\n      1\n    </Box>\n    <Box\n      sx={{\n        p: 3,\n        borderWidth: 1,\n        borderStyle: 'solid',\n        borderColor: 'border.default',\n      }}\n    >\n      2\n    </Box>\n    <Box\n      sx={{\n        p: 3,\n        borderWidth: 1,\n        borderStyle: 'solid',\n        borderColor: 'border.default',\n      }}\n    >\n      3\n    </Box>\n  </Box>\n)"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "branch_name": {
      "id": "branch_name",
      "name": "BranchName",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-branchname--default",
          "code": "() => <BranchName href=\"#\">branch_name</BranchName>"
        },
        {
          "id": "components-branchname-features--with-branch-icon",
          "code": "() => (\n  <BranchName href=\"#\">\n    <Stack direction=\"horizontal\" gap=\"condensed\" align=\"center\">\n      <Octicon icon={GitBranchIcon} />\n      branch_name\n    </Stack>\n  </BranchName>\n)"
        },
        {
          "id": "components-branchname-features--not-a-link",
          "code": "() => <BranchName as=\"span\">branch_name_as_span</BranchName>"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "breadcrumbs": {
      "id": "breadcrumbs",
      "name": "Breadcrumbs",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-breadcrumbs--default",
          "code": "() => (\n  <Breadcrumbs>\n    <Breadcrumbs.Item href=\"#\">Home</Breadcrumbs.Item>\n    <Breadcrumbs.Item href=\"#\">About</Breadcrumbs.Item>\n    <Breadcrumbs.Item href=\"#\" selected>\n      Team\n    </Breadcrumbs.Item>\n  </Breadcrumbs>\n)"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "className",
          "type": "string",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        }
      ],
      "subcomponents": [
        {
          "name": "Breadcrumbs.Item",
          "props": [
            {
              "name": "selected",
              "type": "boolean",
              "required": false,
              "description": "Whether this item represents the current page",
              "defaultValue": ""
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            },
            {
              "name": "to",
              "type": "string | Partial<Path>",
              "required": false,
              "description": "Used when the item is rendered using a component like React Router's `Link`. The path to navigate to.",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    "button": {
      "id": "button",
      "name": "Button",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-button--default",
          "code": "() => <Button>Default</Button>"
        },
        {
          "id": "components-button-features--primary",
          "code": "() => <Button variant=\"primary\">Primary</Button>"
        },
        {
          "id": "components-button-features--danger",
          "code": "() => <Button variant=\"danger\">Danger</Button>"
        },
        {
          "id": "components-button-features--invisible",
          "code": "() => <Button variant=\"invisible\">Invisible</Button>"
        },
        {
          "id": "components-button-features--link",
          "code": "() => <Button variant=\"link\">Button that looks like a link</Button>"
        },
        {
          "id": "components-button-features--leading-visual",
          "code": "() => <Button leadingVisual={HeartIcon}>Leading visual</Button>"
        },
        {
          "id": "components-button-features--trailing-visual",
          "code": "() => <Button trailingVisual={EyeIcon}>Trailing visual</Button>"
        },
        {
          "id": "components-button-features--trailing-counter",
          "code": "() => {\n  const [count, setCount] = useState(0)\n  const onClick = () => {\n    setCount(count + 1)\n    announce(`Watch ${count + 1}`)\n  }\n  return (\n    <>\n      <Button onClick={onClick} count={count}>\n        Watch\n      </Button>\n      <AccessibilityNote />\n      <p>\n        In this example, a live region has been implemented to communicate the\n        change.\n      </p>\n    </>\n  )\n}"
        },
        {
          "id": "components-button-features--trailing-counter-with-no-text",
          "code": "() => {\n  return <Button leadingVisual={CommentIcon} count={3} />\n}"
        },
        {
          "id": "components-button-features--trailing-counter-all-variants",
          "code": "() => {\n  const [count, setCount] = useState(0)\n  const onClick = () => {\n    setCount(count + 1)\n    announce(`Watch ${count + 1}`)\n  }\n  return (\n    <>\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n          gap: '1rem',\n        }}\n      >\n        <Button onClick={onClick} count={count}>\n          Watch\n        </Button>\n        <Button onClick={onClick} count={count}>\n          Watch\n        </Button>\n        <Button onClick={onClick} count={count}>\n          Watch\n        </Button>\n        <Button onClick={onClick} variant=\"primary\" disabled count={count}>\n          Watch\n        </Button>\n        <Button onClick={onClick} variant=\"danger\" count={count}>\n          Watch\n        </Button>\n        <Button onClick={onClick} variant=\"danger\" disabled count={count}>\n          Watch\n        </Button>\n        <Button onClick={onClick} variant=\"invisible\" count={count}>\n          Watch\n        </Button>\n        <Button onClick={onClick} variant=\"invisible\" disabled count={count}>\n          Watch\n        </Button>\n      </div>\n      <AccessibilityNote />\n      <p>\n        In these examples, a live region has been implemented to communicate the\n        change.\n      </p>\n    </>\n  )\n}"
        },
        {
          "id": "components-button-features--trailing-action",
          "code": "() => <Button trailingAction={TriangleDownIcon}>Trailing action</Button>"
        },
        {
          "id": "components-button-features--block",
          "code": "() => <Button block>Default</Button>"
        },
        {
          "id": "components-button-features--disabled",
          "code": "() => (\n  <div\n    style={{\n      display: 'flex',\n      flexDirection: 'row',\n      gap: '1rem',\n    }}\n  >\n    <Button disabled>Default</Button>\n    <Button variant=\"primary\" disabled>\n      Primary\n    </Button>\n    <Button variant=\"danger\" disabled>\n      Danger\n    </Button>\n    <Button variant=\"invisible\" disabled>\n      Invisible\n    </Button>\n  </div>\n)"
        },
        {
          "id": "components-button-features--inactive",
          "code": "() => (\n  <div\n    style={{\n      display: 'flex',\n      flexDirection: 'row',\n      gap: '1rem',\n    }}\n  >\n    <Button inactive>Default</Button>\n    <Button variant=\"primary\" inactive>\n      Primary\n    </Button>\n    <Button variant=\"danger\" inactive>\n      Danger\n    </Button>\n    <Button variant=\"invisible\" inactive>\n      Invisible\n    </Button>\n  </div>\n)"
        },
        {
          "id": "components-button-features--small",
          "code": "() => <Button size=\"small\">Default</Button>"
        },
        {
          "id": "components-button-features--medium",
          "code": "() => <Button size=\"medium\">Default</Button>"
        },
        {
          "id": "components-button-features--large",
          "code": "() => <Button size=\"large\">Default</Button>"
        },
        {
          "id": "components-button-features--loading",
          "code": "() => <Button loading>Default</Button>"
        },
        {
          "id": "components-button-features--loading-custom-announcement",
          "code": "() => (\n  <Button loading loadingAnnouncement=\"This is a custom loading announcement\">\n    Default\n  </Button>\n)"
        },
        {
          "id": "components-button-features--loading-with-leading-visual",
          "code": "() => (\n  <Button loading leadingVisual={DownloadIcon}>\n    Export\n  </Button>\n)"
        },
        {
          "id": "components-button-features--loading-with-trailing-visual",
          "code": "() => (\n  <Button loading trailingVisual={DownloadIcon}>\n    Export\n  </Button>\n)"
        },
        {
          "id": "components-button-features--loading-with-trailing-action",
          "code": "() => (\n  <Button loading trailingAction={TriangleDownIcon}>\n    Export dropdown\n  </Button>\n)"
        },
        {
          "id": "components-button-features--loading-trigger",
          "code": "() => {\n  const [isLoading, setIsLoading] = useState(false)\n  const handleClick = () => {\n    setIsLoading(true)\n  }\n  return (\n    <Button\n      loading={isLoading}\n      onClick={handleClick}\n      leadingVisual={DownloadIcon}\n    >\n      Export\n    </Button>\n  )\n}"
        },
        {
          "id": "components-button-features--label-wrap",
          "code": "() => {\n  return (\n    <Stack\n      style={{\n        width: '200px',\n      }}\n    >\n      <Button labelWrap>\n        This button label will wrap if the label is too long\n      </Button>\n      <Button size=\"small\" labelWrap>\n        This small button label will wrap if the label is too long\n      </Button>\n      <Button size=\"large\" labelWrap>\n        This large button label will wrap if the label is too long\n      </Button>\n      <Button labelWrap leadingVisual={HeartIcon} trailingVisual={EyeIcon}>\n        This button label will wrap if the label is too long\n      </Button>\n      <Button labelWrap trailingAction={TriangleDownIcon}>\n        This button label will wrap if the label is too long\n      </Button>\n    </Stack>\n  )\n}"
        },
        {
          "id": "components-button-features--inactive-button-with-tooltip",
          "code": "() => (\n  <Tooltip\n    text=\"Action unavailable: an error occured while loading respository permissions\"\n    direction=\"n\"\n  >\n    <Button inactive>Review changes</Button>\n  </Tooltip>\n)"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "as",
          "type": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<unknown, any> | FunctionComponent<unknown>",
          "required": true,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "alignContent",
          "type": "\"center\" | \"start\"",
          "required": false,
          "description": "Content alignment for when visuals are present",
          "defaultValue": ""
        },
        {
          "name": "block",
          "type": "boolean",
          "required": false,
          "description": "Allow button width to fill its container.",
          "defaultValue": ""
        },
        {
          "name": "children",
          "type": "ReactNode",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "count",
          "type": "number",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "required": false,
          "description": "Items that are disabled can not be clicked, selected, or navigated through.",
          "defaultValue": ""
        },
        {
          "name": "icon",
          "type": "null | \"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
          "required": false,
          "description": "The icon for the IconButton",
          "defaultValue": ""
        },
        {
          "name": "inactive",
          "type": "boolean",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "labelWrap",
          "type": "boolean",
          "required": false,
          "description": "Whether the button label should wrap to multiple lines of it is longer than the button width.",
          "defaultValue": ""
        },
        {
          "name": "leadingVisual",
          "type": "null | \"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
          "required": false,
          "description": "The leading visual which comes before the button content",
          "defaultValue": ""
        },
        {
          "name": "loading",
          "type": "boolean",
          "required": false,
          "description": "When true, the button is in a loading state.",
          "defaultValue": ""
        },
        {
          "name": "loadingAnnouncement",
          "type": "string",
          "required": false,
          "description": "The content to announce to screen readers when loading.",
          "defaultValue": ""
        },
        {
          "name": "size",
          "type": "\"small\" | \"large\" | \"medium\"",
          "required": false,
          "description": "Size of button and fontSize of text in button",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        },
        {
          "name": "trailingAction",
          "type": "null | \"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
          "required": false,
          "description": "Trailing action appears to the right of the trailing visual and is always locked to the end",
          "defaultValue": ""
        },
        {
          "name": "trailingVisual",
          "type": "null | \"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
          "required": false,
          "description": "The trailing visual which comes after the button content",
          "defaultValue": ""
        },
        {
          "name": "variant",
          "type": "\"link\" | \"default\" | \"danger\" | \"primary\" | \"invisible\"",
          "required": false,
          "description": "Determine's the styles on a button one of 'default' | 'primary' | 'invisible' | 'danger'",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "icon_button": {
      "id": "icon_button",
      "name": "IconButton",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-iconbutton--default",
          "code": "() => <IconButton icon={HeartIcon} aria-label=\"Favorite\" />"
        },
        {
          "id": "components-iconbutton-features--primary",
          "code": "() => <IconButton icon={HeartIcon} variant=\"primary\" aria-label=\"Favorite\" />"
        },
        {
          "id": "components-iconbutton-features--danger",
          "code": "() => <IconButton icon={HeartIcon} variant=\"danger\" aria-label=\"Favorite\" />"
        },
        {
          "id": "components-iconbutton-features--invisible",
          "code": "() => <IconButton icon={HeartIcon} variant=\"invisible\" aria-label=\"Favorite\" />"
        },
        {
          "id": "components-iconbutton-features--disabled",
          "code": "() => <IconButton disabled icon={HeartIcon} aria-label=\"Favorite\" />"
        },
        {
          "id": "components-iconbutton-features--small",
          "code": "() => <IconButton size=\"small\" icon={HeartIcon} aria-label=\"Favorite\" />"
        },
        {
          "id": "components-iconbutton-features--medium",
          "code": "() => <IconButton size=\"medium\" icon={HeartIcon} aria-label=\"Favorite\" />"
        },
        {
          "id": "components-iconbutton-features--large",
          "code": "() => <IconButton size=\"large\" icon={HeartIcon} aria-label=\"Favorite\" />"
        },
        {
          "id": "components-iconbutton-features--with-description",
          "code": "() => (\n  <IconButton\n    icon={InboxIcon}\n    aria-label=\"Notifications\"\n    description=\"You have no unread notifications.\"\n  />\n)"
        },
        {
          "id": "components-iconbutton-features--external-tooltip",
          "code": "() => (\n  <Tooltip\n    text=\"this is a supportive description for icon button\"\n    direction=\"se\"\n  >\n    <IconButton icon={HeartIcon} aria-label=\"HeartIcon\" />\n  </Tooltip>\n)"
        },
        {
          "id": "components-iconbutton-features--external-tooltip-version1",
          "code": "() => (\n  <TooltipV1\n    text=\"this is a supportive description for icon button\"\n    direction=\"se\"\n  >\n    <IconButton icon={HeartIcon} aria-label=\"HeartIcon\" />\n  </TooltipV1>\n)"
        },
        {
          "id": "components-iconbutton-features--as-a-menu-anchor",
          "code": "() => (\n  <ActionMenu>\n    <ActionMenu.Anchor>\n      <IconButton icon={ChevronDownIcon} aria-label=\"Something\" />\n    </ActionMenu.Anchor>\n\n    <ActionMenu.Overlay width=\"medium\">\n      <ActionList>\n        <ActionList.Item onSelect={() => alert('Copy link clicked')}>\n          Copy link\n          <ActionList.TrailingVisual>⌘C</ActionList.TrailingVisual>\n        </ActionList.Item>\n        <ActionList.Item onSelect={() => alert('Quote reply clicked')}>\n          Quote reply\n          <ActionList.TrailingVisual>⌘Q</ActionList.TrailingVisual>\n        </ActionList.Item>\n        <ActionList.Item onSelect={() => alert('Edit comment clicked')}>\n          Edit comment\n          <ActionList.TrailingVisual>⌘E</ActionList.TrailingVisual>\n        </ActionList.Item>\n        <ActionList.Divider />\n        <ActionList.Item\n          variant=\"danger\"\n          onSelect={() => alert('Delete file clicked')}\n        >\n          Delete file\n          <ActionList.TrailingVisual>⌘D</ActionList.TrailingVisual>\n        </ActionList.Item>\n      </ActionList>\n    </ActionMenu.Overlay>\n  </ActionMenu>\n)"
        },
        {
          "id": "components-iconbutton-features--loading",
          "code": "() => (\n  <IconButton loading icon={HeartIcon} variant=\"primary\" aria-label=\"Primary\" />\n)"
        },
        {
          "id": "components-iconbutton-features--loading-trigger",
          "code": "() => {\n  const [isLoading, setIsLoading] = useState(false)\n  const handleClick = () => {\n    setIsLoading(true)\n    setTimeout(() => {\n      setIsLoading(false)\n    }, 3000)\n  }\n  return (\n    <IconButton\n      loading={isLoading}\n      onClick={handleClick}\n      icon={DownloadIcon}\n      aria-label=\"Download\"\n    />\n  )\n}"
        },
        {
          "id": "components-iconbutton-features--keyshortcuts-on-description",
          "code": "() => (\n  <IconButton\n    icon={InboxIcon}\n    aria-label=\"Notifications\"\n    description=\"You have unread notifications\"\n    keyshortcuts=\"G+N\"\n  />\n)"
        },
        {
          "id": "components-iconbutton-features--keyshortcuts",
          "code": "() => <IconButton icon={BoldIcon} aria-label=\"Bold\" keyshortcuts=\"Command+B\" />"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "as",
          "type": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<unknown, any> | FunctionComponent<unknown>",
          "required": true,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "icon",
          "type": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
          "required": true,
          "description": "Provide an octicon. It will be placed in the center of the button",
          "defaultValue": ""
        },
        {
          "name": "aria-label",
          "type": "string",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "aria-labelledby",
          "type": "string",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "block",
          "type": "boolean",
          "required": false,
          "description": "Allow button width to fill its container.",
          "defaultValue": ""
        },
        {
          "name": "description",
          "type": "string",
          "required": false,
          "description": "If `description` is provided, we will use a Tooltip to describe the button. Then `aria-label` is used to label the button.",
          "defaultValue": ""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "required": false,
          "description": "Items that are disabled can not be clicked, selected, or navigated through.",
          "defaultValue": ""
        },
        {
          "name": "inactive",
          "type": "boolean",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "keyshortcuts",
          "type": "string",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "labelWrap",
          "type": "boolean",
          "required": false,
          "description": "Whether the button label should wrap to multiple lines of it is longer than the button width.",
          "defaultValue": ""
        },
        {
          "name": "loading",
          "type": "boolean",
          "required": false,
          "description": "When true, the button is in a loading state.",
          "defaultValue": ""
        },
        {
          "name": "loadingAnnouncement",
          "type": "string",
          "required": false,
          "description": "The content to announce to screen readers when loading.",
          "defaultValue": ""
        },
        {
          "name": "size",
          "type": "\"small\" | \"large\" | \"medium\"",
          "required": false,
          "description": "Size of button and fontSize of text in button",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        },
        {
          "name": "tooltipDirection",
          "type": "\"s\" | \"nw\" | \"n\" | \"ne\" | \"e\" | \"se\" | \"sw\" | \"w\"",
          "required": false,
          "description": "Sets where the tooltip renders in relation to the target.",
          "defaultValue": ""
        },
        {
          "name": "unsafeDisableTooltip",
          "type": "boolean",
          "required": false,
          "description": "Do not use. This is planned to be a temporary prop until the default tooltip on icon buttons are fully rolled out.",
          "defaultValue": ""
        },
        {
          "name": "variant",
          "type": "\"link\" | \"default\" | \"danger\" | \"primary\" | \"invisible\"",
          "required": false,
          "description": "Determine's the styles on a button one of 'default' | 'primary' | 'invisible' | 'danger'",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "link_button": {
      "id": "link_button",
      "name": "LinkButton",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-linkbutton--default",
          "code": "() => (\n  <Button as=\"a\" href=\"/\">\n    Default\n  </Button>\n)"
        },
        {
          "id": "components-linkbutton-features--primary",
          "code": "() => (\n  <Button as=\"a\" href=\"/\" variant=\"primary\">\n    Primary\n  </Button>\n)"
        },
        {
          "id": "components-linkbutton-features--danger",
          "code": "() => (\n  <Button as=\"a\" href=\"/\" variant=\"danger\">\n    Danger\n  </Button>\n)"
        },
        {
          "id": "components-linkbutton-features--invisible",
          "code": "() => (\n  <Button as=\"a\" href=\"/\" variant=\"invisible\">\n    Invisible\n  </Button>\n)"
        },
        {
          "id": "components-linkbutton-features--leading-visual",
          "code": "() => (\n  <Button as=\"a\" href=\"/\" leadingVisual={HeartIcon}>\n    Leading visual\n  </Button>\n)"
        },
        {
          "id": "components-linkbutton-features--trailing-visual",
          "code": "() => (\n  <Button as=\"a\" href=\"/\" trailingVisual={EyeIcon}>\n    Trailing visual\n  </Button>\n)"
        },
        {
          "id": "components-linkbutton-features--trailing-action",
          "code": "() => (\n  <Button as=\"a\" href=\"/\" trailingAction={ChevronRightIcon}>\n    Trailing action\n  </Button>\n)"
        },
        {
          "id": "components-linkbutton-features--block",
          "code": "() => (\n  <Button as=\"a\" href=\"/\" block>\n    Default\n  </Button>\n)"
        },
        {
          "id": "components-linkbutton-features--small",
          "code": "() => (\n  <Button as=\"a\" href=\"/\" size=\"small\">\n    Default\n  </Button>\n)"
        },
        {
          "id": "components-linkbutton-features--medium",
          "code": "() => (\n  <Button as=\"a\" href=\"/\" size=\"medium\">\n    Default\n  </Button>\n)"
        },
        {
          "id": "components-linkbutton-features--large",
          "code": "() => (\n  <Button as=\"a\" href=\"/\" size=\"large\">\n    Default\n  </Button>\n)"
        },
        {
          "id": "components-linkbutton-features--with-react-router",
          "code": "() => (\n  <Button to=\"/dummy\" as={ReactRouterLikeLink}>\n    Default\n  </Button>\n)"
        },
        {
          "id": "components-linkbutton-features--loading",
          "code": "() => <Button loading>Default</Button>"
        },
        {
          "id": "components-linkbutton-features--loading-custom-announcement",
          "code": "() => (\n  <Button\n    as=\"a\"\n    href=\"/\"\n    loading\n    loadingAnnouncement=\"This is a custom loading announcement\"\n  >\n    Default\n  </Button>\n)"
        },
        {
          "id": "components-linkbutton-features--loading-with-leading-visual",
          "code": "() => (\n  <Button as=\"a\" href=\"/\" loading leadingVisual={DownloadIcon}>\n    Export\n  </Button>\n)"
        },
        {
          "id": "components-linkbutton-features--loading-with-trailing-visual",
          "code": "() => (\n  <Button as=\"a\" href=\"/\" loading trailingVisual={DownloadIcon}>\n    Export\n  </Button>\n)"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "alignContent",
          "type": "\"center\" | \"start\"",
          "required": false,
          "description": "Content alignment for when visuals are present",
          "defaultValue": ""
        },
        {
          "name": "as",
          "type": "\"a\" | \"button\" | \"button\" & ComponentClass<unknown, any> | \"button\" & FunctionComponent<unknown> | \"a\" & ComponentClass<unknown, any> | \"a\" & FunctionComponent<unknown>",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "block",
          "type": "boolean",
          "required": false,
          "description": "Allow button width to fill its container.",
          "defaultValue": ""
        },
        {
          "name": "children",
          "type": "ReactNode",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "count",
          "type": "number",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "required": false,
          "description": "Items that are disabled can not be clicked, selected, or navigated through.",
          "defaultValue": ""
        },
        {
          "name": "download",
          "type": "string",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "href",
          "type": "string",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "hrefLang",
          "type": "string",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "icon",
          "type": "null | \"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
          "required": false,
          "description": "The icon for the IconButton",
          "defaultValue": ""
        },
        {
          "name": "inactive",
          "type": "boolean",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "labelWrap",
          "type": "boolean",
          "required": false,
          "description": "Whether the button label should wrap to multiple lines of it is longer than the button width.",
          "defaultValue": ""
        },
        {
          "name": "leadingVisual",
          "type": "null | \"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
          "required": false,
          "description": "The leading visual which comes before the button content",
          "defaultValue": ""
        },
        {
          "name": "loading",
          "type": "boolean",
          "required": false,
          "description": "When true, the button is in a loading state.",
          "defaultValue": ""
        },
        {
          "name": "loadingAnnouncement",
          "type": "string",
          "required": false,
          "description": "The content to announce to screen readers when loading.",
          "defaultValue": ""
        },
        {
          "name": "media",
          "type": "string",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "ping",
          "type": "string",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "referrerPolicy",
          "type": "\"\" | \"origin\" | \"no-referrer\" | \"no-referrer-when-downgrade\" | \"origin-when-cross-origin\" | \"same-origin\" | \"strict-origin\" | \"strict-origin-when-cross-origin\" | \"unsafe-url\"",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "rel",
          "type": "string",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "size",
          "type": "\"small\" | \"large\" | \"medium\"",
          "required": false,
          "description": "Size of button and fontSize of text in button",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        },
        {
          "name": "target",
          "type": "string",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "trailingAction",
          "type": "null | \"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
          "required": false,
          "description": "Trailing action appears to the right of the trailing visual and is always locked to the end",
          "defaultValue": ""
        },
        {
          "name": "trailingVisual",
          "type": "null | \"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
          "required": false,
          "description": "The trailing visual which comes after the button content",
          "defaultValue": ""
        },
        {
          "name": "type",
          "type": "\"button\" | \"reset\" | \"submit\"",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "underline",
          "type": "boolean",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "variant",
          "type": "\"link\" | \"default\" | \"danger\" | \"primary\" | \"invisible\"",
          "required": false,
          "description": "Determine's the styles on a button one of 'default' | 'primary' | 'invisible' | 'danger'",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "button_group": {
      "id": "button_group",
      "name": "ButtonGroup",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-buttongroup--default",
          "code": "() => (\n  <ButtonGroup>\n    <Button>Button 1</Button>\n    <Button>Button 2</Button>\n    <Button>Button 3</Button>\n  </ButtonGroup>\n)"
        },
        {
          "id": "components-buttongroup-features--icon-buttons",
          "code": "() => (\n  <ButtonGroup>\n    {/* We can remove these unsafe props after we resolve https://github.com/primer/react/issues/4129 */}\n    {/* eslint-disable-next-line primer-react/a11y-remove-disable-tooltip */}\n    <IconButton unsafeDisableTooltip={true} icon={PlusIcon} aria-label=\"Add\" />\n    {/* eslint-disable-next-line primer-react/a11y-remove-disable-tooltip */}\n    <IconButton\n      unsafeDisableTooltip={true}\n      icon={DashIcon}\n      aria-label=\"Subtract\"\n    />\n  </ButtonGroup>\n)"
        },
        {
          "id": "components-buttongroup-features--loading-buttons",
          "code": "() => {\n  const [isLoading, setIsLoading] = useState(false)\n  const handleClick = () => {\n    setIsLoading(true)\n  }\n  return (\n    <ButtonGroup>\n      <Button loading={isLoading} onClick={handleClick}>\n        Button 1\n      </Button>\n      <Button onClick={handleClick}>Button 2</Button>\n      <Button onClick={handleClick}>Button 3</Button>\n    </ButtonGroup>\n  )\n}"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "checkbox": {
      "id": "checkbox",
      "name": "Checkbox",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-checkbox--default",
          "code": "() => (\n  <Box as=\"form\">\n    <FormControl>\n      <Checkbox value=\"default\" />\n      <FormControl.Label>Default label</FormControl.Label>\n    </FormControl>\n  </Box>\n)"
        },
        {
          "id": "components-checkbox-features--with-leading-visual",
          "code": "() => {\n  return (\n    <Box as=\"form\">\n      <FormControl>\n        <FormControl.LeadingVisual>\n          <MarkGithubIcon />\n        </FormControl.LeadingVisual>\n        <Checkbox value=\"default\" />\n        <FormControl.Label>Default label</FormControl.Label>\n      </FormControl>\n    </Box>\n  )\n}"
        },
        {
          "id": "components-checkbox-features--disabled",
          "code": "() => {\n  return (\n    <Box as=\"form\">\n      <FormControl disabled>\n        <Checkbox value=\"default\" />\n        <FormControl.Label>Default label</FormControl.Label>\n      </FormControl>\n    </Box>\n  )\n}"
        },
        {
          "id": "components-checkbox-features--with-caption",
          "code": "() => {\n  return (\n    <Box as=\"form\">\n      <FormControl>\n        <Checkbox value=\"default\" />\n        <FormControl.Label>Default label</FormControl.Label>\n        <FormControl.Caption>This is a caption</FormControl.Caption>\n      </FormControl>\n    </Box>\n  )\n}"
        },
        {
          "id": "components-checkbox-features--indeterminate",
          "code": "() => (\n  <Box as=\"form\">\n    <FormControl>\n      <Checkbox value=\"default\" indeterminate />\n      <FormControl.Label>Default label</FormControl.Label>\n    </FormControl>\n  </Box>\n)"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "required": false,
          "description": "Apply inactive visual appearance to the checkbox",
          "defaultValue": ""
        },
        {
          "name": "indeterminate",
          "type": "boolean",
          "required": false,
          "description": "Apply indeterminate visual appearance to the checkbox",
          "defaultValue": ""
        },
        {
          "name": "required",
          "type": "boolean",
          "required": false,
          "description": "Indicates whether the checkbox must be checked",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        },
        {
          "name": "validationStatus",
          "type": "\"success\" | \"error\"",
          "required": false,
          "description": "Only used to inform ARIA attributes. Individual checkboxes do not have validation styles.",
          "defaultValue": ""
        },
        {
          "name": "value",
          "type": "string | string & readonly string[]",
          "required": false,
          "description": "A unique value that is never shown to the user.\nUsed during form submission and to identify which checkbox inputs are selected",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "checkbox_group": {
      "id": "checkbox_group",
      "name": "CheckboxGroup",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-checkboxgroup--default",
          "code": "() => (\n  <CheckboxGroup>\n    <CheckboxGroup.Label>Choices</CheckboxGroup.Label>\n    <FormControl>\n      <Checkbox value=\"one\" defaultChecked />\n      <FormControl.Label>Choice one</FormControl.Label>\n    </FormControl>\n    <FormControl>\n      <Checkbox value=\"two\" defaultChecked />\n      <FormControl.Label>Choice two</FormControl.Label>\n    </FormControl>\n    <FormControl>\n      <Checkbox value=\"three\" />\n      <FormControl.Label>Choice three</FormControl.Label>\n    </FormControl>\n  </CheckboxGroup>\n)"
        },
        {
          "id": "components-checkboxgroup-features--visually-hidden-label",
          "code": "() => (\n  <CheckboxGroup>\n    <CheckboxGroup.Label visuallyHidden>Choices</CheckboxGroup.Label>\n    <FormControl>\n      <Checkbox value=\"one\" defaultChecked />\n      <FormControl.Label>Choice one</FormControl.Label>\n    </FormControl>\n    <FormControl>\n      <Checkbox value=\"two\" defaultChecked />\n      <FormControl.Label>Choice two</FormControl.Label>\n    </FormControl>\n    <FormControl>\n      <Checkbox value=\"three\" />\n      <FormControl.Label>Choice three</FormControl.Label>\n    </FormControl>\n  </CheckboxGroup>\n)"
        },
        {
          "id": "components-checkboxgroup-features--with-external-label",
          "code": "() => (\n  <>\n    <Box\n      id=\"choiceHeading\"\n      borderBottomWidth=\"1px\"\n      borderBottomStyle=\"solid\"\n      borderBottomColor=\"border.default\"\n      pb={2}\n      mb={3}\n      fontSize={3}\n    >\n      External label\n    </Box>\n    <CheckboxGroup aria-labelledby=\"choiceHeading\">\n      <FormControl>\n        <Checkbox />\n        <FormControl.Label>Choice one</FormControl.Label>\n      </FormControl>\n      <FormControl>\n        <Checkbox />\n        <FormControl.Label>Choice two</FormControl.Label>\n      </FormControl>\n      <FormControl>\n        <Checkbox />\n        <FormControl.Label>Choice three</FormControl.Label>\n      </FormControl>\n    </CheckboxGroup>\n  </>\n)"
        },
        {
          "id": "components-checkboxgroup-features--error",
          "code": "() => (\n  <CheckboxGroup>\n    <CheckboxGroup.Label>Choices</CheckboxGroup.Label>\n    <FormControl>\n      <Checkbox value=\"one\" defaultChecked />\n      <FormControl.Label>Choice one</FormControl.Label>\n    </FormControl>\n    <FormControl>\n      <Checkbox value=\"two\" defaultChecked />\n      <FormControl.Label>Choice two</FormControl.Label>\n    </FormControl>\n    <FormControl>\n      <Checkbox value=\"three\" />\n      <FormControl.Label>Choice three</FormControl.Label>\n    </FormControl>\n    <CheckboxGroup.Validation variant=\"error\">\n      Something went wrong\n    </CheckboxGroup.Validation>\n  </CheckboxGroup>\n)"
        },
        {
          "id": "components-checkboxgroup-features--success",
          "code": "() => (\n  <CheckboxGroup>\n    <CheckboxGroup.Label>Choices</CheckboxGroup.Label>\n    <FormControl>\n      <Checkbox value=\"one\" defaultChecked />\n      <FormControl.Label>Choice one</FormControl.Label>\n    </FormControl>\n    <FormControl>\n      <Checkbox value=\"two\" defaultChecked />\n      <FormControl.Label>Choice two</FormControl.Label>\n    </FormControl>\n    <FormControl>\n      <Checkbox value=\"three\" />\n      <FormControl.Label>Choice three</FormControl.Label>\n    </FormControl>\n    <CheckboxGroup.Validation variant=\"success\">\n      Great job!\n    </CheckboxGroup.Validation>\n  </CheckboxGroup>\n)"
        },
        {
          "id": "components-checkboxgroup-features--caption",
          "code": "() => (\n  <CheckboxGroup>\n    <CheckboxGroup.Label>Choices</CheckboxGroup.Label>\n    <CheckboxGroup.Caption>Caption</CheckboxGroup.Caption>\n    <FormControl>\n      <Checkbox value=\"one\" defaultChecked />\n      <FormControl.Label>Choice one</FormControl.Label>\n    </FormControl>\n    <FormControl>\n      <Checkbox value=\"two\" defaultChecked />\n      <FormControl.Label>Choice two</FormControl.Label>\n    </FormControl>\n    <FormControl>\n      <Checkbox value=\"three\" />\n      <FormControl.Label>Choice three</FormControl.Label>\n    </FormControl>\n  </CheckboxGroup>\n)"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "aria-labelledby",
          "type": "string",
          "required": false,
          "description": "Used when associating the input group with a label other than `CheckboxOrRadioGroup.Label`",
          "defaultValue": ""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "required": false,
          "description": "Whether the input group allows user input",
          "defaultValue": ""
        },
        {
          "name": "id",
          "type": "string",
          "required": false,
          "description": "The unique identifier for this input group. Used to associate the label, validation text, and caption text.\nYou may want a custom ID to make it easier to select elements in integration tests.",
          "defaultValue": ""
        },
        {
          "name": "onChange",
          "type": "(selected: string[], e?: ChangeEvent<HTMLInputElement> | undefined) => void",
          "required": false,
          "description": "An onChange handler that gets called when any of the checkboxes change",
          "defaultValue": ""
        },
        {
          "name": "required",
          "type": "boolean",
          "required": false,
          "description": "If true, the user must make a selection before the owning form can be submitted",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        }
      ],
      "subcomponents": [
        {
          "name": "CheckboxGroup.Caption",
          "props": [
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "CheckboxGroup.Label",
          "props": [
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            },
            {
              "name": "visuallyHidden",
              "type": "boolean",
              "required": false,
              "description": "Whether to visually hide the fieldset legend",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "CheckboxGroup.Validation",
          "props": [
            {
              "name": "variant",
              "type": "\"success\" | \"error\"",
              "required": true,
              "description": "Changes the visual style to match the validation status",
              "defaultValue": ""
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    "circle_badge": {
      "id": "circle_badge",
      "name": "CircleBadge",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-circlebadge--default",
          "code": "() => (\n  <CircleBadge>\n    <CircleBadge.Icon icon={ZapIcon} aria-label=\"User badge\" />\n  </CircleBadge>\n)"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "inline",
          "type": "boolean",
          "required": false,
          "description": "Styles the badge to `display: inline`",
          "defaultValue": ""
        },
        {
          "name": "size",
          "type": "number",
          "required": false,
          "description": "Sets the size of the badge in pixels. Overrides the `variant` prop when set",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        },
        {
          "name": "variant",
          "type": "\"small\" | \"large\" | \"medium\"",
          "required": false,
          "description": "Creates a smaller or larger badge. Has no effect if the `size` prop is set",
          "defaultValue": "medium"
        }
      ],
      "subcomponents": [
        {
          "name": "CircleBadge.Icon",
          "props": [
            {
              "name": "icon",
              "type": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
              "required": true,
              "description": "Checks the input by default in uncontrolled modeName of the [Octicon component](https://primer.style/octicons/) used in the",
              "defaultValue": ""
            },
            {
              "name": "color",
              "type": "string",
              "required": false,
              "description": "Sets an override color for the Octicon. Compatible with colors from the [Primer color system](https://primer.style/primitives/colors).",
              "defaultValue": ""
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    "circle_octicon": {
      "id": "circle_octicon",
      "name": "CircleOcticon",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-circleocticon--default",
          "code": "() => (\n  <CircleOcticon\n    icon={CheckIcon}\n    size={32}\n    sx={{\n      backgroundColor: 'success.emphasis',\n      color: 'fg.onEmphasis',\n    }}\n    aria-label=\"Changes approved\"\n  />\n)"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "icon",
          "type": "ComponentClass<PropsWithChildren<{ size?: number | Size | undefined; }>, any> | FunctionComponent<PropsWithChildren<{ size?: number | Size | undefined; }>>",
          "required": true,
          "description": "The Octicon to render in the circle",
          "defaultValue": ""
        },
        {
          "name": "as",
          "type": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "size",
          "type": "number | number & (Height<TLengthStyledSystem> | null)[] | number & { [x: string]: Height<TLengthStyledSystem> | undefined; [x: number]: Height<TLengthStyledSystem> | undefined; }",
          "required": false,
          "description": "Set the width and height of the icon in pixels",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "counter_label": {
      "id": "counter_label",
      "name": "CounterLabel",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-counterlabel--default",
          "code": "() => <CounterLabel>12</CounterLabel>"
        },
        {
          "id": "components-counterlabel-features--primary-theme",
          "code": "() => <CounterLabel scheme=\"primary\">12</CounterLabel>"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "scheme",
          "type": "\"primary\" | \"secondary\"",
          "required": false,
          "description": "Pass in 'primary' for a darker background and inverse text, or 'secondary' for a lighter background and primary text. Omitting the scheme prop renders the default counter scheme",
          "defaultValue": "secondary"
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": "__DEV__\n  ? Object.freeze<BetterSystemStyleObject>({})\n  : {}"
        }
      ],
      "subcomponents": []
    },
    "data_table": {
      "id": "data_table",
      "name": "DataTable",
      "status": "draft",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "drafts-components-datatable--default",
          "code": "() => (\n  <Table.Container>\n    <Table.Title as=\"h2\" id=\"repositories\">\n      Repositories\n    </Table.Title>\n    <Table.Subtitle as=\"p\" id=\"repositories-subtitle\">\n      A subtitle could appear here to give extra context to the data.\n    </Table.Subtitle>\n    <DataTable\n      aria-labelledby=\"repositories\"\n      aria-describedby=\"repositories-subtitle\"\n      data={data}\n      columns={[\n        {\n          header: 'Repository',\n          field: 'name',\n          rowHeader: true,\n        },\n        {\n          header: 'Type',\n          field: 'type',\n          renderCell: (row) => {\n            return <Label>{uppercase(row.type)}</Label>\n          },\n        },\n        {\n          header: 'Updated',\n          field: 'updatedAt',\n          renderCell: (row) => {\n            return <RelativeTime date={new Date(row.updatedAt)} />\n          },\n        },\n        {\n          header: 'Dependabot',\n          field: 'securityFeatures.dependabot',\n          renderCell: (row) => {\n            return row.securityFeatures.dependabot.length > 0 ? (\n              <LabelGroup>\n                {row.securityFeatures.dependabot.map((feature) => {\n                  return <Label key={feature}>{uppercase(feature)}</Label>\n                })}\n              </LabelGroup>\n            ) : null\n          },\n        },\n        {\n          header: 'Code scanning',\n          field: 'securityFeatures.codeScanning',\n          renderCell: (row) => {\n            return row.securityFeatures.codeScanning.length > 0 ? (\n              <LabelGroup>\n                {row.securityFeatures.codeScanning.map((feature) => {\n                  return <Label key={feature}>{uppercase(feature)}</Label>\n                })}\n              </LabelGroup>\n            ) : null\n          },\n        },\n      ]}\n    />\n  </Table.Container>\n)"
        },
        {
          "id": "drafts-components-datatable-features--with-title",
          "code": "() => (\n  <Table.Container>\n    <Table.Title as=\"h2\" id=\"repositories\">\n      Repositories\n    </Table.Title>\n    <DataTable\n      aria-labelledby=\"repositories\"\n      aria-describedby=\"repositories-subtitle\"\n      data={data}\n      columns={[\n        {\n          header: 'Repository',\n          field: 'name',\n          rowHeader: true,\n        },\n        {\n          header: 'Type',\n          field: 'type',\n          renderCell: (row) => {\n            return <Label>{uppercase(row.type)}</Label>\n          },\n        },\n        {\n          header: 'Updated',\n          field: 'updatedAt',\n          renderCell: (row) => {\n            return <RelativeTime date={new Date(row.updatedAt)} />\n          },\n        },\n        {\n          header: 'Dependabot',\n          field: 'securityFeatures.dependabot',\n          renderCell: (row) => {\n            return row.securityFeatures.dependabot.length > 0 ? (\n              <LabelGroup>\n                {row.securityFeatures.dependabot.map((feature) => {\n                  return <Label key={feature}>{uppercase(feature)}</Label>\n                })}\n              </LabelGroup>\n            ) : null\n          },\n        },\n        {\n          header: 'Code scanning',\n          field: 'securityFeatures.codeScanning',\n          renderCell: (row) => {\n            return row.securityFeatures.codeScanning.length > 0 ? (\n              <LabelGroup>\n                {row.securityFeatures.codeScanning.map((feature) => {\n                  return <Label key={feature}>{uppercase(feature)}</Label>\n                })}\n              </LabelGroup>\n            ) : null\n          },\n        },\n      ]}\n    />\n  </Table.Container>\n)"
        },
        {
          "id": "drafts-components-datatable-features--with-title-and-subtitle",
          "code": "() => (\n  <Table.Container>\n    <Table.Title as=\"h2\" id=\"repositories\">\n      Repositories\n    </Table.Title>\n    <Table.Subtitle as=\"p\" id=\"repositories-subtitle\">\n      A subtitle could appear here to give extra context to the data.\n    </Table.Subtitle>\n    <DataTable\n      aria-labelledby=\"repositories\"\n      aria-describedby=\"repositories-subtitle\"\n      data={data}\n      columns={[\n        {\n          header: 'Repository',\n          field: 'name',\n          rowHeader: true,\n        },\n        {\n          header: 'Type',\n          field: 'type',\n          renderCell: (row) => {\n            return <Label>{uppercase(row.type)}</Label>\n          },\n        },\n        {\n          header: 'Updated',\n          field: 'updatedAt',\n          renderCell: (row) => {\n            return <RelativeTime date={new Date(row.updatedAt)} />\n          },\n        },\n        {\n          header: 'Dependabot',\n          field: 'securityFeatures.dependabot',\n          renderCell: (row) => {\n            return row.securityFeatures.dependabot.length > 0 ? (\n              <LabelGroup>\n                {row.securityFeatures.dependabot.map((feature) => {\n                  return <Label key={feature}>{uppercase(feature)}</Label>\n                })}\n              </LabelGroup>\n            ) : null\n          },\n        },\n        {\n          header: 'Code scanning',\n          field: 'securityFeatures.codeScanning',\n          renderCell: (row) => {\n            return row.securityFeatures.codeScanning.length > 0 ? (\n              <LabelGroup>\n                {row.securityFeatures.codeScanning.map((feature) => {\n                  return <Label key={feature}>{uppercase(feature)}</Label>\n                })}\n              </LabelGroup>\n            ) : null\n          },\n        },\n      ]}\n    />\n  </Table.Container>\n)"
        },
        {
          "id": "drafts-components-datatable-features--with-sorting",
          "code": "() => {\n  const rows = Array.from(data).sort((a, b) => {\n    return b.updatedAt - a.updatedAt\n  })\n  return (\n    <Table.Container>\n      <Table.Title as=\"h2\" id=\"repositories\">\n        Repositories\n      </Table.Title>\n      <Table.Subtitle as=\"p\" id=\"repositories-subtitle\">\n        A subtitle could appear here to give extra context to the data.\n      </Table.Subtitle>\n      <DataTable\n        aria-labelledby=\"repositories\"\n        aria-describedby=\"repositories-subtitle\"\n        data={rows}\n        columns={[\n          {\n            header: 'Repository',\n            field: 'name',\n            rowHeader: true,\n            sortBy: 'alphanumeric',\n          },\n          {\n            header: 'Type',\n            field: 'type',\n            renderCell: (row) => {\n              return <Label>{uppercase(row.type)}</Label>\n            },\n          },\n          {\n            header: 'Updated',\n            field: 'updatedAt',\n            sortBy: 'datetime',\n            renderCell: (row) => {\n              return <RelativeTime date={new Date(row.updatedAt)} />\n            },\n          },\n          {\n            header: 'Dependabot',\n            field: 'securityFeatures.dependabot',\n            renderCell: (row) => {\n              return row.securityFeatures.dependabot.length > 0 ? (\n                <LabelGroup>\n                  {row.securityFeatures.dependabot.map((feature) => {\n                    return <Label key={feature}>{uppercase(feature)}</Label>\n                  })}\n                </LabelGroup>\n              ) : null\n            },\n          },\n          {\n            header: 'Code scanning',\n            field: 'securityFeatures.codeScanning',\n            renderCell: (row) => {\n              return row.securityFeatures.codeScanning.length > 0 ? (\n                <LabelGroup>\n                  {row.securityFeatures.codeScanning.map((feature) => {\n                    return <Label key={feature}>{uppercase(feature)}</Label>\n                  })}\n                </LabelGroup>\n              ) : null\n            },\n          },\n        ]}\n        initialSortColumn=\"updatedAt\"\n        initialSortDirection=\"DESC\"\n      />\n    </Table.Container>\n  )\n}"
        },
        {
          "id": "drafts-components-datatable-features--with-actions",
          "code": "() => (\n  <Table.Container>\n    <Table.Title as=\"h2\" id=\"repositories\">\n      Repositories\n    </Table.Title>\n    <Table.Actions>\n      <IconButton\n        aria-label=\"Download\"\n        icon={DownloadIcon}\n        variant=\"invisible\"\n      />\n      <IconButton aria-label=\"Add row\" icon={PlusIcon} variant=\"invisible\" />\n    </Table.Actions>\n    <Table.Divider />\n    <Table.Subtitle as=\"p\" id=\"repositories-subtitle\">\n      A subtitle could appear here to give extra context to the data.\n    </Table.Subtitle>\n    <DataTable\n      aria-labelledby=\"repositories\"\n      aria-describedby=\"repositories-subtitle\"\n      data={data}\n      columns={[\n        {\n          header: 'Repository',\n          field: 'name',\n          rowHeader: true,\n        },\n        {\n          header: 'Type',\n          field: 'type',\n          renderCell: (row) => {\n            return <Label>{uppercase(row.type)}</Label>\n          },\n        },\n        {\n          header: 'Updated',\n          field: 'updatedAt',\n          renderCell: (row) => {\n            return <RelativeTime date={new Date(row.updatedAt)} />\n          },\n        },\n        {\n          header: 'Dependabot',\n          field: 'securityFeatures.dependabot',\n          renderCell: (row) => {\n            return row.securityFeatures.dependabot.length > 0 ? (\n              <LabelGroup>\n                {row.securityFeatures.dependabot.map((feature) => {\n                  return <Label key={feature}>{uppercase(feature)}</Label>\n                })}\n              </LabelGroup>\n            ) : null\n          },\n        },\n        {\n          header: 'Code scanning',\n          field: 'securityFeatures.codeScanning',\n          renderCell: (row) => {\n            return row.securityFeatures.codeScanning.length > 0 ? (\n              <LabelGroup>\n                {row.securityFeatures.codeScanning.map((feature) => {\n                  return <Label key={feature}>{uppercase(feature)}</Label>\n                })}\n              </LabelGroup>\n            ) : null\n          },\n        },\n      ]}\n    />\n  </Table.Container>\n)"
        },
        {
          "id": "drafts-components-datatable-features--with-action",
          "code": "() => (\n  <Table.Container>\n    <Table.Title as=\"h2\" id=\"repositories\">\n      Repositories\n    </Table.Title>\n    <Table.Actions>\n      <Button>Action</Button>\n    </Table.Actions>\n    <Table.Divider />\n    <Table.Subtitle as=\"p\" id=\"repositories-subtitle\">\n      A subtitle could appear here to give extra context to the data.\n    </Table.Subtitle>\n    <DataTable\n      aria-labelledby=\"repositories\"\n      aria-describedby=\"repositories-subtitle\"\n      data={data}\n      columns={[\n        {\n          header: 'Repository',\n          field: 'name',\n          rowHeader: true,\n        },\n        {\n          header: 'Type',\n          field: 'type',\n          renderCell: (row) => {\n            return <Label>{uppercase(row.type)}</Label>\n          },\n        },\n        {\n          header: 'Updated',\n          field: 'updatedAt',\n          renderCell: (row) => {\n            return <RelativeTime date={new Date(row.updatedAt)} />\n          },\n        },\n        {\n          header: 'Dependabot',\n          field: 'securityFeatures.dependabot',\n          renderCell: (row) => {\n            return row.securityFeatures.dependabot.length > 0 ? (\n              <LabelGroup>\n                {row.securityFeatures.dependabot.map((feature) => {\n                  return <Label key={feature}>{uppercase(feature)}</Label>\n                })}\n              </LabelGroup>\n            ) : null\n          },\n        },\n        {\n          header: 'Code scanning',\n          field: 'securityFeatures.codeScanning',\n          renderCell: (row) => {\n            return row.securityFeatures.codeScanning.length > 0 ? (\n              <LabelGroup>\n                {row.securityFeatures.codeScanning.map((feature) => {\n                  return <Label key={feature}>{uppercase(feature)}</Label>\n                })}\n              </LabelGroup>\n            ) : null\n          },\n        },\n      ]}\n    />\n  </Table.Container>\n)"
        },
        {
          "id": "drafts-components-datatable-features--with-row-action",
          "code": "() => (\n  <Table.Container>\n    <Table.Title as=\"h2\" id=\"repositories\">\n      Repositories\n    </Table.Title>\n    <Table.Subtitle as=\"p\" id=\"repositories-subtitle\">\n      A subtitle could appear here to give extra context to the data.\n    </Table.Subtitle>\n    <DataTable\n      aria-labelledby=\"repositories\"\n      aria-describedby=\"repositories-subtitle\"\n      data={data}\n      columns={[\n        {\n          header: 'Repository',\n          field: 'name',\n          rowHeader: true,\n        },\n        {\n          header: 'Type',\n          field: 'type',\n          renderCell: (row) => {\n            return <Label>{uppercase(row.type)}</Label>\n          },\n        },\n        {\n          header: 'Updated',\n          field: 'updatedAt',\n          renderCell: (row) => {\n            return <RelativeTime date={new Date(row.updatedAt)} />\n          },\n        },\n        {\n          header: 'Dependabot',\n          field: 'securityFeatures.dependabot',\n          renderCell: (row) => {\n            return row.securityFeatures.dependabot.length > 0 ? (\n              <LabelGroup>\n                {row.securityFeatures.dependabot.map((feature) => {\n                  return <Label key={feature}>{uppercase(feature)}</Label>\n                })}\n              </LabelGroup>\n            ) : null\n          },\n        },\n        {\n          header: 'Code scanning',\n          field: 'securityFeatures.codeScanning',\n          renderCell: (row) => {\n            return row.securityFeatures.codeScanning.length > 0 ? (\n              <LabelGroup>\n                {row.securityFeatures.codeScanning.map((feature) => {\n                  return <Label key={feature}>{uppercase(feature)}</Label>\n                })}\n              </LabelGroup>\n            ) : null\n          },\n        },\n        {\n          id: 'actions',\n          header: () => <VisuallyHidden>Actions</VisuallyHidden>,\n          renderCell: (row) => {\n            return (\n              <IconButton\n                aria-label={`Download: ${row.name}`}\n                title={`Download: ${row.name}`}\n                icon={DownloadIcon}\n                variant=\"invisible\"\n                onClick={() => {\n                  action('Download')(row)\n                }}\n              />\n            )\n          },\n        },\n      ]}\n    />\n  </Table.Container>\n)"
        },
        {
          "id": "drafts-components-datatable-features--with-row-actions",
          "code": "() => (\n  <Table.Container>\n    <Table.Title as=\"h2\" id=\"repositories\">\n      Repositories\n    </Table.Title>\n    <Table.Subtitle as=\"p\" id=\"repositories-subtitle\">\n      A subtitle could appear here to give extra context to the data.\n    </Table.Subtitle>\n    <DataTable\n      aria-labelledby=\"repositories\"\n      aria-describedby=\"repositories-subtitle\"\n      data={data}\n      columns={[\n        {\n          header: 'Repository',\n          field: 'name',\n          rowHeader: true,\n        },\n        {\n          header: 'Type',\n          field: 'type',\n          renderCell: (row) => {\n            return <Label>{uppercase(row.type)}</Label>\n          },\n        },\n        {\n          header: 'Updated',\n          field: 'updatedAt',\n          renderCell: (row) => {\n            return <RelativeTime date={new Date(row.updatedAt)} />\n          },\n        },\n        {\n          header: 'Dependabot',\n          field: 'securityFeatures.dependabot',\n          renderCell: (row) => {\n            return row.securityFeatures.dependabot.length > 0 ? (\n              <LabelGroup>\n                {row.securityFeatures.dependabot.map((feature) => {\n                  return <Label key={feature}>{uppercase(feature)}</Label>\n                })}\n              </LabelGroup>\n            ) : null\n          },\n        },\n        {\n          header: 'Code scanning',\n          field: 'securityFeatures.codeScanning',\n          renderCell: (row) => {\n            return row.securityFeatures.codeScanning.length > 0 ? (\n              <LabelGroup>\n                {row.securityFeatures.codeScanning.map((feature) => {\n                  return <Label key={feature}>{uppercase(feature)}</Label>\n                })}\n              </LabelGroup>\n            ) : null\n          },\n        },\n        {\n          id: 'actions',\n          header: () => <VisuallyHidden>Actions</VisuallyHidden>,\n          renderCell: (row) => {\n            return (\n              <>\n                <IconButton\n                  aria-label={`Edit: ${row.name}`}\n                  title={`Edit: ${row.name}`}\n                  icon={PencilIcon}\n                  variant=\"invisible\"\n                  onClick={() => {\n                    action('Edit')(row)\n                  }}\n                />\n                <IconButton\n                  aria-label={`Delete: ${row.name}`}\n                  title={`Delete: ${row.name}`}\n                  icon={TrashIcon}\n                  variant=\"invisible\"\n                  onClick={() => {\n                    action('Delete')(row)\n                  }}\n                />\n              </>\n            )\n          },\n        },\n      ]}\n    />\n  </Table.Container>\n)"
        },
        {
          "id": "drafts-components-datatable-features--with-row-action-menu",
          "code": "() => (\n  <Table.Container>\n    <Table.Title as=\"h2\" id=\"repositories\">\n      Repositories\n    </Table.Title>\n    <Table.Subtitle as=\"p\" id=\"repositories-subtitle\">\n      A subtitle could appear here to give extra context to the data.\n    </Table.Subtitle>\n    <DataTable\n      aria-labelledby=\"repositories\"\n      aria-describedby=\"repositories-subtitle\"\n      data={data}\n      columns={[\n        {\n          header: 'Repository',\n          field: 'name',\n          rowHeader: true,\n        },\n        {\n          header: 'Type',\n          field: 'type',\n          renderCell: (row) => {\n            return <Label>{uppercase(row.type)}</Label>\n          },\n        },\n        {\n          header: 'Updated',\n          field: 'updatedAt',\n          renderCell: (row) => {\n            return <RelativeTime date={new Date(row.updatedAt)} />\n          },\n        },\n        {\n          header: 'Dependabot',\n          field: 'securityFeatures.dependabot',\n          renderCell: (row) => {\n            return row.securityFeatures.dependabot.length > 0 ? (\n              <LabelGroup>\n                {row.securityFeatures.dependabot.map((feature) => {\n                  return <Label key={feature}>{uppercase(feature)}</Label>\n                })}\n              </LabelGroup>\n            ) : null\n          },\n        },\n        {\n          header: 'Code scanning',\n          field: 'securityFeatures.codeScanning',\n          renderCell: (row) => {\n            return row.securityFeatures.codeScanning.length > 0 ? (\n              <LabelGroup>\n                {row.securityFeatures.codeScanning.map((feature) => {\n                  return <Label key={feature}>{uppercase(feature)}</Label>\n                })}\n              </LabelGroup>\n            ) : null\n          },\n        },\n        {\n          id: 'actions',\n          header: () => <VisuallyHidden>Actions</VisuallyHidden>,\n          renderCell: (row) => {\n            return (\n              <ActionMenu>\n                <ActionMenu.Anchor>\n                  <IconButton\n                    aria-label={`Actions: ${row.name}`}\n                    title={`Actions: ${row.name}`}\n                    icon={KebabHorizontalIcon}\n                    variant=\"invisible\"\n                  />\n                </ActionMenu.Anchor>\n                <ActionMenu.Overlay>\n                  <ActionList>\n                    <ActionList.Item\n                      onSelect={() => {\n                        action('Copy')(row)\n                      }}\n                    >\n                      Copy row\n                    </ActionList.Item>\n                    <ActionList.Item>Edit row</ActionList.Item>\n                    <ActionList.Item>Export row as CSV</ActionList.Item>\n                    <ActionList.Divider />\n                    <ActionList.Item variant=\"danger\">\n                      Delete row\n                    </ActionList.Item>\n                  </ActionList>\n                </ActionMenu.Overlay>\n              </ActionMenu>\n            )\n          },\n        },\n      ]}\n    />\n  </Table.Container>\n)"
        },
        {
          "id": "drafts-components-datatable-features--with-custom-heading",
          "code": "() => (\n  <>\n    <Heading as=\"h2\" id=\"repositories\">\n      Security coverage\n    </Heading>\n    <p id=\"repositories-subtitle\">\n      Organization members can only see data for the most recently-updated\n      repositories. To see all repositories, talk to your organization\n      administrator about becoming a security manager.\n    </p>\n    <Table.Container>\n      <DataTable\n        aria-labelledby=\"repositories\"\n        aria-describedby=\"repositories-subtitle\"\n        data={data}\n        columns={[\n          {\n            header: 'Repository',\n            field: 'name',\n            rowHeader: true,\n          },\n          {\n            header: 'Type',\n            field: 'type',\n            renderCell: (row) => {\n              return <Label>{uppercase(row.type)}</Label>\n            },\n          },\n          {\n            header: 'Updated',\n            field: 'updatedAt',\n            renderCell: (row) => {\n              return <RelativeTime date={new Date(row.updatedAt)} />\n            },\n          },\n          {\n            header: 'Dependabot',\n            field: 'securityFeatures.dependabot',\n            renderCell: (row) => {\n              return row.securityFeatures.dependabot.length > 0 ? (\n                <LabelGroup>\n                  {row.securityFeatures.dependabot.map((feature) => {\n                    return <Label key={feature}>{uppercase(feature)}</Label>\n                  })}\n                </LabelGroup>\n              ) : null\n            },\n          },\n          {\n            header: 'Code scanning',\n            field: 'securityFeatures.codeScanning',\n            renderCell: (row) => {\n              return row.securityFeatures.codeScanning.length > 0 ? (\n                <LabelGroup>\n                  {row.securityFeatures.codeScanning.map((feature) => {\n                    return <Label key={feature}>{uppercase(feature)}</Label>\n                  })}\n                </LabelGroup>\n              ) : null\n            },\n          },\n        ]}\n      />\n    </Table.Container>\n  </>\n)"
        },
        {
          "id": "drafts-components-datatable-features--with-no-content",
          "code": "() => {\n  const exampleEmptyData: Array<Repo> = []\n  return exampleEmptyData.length === 0 ? (\n    <Blankslate border>\n      <Blankslate.Visual>\n        <BookIcon size=\"medium\" />\n      </Blankslate.Visual>\n      <Blankslate.Heading>Blankslate heading</Blankslate.Heading>\n      <Blankslate.Description>\n        Use it to provide information when no dynamic content exists.\n      </Blankslate.Description>\n      <Blankslate.PrimaryAction href=\"#\">\n        Primary action\n      </Blankslate.PrimaryAction>\n      <Blankslate.SecondaryAction href=\"#\">\n        Secondary action link\n      </Blankslate.SecondaryAction>\n    </Blankslate>\n  ) : (\n    <Table.Container>\n      <Table.Title as=\"h2\" id=\"repositories\">\n        Repositories\n      </Table.Title>\n      <Table.Subtitle as=\"p\" id=\"repositories-subtitle\">\n        A subtitle could appear here to give extra context to the data.\n      </Table.Subtitle>\n      <DataTable\n        aria-labelledby=\"repositories\"\n        aria-describedby=\"repositories-subtitle\"\n        data={exampleEmptyData}\n        columns={[\n          {\n            header: 'Repository',\n            field: 'name',\n            rowHeader: true,\n          },\n          {\n            header: 'Type',\n            field: 'type',\n            renderCell: (row) => {\n              return <Label>{uppercase(row.type)}</Label>\n            },\n          },\n          {\n            header: 'Updated',\n            field: 'updatedAt',\n            renderCell: (row) => {\n              return <RelativeTime date={new Date(row.updatedAt)} />\n            },\n          },\n          {\n            header: 'Dependabot',\n            field: 'securityFeatures.dependabot',\n            renderCell: (row) => {\n              return row.securityFeatures.dependabot.length > 0 ? (\n                <LabelGroup>\n                  {row.securityFeatures.dependabot.map((feature) => {\n                    return <Label key={feature}>{uppercase(feature)}</Label>\n                  })}\n                </LabelGroup>\n              ) : null\n            },\n          },\n          {\n            header: 'Code scanning',\n            field: 'securityFeatures.codeScanning',\n            renderCell: (row) => {\n              return row.securityFeatures.codeScanning.length > 0 ? (\n                <LabelGroup>\n                  {row.securityFeatures.codeScanning.map((feature) => {\n                    return <Label key={feature}>{uppercase(feature)}</Label>\n                  })}\n                </LabelGroup>\n              ) : null\n            },\n          },\n        ]}\n      />\n    </Table.Container>\n  )\n}"
        },
        {
          "id": "drafts-components-datatable-features--with-loading",
          "code": "() => {\n  const [loading] = React.useState(true)\n  return (\n    <Table.Container>\n      <Table.Title as=\"h2\" id=\"repositories\">\n        Repositories\n      </Table.Title>\n      <Table.Subtitle as=\"p\" id=\"repositories-subtitle\">\n        A subtitle could appear here to give extra context to the data.\n      </Table.Subtitle>\n      {loading ? (\n        <Table.Skeleton\n          aria-labelledby=\"repositories\"\n          aria-describedby=\"repositories-subtitle\"\n          columns={columns}\n          rows={10}\n        />\n      ) : (\n        <DataTable\n          aria-labelledby=\"repositories\"\n          aria-describedby=\"repositories-subtitle\"\n          data={data}\n          columns={columns}\n        />\n      )}\n    </Table.Container>\n  )\n}"
        },
        {
          "id": "drafts-components-datatable-features--with-pagination",
          "code": "() => {\n  const pageSize = 10\n  const [pageIndex, setPageIndex] = React.useState(0)\n  const start = pageIndex * pageSize\n  const end = start + pageSize\n  const rows = repos.slice(start, end)\n  return (\n    <Table.Container>\n      <Table.Title as=\"h2\" id=\"repositories\">\n        Repositories\n      </Table.Title>\n      <Table.Subtitle as=\"p\" id=\"repositories-subtitle\">\n        A subtitle could appear here to give extra context to the data.\n      </Table.Subtitle>\n      <DataTable\n        aria-labelledby=\"repositories\"\n        aria-describedby=\"repositories-subtitle\"\n        data={rows}\n        columns={[\n          {\n            header: 'Repository',\n            field: 'name',\n            rowHeader: true,\n          },\n          {\n            header: 'Type',\n            field: 'type',\n            renderCell: (row) => {\n              return <Label>{uppercase(row.type)}</Label>\n            },\n          },\n          {\n            header: 'Updated',\n            field: 'updatedAt',\n            renderCell: (row) => {\n              return <RelativeTime date={new Date(row.updatedAt)} />\n            },\n          },\n          {\n            header: 'Dependabot',\n            field: 'securityFeatures.dependabot',\n            renderCell: (row) => {\n              return row.securityFeatures.dependabot.length > 0 ? (\n                <LabelGroup>\n                  {row.securityFeatures.dependabot.map((feature) => {\n                    return <Label key={feature}>{uppercase(feature)}</Label>\n                  })}\n                </LabelGroup>\n              ) : null\n            },\n          },\n          {\n            header: 'Code scanning',\n            field: 'securityFeatures.codeScanning',\n            renderCell: (row) => {\n              return row.securityFeatures.codeScanning.length > 0 ? (\n                <LabelGroup>\n                  {row.securityFeatures.codeScanning.map((feature) => {\n                    return <Label key={feature}>{uppercase(feature)}</Label>\n                  })}\n                </LabelGroup>\n              ) : null\n            },\n          },\n        ]}\n      />\n      <Table.Pagination\n        aria-label=\"Pagination for Repositories\"\n        pageSize={pageSize}\n        totalCount={repos.length}\n        onChange={({ pageIndex }) => {\n          setPageIndex(pageIndex)\n        }}\n      />\n    </Table.Container>\n  )\n}"
        }
      ],
      "importPath": "@primer/react/drafts",
      "props": [
        {
          "name": "columns",
          "type": "Column<Data>[]",
          "required": true,
          "description": "Provide the columns for the table and the fields in `data` to which they\ncorrespond",
          "defaultValue": ""
        },
        {
          "name": "data",
          "type": "Data[]",
          "required": true,
          "description": "Provide a collection of the rows which will be rendered inside of the table",
          "defaultValue": ""
        },
        {
          "name": "aria-describedby",
          "type": "string",
          "required": false,
          "description": "Provide an id to an element which uniquely describes this table",
          "defaultValue": ""
        },
        {
          "name": "aria-labelledby",
          "type": "string",
          "required": false,
          "description": "Provide an id to an element which uniquely labels this table",
          "defaultValue": ""
        },
        {
          "name": "cellPadding",
          "type": "\"normal\" | \"condensed\" | \"spacious\"",
          "required": false,
          "description": "Specify the amount of space that should be available around the contents of\na cell",
          "defaultValue": ""
        },
        {
          "name": "initialSortColumn",
          "type": "string | number",
          "required": false,
          "description": "Provide the id or field of the column by which the table is sorted. When\nusing this `prop`, the input data must be sorted by this column in\nascending order",
          "defaultValue": ""
        },
        {
          "name": "initialSortDirection",
          "type": "\"ASC\" | \"DESC\"",
          "required": false,
          "description": "Provide the sort direction that the table should be sorted by on the\ncurrently sorted column",
          "defaultValue": ""
        }
      ],
      "subcomponents": [
        {
          "name": "Table",
          "props": [
            {
              "name": "aria-describedby",
              "type": "string",
              "required": false,
              "description": "Identifies the element (or elements) that describes the object.\nProvide an id to an element which uniquely describes this table\n@see aria-labelledby",
              "defaultValue": ""
            },
            {
              "name": "aria-labelledby",
              "type": "string",
              "required": false,
              "description": "Identifies the element (or elements) that labels the current element.\nProvide an id to an element which uniquely labels this table\n@see aria-describedby.",
              "defaultValue": ""
            },
            {
              "name": "cellPadding",
              "type": "\"normal\" | \"condensed\" | \"spacious\"",
              "required": false,
              "description": "Specify the amount of space that should be available around the contents of\na cell",
              "defaultValue": "normal"
            },
            {
              "name": "gridTemplateColumns",
              "type": "string | number | string & {}",
              "required": false,
              "description": "Column width definitions",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "Table.Actions",
          "props": []
        },
        {
          "name": "Table.Body",
          "props": []
        },
        {
          "name": "Table.Cell",
          "props": [
            {
              "name": "align",
              "type": "\"end\" | \"start\"",
              "required": false,
              "description": "The horizontal alignment of the cell's content",
              "defaultValue": ""
            },
            {
              "name": "scope",
              "type": "\"row\"",
              "required": false,
              "description": "Provide the scope for a table cell, useful for defining a row header using\n`scope=\"row\"`",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "Table.CellPlaceholder",
          "props": []
        },
        {
          "name": "Table.Container",
          "props": [
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "Table.Divider",
          "props": []
        },
        {
          "name": "Table.ErrorDialog",
          "props": [
            {
              "name": "onDismiss",
              "type": "() => void",
              "required": false,
              "description": "Provide an optional handler to be called when the user dismisses the dialog",
              "defaultValue": ""
            },
            {
              "name": "onRetry",
              "type": "() => void",
              "required": false,
              "description": "Provide an optional handler to be called when the user confirms to retry",
              "defaultValue": ""
            },
            {
              "name": "title",
              "type": "string",
              "required": false,
              "description": "Provide an optional title for the dialog",
              "defaultValue": "Error"
            }
          ]
        },
        {
          "name": "Table.Head",
          "props": []
        },
        {
          "name": "Table.Header",
          "props": [
            {
              "name": "align",
              "type": "\"end\" | \"start\"",
              "required": false,
              "description": "The horizontal alignment of the cell's content",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "Table.Pagination",
          "props": [
            {
              "name": "totalCount",
              "type": "number",
              "required": true,
              "description": "Specify the total number of items within the collection",
              "defaultValue": ""
            },
            {
              "name": "aria-label",
              "type": "string",
              "required": false,
              "description": "Defines a string value that labels the current element.\nProvide a label for the navigation landmark rendered by this component\n@see aria-labelledby.",
              "defaultValue": ""
            },
            {
              "name": "defaultPageIndex",
              "type": "number",
              "required": false,
              "description": "Provide an optional index to specify the default selected page",
              "defaultValue": ""
            },
            {
              "name": "id",
              "type": "string",
              "required": false,
              "description": "Optionally provide an `id` that is placed on the navigation landmark\nrendered by this component",
              "defaultValue": ""
            },
            {
              "name": "onChange",
              "type": "(state: PaginationState) => void",
              "required": false,
              "description": "Optionally provide a handler that is called whenever the pagination state\nis updated",
              "defaultValue": ""
            },
            {
              "name": "pageSize",
              "type": "number",
              "required": false,
              "description": "Optionally specify the number of items within a page",
              "defaultValue": 25
            },
            {
              "name": "showPages",
              "type": "boolean | ResponsiveValue<boolean>",
              "required": false,
              "description": "Whether to show the page numbers",
              "defaultValue": "{narrow: false}"
            }
          ]
        },
        {
          "name": "Table.Row",
          "props": []
        },
        {
          "name": "Table.Skeleton",
          "props": [
            {
              "name": "columns",
              "type": "Column<Data>[]",
              "required": true,
              "description": "Provide an array of columns for the table. Columns will render as the headers\nof the table.",
              "defaultValue": ""
            },
            {
              "name": "cellPadding",
              "type": "\"normal\" | \"condensed\" | \"spacious\"",
              "required": false,
              "description": "Specify the amount of space that should be available around the contents of\na cell",
              "defaultValue": "normal"
            },
            {
              "name": "rows",
              "type": "number",
              "required": false,
              "description": "Optionally specify the number of rows which should be included in the\nskeleton state of the component",
              "defaultValue": 10
            }
          ]
        },
        {
          "name": "Table.SortHeader",
          "props": [
            {
              "name": "direction",
              "type": "\"ASC\" | \"DESC\" | \"NONE\"",
              "required": true,
              "description": "Specify the sort direction for the TableHeader",
              "defaultValue": ""
            },
            {
              "name": "onToggleSort",
              "type": "() => void",
              "required": true,
              "description": "Provide a handler that is called when the sortable TableHeader is\ninteracted with via a click or keyboard interaction",
              "defaultValue": ""
            },
            {
              "name": "align",
              "type": "\"end\" | \"start\"",
              "required": false,
              "description": "The horizontal alignment of the cell's content",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "Table.Subtitle",
          "props": [
            {
              "name": "id",
              "type": "string",
              "required": true,
              "description": "Provide a unique id for the table subtitle. This should be used along with\n`aria-describedby` on `DataTable`",
              "defaultValue": ""
            },
            {
              "name": "as",
              "type": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<{}, any> | FunctionComponent<{}>",
              "required": false,
              "description": "Provide an alternate element or component to use as the container for\n`TableSubtitle`. This is useful when specifying markup that is more\nsemantic for your use-case",
              "defaultValue": "h2"
            }
          ]
        },
        {
          "name": "Table.Title",
          "props": [
            {
              "name": "id",
              "type": "string",
              "required": true,
              "description": "Provide a unique id for the table subtitle. This should be used along with\n`aria-labelledby` on `DataTable`",
              "defaultValue": ""
            },
            {
              "name": "as",
              "type": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<{}, any> | FunctionComponent<{}>",
              "required": false,
              "description": "Provide an alternate element or component to use as the container for\n`TableSubtitle`. This is useful when specifying markup that is more\nsemantic for your use-case, such as a heading tag.",
              "defaultValue": "h2"
            }
          ]
        }
      ]
    },
    "details": {
      "id": "details",
      "name": "Details",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-details--default",
          "code": "() => {\n  const { getDetailsProps } = useDetails({\n    closeOnOutsideClick: true,\n  })\n  return (\n    <Details {...getDetailsProps()}>\n      <Button as=\"summary\">See Details</Button>\n      This is some content\n    </Details>\n  )\n}"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "dialog_v2": {
      "id": "dialog_v2",
      "docsId": "dialog",
      "name": "Dialog",
      "status": "draft",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "drafts-components-dialog--default",
          "code": "() => {\n  const [isOpen, setIsOpen] = useState(false)\n  const [secondOpen, setSecondOpen] = useState(false)\n  const buttonRef = useRef<HTMLButtonElement>(null)\n  const onDialogClose = useCallback(() => setIsOpen(false), [])\n  const onSecondDialogClose = useCallback(() => setSecondOpen(false), [])\n  const openSecondDialog = useCallback(() => setSecondOpen(true), [])\n  return (\n    <>\n      <Button ref={buttonRef} onClick={() => setIsOpen(!isOpen)}>\n        Show dialog\n      </Button>\n      {isOpen && (\n        <Dialog\n          title=\"My Dialog\"\n          onClose={onDialogClose}\n          footerButtons={[\n            {\n              buttonType: 'default',\n              content: 'Open Second Dialog',\n              onClick: openSecondDialog,\n            },\n            {\n              buttonType: 'danger',\n              content: 'Delete the universe',\n              onClick: onDialogClose,\n            },\n            {\n              buttonType: 'primary',\n              content: 'Proceed',\n              onClick: openSecondDialog,\n              autoFocus: true,\n            },\n          ]}\n        >\n          {lipsum}\n          {secondOpen && (\n            <Dialog\n              title=\"Inner dialog!\"\n              onClose={onSecondDialogClose}\n              width=\"small\"\n            >\n              Hello world\n            </Dialog>\n          )}\n        </Dialog>\n      )}\n    </>\n  )\n}"
        },
        {
          "id": "drafts-components-dialog-features--with-custom-renderers",
          "code": "({ width, height, subtitle }: DialogStoryProps) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const onDialogClose = useCallback(() => setIsOpen(false), [])\n  return (\n    <>\n      <Button onClick={() => setIsOpen(!isOpen)}>Show dialog</Button>\n      {isOpen && (\n        <Dialog\n          title=\"My Dialog\"\n          subtitle={subtitle ? 'This is a subtitle!' : undefined}\n          width={width}\n          height={height}\n          renderHeader={CustomHeader}\n          renderBody={CustomBody}\n          renderFooter={CustomFooter}\n          onClose={onDialogClose}\n          footerButtons={[\n            {\n              buttonType: 'danger',\n              content: 'Delete the universe',\n              onClick: onDialogClose,\n            },\n            {\n              buttonType: 'primary',\n              content: 'Proceed',\n            },\n          ]}\n        >\n          {lipsum}\n        </Dialog>\n      )}\n    </>\n  )\n}"
        },
        {
          "id": "drafts-components-dialog-features--stress-test",
          "code": "({ width, height, subtitle }: DialogStoryProps) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const [secondOpen, setSecondOpen] = useState(false)\n  const buttonRef = useRef<HTMLButtonElement>(null)\n  const onDialogClose = useCallback(() => setIsOpen(false), [])\n  const onSecondDialogClose = useCallback(() => setSecondOpen(false), [])\n  const openSecondDialog = useCallback(() => setSecondOpen(true), [])\n  const manyButtons = new Array(10).fill(undefined).map((_, i) => ({\n    content: `Button ${i}`,\n  }))\n  return (\n    <>\n      <Button ref={buttonRef} onClick={() => setIsOpen(!isOpen)}>\n        Show dialog\n      </Button>\n      {isOpen && (\n        <Dialog\n          title=\"This dialog has a really long title. So long, in fact, that it should cause wrapping, going to multiple lines!.\"\n          subtitle={\n            subtitle\n              ? \"It's not a common scenario, sure, but what if the subtitle is generated from a really long value? Do we just break the dialog? Or do we handle it because we are pros?\"\n              : undefined\n          }\n          onClose={onDialogClose}\n          width={width}\n          height={height}\n          footerButtons={[\n            ...manyButtons,\n            {\n              buttonType: 'danger',\n              content: 'Delete the universe',\n              onClick: onDialogClose,\n            },\n            {\n              buttonType: 'primary',\n              content: 'Proceed',\n              onClick: openSecondDialog,\n              autoFocus: true,\n            },\n          ]}\n        >\n          {lipsum}\n          {secondOpen && (\n            <Dialog\n              title=\"Inner dialog!\"\n              onClose={onSecondDialogClose}\n              width=\"small\"\n            >\n              Hello world\n            </Dialog>\n          )}\n        </Dialog>\n      )}\n    </>\n  )\n}"
        },
        {
          "id": "drafts-components-dialog-features--repro-multistep-dialog-with-conditional-footer",
          "code": "({ width, height }: DialogStoryProps) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const onDialogClose = useCallback(() => setIsOpen(false), [])\n  const [step, setStep] = React.useState(1)\n  const renderFooterConditionally = () => {\n    if (step === 1) return null\n    return (\n      <Dialog.Footer>\n        <Button variant=\"primary\">Submit</Button>\n      </Dialog.Footer>\n    )\n  }\n  return (\n    <>\n      <Button onClick={() => setIsOpen(!isOpen)}>Show dialog</Button>\n      {isOpen && (\n        <Dialog\n          title={`Step ${step}`}\n          width={width}\n          height={height}\n          renderFooter={renderFooterConditionally}\n          onClose={onDialogClose}\n          footerButtons={[\n            {\n              buttonType: 'primary',\n              content: 'Proceed',\n            },\n          ]}\n        >\n          {step === 1 ? (\n            <Box\n              sx={{\n                display: 'flex',\n                flexDirection: 'column',\n                gap: 4,\n              }}\n            >\n              <Box\n                sx={{\n                  display: 'flex',\n                  justifyContent: 'space-between',\n                }}\n              >\n                Bug Report <Button onClick={() => setStep(2)}>Choose</Button>\n              </Box>\n              <Box\n                sx={{\n                  display: 'flex',\n                  justifyContent: 'space-between',\n                }}\n              >\n                Feature request{' '}\n                <Button onClick={() => setStep(2)}>Choose</Button>\n              </Box>\n            </Box>\n          ) : (\n            <p>\n              <Box\n                sx={{\n                  display: 'flex',\n                  flexDirection: 'column',\n                  gap: 1,\n                }}\n              >\n                <label htmlFor=\"description\">Description</label>\n                <TextInput\n                  id=\"description\"\n                  placeholder=\"Write the description here\"\n                />\n              </Box>\n            </p>\n          )}\n        </Dialog>\n      )}\n    </>\n  )\n}"
        },
        {
          "id": "drafts-components-dialog-features--bottom-sheet-narrow",
          "code": "() => {\n  const [isOpen, setIsOpen] = useState(true)\n  const buttonRef = useRef<HTMLButtonElement>(null)\n  const onDialogClose = useCallback(() => setIsOpen(false), [])\n  return (\n    <>\n      <Button ref={buttonRef} onClick={() => setIsOpen(true)}>\n        Show dialog\n      </Button>\n      {isOpen && (\n        <Dialog\n          title=\"My Dialog\"\n          onClose={onDialogClose}\n          position={{\n            narrow: 'bottom',\n            regular: 'center',\n          }}\n        >\n          {bodyContent}\n        </Dialog>\n      )}\n    </>\n  )\n}"
        },
        {
          "id": "drafts-components-dialog-features--full-screen-narrow",
          "code": "() => {\n  const [isOpen, setIsOpen] = useState(true)\n  const buttonRef = useRef<HTMLButtonElement>(null)\n  const onDialogClose = useCallback(() => setIsOpen(false), [])\n  return (\n    <>\n      <Button ref={buttonRef} onClick={() => setIsOpen(true)}>\n        Show dialog\n      </Button>\n      {isOpen && (\n        <Dialog\n          title=\"My Dialog\"\n          onClose={onDialogClose}\n          position={{\n            narrow: 'fullscreen',\n            regular: 'center',\n          }}\n        >\n          {bodyContent}\n        </Dialog>\n      )}\n    </>\n  )\n}"
        },
        {
          "id": "drafts-components-dialog-features--side-sheet",
          "code": "() => {\n  const [isOpen, setIsOpen] = useState(true)\n  const buttonRef = useRef<HTMLButtonElement>(null)\n  const onDialogClose = useCallback(() => setIsOpen(false), [])\n  return (\n    <>\n      <Button ref={buttonRef} onClick={() => setIsOpen(true)}>\n        Show dialog\n      </Button>\n      {isOpen && (\n        <Dialog title=\"My Dialog\" onClose={onDialogClose} position=\"right\">\n          {bodyContent}\n        </Dialog>\n      )}\n    </>\n  )\n}"
        },
        {
          "id": "drafts-components-dialog-features--return-focus-ref",
          "code": "() => {\n  const [isOpen, setIsOpen] = useState(false)\n  const onDialogClose = useCallback(() => setIsOpen(false), [])\n  const triggerRef = React.useRef<HTMLButtonElement>(null)\n  const triggerButton = (\n    <Button ref={triggerRef} variant=\"primary\" onClick={() => setIsOpen(true)}>\n      Show dialog\n    </Button>\n  )\n  if (!isOpen) return triggerButton\n  return (\n    <React.Suspense fallback={<Button>Show Dialog</Button>}>\n      {triggerButton}\n      <Dialog title=\"title\" onClose={onDialogClose} returnFocusRef={triggerRef}>\n        body\n      </Dialog>\n    </React.Suspense>\n  )\n}"
        },
        {
          "id": "drafts-components-dialog-features--new-issues",
          "code": "() => {\n  const [isOpen, setIsOpen] = useState(false)\n  const onDialogClose = useCallback(() => setIsOpen(false), [])\n  const initialFocusRef = useRef(null)\n  return (\n    <>\n      <Button onClick={() => setIsOpen(true)}>Show dialog</Button>\n      {isOpen ? (\n        <Dialog\n          initialFocusRef={initialFocusRef}\n          onClose={onDialogClose}\n          title=\"New issue\"\n          renderBody={() => (\n            <ActionList>\n              <ActionList.LinkItem\n                ref={initialFocusRef}\n                href=\"https://github.com\"\n              >\n                Item 1\n              </ActionList.LinkItem>\n              <ActionList.LinkItem href=\"https://github.com\">\n                Link\n              </ActionList.LinkItem>\n            </ActionList>\n          )}\n        ></Dialog>\n      ) : null}\n    </>\n  )\n}"
        }
      ],
      "importPath": "@primer/react/drafts",
      "props": [
        {
          "name": "onClose",
          "type": "(gesture: \"escape\" | \"close-button\") => void",
          "required": true,
          "description": "This method is invoked when a gesture to close the dialog is used (either\nan Escape key press, clicking the backdrop, or clicking the \"X\" in the top-right corner). The\ngesture argument indicates the gesture that was used to close the dialog\n('close-button' or 'escape').",
          "defaultValue": ""
        },
        {
          "name": "footerButtons",
          "type": "DialogButtonProps[]",
          "required": false,
          "description": "Specifies the buttons to be rendered in the Dialog footer.",
          "defaultValue": ""
        },
        {
          "name": "height",
          "type": "\"small\" | \"large\" | \"auto\"",
          "required": false,
          "description": "The height of the dialog.\nsmall: 296x480\nlarge: 480x640\nauto: variable based on contents",
          "defaultValue": ""
        },
        {
          "name": "initialFocusRef",
          "type": "RefObject<HTMLElement>",
          "required": false,
          "description": "The element to focus when the Dialog opens",
          "defaultValue": ""
        },
        {
          "name": "position",
          "type": "\"center\" | \"left\" | \"right\" | ResponsiveValue<\"center\" | \"left\" | \"right\" | \"bottom\" | \"fullscreen\">",
          "required": false,
          "description": "The position of the dialog",
          "defaultValue": ""
        },
        {
          "name": "renderBody",
          "type": "FunctionComponent<PropsWithChildren<DialogProps>>",
          "required": false,
          "description": "Provide a custom render function for the dialog body. This content is\nrendered directly into the dialog body area, full bleed from edge to\nedge, header to footer.\n\nWarning: using a custom renderer may violate Primer UX principles.",
          "defaultValue": ""
        },
        {
          "name": "renderFooter",
          "type": "FunctionComponent<PropsWithChildren<DialogProps>>",
          "required": false,
          "description": "Provide a custom render function for the dialog footer. This content is\nrendered directly into the dialog footer area, full bleed from edge to\nedge, end of the body element to bottom.\n\nWarning: using a custom renderer may violate Primer UX principles.",
          "defaultValue": ""
        },
        {
          "name": "renderHeader",
          "type": "FunctionComponent<PropsWithChildren<DialogHeaderProps>>",
          "required": false,
          "description": "Provide a custom renderer for the dialog header. This content is\nrendered directly into the dialog body area, full bleed from edge\nto edge, top to the start of the body element.\n\nWarning: using a custom renderer may violate Primer UX principles.",
          "defaultValue": ""
        },
        {
          "name": "returnFocusRef",
          "type": "RefObject<HTMLElement>",
          "required": false,
          "description": "Return focus to this element when the Dialog closes,\ninstead of the element that had focus immediately before the Dialog opened",
          "defaultValue": ""
        },
        {
          "name": "role",
          "type": "\"dialog\" | \"alertdialog\"",
          "required": false,
          "description": "Default: \"dialog\". The ARIA role to assign to this dialog.\n@see https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal\n@see https://www.w3.org/TR/wai-aria-practices-1.1/#alertdialog",
          "defaultValue": ""
        },
        {
          "name": "subtitle",
          "type": "ReactNode",
          "required": false,
          "description": "The Dialog's subtitle. Optional. Rendered below the title in smaller\ntype with less contrast. Also serves as the aria-describedby for this\nDialog.",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        },
        {
          "name": "title",
          "type": "ReactNode",
          "required": false,
          "description": "Title of the Dialog. Also serves as the aria-label for this Dialog.",
          "defaultValue": ""
        },
        {
          "name": "width",
          "type": "\"small\" | \"large\" | \"medium\" | \"xlarge\"",
          "required": false,
          "description": "The width of the dialog.\nsmall: 296px\nmedium: 320px\nlarge: 480px\nxlarge: 640px",
          "defaultValue": ""
        }
      ],
      "subcomponents": [
        {
          "name": "Dialog.Body",
          "props": [
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "Dialog.Buttons",
          "props": [
            {
              "name": "buttons",
              "type": "DialogButtonProps[]",
              "required": true,
              "description": "",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "Dialog.CloseButton",
          "props": [
            {
              "name": "onClose",
              "type": "() => void",
              "required": true,
              "description": "Callback for closing the Dialog",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "Dialog.Footer",
          "props": [
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "Dialog.Header",
          "props": [
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "Dialog.Subtitle",
          "props": [
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "Dialog.Title",
          "props": [
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    "feature_flags": {
      "id": "feature_flags",
      "name": "FeatureFlags",
      "status": "experimental",
      "a11yReviewed": false,
      "stories": [],
      "importPath": "@primer/react/experimental",
      "props": [
        {
          "name": "flags",
          "type": "FeatureFlags",
          "required": true,
          "description": "Object where keys are feature flag names and values are boolean",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "flash": {
      "id": "flash",
      "name": "Flash",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-flash--default",
          "code": "() => <Flash>Default</Flash>"
        },
        {
          "id": "components-flash-features--success",
          "code": "() => <Flash variant=\"success\">Success</Flash>"
        },
        {
          "id": "components-flash-features--danger",
          "code": "() => <Flash variant=\"danger\">Danger</Flash>"
        },
        {
          "id": "components-flash-features--warning",
          "code": "() => <Flash variant=\"warning\">Warning</Flash>"
        },
        {
          "id": "components-flash-features--full",
          "code": "() => <Flash full>Full</Flash>"
        },
        {
          "id": "components-flash-features--with-icon-and-action",
          "code": "() => (\n  <Flash\n    sx={{\n      display: 'grid',\n      gridTemplateColumns: 'min-content 1fr minmax(0, auto)',\n      gridTemplateRows: 'min-content',\n      gridTemplateAreas: `'visual message actions'`,\n      '@media screen and (max-width: 543.98px)': {\n        gridTemplateColumns: 'min-content 1fr',\n        gridTemplateRows: 'min-content min-content',\n        gridTemplateAreas: `\n        'visual message'\n        '.      actions'\n      `,\n      },\n    }}\n  >\n    <Box\n      sx={{\n        display: 'grid',\n        paddingBlock: 'var(--base-size-8)',\n        alignSelf: 'start',\n        gridArea: 'visual',\n      }}\n    >\n      <Octicon icon={InfoIcon} />\n    </Box>\n    <Box\n      sx={{\n        fontSize: 1,\n        lineHeight: '1.5',\n        padding: '0.375rem var(--base-size-8)',\n        alignSelf: 'center',\n        gridArea: 'message',\n      }}\n    >\n      This is a flash message with an icon and an action.\n      <Link href=\"/\"> Learn more.</Link>\n    </Box>\n    <Box\n      sx={{\n        gridArea: 'actions',\n        '@media screen and (max-width: 543.98px)': {\n          alignSelf: 'start',\n          margin: 'var(--base-size-8) 0 0 var(--base-size-8)',\n        },\n      }}\n    >\n      <Button>Join waitlist</Button>\n    </Box>\n  </Flash>\n)"
        },
        {
          "id": "components-flash-features--with-icon-action-dismiss",
          "code": "() => (\n  <Flash\n    sx={{\n      display: 'grid',\n      gridTemplateColumns: 'min-content 1fr minmax(0, auto)',\n      gridTemplateRows: 'min-content',\n      gridTemplateAreas: `'visual message actions close'`,\n      '@media screen and (max-width: 543.98px)': {\n        gridTemplateColumns: 'min-content 1fr',\n        gridTemplateRows: 'min-content min-content',\n        gridTemplateAreas: `\n        'visual message close'\n        '.      actions actions'\n      `,\n      },\n    }}\n  >\n    <Box\n      sx={{\n        display: 'grid',\n        paddingBlock: 'var(--base-size-8)',\n        alignSelf: 'start',\n        gridArea: 'visual',\n      }}\n    >\n      <Octicon icon={InfoIcon} />\n    </Box>\n    <Box\n      sx={{\n        fontSize: 1,\n        lineHeight: '1.5',\n        padding: '0.375rem var(--base-size-8)',\n        alignSelf: 'center',\n        gridArea: 'message',\n      }}\n    >\n      This is a flash message with an icon and an action.\n      <Link href=\"/\"> Learn more.</Link>\n    </Box>\n    <Box\n      sx={{\n        gridArea: 'actions',\n        '@media screen and (max-width: 543.98px)': {\n          alignSelf: 'start',\n          margin: 'var(--base-size-8) 0 0 var(--base-size-8)',\n        },\n      }}\n    >\n      <Button>Join waitlist</Button>\n    </Box>\n    <Box\n      sx={{\n        gridArea: 'close',\n        marginLeft: 'var(--controlStack-medium-gap-condensed)',\n      }}\n    >\n      <IconButton\n        variant=\"invisible\"\n        icon={XIcon}\n        aria-label=\"Dismiss\"\n        sx={{\n          svg: {\n            margin: '0',\n            color: 'fg.muted',\n          },\n        }}\n      />\n    </Box>\n  </Flash>\n)"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "as",
          "type": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<unknown, any> | FunctionComponent<unknown>",
          "required": true,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "full",
          "type": "boolean",
          "required": false,
          "description": "Creates a full width Flash component",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        },
        {
          "name": "variant",
          "type": "\"default\" | \"success\" | \"danger\" | \"warning\"",
          "required": false,
          "description": "Sets the background color and border",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "form_control": {
      "id": "form_control",
      "name": "FormControl",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-formcontrol--default",
          "code": "() => (\n  <FormControl required={true}>\n    <FormControl.Label>Form Input Label</FormControl.Label>\n    <FormControl.Caption>This is a caption</FormControl.Caption>\n    <Checkbox />\n  </FormControl>\n)"
        },
        {
          "id": "components-formcontrol-features--with-complex-inputs",
          "code": "() => {\n  const [tokens, setTokens] = useState([...mockTokens])\n  const onTokenRemove = (tokenId: string | number) => {\n    setTokens(\n      tokens.filter((token: { id: string | number }) => token.id !== tokenId),\n    )\n  }\n  return (\n    <Box display=\"grid\">\n      <FormControl>\n        <FormControl.Label id=\"form-label\">\n          TextInputWithTokens\n        </FormControl.Label>\n        <TextInputWithTokens onTokenRemove={onTokenRemove} tokens={tokens} />\n      </FormControl>\n      <FormControl>\n        <FormControl.Label id=\"autocomplete-label\">\n          Autocomplete\n        </FormControl.Label>\n        <Autocomplete>\n          <Autocomplete.Input block />\n          <Autocomplete.Overlay>\n            <Autocomplete.Menu\n              aria-labelledby=\"autocomplete-label\"\n              items={[\n                {\n                  text: 'css',\n                  id: '0',\n                },\n                {\n                  text: 'css-in-js',\n                  id: '1',\n                },\n                {\n                  text: 'styled-system',\n                  id: '2',\n                },\n                {\n                  text: 'javascript',\n                  id: '3',\n                },\n                {\n                  text: 'typescript',\n                  id: '4',\n                },\n                {\n                  text: 'react',\n                  id: '5',\n                },\n                {\n                  text: 'design-systems',\n                  id: '6',\n                },\n              ]}\n              selectedItemIds={[]}\n            />\n          </Autocomplete.Overlay>\n        </Autocomplete>\n      </FormControl>\n      <FormControl>\n        <FormControl.Label>Select</FormControl.Label>\n        <Select>\n          <Select.Option value=\"figma\">Figma</Select.Option>\n          <Select.Option value=\"css\">Primer CSS</Select.Option>\n          <Select.Option value=\"prc\">Primer React components</Select.Option>\n          <Select.Option value=\"pvc\">Primer ViewComponents</Select.Option>\n        </Select>\n      </FormControl>\n      <FormControl>\n        <FormControl.Label>Textarea</FormControl.Label>\n        <Textarea />\n      </FormControl>\n    </Box>\n  )\n}"
        },
        {
          "id": "components-formcontrol-features--form-control-with-custom-input",
          "code": "() => {\n  const [value, setValue] = React.useState('mona lisa')\n  const [validationResult, setValidationResult] = React.useState('')\n  const doesValueContainSpaces = (inputValue: string) => /\\s/g.test(inputValue)\n  const handleInputChange = (e: {\n    currentTarget: {\n      value: React.SetStateAction<string>\n    }\n  }) => {\n    setValue(e.currentTarget.value)\n  }\n  React.useEffect(() => {\n    if (doesValueContainSpaces(value)) {\n      setValidationResult('noSpaces')\n    } else if (value) {\n      setValidationResult('validName')\n    }\n  }, [value])\n  return (\n    <Box display=\"grid\">\n      <FormControl>\n        <FormControl.Label htmlFor=\"custom-input\">\n          GitHub handle\n        </FormControl.Label>\n        <CustomTextInput\n          id=\"custom-input\"\n          aria-describedby=\"custom-input-caption custom-input-validation\"\n          aria-invalid={validationResult === 'noSpaces'}\n          onChange={handleInputChange}\n        />\n        {validationResult === 'noSpaces' && (\n          <FormControl.Validation id=\"custom-input-validation\" variant=\"error\">\n            GitHub handles cannot contain spaces\n          </FormControl.Validation>\n        )}\n        {validationResult === 'validName' && (\n          <FormControl.Validation\n            id=\"custom-input-validation\"\n            variant=\"success\"\n          >\n            Valid name\n          </FormControl.Validation>\n        )}\n        <FormControl.Caption id=\"custom-input-caption\">\n          With or without &quot;@&quot;. For example &quot;monalisa&quot; or\n          &quot;@monalisa&quot;\n        </FormControl.Caption>\n      </FormControl>\n\n      <CheckboxGroup>\n        <CheckboxGroup.Label>Checkboxes</CheckboxGroup.Label>\n        <FormControl layout=\"horizontal\">\n          <CustomCheckboxInput\n            id=\"custom-checkbox-one\"\n            aria-describedby=\"custom-checkbox-one-caption\"\n            value=\"checkOne\"\n          />\n          <FormControl.Label htmlFor=\"custom-checkbox-one\">\n            Checkbox one\n          </FormControl.Label>\n          <FormControl.Caption id=\"custom-checkbox-one-caption\">\n            Hint text for checkbox one\n          </FormControl.Caption>\n        </FormControl>\n        <FormControl layout=\"horizontal\">\n          <CustomCheckboxInput\n            id=\"custom-checkbox-two\"\n            aria-describedby=\"custom-checkbox-two-caption\"\n            value=\"checkTwo\"\n          />\n          <FormControl.Label htmlFor=\"custom-checkbox-two\">\n            Checkbox two\n          </FormControl.Label>\n          <FormControl.Caption id=\"custom-checkbox-two-caption\">\n            Hint text for checkbox two\n          </FormControl.Caption>\n        </FormControl>\n      </CheckboxGroup>\n    </Box>\n  )\n}"
        },
        {
          "id": "components-formcontrol-features--with-checkbox-and-radio-inputs",
          "code": "() => {\n  return (\n    <Box\n      display=\"grid\"\n      sx={{\n        gap: 3,\n      }}\n    >\n      <CheckboxGroup>\n        <CheckboxGroup.Label>Checkboxes</CheckboxGroup.Label>\n        <FormControl>\n          <Checkbox value=\"checkOne\" />\n          <FormControl.Label>Checkbox one</FormControl.Label>\n        </FormControl>\n        <FormControl>\n          <Checkbox value=\"checkTwo\" />\n          <FormControl.Label>Checkbox two</FormControl.Label>\n        </FormControl>\n        <FormControl>\n          <Checkbox value=\"checkThree\" />\n          <FormControl.Label>Checkbox three</FormControl.Label>\n        </FormControl>\n      </CheckboxGroup>\n\n      <RadioGroup name={''}>\n        <RadioGroup.Label>Radios</RadioGroup.Label>\n        <FormControl>\n          <Radio name=\"radioChoices\" value=\"radioOne\" />\n          <FormControl.Label>Radio one</FormControl.Label>\n        </FormControl>\n        <FormControl>\n          <Radio name=\"radioChoices\" value=\"radioTwo\" />\n          <FormControl.Label>Radio two</FormControl.Label>\n        </FormControl>\n        <FormControl>\n          <Radio name=\"radioChoices\" value=\"radioThree\" />\n          <FormControl.Label>Radio three</FormControl.Label>\n        </FormControl>\n      </RadioGroup>\n    </Box>\n  )\n}"
        },
        {
          "id": "components-formcontrol-features--single-input",
          "code": "({\n  label = 'Input',\n  caption = '',\n  required = false,\n  disabled = false,\n}: ArgTypes) => (\n  <FormControl required={required} disabled={disabled}>\n    <FormControl.Label>{label}</FormControl.Label>\n    <TextInput />\n    {caption && <FormControl.Caption>{caption}</FormControl.Caption>}\n  </FormControl>\n)"
        },
        {
          "id": "components-formcontrol-features--validation-example",
          "code": "() => {\n  const [value, setValue] = React.useState('mona lisa')\n  const [validationResult, setValidationResult] = React.useState('')\n  const doesValueContainSpaces = (inputValue: string) => /\\s/g.test(inputValue)\n  const handleInputChange = (e: {\n    currentTarget: {\n      value: React.SetStateAction<string>\n    }\n  }) => {\n    setValue(e.currentTarget.value)\n  }\n  React.useEffect(() => {\n    if (doesValueContainSpaces(value)) {\n      setValidationResult('noSpaces')\n    } else if (value) {\n      setValidationResult('validName')\n    }\n  }, [value])\n  return (\n    <FormControl>\n      <FormControl.Label>GitHub handle</FormControl.Label>\n      <TextInput block value={value} onChange={handleInputChange} />\n      {validationResult === 'noSpaces' && (\n        <FormControl.Validation variant=\"error\">\n          GitHub handles cannot contain spaces\n        </FormControl.Validation>\n      )}\n      {validationResult === 'validName' && (\n        <FormControl.Validation variant=\"success\">\n          Valid name\n        </FormControl.Validation>\n      )}\n      <FormControl.Caption>\n        With or without &quot;@&quot;. For example &quot;monalisa&quot; or\n        &quot;@monalisa&quot;\n      </FormControl.Caption>\n    </FormControl>\n  )\n}"
        },
        {
          "id": "components-formcontrol-features--with-leading-visual",
          "code": "() => (\n  <Box>\n    <FormControl>\n      <FormControl.Label>Option one</FormControl.Label>\n      <FormControl.LeadingVisual>\n        <MarkGithubIcon />\n      </FormControl.LeadingVisual>\n      <Checkbox />\n    </FormControl>\n\n    <FormControl>\n      <FormControl.Label>Option two</FormControl.Label>\n      <FormControl.LeadingVisual>\n        <MarkGithubIcon />\n      </FormControl.LeadingVisual>\n      <Checkbox />\n      <FormControl.Caption>This one has a caption</FormControl.Caption>\n    </FormControl>\n  </Box>\n)"
        },
        {
          "id": "components-formcontrol-features--disabled-inputs",
          "code": "() => (\n  <Box\n    sx={{\n      display: 'flex',\n      flexDirection: 'column',\n      gap: '1rem',\n    }}\n  >\n    <FormControl disabled>\n      <FormControl.Label>Disabled checkbox</FormControl.Label>\n      <Checkbox />\n    </FormControl>\n    <FormControl disabled>\n      <FormControl.Label>Disabled input</FormControl.Label>\n      <TextInput />\n    </FormControl>\n    <FormControl disabled>\n      <FormControl.Label>Disabled select</FormControl.Label>\n      <Select>\n        <Select.Option value=\"figma\">Figma</Select.Option>\n        <Select.Option value=\"css\">Primer CSS</Select.Option>\n        <Select.Option value=\"prc\">Primer React components</Select.Option>\n        <Select.Option value=\"pvc\">Primer ViewComponents</Select.Option>\n      </Select>\n    </FormControl>\n  </Box>\n)"
        },
        {
          "id": "components-formcontrol-features--custom-required",
          "code": "() => (\n  <Box\n    sx={{\n      display: 'flex',\n      flexDirection: 'column',\n      gap: '1rem',\n    }}\n  >\n    <FormControl required={true}>\n      <FormControl.Label requiredText=\"(required)\">\n        Form Input Label\n      </FormControl.Label>\n      <FormControl.Caption>\n        This is a form field with a custom required indicator\n      </FormControl.Caption>\n      <TextInput />\n    </FormControl>\n\n    <Text\n      sx={{\n        fontSize: 1,\n      }}\n    >\n      Required fields are marked with an asterisk (*)\n    </Text>\n    <FormControl required={true}>\n      <FormControl.Label requiredIndicator={false}>\n        Form Input Label\n      </FormControl.Label>\n      <FormControl.Caption>\n        This is a form field with a required indicator that is hidden in the\n        accessibility tree\n      </FormControl.Caption>\n      <TextInput />\n    </FormControl>\n\n    <FormControl required={false}>\n      <FormControl.Label requiredText=\"(optional)\" requiredIndicator={false}>\n        Form Input Label\n      </FormControl.Label>\n      <FormControl.Caption>\n        This is a form field that is marked as optional, it is not required\n      </FormControl.Caption>\n      <TextInput />\n    </FormControl>\n  </Box>\n)"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "children",
          "type": "ReactNode",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "className",
          "type": "string",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "required": false,
          "description": "Whether the control allows user input",
          "defaultValue": ""
        },
        {
          "name": "id",
          "type": "string",
          "required": false,
          "description": "The unique identifier for this control. Used to associate the label, validation text, and caption text",
          "defaultValue": ""
        },
        {
          "name": "layout",
          "type": "\"vertical\" | \"horizontal\"",
          "required": false,
          "description": "The direction the content flows.\nVertical layout is used by default, and horizontal layout is used for checkbox and radio inputs.",
          "defaultValue": "vertical"
        },
        {
          "name": "required",
          "type": "boolean",
          "required": false,
          "description": "If true, the user must specify a value for the input before the owning form can be submitted",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        }
      ],
      "subcomponents": [
        {
          "name": "FormControl.Caption",
          "props": [
            {
              "name": "id",
              "type": "string",
              "required": false,
              "description": "Custom ID to override the ID set by FormControl's React Context",
              "defaultValue": ""
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "FormControl.Label",
          "props": [
            {
              "name": "as",
              "type": "\"label\" | \"legend\" | \"span\"",
              "required": false,
              "description": "The label element can be changed to a 'legend' when it's being used to label a fieldset, or a 'span' when it's being used to label an element that is not a form input. For example: when using a FormControl to render a labeled SegementedControl, the label should be a 'span'",
              "defaultValue": "label"
            },
            {
              "name": "disabled",
              "type": "boolean",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "htmlFor",
              "type": "string",
              "required": false,
              "description": "The unique identifier for the associated input\nThis prop may be used to override the `htmlFor` set from FormControl's React Context.",
              "defaultValue": ""
            },
            {
              "name": "id",
              "type": "string",
              "required": false,
              "description": "When `as` prop is 'label', it may be used to override the `htmlFor` given to the <label> element by FormControl's React Context.\nWhen 'as' prop is 'legend' or 'span', it is used as the `id` for the element.",
              "defaultValue": ""
            },
            {
              "name": "required",
              "type": "boolean",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "requiredIndicator",
              "type": "boolean",
              "required": false,
              "description": "Whether to show or hide the required text in the accessibility tree, the required text is still shown visually.",
              "defaultValue": true
            },
            {
              "name": "requiredText",
              "type": "string",
              "required": false,
              "description": "The text to display when the field is required",
              "defaultValue": "*"
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            },
            {
              "name": "visuallyHidden",
              "type": "boolean",
              "required": false,
              "description": "Whether the label should be visually hidden",
              "defaultValue": "false"
            }
          ]
        },
        {
          "name": "FormControl.LeadingVisual",
          "props": [
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "FormControl.Validation",
          "props": [
            {
              "name": "variant",
              "type": "\"success\" | \"error\"",
              "required": true,
              "description": "Changes the visual style to match the validation status",
              "defaultValue": ""
            },
            {
              "name": "id",
              "type": "string",
              "required": false,
              "description": "May be used to override the ID assigned by FormControl's React Context",
              "defaultValue": ""
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    "heading": {
      "id": "heading",
      "name": "Heading",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-heading--default",
          "code": "() => <Heading>Default H2 Heading</Heading>"
        },
        {
          "id": "components-heading-features--test-sx",
          "code": "() => (\n  <Heading\n    sx={{\n      fontSize: 2,\n      fontWeight: 'normal',\n    }}\n  >\n    Heading with sx override\n  </Heading>\n)"
        },
        {
          "id": "components-heading-features--small",
          "code": "() => <Heading variant=\"small\">Small heading</Heading>"
        },
        {
          "id": "components-heading-features--medium",
          "code": "() => <Heading variant=\"medium\">Medium heading</Heading>"
        },
        {
          "id": "components-heading-features--large",
          "code": "() => <Heading variant=\"large\">Large heading</Heading>"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "as",
          "type": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"h1\" & ComponentClass<unknown, any> | \"h1\" & FunctionComponent<unknown> | \"h2\" & ComponentClass<unknown, any> | \"h2\" & FunctionComponent<unknown> | \"h3\" & ComponentClass<unknown, any> | \"h3\" & FunctionComponent<unknown> | \"h4\" & ComponentClass<unknown, any> | \"h4\" & FunctionComponent<unknown> | \"h5\" & ComponentClass<unknown, any> | \"h5\" & FunctionComponent<unknown> | \"h6\" & ComponentClass<unknown, any> | \"h6\" & FunctionComponent<unknown>",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        },
        {
          "name": "variant",
          "type": "\"small\" | \"large\" | \"medium\"",
          "required": false,
          "description": "",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "drafts_hidden": {
      "id": "drafts_hidden",
      "name": "Hidden",
      "status": "draft",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "drafts-components-hidden--default",
          "code": "() => (\n  <>\n    <Text>\n      The below content is visible when the viewport is regular or wide but\n      hidden when narrow:\n    </Text>\n    <Hidden when=\"narrow\">\n      This is the said content and it is visible when the viewport is regular or\n      wide but hidden when narrow\n    </Hidden>\n  </>\n)"
        },
        {
          "id": "drafts-components-hidden-features--hide-content",
          "code": "() => (\n  <Box>\n    <Hidden when=\"narrow\">\n      {' '}\n      This value is shown in regular and wide viewports\n    </Hidden>\n    <Hidden when=\"regular\">\n      {' '}\n      This value is shown in narrow and wide viewports\n    </Hidden>\n    <Hidden when=\"wide\">\n      {' '}\n      This value is shown in narrow and regular viewports\n    </Hidden>\n  </Box>\n)"
        },
        {
          "id": "drafts-components-hidden-features--render-content-responsively",
          "code": "() => (\n  <Box>\n    <Hidden when=\"narrow\">\n      <Button variant=\"primary\">\n        I am visible when the viewport is regular or wide viewport\n      </Button>\n    </Hidden>\n\n    <Hidden when={['regular', 'wide']}>\n      <Button variant=\"primary\">\n        I am visible when the viewport is narrow\n      </Button>\n    </Hidden>\n  </Box>\n)"
        }
      ],
      "importPath": "@primer/react/drafts",
      "props": [
        {
          "name": "when",
          "type": "\"narrow\" | \"wide\" | \"regular\" | Viewport[]",
          "required": true,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "children",
          "type": "ReactNode",
          "required": false,
          "description": "",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "inline_message": {
      "id": "inline_message",
      "name": "InlineMessage",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-inlinemessage--default",
          "code": "() => {\n  return (\n    <InlineMessage variant=\"unavailable\">\n      An example inline message\n    </InlineMessage>\n  )\n}"
        },
        {
          "id": "components-inlinemessage-features--critical",
          "code": "() => {\n  return (\n    <InlineMessage variant=\"critical\">An example inline message</InlineMessage>\n  )\n}"
        },
        {
          "id": "components-inlinemessage-features--success",
          "code": "() => {\n  return (\n    <InlineMessage variant=\"success\">An example inline message</InlineMessage>\n  )\n}"
        },
        {
          "id": "components-inlinemessage-features--unavailable",
          "code": "() => {\n  return (\n    <InlineMessage variant=\"unavailable\">\n      An example inline message\n    </InlineMessage>\n  )\n}"
        },
        {
          "id": "components-inlinemessage-features--warning",
          "code": "() => {\n  return (\n    <InlineMessage variant=\"warning\">An example inline message</InlineMessage>\n  )\n}"
        },
        {
          "id": "components-inlinemessage-features--multiline",
          "code": "() => {\n  return (\n    <div\n      style={{\n        maxWidth: '30ch',\n      }}\n    >\n      <InlineMessage variant=\"success\">\n        An example inline message that spans multiple lines\n      </InlineMessage>\n    </div>\n  )\n}"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "variant",
          "type": "\"success\" | \"critical\" | \"warning\" | \"unavailable\"",
          "required": true,
          "description": "Specify the type of the InlineMessage",
          "defaultValue": ""
        },
        {
          "name": "size",
          "type": "\"small\" | \"medium\"",
          "required": false,
          "description": "Specify the size of the InlineMessage",
          "defaultValue": "medium"
        }
      ],
      "subcomponents": []
    },
    "keybinding_hint": {
      "id": "keybinding_hint",
      "name": "KeybindingHint",
      "status": "draft",
      "a11yReviewed": false,
      "stories": [],
      "importPath": "@primer/react/drafts",
      "props": [
        {
          "name": "keys",
          "type": "string",
          "required": true,
          "description": "The keys involved in this keybinding. These should be the full names of the keys as would\nbe returned by `KeyboardEvent.key` (e.g. \"Control\", \"Shift\", \"ArrowUp\", \"a\", etc.).\n\nCombine keys with the \"+\" character to form chords. To represent the \"+\" key, use \"Plus\".\n\nCombine chords/keys with \" \" to form sequences that should be pressed one after the other. For example, \"a b\"\nrepresents \"a then b\". To represent the \" \" key, use \"Space\".\n\nThe fake key name \"Mod\" can be used to represent \"Command\" on macOS and \"Control\" on other platforms.\n\nSee https://github.com/github/hotkey for format details.",
          "defaultValue": ""
        },
        {
          "name": "format",
          "type": "\"condensed\" | \"full\"",
          "required": false,
          "description": "Control the display format. Condensed is most useful in menus and tooltips, while\nthe full form is better for prose.",
          "defaultValue": "\"condensed\""
        },
        {
          "name": "variant",
          "type": "\"normal\" | \"onEmphasis\"",
          "required": false,
          "description": "Set to `onEmphasis` for display on emphasis colors.",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "label": {
      "id": "label",
      "name": "Label",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-label--default",
          "code": "() => <Label>Default</Label>"
        },
        {
          "id": "components-label-features--primary",
          "code": "() => <Label variant=\"primary\">Primary</Label>"
        },
        {
          "id": "components-label-features--secondary",
          "code": "() => <Label variant=\"secondary\">Secondary</Label>"
        },
        {
          "id": "components-label-features--accent",
          "code": "() => <Label variant=\"accent\">Accent</Label>"
        },
        {
          "id": "components-label-features--success",
          "code": "() => <Label variant=\"success\">Success</Label>"
        },
        {
          "id": "components-label-features--attention",
          "code": "() => <Label variant=\"attention\">Attention</Label>"
        },
        {
          "id": "components-label-features--severe",
          "code": "() => <Label variant=\"severe\">Primary</Label>"
        },
        {
          "id": "components-label-features--danger",
          "code": "() => <Label variant=\"danger\">Danger</Label>"
        },
        {
          "id": "components-label-features--done",
          "code": "() => <Label variant=\"done\">Done</Label>"
        },
        {
          "id": "components-label-features--sponsors",
          "code": "() => <Label variant=\"sponsors\">Sponsors</Label>"
        },
        {
          "id": "components-label-features--size-large",
          "code": "() => <Label size=\"large\">Default</Label>"
        },
        {
          "id": "components-label-features--size-small",
          "code": "() => <Label size=\"small\">Default</Label>"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "as",
          "type": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<unknown, any> | FunctionComponent<unknown>",
          "required": true,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "size",
          "type": "\"small\" | \"large\"",
          "required": false,
          "description": "How large the label is rendered",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        },
        {
          "name": "variant",
          "type": "\"default\" | \"accent\" | \"success\" | \"attention\" | \"severe\" | \"danger\" | \"done\" | \"sponsors\" | \"primary\" | \"secondary\"",
          "required": false,
          "description": "The color of the label",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "label_group": {
      "id": "label_group",
      "name": "LabelGroup",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-labelgroup--default",
          "code": "() => (\n  <LabelGroup>\n    <Label>One</Label>\n    <Label>Two</Label>\n    <Label>Three</Label>\n    <Label>Four</Label>\n    <Label>Five</Label>\n    <Label>Six</Label>\n    <Label>Seven</Label>\n    <Label>Eight</Label>\n    <Label>Nine</Label>\n    <Label>Ten</Label>\n    <Label>Eleven</Label>\n    <Label>Twelve</Label>\n    <Label>Thirteen</Label>\n    <Label>Fourteen</Label>\n    <Label>Fifteen</Label>\n    <Label>Sixteen</Label>\n  </LabelGroup>\n)"
        },
        {
          "id": "components-labelgroup-features--truncate-auto",
          "code": "() => (\n  <ResizableContainer>\n    <LabelGroup visibleChildCount=\"auto\">\n      <Label>One</Label>\n      <Label>Two</Label>\n      <Label>Three</Label>\n      <Label>Four</Label>\n      <Label>Five</Label>\n      <Label>Six</Label>\n      <Label>Seven</Label>\n      <Label>Eight</Label>\n      <Label>Nine</Label>\n      <Label>Ten</Label>\n      <Label>Eleven</Label>\n      <Label>Twelve</Label>\n      <Label>Thirteen</Label>\n      <Label>Fourteen</Label>\n      <Label>Fifteen</Label>\n      <Label>Sixteen</Label>\n    </LabelGroup>\n  </ResizableContainer>\n)"
        },
        {
          "id": "components-labelgroup-features--truncate-auto-with-interactive-tokens",
          "code": "() => (\n  <ResizableContainer>\n    <LabelGroup visibleChildCount=\"auto\">\n      <Token as=\"button\" text=\"One\" />\n      <Token as=\"button\" text=\"Two\" />\n      <Token as=\"button\" text=\"Three\" />\n      <Token as=\"button\" text=\"Four\" />\n      <Token as=\"button\" text=\"Five\" />\n      <Token as=\"button\" text=\"Six\" />\n      <Token as=\"button\" text=\"Seven\" />\n      <Token as=\"button\" text=\"Eight\" />\n      <Token as=\"button\" text=\"Nine\" />\n      <Token as=\"button\" text=\"Ten\" />\n      <Token as=\"button\" text=\"Eleven\" />\n      <Token as=\"button\" text=\"Twelve\" />\n      <Token as=\"button\" text=\"Thirteen\" />\n      <Token as=\"button\" text=\"Fourteen\" />\n      <Token as=\"button\" text=\"Fifteen\" />\n      <Token as=\"button\" text=\"Sixteen\" />\n    </LabelGroup>\n  </ResizableContainer>\n)"
        },
        {
          "id": "components-labelgroup-features--truncate-after-five",
          "code": "() => (\n  <LabelGroup visibleChildCount={5}>\n    <Label>One</Label>\n    <Label>Two</Label>\n    <Label>Three</Label>\n    <Label>Four</Label>\n    <Label>Five</Label>\n    <Label>Six</Label>\n    <Label>Seven</Label>\n    <Label>Eight</Label>\n    <Label>Nine</Label>\n    <Label>Ten</Label>\n    <Label>Eleven</Label>\n    <Label>Twelve</Label>\n    <Label>Thirteen</Label>\n    <Label>Fourteen</Label>\n    <Label>Fifteen</Label>\n    <Label>Sixteen</Label>\n  </LabelGroup>\n)"
        },
        {
          "id": "components-labelgroup-features--truncate-auto-expand-inline",
          "code": "() => (\n  <ResizableContainer>\n    <LabelGroup visibleChildCount=\"auto\" overflowStyle=\"inline\">\n      <Label>One</Label>\n      <Label>Two</Label>\n      <Label>Three</Label>\n      <Label>Four</Label>\n      <Label>Five</Label>\n      <Label>Six</Label>\n      <Label>Seven</Label>\n      <Label>Eight</Label>\n      <Label>Nine</Label>\n      <Label>Ten</Label>\n      <Label>Eleven</Label>\n      <Label>Twelve</Label>\n      <Label>Thirteen</Label>\n      <Label>Fourteen</Label>\n      <Label>Fifteen</Label>\n      <Label>Sixteen</Label>\n    </LabelGroup>\n  </ResizableContainer>\n)"
        },
        {
          "id": "components-labelgroup-features--truncate-auto-expand-inline-with-interactive-tokens",
          "code": "() => (\n  <ResizableContainer>\n    <LabelGroup visibleChildCount=\"auto\" overflowStyle=\"inline\">\n      <Token as=\"button\" text=\"One\" />\n      <Token as=\"button\" text=\"Two\" />\n      <Token as=\"button\" text=\"Three\" />\n      <Token as=\"button\" text=\"Four\" />\n      <Token as=\"button\" text=\"Five\" />\n      <Token as=\"button\" text=\"Six\" />\n      <Token as=\"button\" text=\"Seven\" />\n      <Token as=\"button\" text=\"Eight\" />\n      <Token as=\"button\" text=\"Nine\" />\n      <Token as=\"button\" text=\"Ten\" />\n      <Token as=\"button\" text=\"Eleven\" />\n      <Token as=\"button\" text=\"Twelve\" />\n      <Token as=\"button\" text=\"Thirteen\" />\n      <Token as=\"button\" text=\"Fourteen\" />\n      <Token as=\"button\" text=\"Fifteen\" />\n      <Token as=\"button\" text=\"Sixteen\" />\n    </LabelGroup>\n  </ResizableContainer>\n)"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "overflowStyle",
          "type": "\"inline\" | \"overlay\"",
          "required": false,
          "description": "How hidden tokens should be shown. `'inline'` shows the hidden tokens after the visible tokens. `'overlay'` shows all tokens in an overlay that appears on top of the visible tokens.",
          "defaultValue": "overlay"
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        },
        {
          "name": "visibleChildCount",
          "type": "number | \"auto\"",
          "required": false,
          "description": "How many tokens to show. `'auto'` truncates the tokens to fit in the parent container. Passing a number will truncate after that number tokens. If this is undefined, tokens will never be truncated.",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "link": {
      "id": "link",
      "name": "Link",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-link--default",
          "code": "() => <Link href=\"#\">Link</Link>"
        },
        {
          "id": "components-link-features--muted",
          "code": "() => (\n  <Link href=\"#\" muted>\n    Link\n  </Link>\n)"
        },
        {
          "id": "components-link-features--underline",
          "code": "() => (\n  <Link href=\"#\" underline>\n    Link\n  </Link>\n)"
        },
        {
          "id": "components-link-features--inline",
          "code": "() => (\n  <div data-a11y-link-underlines=\"true\">\n    <Link inline={true} href=\"#\">\n      Link\n    </Link>\n  </div>\n)"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "as",
          "type": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<unknown, any> | FunctionComponent<unknown>",
          "required": true,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "hoverColor",
          "type": "string",
          "required": false,
          "description": "Color used when hovering over the link.",
          "defaultValue": ""
        },
        {
          "name": "inline",
          "type": "boolean",
          "required": false,
          "description": "Set to true for links adjacent to text, underlining them for clear visibility and improved accessibility.",
          "defaultValue": ""
        },
        {
          "name": "muted",
          "type": "boolean",
          "required": false,
          "description": "Uses a less prominent shade for Link color, and the default link shade on hover.",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        },
        {
          "name": "underline",
          "type": "boolean",
          "required": false,
          "description": "@deprecated use `inline` to specify the type of link instead",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "nav_list": {
      "id": "nav_list",
      "name": "NavList",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "children",
          "type": "ReactNode",
          "required": false,
          "description": "NavList items",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        }
      ],
      "subcomponents": [
        {
          "name": "NavList.Divider",
          "props": [
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "NavList.Group",
          "props": [
            {
              "name": "children",
              "type": "ReactNode",
              "required": true,
              "description": "A related set of NavList.Items",
              "defaultValue": ""
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            },
            {
              "name": "title",
              "type": "string",
              "required": false,
              "description": "Title of the group",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "NavList.Item",
          "props": [
            {
              "name": "as",
              "type": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<unknown, any> | FunctionComponent<unknown>",
              "required": true,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "children",
              "type": "ReactNode",
              "required": true,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "aria-current",
              "type": "false | true | \"time\" | \"step\" | \"date\" | \"true\" | \"false\" | \"page\" | \"location\"",
              "required": false,
              "description": "Indicates that this item is the current item in the NavList. See https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-current for more info.",
              "defaultValue": ""
            },
            {
              "name": "defaultOpen",
              "type": "boolean",
              "required": false,
              "description": "Expanded to show children bty default if this is a NavList.Item with nested items.",
              "defaultValue": ""
            },
            {
              "name": "href",
              "type": "string",
              "required": false,
              "description": "URL that this NavList.Item links to",
              "defaultValue": ""
            },
            {
              "name": "inactiveText",
              "type": "string",
              "required": false,
              "description": "Text to explain why this item is currently inactive and cannot be activated.",
              "defaultValue": ""
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "NavList.SubNav",
          "props": [
            {
              "name": "children",
              "type": "ReactNode",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "NavList.TrailingAction",
          "props": [
            {
              "name": "label",
              "type": "string",
              "required": true,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "as",
              "type": "\"a\" | \"button\" | \"button\" & ComponentClass<unknown, any> | \"button\" & FunctionComponent<unknown> | \"a\" & ComponentClass<unknown, any> | \"a\" & FunctionComponent<unknown>",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "href",
              "type": "string",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "icon",
              "type": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
              "required": false,
              "description": "",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    "octicon": {
      "id": "octicon",
      "name": "Octicon",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-octicon--default",
          "code": "() => <Octicon icon={HeartFillIcon} aria-label=\"Like\" size={32} />"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "icon",
          "type": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
          "required": true,
          "description": "Checks the input by default in uncontrolled modeName of the [Octicon component](https://primer.style/octicons/) used in the",
          "defaultValue": ""
        },
        {
          "name": "color",
          "type": "string",
          "required": false,
          "description": "Sets an override color for the Octicon. Compatible with colors from the [Primer color system](https://primer.style/primitives/colors).",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "overlay": {
      "id": "overlay",
      "name": "Overlay",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-overlay-features--dropdown-overlay",
          "code": "({ anchorSide }: OverlayProps) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const buttonRef = useRef<HTMLButtonElement>(null)\n  return (\n    <>\n      <Button\n        ref={buttonRef}\n        sx={{\n          position: 'relative',\n        }}\n        onClick={() => setIsOpen(!isOpen)}\n      >\n        open overlay\n      </Button>\n      {isOpen ? (\n        <Overlay\n          returnFocusRef={buttonRef}\n          height=\"auto\"\n          width=\"small\"\n          ignoreClickRefs={[buttonRef]}\n          onEscape={() => setIsOpen(false)}\n          onClickOutside={() => setIsOpen(false)}\n          anchorSide={anchorSide}\n        >\n          <ActionList>\n            <ActionList.Item>Copy link</ActionList.Item>\n            <ActionList.Item>Quote reply</ActionList.Item>\n            <ActionList.Item>Reference in new issue</ActionList.Item>\n            <ActionList.Item>Edit</ActionList.Item>\n            <ActionList.Divider />\n            <ActionList.Item variant=\"danger\">Delete</ActionList.Item>\n          </ActionList>\n        </Overlay>\n      ) : null}\n    </>\n  )\n}"
        },
        {
          "id": "components-overlay-features--dialog-overlay",
          "code": "({ anchorSide }: OverlayProps) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const buttonRef = useRef<HTMLButtonElement>(null)\n  const confirmButtonRef = useRef<HTMLButtonElement>(null)\n  const anchorRef = useRef<HTMLDivElement>(null)\n  const closeOverlay = () => setIsOpen(false)\n  return (\n    <Box ref={anchorRef}>\n      <Button ref={buttonRef} onClick={() => setIsOpen(!isOpen)}>\n        open overlay\n      </Button>\n      {isOpen ? (\n        <Overlay\n          initialFocusRef={confirmButtonRef}\n          returnFocusRef={buttonRef}\n          ignoreClickRefs={[buttonRef]}\n          onEscape={closeOverlay}\n          onClickOutside={closeOverlay}\n          width=\"small\"\n          anchorSide={anchorSide}\n        >\n          <Box display=\"flex\" flexDirection=\"column\" p={2}>\n            <Text>Are you sure?</Text>\n            <Button variant=\"danger\" onClick={closeOverlay}>\n              Cancel\n            </Button>\n            <Button onClick={closeOverlay} ref={confirmButtonRef}>\n              Confirm\n            </Button>\n          </Box>\n        </Overlay>\n      ) : null}\n    </Box>\n  )\n}"
        },
        {
          "id": "components-overlay-features--overlay-on-top-of-overlay",
          "code": "({ anchorSide }: OverlayProps) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const [isSecondaryOpen, setIsSecondaryOpen] = useState(false)\n  const buttonRef = useRef<HTMLButtonElement>(null)\n  const secondaryButtonRef = useRef<HTMLButtonElement>(null)\n  const confirmButtonRef = useRef<HTMLButtonElement>(null)\n  const anchorRef = useRef<HTMLDivElement>(null)\n  const closeOverlay = () => setIsOpen(false) // intentionally not memoized\n  const closeSecondaryOverlay = useCallback(\n    () => setIsSecondaryOpen(false),\n    [setIsSecondaryOpen],\n  )\n  const items = ['🔵 Cyan', '🔴 Magenta', '🟡 Yellow']\n  const [selectedItem, setSelectedItem] = React.useState(items[0])\n  return (\n    <Box\n      position=\"absolute\"\n      top={0}\n      left={0}\n      bottom={0}\n      right={0}\n      ref={anchorRef}\n    >\n      <input placeholder=\"Input for focus testing\" />\n      <br />\n      <Button ref={buttonRef} onClick={() => setIsOpen(!isOpen)}>\n        open overlay\n      </Button>\n      {isOpen ? (\n        <Overlay\n          initialFocusRef={confirmButtonRef}\n          returnFocusRef={buttonRef}\n          onEscape={closeOverlay}\n          onClickOutside={closeOverlay}\n          width=\"small\"\n          anchorSide={anchorSide}\n        >\n          <Button\n            ref={secondaryButtonRef}\n            onClick={() => setIsSecondaryOpen(!isSecondaryOpen)}\n          >\n            open overlay\n          </Button>\n          {isSecondaryOpen ? (\n            <Overlay\n              initialFocusRef={confirmButtonRef}\n              returnFocusRef={secondaryButtonRef}\n              onEscape={closeSecondaryOverlay}\n              onClickOutside={closeSecondaryOverlay}\n              width=\"small\"\n              sx={{\n                top: '40px',\n              }}\n              anchorSide={anchorSide}\n            >\n              <Box display=\"flex\" flexDirection=\"column\" p={2}>\n                <Text>Select an option!</Text>\n                <ActionMenu>\n                  <ActionMenu.Button\n                    sx={{\n                      width: 200,\n                    }}\n                  >\n                    {selectedItem}\n                  </ActionMenu.Button>\n                  <ActionMenu.Overlay>\n                    <ActionList selectionVariant=\"single\">\n                      {items.map((item) => (\n                        <ActionList.Item\n                          key={item}\n                          selected={item === selectedItem}\n                          onSelect={() => setSelectedItem(item)}\n                        >\n                          {item}\n                        </ActionList.Item>\n                      ))}\n                    </ActionList>\n                  </ActionMenu.Overlay>\n                </ActionMenu>\n              </Box>\n            </Overlay>\n          ) : null}\n        </Overlay>\n      ) : null}\n    </Box>\n  )\n}"
        },
        {
          "id": "components-overlay-features--memex-nested-overlays",
          "code": "() => {\n  const [overlayOpen, setOverlayOpen] = React.useState(false)\n  const buttonRef = useRef<HTMLButtonElement>(null)\n  const durations = ['days', 'weeks']\n  const [duration, setDuration] = React.useState(durations[0])\n  return (\n    <div>\n      <ButtonGroup>\n        <Button>Add iteration</Button>\n        <IconButton\n          aria-label=\"Add custom iteration\"\n          ref={buttonRef}\n          onClick={() => setOverlayOpen(!overlayOpen)}\n          icon={TriangleDownIcon}\n        />\n      </ButtonGroup>\n      {overlayOpen && (\n        <Overlay\n          width=\"medium\"\n          onEscape={() => setOverlayOpen(false)}\n          onClickOutside={() => setOverlayOpen(false)}\n          returnFocusRef={buttonRef}\n          ignoreClickRefs={[buttonRef]}\n          top={60}\n          left={16}\n        >\n          <Box\n            as=\"form\"\n            onSubmit={() => setOverlayOpen(false)}\n            sx={{\n              display: 'flex',\n              flexDirection: 'column',\n              py: 2,\n            }}\n          >\n            <Box\n              sx={{\n                paddingX: 3,\n                display: 'flex',\n                alignItems: 'center',\n                gap: 1,\n              }}\n            >\n              <Text\n                color=\"fg.muted\"\n                sx={{\n                  fontSize: 1,\n                }}\n              >\n                Duration:\n              </Text>\n              <TextInput defaultValue={2} />\n              <ActionMenu>\n                <ActionMenu.Button\n                  sx={{\n                    width: 200,\n                  }}\n                  aria-label=\"Change duration unit\"\n                >\n                  {duration}\n                </ActionMenu.Button>\n                <ActionMenu.Overlay>\n                  <ActionList selectionVariant=\"single\">\n                    {durations.map((item) => (\n                      <ActionList.Item\n                        key={item}\n                        selected={item === duration}\n                        onSelect={() => setDuration(item)}\n                      >\n                        {item}\n                      </ActionList.Item>\n                    ))}\n                  </ActionList>\n                </ActionMenu.Overlay>\n              </ActionMenu>\n            </Box>\n            <ActionList.Divider />\n            <Box\n              sx={{\n                display: 'flex',\n                justifyContent: 'flex-end',\n                px: 2,\n                gap: 1,\n              }}\n            >\n              <Button>Cancel</Button>\n              <Button variant=\"primary\">Add</Button>\n            </Box>\n          </Box>\n        </Overlay>\n      )}\n    </div>\n  )\n}"
        },
        {
          "id": "components-overlay-features--nested-overlays",
          "code": "() => {\n  const [listOverlayOpen, setListOverlayOpen] = React.useState(false)\n  const [createListOverlayOpen, setCreateListOverlayOpen] =\n    React.useState(false)\n  const buttonRef = useRef<HTMLButtonElement>(null)\n  const secondaryButtonRef = useRef<HTMLButtonElement>(null)\n  React.useEffect(() => {\n    // eslint-disable-next-line no-console\n    const handler = (event: KeyboardEvent) =>\n      console.log('global handler:', event.key)\n    document.addEventListener('keydown', handler)\n    return () => document.removeEventListener('keydown', handler)\n  }, [])\n  return (\n    <div>\n      <TextInput placeholder=\"Input for focus testing\" />\n      <div>\n        primary overlay open: {String(listOverlayOpen)}, secondary overlay open:{' '}\n        {String(createListOverlayOpen)}\n      </div>\n      <ButtonGroup>\n        <Button>Star</Button>\n        <IconButton\n          aria-label=\"Add this repository to a list\"\n          ref={buttonRef}\n          onClick={() => setListOverlayOpen(!listOverlayOpen)}\n          icon={TriangleDownIcon}\n        />\n      </ButtonGroup>\n      {listOverlayOpen && (\n        <Overlay\n          width=\"medium\"\n          onEscape={() => setListOverlayOpen(false)}\n          onClickOutside={() => setListOverlayOpen(false)}\n          returnFocusRef={buttonRef}\n          ignoreClickRefs={[buttonRef]}\n          top={100}\n          left={16}\n        >\n          <Box\n            sx={{\n              display: 'flex',\n              flexDirection: 'column',\n              py: 2,\n            }}\n          >\n            <Box\n              sx={{\n                paddingX: 3,\n                paddingY: 2,\n              }}\n            >\n              <CheckboxGroup>\n                <CheckboxGroup.Label>Add to list</CheckboxGroup.Label>\n                <FormControl>\n                  <FormControl.Label>My stack</FormControl.Label>\n                  <FormControl.Caption id=\"custom-checkbox-one-caption\">\n                    Personal repositories\n                  </FormControl.Caption>\n                  <Checkbox value=\"my-stack\" />\n                </FormControl>\n                <FormControl>\n                  <FormControl.Label>Want to try</FormControl.Label>\n                  <FormControl.Caption id=\"custom-checkbox-one-caption\">\n                    Testing new libraries\n                  </FormControl.Caption>\n                  <Checkbox value=\"wanna-try\" />\n                </FormControl>\n              </CheckboxGroup>\n            </Box>\n            <ActionList.Divider />\n            <Tooltip text=\"Allows you to add more lists\">\n              <Button\n                variant=\"invisible\"\n                ref={secondaryButtonRef}\n                sx={{\n                  px: 2,\n                  mx: 2,\n                  display: 'flex',\n                }}\n                leadingVisual={PlusIcon}\n                onClick={() => setCreateListOverlayOpen(!createListOverlayOpen)}\n              >\n                Create list\n              </Button>\n            </Tooltip>\n          </Box>\n          {createListOverlayOpen && (\n            <Overlay\n              width=\"medium\"\n              onEscape={() => setCreateListOverlayOpen(false)}\n              onClickOutside={() => setCreateListOverlayOpen(false)}\n              returnFocusRef={secondaryButtonRef}\n              ignoreClickRefs={[secondaryButtonRef]}\n              top={120}\n              left={64}\n            >\n              <Box\n                as=\"form\"\n                sx={{\n                  display: 'flex',\n                  flexDirection: 'column',\n                  p: 3,\n                }}\n              >\n                <Text\n                  color=\"fg.muted\"\n                  sx={{\n                    fontSize: 1,\n                    mb: 3,\n                  }}\n                >\n                  Create a list to organize your starred repositories.\n                </Text>\n                <TextInput\n                  placeholder=\"Name this list\"\n                  sx={{\n                    mb: 2,\n                  }}\n                />\n                <TextInput\n                  as=\"textarea\"\n                  placeholder=\"Write a description\"\n                  rows={3}\n                  sx={{\n                    mb: 2,\n                    textarea: {\n                      p: 2,\n                    },\n                  }}\n                />\n\n                <Button\n                  variant=\"primary\"\n                  onClick={() =>\n                    setCreateListOverlayOpen(!createListOverlayOpen)\n                  }\n                >\n                  Create\n                </Button>\n              </Box>\n            </Overlay>\n          )}\n        </Overlay>\n      )}\n    </div>\n  )\n}"
        },
        {
          "id": "components-overlay-features--memex-issue-overlay",
          "code": "() => {\n  const [overlayOpen, setOverlayOpen] = React.useState(false)\n  const linkRef = useRef<HTMLAnchorElement>(null)\n  const inputRef = useRef<HTMLInputElement>(null)\n  const buttonRef = useRef<HTMLButtonElement>(null)\n  const [title, setTitle] = React.useState('Implement draft issue editor')\n  const [editing, setEditing] = React.useState(false)\n  React.useEffect(() => {\n    // If we just started editing, focus the newly rendered input\n    if (editing) inputRef.current?.focus()\n  }, [editing])\n  return (\n    <>\n      <Link\n        href=\"#\"\n        muted\n        ref={linkRef}\n        onClick={(event) => {\n          event.preventDefault()\n          setOverlayOpen(true)\n        }}\n        sx={{\n          display: 'block',\n          border: '1px solid',\n          borderColor: 'border.default',\n          p: 2,\n          ':hover': {\n            backgroundColor: 'canvas.subtle',\n          },\n        }}\n      >\n        <IssueDraftIcon /> {title}\n      </Link>\n      {overlayOpen && (\n        <Overlay\n          height=\"auto\"\n          width=\"large\"\n          onEscape={() => setOverlayOpen(false)}\n          onClickOutside={() => setOverlayOpen(false)}\n          returnFocusRef={linkRef}\n          top={0}\n          left=\"calc(100vw - 480px)\"\n        >\n          <Box\n            sx={{\n              p: 4,\n              height: '100vh',\n            }}\n          >\n            <Box\n              sx={{\n                display: 'flex',\n                alignItems: 'center',\n                gap: 1,\n                mb: 2,\n              }}\n            >\n              <Label size=\"large\">\n                <IssueDraftIcon /> Draft\n              </Label>\n              <Text\n                sx={{\n                  fontSize: 1,\n                }}\n              >\n                opened 2 days ago,\n              </Text>\n              <Text\n                sx={{\n                  fontSize: 1,\n                }}\n              >\n                showing {editing ? 'input' : 'button'}\n              </Text>\n            </Box>\n            {editing ? (\n              <TextInput\n                defaultValue={title}\n                onBlur={(event: React.FocusEvent<HTMLInputElement>) => {\n                  setEditing(false)\n                  setTitle(event.target.value)\n                }}\n                onKeyDown={(event: React.KeyboardEvent<HTMLInputElement>) => {\n                  if (event.key === 'Enter') {\n                    setEditing(false)\n                    setTitle((event.target as HTMLInputElement).value)\n                  } else if (event.key === 'Escape') {\n                    setEditing(false)\n                    setTitle(title)\n                    event.preventDefault() // prevent Overlay from closing, this is what we recommend\n                    // event.stopPropagation() // this also works and feels nicer to use\n                  }\n                }}\n                ref={inputRef}\n                sx={{\n                  width: '100%',\n                  py: '2px',\n                  px: '7px',\n                  textAlign: 'left',\n                  color: 'fg.default',\n                  input: {\n                    fontWeight: 'bold',\n                    fontSize: 4,\n                    px: 0,\n                  },\n                }}\n              />\n            ) : (\n              <Button\n                variant=\"invisible\"\n                ref={buttonRef}\n                onClick={() => setEditing(true)}\n                aria-label=\"Change issue title\"\n                sx={{\n                  width: '100%',\n                  fontSize: 4,\n                  color: 'fg.default',\n                  p: 2,\n                  textAlign: 'left',\n                  borderRadius: '2',\n                }}\n              >\n                {title}\n              </Button>\n            )}\n          </Box>\n        </Overlay>\n      )}\n    </>\n  )\n}"
        },
        {
          "id": "components-overlay-features--positioned-overlays",
          "code": "({ right }: { right?: boolean }) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const [direction, setDirection] = useState<'left' | 'right'>(\n    right ? 'right' : 'left',\n  )\n  const buttonRef = useRef<HTMLButtonElement>(null)\n  const confirmButtonRef = useRef<HTMLButtonElement>(null)\n  const anchorRef = useRef<HTMLDivElement>(null)\n  const closeOverlay = () => setIsOpen(false)\n  return (\n    <Box ref={anchorRef}>\n      <Button\n        ref={buttonRef}\n        onClick={() => {\n          setIsOpen(!isOpen)\n          setDirection('left')\n        }}\n      >\n        Open left overlay\n      </Button>\n      <Button\n        ref={buttonRef}\n        onClick={() => {\n          setIsOpen(!isOpen)\n          setDirection('right')\n        }}\n        sx={{\n          mt: 2,\n        }}\n      >\n        Open right overlay\n      </Button>\n      {isOpen ? (\n        direction === 'left' ? (\n          <Overlay\n            initialFocusRef={confirmButtonRef}\n            returnFocusRef={buttonRef}\n            ignoreClickRefs={[buttonRef]}\n            onEscape={closeOverlay}\n            onClickOutside={closeOverlay}\n            width=\"auto\"\n            anchorSide=\"inside-right\"\n          >\n            <Box\n              sx={{\n                height: '100vh',\n                width: '500px',\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n              }}\n            >\n              <Text>Look! left aligned</Text>\n            </Box>\n          </Overlay>\n        ) : (\n          <Overlay\n            initialFocusRef={confirmButtonRef}\n            returnFocusRef={buttonRef}\n            ignoreClickRefs={[buttonRef]}\n            onEscape={closeOverlay}\n            onClickOutside={closeOverlay}\n            width=\"auto\"\n            anchorSide={'inside-left'}\n            right={0}\n            position=\"fixed\"\n          >\n            <Box\n              sx={{\n                height: '100vh',\n                width: '500px',\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n              }}\n            >\n              <Text>Look! right aligned</Text>\n            </Box>\n          </Overlay>\n        )\n      ) : null}\n    </Box>\n  )\n}"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "as",
          "type": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<unknown, any> | FunctionComponent<unknown>",
          "required": true,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "onClickOutside",
          "type": "(e: TouchOrMouseEvent) => void",
          "required": true,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "onEscape",
          "type": "(e: KeyboardEvent) => void",
          "required": true,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "returnFocusRef",
          "type": "RefObject<HTMLElement>",
          "required": true,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "anchorSide",
          "type": "\"inside-top\" | \"inside-bottom\" | \"inside-left\" | \"inside-right\" | \"inside-center\" | \"outside-top\" | \"outside-bottom\" | \"outside-left\" | \"outside-right\"",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "bottom",
          "type": "string | number | string & {}",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "children",
          "type": "ReactNode",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "data-test-id",
          "type": "unknown",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "height",
          "type": "\"small\" | \"initial\" | \"large\" | \"medium\" | \"auto\" | \"fit-content\" | \"xsmall\" | \"xlarge\"",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "ignoreClickRefs",
          "type": "RefObject<HTMLElement>[]",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "initialFocusRef",
          "type": "RefObject<HTMLElement>",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "left",
          "type": "string | number | string & {}",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "maxHeight",
          "type": "\"small\" | \"large\" | \"medium\" | \"fit-content\" | \"xsmall\" | \"xlarge\"",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "maxWidth",
          "type": "\"small\" | \"large\" | \"medium\" | \"xlarge\" | \"xxlarge\"",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "overflow",
          "type": "\"hidden\" | \"scroll\" | \"auto\" | \"visible\"",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "portalContainerName",
          "type": "string",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "position",
          "type": "\"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"fixed\" | \"-webkit-sticky\" | \"absolute\" | \"relative\" | \"static\" | \"sticky\"",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "preventFocusOnOpen",
          "type": "boolean",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "right",
          "type": "string | number | string & {}",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "role",
          "type": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | \"list\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"grid\" | \"gridcell\" | \"group\" | \"heading\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"region\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\"",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "style",
          "type": "CSSProperties",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        },
        {
          "name": "top",
          "type": "string | number | string & {}",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "visibility",
          "type": "\"hidden\" | \"visible\"",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "width",
          "type": "\"small\" | \"large\" | \"medium\" | \"auto\" | \"xlarge\" | \"xxlarge\"",
          "required": false,
          "description": "",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "drafts_page_header": {
      "id": "drafts_page_header",
      "name": "PageHeader",
      "status": "draft",
      "a11yReviewed": true,
      "stories": [
        {
          "id": "drafts-components-pageheader--default",
          "code": "() => (\n  <Box\n    sx={{\n      padding: 3,\n    }}\n  >\n    <PageHeader>\n      <PageHeader.TitleArea>\n        <PageHeader.Title>Title</PageHeader.Title>\n      </PageHeader.TitleArea>\n    </PageHeader>\n  </Box>\n)"
        },
        {
          "id": "drafts-components-pageheader-features--has-title-only",
          "code": "() => (\n  <Box\n    sx={{\n      padding: 3,\n    }}\n  >\n    <PageHeader>\n      <PageHeader.TitleArea>\n        <PageHeader.Title>Title</PageHeader.Title>\n      </PageHeader.TitleArea>\n    </PageHeader>\n  </Box>\n)"
        },
        {
          "id": "drafts-components-pageheader-features--has-large-title",
          "code": "() => (\n  <Box\n    sx={{\n      padding: 3,\n    }}\n  >\n    <PageHeader>\n      <PageHeader.TitleArea variant=\"large\">\n        <PageHeader.Title>Title</PageHeader.Title>\n      </PageHeader.TitleArea>\n    </PageHeader>\n  </Box>\n)"
        },
        {
          "id": "drafts-components-pageheader-features--with-leading-and-trailing-visuals",
          "code": "() => (\n  <Box\n    sx={{\n      padding: 3,\n    }}\n  >\n    <PageHeader>\n      <PageHeader.TitleArea>\n        <PageHeader.LeadingVisual>\n          <GitPullRequestIcon />\n        </PageHeader.LeadingVisual>\n        <PageHeader.Title>Title</PageHeader.Title>\n        <PageHeader.TrailingVisual>\n          <Label>Beta</Label>\n        </PageHeader.TrailingVisual>\n      </PageHeader.TitleArea>\n    </PageHeader>\n  </Box>\n)"
        },
        {
          "id": "drafts-components-pageheader-features--with-leading-visual-hidden-on-regular-viewport",
          "code": "() => (\n  <Box\n    sx={{\n      padding: 3,\n    }}\n  >\n    <PageHeader>\n      <PageHeader.TitleArea>\n        <PageHeader.LeadingVisual\n          hidden={{\n            regular: true,\n          }}\n        >\n          <GitPullRequestIcon />\n        </PageHeader.LeadingVisual>\n        <PageHeader.Title>Title</PageHeader.Title>\n        <PageHeader.TrailingVisual>\n          <Label>Beta</Label>\n        </PageHeader.TrailingVisual>\n      </PageHeader.TitleArea>\n    </PageHeader>\n  </Box>\n)"
        },
        {
          "id": "drafts-components-pageheader-features--with-actions",
          "code": "() => (\n  <Box\n    sx={{\n      padding: 3,\n    }}\n  >\n    <PageHeader>\n      <PageHeader.TitleArea>\n        <PageHeader.Title>Title</PageHeader.Title>\n      </PageHeader.TitleArea>\n      <PageHeader.Actions>\n        <IconButton aria-label=\"Workflows\" icon={WorkflowIcon} />\n        <IconButton aria-label=\"Insights\" icon={GraphIcon} />\n        <Button variant=\"primary\" trailingVisual={TriangleDownIcon}>\n          Add Item\n        </Button>\n        <IconButton aria-label=\"Settings\" icon={GearIcon} />\n      </PageHeader.Actions>\n    </PageHeader>\n  </Box>\n)"
        },
        {
          "id": "drafts-components-pageheader-features--with-description-slot",
          "code": "() => (\n  <Box\n    sx={{\n      padding: 3,\n    }}\n  >\n    <PageHeader>\n      <PageHeader.TitleArea>\n        <PageHeader.Title>add-pageheader-docs</PageHeader.Title>\n      </PageHeader.TitleArea>\n      <PageHeader.Description>\n        <Text\n          sx={{\n            fontSize: 1,\n            color: 'fg.muted',\n          }}\n        >\n          <Link\n            href=\"https://github.com/broccolinisoup\"\n            sx={{\n              fontWeight: 'bold',\n            }}\n          >\n            broccolinisoup\n          </Link>{' '}\n          created this branch 5 days ago · 14 commits · updated today\n        </Text>\n      </PageHeader.Description>\n    </PageHeader>\n  </Box>\n)"
        },
        {
          "id": "drafts-components-pageheader-features--with-navigation-slot",
          "code": "() => (\n  <Box\n    sx={{\n      padding: 3,\n    }}\n  >\n    <PageHeader>\n      <PageHeader.TitleArea>\n        <PageHeader.Title>Pull request title</PageHeader.Title>\n      </PageHeader.TitleArea>\n      <PageHeader.Navigation>\n        <UnderlineNav aria-label=\"Pull Request\">\n          <UnderlineNav.Item\n            icon={CommentDiscussionIcon}\n            counter=\"12\"\n            aria-current=\"page\"\n          >\n            Conversation\n          </UnderlineNav.Item>\n          <UnderlineNav.Item counter={3} icon={CommitIcon}>\n            Commits\n          </UnderlineNav.Item>\n          <UnderlineNav.Item counter={7} icon={ChecklistIcon}>\n            Checks\n          </UnderlineNav.Item>\n          <UnderlineNav.Item counter={4} icon={FileDiffIcon}>\n            Files Changes\n          </UnderlineNav.Item>\n        </UnderlineNav>\n      </PageHeader.Navigation>\n    </PageHeader>\n  </Box>\n)"
        },
        {
          "id": "drafts-components-pageheader-features--with-custom-navigation",
          "code": "() => (\n  <Box\n    sx={{\n      padding: 3,\n    }}\n  >\n    <PageHeader>\n      <PageHeader.TitleArea>\n        <PageHeader.Title>Pull request title</PageHeader.Title>\n      </PageHeader.TitleArea>\n      <PageHeader.Navigation as=\"nav\" aria-label=\"Item list\">\n        <Box\n          as=\"ul\"\n          sx={{\n            display: 'flex',\n            gap: '8px',\n            listStyle: 'none',\n            paddingY: 0,\n            paddingX: 3,\n          }}\n          role=\"list\"\n        >\n          <li>\n            <Link href=\"https://github.com/primer/react\" aria-current=\"page\">\n              Item 1\n            </Link>\n          </li>\n          <li>\n            <Link href=\"https://github.com/primer/react/pulls\">Item 2</Link>\n          </li>\n        </Box>\n      </PageHeader.Navigation>\n    </PageHeader>\n  </Box>\n)"
        },
        {
          "id": "drafts-components-pageheader-features--with-leading-and-trailing-actions",
          "code": "() => (\n  <Box\n    sx={{\n      padding: 3,\n    }}\n  >\n    <PageHeader>\n      <PageHeader.TitleArea>\n        <PageHeader.Title>Title</PageHeader.Title>\n      </PageHeader.TitleArea>\n      <PageHeader.LeadingAction>\n        <IconButton\n          aria-label=\"Expand\"\n          icon={SidebarExpandIcon}\n          variant=\"invisible\"\n        />\n      </PageHeader.LeadingAction>\n      <PageHeader.TrailingAction>\n        <IconButton aria-label=\"Edit\" icon={PencilIcon} variant=\"invisible\" />\n      </PageHeader.TrailingAction>\n    </PageHeader>\n  </Box>\n)"
        },
        {
          "id": "drafts-components-pageheader-features--with-parent-link-and-actions-of-context-area",
          "code": "() => (\n  <Box\n    sx={{\n      padding: 3,\n    }}\n  >\n    <PageHeader>\n      <PageHeader.TitleArea>\n        <PageHeader.Title>Title</PageHeader.Title>\n      </PageHeader.TitleArea>\n      <PageHeader.ContextArea>\n        <PageHeader.ParentLink href=\"http://github.com\">\n          Parent Link\n        </PageHeader.ParentLink>\n\n        <PageHeader.ContextAreaActions>\n          <Button size=\"small\" trailingAction={TriangleDownIcon}>\n            Add File\n          </Button>\n          <IconButton\n            size=\"small\"\n            aria-label=\"More Options\"\n            icon={KebabHorizontalIcon}\n          />\n        </PageHeader.ContextAreaActions>\n      </PageHeader.ContextArea>\n    </PageHeader>\n  </Box>\n)"
        },
        {
          "id": "drafts-components-pageheader-features--with-context-bar-and-actions-of-context-area",
          "code": "() => (\n  <Box\n    sx={{\n      padding: 3,\n    }}\n  >\n    <PageHeader>\n      <PageHeader.TitleArea>\n        <PageHeader.Title>Title</PageHeader.Title>\n      </PageHeader.TitleArea>\n      <PageHeader.ContextArea>\n        <PageHeader.ContextBar>\n          <Breadcrumbs>\n            <Breadcrumbs.Item href=\"https://github.com/primer/react/tree/main\">\n              react\n            </Breadcrumbs.Item>\n            <Breadcrumbs.Item href=\"https://github.com/primer/react/tree/main/src\">\n              src\n            </Breadcrumbs.Item>\n            <Breadcrumbs.Item href=\"https://github.com/primer/react/tree/main/src/PageHeader\">\n              PageHeader\n            </Breadcrumbs.Item>\n            <Breadcrumbs.Item href=\"https://github.com/primer/react/blob/main/src/PageHeader/PageHeader.tsx\">\n              PageHeader.tsx\n            </Breadcrumbs.Item>\n          </Breadcrumbs>\n        </PageHeader.ContextBar>\n        <PageHeader.ContextAreaActions>\n          <Button size=\"small\" leadingVisual={GitBranchIcon}>\n            Main\n          </Button>\n          <IconButton\n            size=\"small\"\n            aria-label=\"More Options\"\n            icon={KebabHorizontalIcon}\n          />\n        </PageHeader.ContextAreaActions>\n      </PageHeader.ContextArea>\n    </PageHeader>\n  </Box>\n)"
        },
        {
          "id": "drafts-components-pageheader-features--with-actions-that-have-responsive-content",
          "code": "() => (\n  <Box\n    sx={{\n      padding: 3,\n    }}\n  >\n    <PageHeader>\n      <PageHeader.TitleArea>\n        <PageHeader.Title as=\"h2\">Webhooks</PageHeader.Title>\n      </PageHeader.TitleArea>\n      <PageHeader.Actions>\n        <Hidden when={['narrow']}>\n          <Button variant=\"primary\">New webhook</Button>\n        </Hidden>\n        <Hidden when={['regular', 'wide']}>\n          <Button variant=\"primary\">New</Button>\n        </Hidden>\n      </PageHeader.Actions>\n    </PageHeader>\n  </Box>\n)"
        }
      ],
      "importPath": "@primer/react/drafts",
      "props": [
        {
          "name": "aria-label",
          "type": "string",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "as",
          "type": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> & \"symbol\" | FunctionComponent<any> & \"symbol\" | \"h1\" & ComponentClass<unknown, any> | \"h1\" & FunctionComponent<unknown> | \"h2\" & ComponentClass<unknown, any> | \"h2\" & FunctionComponent<unknown> | \"h3\" & ComponentClass<unknown, any> | \"h3\" & FunctionComponent<unknown> | \"h4\" & ComponentClass<unknown, any> | \"h4\" & FunctionComponent<unknown> | \"h5\" & ComponentClass<unknown, any> | \"h5\" & FunctionComponent<unknown> | \"h6\" & ComponentClass<unknown, any> | \"h6\" & FunctionComponent<unknown> | \"button\" & ComponentClass<unknown, any> | \"button\" & FunctionComponent<unknown> | \"a\" & ComponentClass<unknown, any> | \"a\" & FunctionComponent<unknown> | \"symbol\" & ComponentClass<any, any> | \"symbol\" & FunctionComponent<any> | \"object\" & ComponentClass<any, any> | \"object\" & FunctionComponent<any> | \"a\" & ComponentClass<any, any> | \"a\" & FunctionComponent<any> | \"abbr\" & ComponentClass<any, any> | \"abbr\" & FunctionComponent<any> | \"address\" & ComponentClass<any, any> | \"address\" & FunctionComponent<any> | \"area\" & ComponentClass<any, any> | \"area\" & FunctionComponent<any> | \"article\" & ComponentClass<any, any> | \"article\" & FunctionComponent<any> | \"aside\" & ComponentClass<any, any> | \"aside\" & FunctionComponent<any> | \"audio\" & ComponentClass<any, any> | \"audio\" & FunctionComponent<any> | \"b\" & ComponentClass<any, any> | \"b\" & FunctionComponent<any> | \"base\" & ComponentClass<any, any> | \"base\" & FunctionComponent<any> | \"bdi\" & ComponentClass<any, any> | \"bdi\" & FunctionComponent<any> | \"bdo\" & ComponentClass<any, any> | \"bdo\" & FunctionComponent<any> | \"big\" & ComponentClass<any, any> | \"big\" & FunctionComponent<any> | \"blockquote\" & ComponentClass<any, any> | \"blockquote\" & FunctionComponent<any> | \"body\" & ComponentClass<any, any> | \"body\" & FunctionComponent<any> | \"br\" & ComponentClass<any, any> | \"br\" & FunctionComponent<any> | \"button\" & ComponentClass<any, any> | \"button\" & FunctionComponent<any> | \"canvas\" & ComponentClass<any, any> | \"canvas\" & FunctionComponent<any> | \"caption\" & ComponentClass<any, any> | \"caption\" & FunctionComponent<any> | \"center\" & ComponentClass<any, any> | \"center\" & FunctionComponent<any> | \"cite\" & ComponentClass<any, any> | \"cite\" & FunctionComponent<any> | \"code\" & ComponentClass<any, any> | \"code\" & FunctionComponent<any> | \"col\" & ComponentClass<any, any> | \"col\" & FunctionComponent<any> | \"colgroup\" & ComponentClass<any, any> | \"colgroup\" & FunctionComponent<any> | \"data\" & ComponentClass<any, any> | \"data\" & FunctionComponent<any> | \"datalist\" & ComponentClass<any, any> | \"datalist\" & FunctionComponent<any> | \"dd\" & ComponentClass<any, any> | \"dd\" & FunctionComponent<any> | \"del\" & ComponentClass<any, any> | \"del\" & FunctionComponent<any> | \"details\" & ComponentClass<any, any> | \"details\" & FunctionComponent<any> | \"dfn\" & ComponentClass<any, any> | \"dfn\" & FunctionComponent<any> | \"dialog\" & ComponentClass<any, any> | \"dialog\" & FunctionComponent<any> | \"div\" & ComponentClass<any, any> | \"div\" & FunctionComponent<any> | \"dl\" & ComponentClass<any, any> | \"dl\" & FunctionComponent<any> | \"dt\" & ComponentClass<any, any> | \"dt\" & FunctionComponent<any> | \"em\" & ComponentClass<any, any> | \"em\" & FunctionComponent<any> | \"embed\" & ComponentClass<any, any> | \"embed\" & FunctionComponent<any> | \"fieldset\" & ComponentClass<any, any> | \"fieldset\" & FunctionComponent<any> | \"figcaption\" & ComponentClass<any, any> | \"figcaption\" & FunctionComponent<any> | \"figure\" & ComponentClass<any, any> | \"figure\" & FunctionComponent<any> | \"footer\" & ComponentClass<any, any> | \"footer\" & FunctionComponent<any> | \"form\" & ComponentClass<any, any> | \"form\" & FunctionComponent<any> | \"h1\" & ComponentClass<any, any> | \"h1\" & FunctionComponent<any> | \"h2\" & ComponentClass<any, any> | \"h2\" & FunctionComponent<any> | \"h3\" & ComponentClass<any, any> | \"h3\" & FunctionComponent<any> | \"h4\" & ComponentClass<any, any> | \"h4\" & FunctionComponent<any> | \"h5\" & ComponentClass<any, any> | \"h5\" & FunctionComponent<any> | \"h6\" & ComponentClass<any, any> | \"h6\" & FunctionComponent<any> | \"head\" & ComponentClass<any, any> | \"head\" & FunctionComponent<any> | \"header\" & ComponentClass<any, any> | \"header\" & FunctionComponent<any> | \"hgroup\" & ComponentClass<any, any> | \"hgroup\" & FunctionComponent<any> | \"hr\" & ComponentClass<any, any> | \"hr\" & FunctionComponent<any> | \"html\" & ComponentClass<any, any> | \"html\" & FunctionComponent<any> | \"i\" & ComponentClass<any, any> | \"i\" & FunctionComponent<any> | \"iframe\" & ComponentClass<any, any> | \"iframe\" & FunctionComponent<any> | \"img\" & ComponentClass<any, any> | \"img\" & FunctionComponent<any> | \"input\" & ComponentClass<any, any> | \"input\" & FunctionComponent<any> | \"ins\" & ComponentClass<any, any> | \"ins\" & FunctionComponent<any> | \"kbd\" & ComponentClass<any, any> | \"kbd\" & FunctionComponent<any> | \"keygen\" & ComponentClass<any, any> | \"keygen\" & FunctionComponent<any> | \"label\" & ComponentClass<any, any> | \"label\" & FunctionComponent<any> | \"legend\" & ComponentClass<any, any> | \"legend\" & FunctionComponent<any> | \"li\" & ComponentClass<any, any> | \"li\" & FunctionComponent<any> | \"link\" & ComponentClass<any, any> | \"link\" & FunctionComponent<any> | \"main\" & ComponentClass<any, any> | \"main\" & FunctionComponent<any> | \"map\" & ComponentClass<any, any> | \"map\" & FunctionComponent<any> | \"mark\" & ComponentClass<any, any> | \"mark\" & FunctionComponent<any> | \"menu\" & ComponentClass<any, any> | \"menu\" & FunctionComponent<any> | \"menuitem\" & ComponentClass<any, any> | \"menuitem\" & FunctionComponent<any> | \"meta\" & ComponentClass<any, any> | \"meta\" & FunctionComponent<any> | \"meter\" & ComponentClass<any, any> | \"meter\" & FunctionComponent<any> | \"nav\" & ComponentClass<any, any> | \"nav\" & FunctionComponent<any> | \"noindex\" & ComponentClass<any, any> | \"noindex\" & FunctionComponent<any> | \"noscript\" & ComponentClass<any, any> | \"noscript\" & FunctionComponent<any> | \"ol\" & ComponentClass<any, any> | \"ol\" & FunctionComponent<any> | \"optgroup\" & ComponentClass<any, any> | \"optgroup\" & FunctionComponent<any> | \"option\" & ComponentClass<any, any> | \"option\" & FunctionComponent<any> | \"output\" & ComponentClass<any, any> | \"output\" & FunctionComponent<any> | \"p\" & ComponentClass<any, any> | \"p\" & FunctionComponent<any> | \"param\" & ComponentClass<any, any> | \"param\" & FunctionComponent<any> | \"picture\" & ComponentClass<any, any> | \"picture\" & FunctionComponent<any> | \"pre\" & ComponentClass<any, any> | \"pre\" & FunctionComponent<any> | \"progress\" & ComponentClass<any, any> | \"progress\" & FunctionComponent<any> | \"q\" & ComponentClass<any, any> | \"q\" & FunctionComponent<any> | \"rp\" & ComponentClass<any, any> | \"rp\" & FunctionComponent<any> | \"rt\" & ComponentClass<any, any> | \"rt\" & FunctionComponent<any> | \"ruby\" & ComponentClass<any, any> | \"ruby\" & FunctionComponent<any> | \"s\" & ComponentClass<any, any> | \"s\" & FunctionComponent<any> | \"samp\" & ComponentClass<any, any> | \"samp\" & FunctionComponent<any> | \"search\" & ComponentClass<any, any> | \"search\" & FunctionComponent<any> | \"slot\" & ComponentClass<any, any> | \"slot\" & FunctionComponent<any> | \"script\" & ComponentClass<any, any> | \"script\" & FunctionComponent<any> | \"section\" & ComponentClass<any, any> | \"section\" & FunctionComponent<any> | \"select\" & ComponentClass<any, any> | \"select\" & FunctionComponent<any> | \"small\" & ComponentClass<any, any> | \"small\" & FunctionComponent<any> | \"source\" & ComponentClass<any, any> | \"source\" & FunctionComponent<any> | \"span\" & ComponentClass<any, any> | \"span\" & FunctionComponent<any> | \"strong\" & ComponentClass<any, any> | \"strong\" & FunctionComponent<any> | \"style\" & ComponentClass<any, any> | \"style\" & FunctionComponent<any> | \"sub\" & ComponentClass<any, any> | \"sub\" & FunctionComponent<any> | \"summary\" & ComponentClass<any, any> | \"summary\" & FunctionComponent<any> | \"sup\" & ComponentClass<any, any> | \"sup\" & FunctionComponent<any> | \"table\" & ComponentClass<any, any> | \"table\" & FunctionComponent<any> | \"template\" & ComponentClass<any, any> | \"template\" & FunctionComponent<any> | \"tbody\" & ComponentClass<any, any> | \"tbody\" & FunctionComponent<any> | \"td\" & ComponentClass<any, any> | \"td\" & FunctionComponent<any> | \"textarea\" & ComponentClass<any, any> | \"textarea\" & FunctionComponent<any> | \"tfoot\" & ComponentClass<any, any> | \"tfoot\" & FunctionComponent<any> | \"th\" & ComponentClass<any, any> | \"th\" & FunctionComponent<any> | \"thead\" & ComponentClass<any, any> | \"thead\" & FunctionComponent<any> | \"time\" & ComponentClass<any, any> | \"time\" & FunctionComponent<any> | \"title\" & ComponentClass<any, any> | \"title\" & FunctionComponent<any> | \"tr\" & ComponentClass<any, any> | \"tr\" & FunctionComponent<any> | \"track\" & ComponentClass<any, any> | \"track\" & FunctionComponent<any> | \"u\" & ComponentClass<any, any> | \"u\" & FunctionComponent<any> | \"ul\" & ComponentClass<any, any> | \"ul\" & FunctionComponent<any> | \"var\" & ComponentClass<any, any> | \"var\" & FunctionComponent<any> | \"video\" & ComponentClass<any, any> | \"video\" & FunctionComponent<any> | \"wbr\" & ComponentClass<any, any> | \"wbr\" & FunctionComponent<any> | \"webview\" & ComponentClass<any, any> | \"webview\" & FunctionComponent<any> | \"svg\" & ComponentClass<any, any> | \"svg\" & FunctionComponent<any> | \"animate\" & ComponentClass<any, any> | \"animate\" & FunctionComponent<any> | \"animateMotion\" & ComponentClass<any, any> | \"animateMotion\" & FunctionComponent<any> | \"animateTransform\" & ComponentClass<any, any> | \"animateTransform\" & FunctionComponent<any> | \"circle\" & ComponentClass<any, any> | \"circle\" & FunctionComponent<any> | \"clipPath\" & ComponentClass<any, any> | \"clipPath\" & FunctionComponent<any> | \"defs\" & ComponentClass<any, any> | \"defs\" & FunctionComponent<any> | \"desc\" & ComponentClass<any, any> | \"desc\" & FunctionComponent<any> | \"ellipse\" & ComponentClass<any, any> | \"ellipse\" & FunctionComponent<any> | \"feBlend\" & ComponentClass<any, any> | \"feBlend\" & FunctionComponent<any> | \"feColorMatrix\" & ComponentClass<any, any> | \"feColorMatrix\" & FunctionComponent<any> | \"feComponentTransfer\" & ComponentClass<any, any> | \"feComponentTransfer\" & FunctionComponent<any> | \"feComposite\" & ComponentClass<any, any> | \"feComposite\" & FunctionComponent<any> | \"feConvolveMatrix\" & ComponentClass<any, any> | \"feConvolveMatrix\" & FunctionComponent<any> | \"feDiffuseLighting\" & ComponentClass<any, any> | \"feDiffuseLighting\" & FunctionComponent<any> | \"feDisplacementMap\" & ComponentClass<any, any> | \"feDisplacementMap\" & FunctionComponent<any> | \"feDistantLight\" & ComponentClass<any, any> | \"feDistantLight\" & FunctionComponent<any> | \"feDropShadow\" & ComponentClass<any, any> | \"feDropShadow\" & FunctionComponent<any> | \"feFlood\" & ComponentClass<any, any> | \"feFlood\" & FunctionComponent<any> | \"feFuncA\" & ComponentClass<any, any> | \"feFuncA\" & FunctionComponent<any> | \"feFuncB\" & ComponentClass<any, any> | \"feFuncB\" & FunctionComponent<any> | \"feFuncG\" & ComponentClass<any, any> | \"feFuncG\" & FunctionComponent<any> | \"feFuncR\" & ComponentClass<any, any> | \"feFuncR\" & FunctionComponent<any> | \"feGaussianBlur\" & ComponentClass<any, any> | \"feGaussianBlur\" & FunctionComponent<any> | \"feImage\" & ComponentClass<any, any> | \"feImage\" & FunctionComponent<any> | \"feMerge\" & ComponentClass<any, any> | \"feMerge\" & FunctionComponent<any> | \"feMergeNode\" & ComponentClass<any, any> | \"feMergeNode\" & FunctionComponent<any> | \"feMorphology\" & ComponentClass<any, any> | \"feMorphology\" & FunctionComponent<any> | \"feOffset\" & ComponentClass<any, any> | \"feOffset\" & FunctionComponent<any> | \"fePointLight\" & ComponentClass<any, any> | \"fePointLight\" & FunctionComponent<any> | \"feSpecularLighting\" & ComponentClass<any, any> | \"feSpecularLighting\" & FunctionComponent<any> | \"feSpotLight\" & ComponentClass<any, any> | \"feSpotLight\" & FunctionComponent<any> | \"feTile\" & ComponentClass<any, any> | \"feTile\" & FunctionComponent<any> | \"feTurbulence\" & ComponentClass<any, any> | \"feTurbulence\" & FunctionComponent<any> | \"filter\" & ComponentClass<any, any> | \"filter\" & FunctionComponent<any> | \"foreignObject\" & ComponentClass<any, any> | \"foreignObject\" & FunctionComponent<any> | \"g\" & ComponentClass<any, any> | \"g\" & FunctionComponent<any> | \"image\" & ComponentClass<any, any> | \"image\" & FunctionComponent<any> | \"line\" & ComponentClass<any, any> | \"line\" & FunctionComponent<any> | \"linearGradient\" & ComponentClass<any, any> | \"linearGradient\" & FunctionComponent<any> | \"marker\" & ComponentClass<any, any> | \"marker\" & FunctionComponent<any> | \"mask\" & ComponentClass<any, any> | \"mask\" & FunctionComponent<any> | \"metadata\" & ComponentClass<any, any> | \"metadata\" & FunctionComponent<any> | \"mpath\" & ComponentClass<any, any> | \"mpath\" & FunctionComponent<any> | \"path\" & ComponentClass<any, any> | \"path\" & FunctionComponent<any> | \"pattern\" & ComponentClass<any, any> | \"pattern\" & FunctionComponent<any> | \"polygon\" & ComponentClass<any, any> | \"polygon\" & FunctionComponent<any> | \"polyline\" & ComponentClass<any, any> | \"polyline\" & FunctionComponent<any> | \"radialGradient\" & ComponentClass<any, any> | \"radialGradient\" & FunctionComponent<any> | \"rect\" & ComponentClass<any, any> | \"rect\" & FunctionComponent<any> | \"set\" & ComponentClass<any, any> | \"set\" & FunctionComponent<any> | \"stop\" & ComponentClass<any, any> | \"stop\" & FunctionComponent<any> | \"switch\" & ComponentClass<any, any> | \"switch\" & FunctionComponent<any> | \"text\" & ComponentClass<any, any> | \"text\" & FunctionComponent<any> | \"textPath\" & ComponentClass<any, any> | \"textPath\" & FunctionComponent<any> | \"tspan\" & ComponentClass<any, any> | \"tspan\" & FunctionComponent<any> | \"use\" & ComponentClass<any, any> | \"use\" & FunctionComponent<any> | \"view\" & ComponentClass<any, any> | \"view\" & FunctionComponent<any> | \"relative-time\" & ComponentClass<any, any> | \"relative-time\" & FunctionComponent<any> | \"tab-container\" & ComponentClass<any, any> | \"tab-container\" & FunctionComponent<any> | ComponentClass<any, any> & ComponentClass<unknown, any> | ComponentClass<any, any> & FunctionComponent<unknown> | FunctionComponent<any> & ComponentClass<unknown, any> | FunctionComponent<any> & FunctionComponent<unknown> | ComponentClass<any, any> & \"object\" | ComponentClass<any, any> & \"a\" | ComponentClass<any, any> & \"abbr\" | ComponentClass<any, any> & \"address\" | ComponentClass<any, any> & \"area\" | ComponentClass<any, any> & \"article\" | ComponentClass<any, any> & \"aside\" | ComponentClass<any, any> & \"audio\" | ComponentClass<any, any> & \"b\" | ComponentClass<any, any> & \"base\" | ComponentClass<any, any> & \"bdi\" | ComponentClass<any, any> & \"bdo\" | ComponentClass<any, any> & \"big\" | ComponentClass<any, any> & \"blockquote\" | ComponentClass<any, any> & \"body\" | ComponentClass<any, any> & \"br\" | ComponentClass<any, any> & \"button\" | ComponentClass<any, any> & \"canvas\" | ComponentClass<any, any> & \"caption\" | ComponentClass<any, any> & \"center\" | ComponentClass<any, any> & \"cite\" | ComponentClass<any, any> & \"code\" | ComponentClass<any, any> & \"col\" | ComponentClass<any, any> & \"colgroup\" | ComponentClass<any, any> & \"data\" | ComponentClass<any, any> & \"datalist\" | ComponentClass<any, any> & \"dd\" | ComponentClass<any, any> & \"del\" | ComponentClass<any, any> & \"details\" | ComponentClass<any, any> & \"dfn\" | ComponentClass<any, any> & \"dialog\" | ComponentClass<any, any> & \"div\" | ComponentClass<any, any> & \"dl\" | ComponentClass<any, any> & \"dt\" | ComponentClass<any, any> & \"em\" | ComponentClass<any, any> & \"embed\" | ComponentClass<any, any> & \"fieldset\" | ComponentClass<any, any> & \"figcaption\" | ComponentClass<any, any> & \"figure\" | ComponentClass<any, any> & \"footer\" | ComponentClass<any, any> & \"form\" | ComponentClass<any, any> & \"h1\" | ComponentClass<any, any> & \"h2\" | ComponentClass<any, any> & \"h3\" | ComponentClass<any, any> & \"h4\" | ComponentClass<any, any> & \"h5\" | ComponentClass<any, any> & \"h6\" | ComponentClass<any, any> & \"head\" | ComponentClass<any, any> & \"header\" | ComponentClass<any, any> & \"hgroup\" | ComponentClass<any, any> & \"hr\" | ComponentClass<any, any> & \"html\" | ComponentClass<any, any> & \"i\" | ComponentClass<any, any> & \"iframe\" | ComponentClass<any, any> & \"img\" | ComponentClass<any, any> & \"input\" | ComponentClass<any, any> & \"ins\" | ComponentClass<any, any> & \"kbd\" | ComponentClass<any, any> & \"keygen\" | ComponentClass<any, any> & \"label\" | ComponentClass<any, any> & \"legend\" | ComponentClass<any, any> & \"li\" | ComponentClass<any, any> & \"link\" | ComponentClass<any, any> & \"main\" | ComponentClass<any, any> & \"map\" | ComponentClass<any, any> & \"mark\" | ComponentClass<any, any> & \"menu\" | ComponentClass<any, any> & \"menuitem\" | ComponentClass<any, any> & \"meta\" | ComponentClass<any, any> & \"meter\" | ComponentClass<any, any> & \"nav\" | ComponentClass<any, any> & \"noindex\" | ComponentClass<any, any> & \"noscript\" | ComponentClass<any, any> & \"ol\" | ComponentClass<any, any> & \"optgroup\" | ComponentClass<any, any> & \"option\" | ComponentClass<any, any> & \"output\" | ComponentClass<any, any> & \"p\" | ComponentClass<any, any> & \"param\" | ComponentClass<any, any> & \"picture\" | ComponentClass<any, any> & \"pre\" | ComponentClass<any, any> & \"progress\" | ComponentClass<any, any> & \"q\" | ComponentClass<any, any> & \"rp\" | ComponentClass<any, any> & \"rt\" | ComponentClass<any, any> & \"ruby\" | ComponentClass<any, any> & \"s\" | ComponentClass<any, any> & \"samp\" | ComponentClass<any, any> & \"search\" | ComponentClass<any, any> & \"slot\" | ComponentClass<any, any> & \"script\" | ComponentClass<any, any> & \"section\" | ComponentClass<any, any> & \"select\" | ComponentClass<any, any> & \"small\" | ComponentClass<any, any> & \"source\" | ComponentClass<any, any> & \"span\" | ComponentClass<any, any> & \"strong\" | ComponentClass<any, any> & \"style\" | ComponentClass<any, any> & \"sub\" | ComponentClass<any, any> & \"summary\" | ComponentClass<any, any> & \"sup\" | ComponentClass<any, any> & \"table\" | ComponentClass<any, any> & \"template\" | ComponentClass<any, any> & \"tbody\" | ComponentClass<any, any> & \"td\" | ComponentClass<any, any> & \"textarea\" | ComponentClass<any, any> & \"tfoot\" | ComponentClass<any, any> & \"th\" | ComponentClass<any, any> & \"thead\" | ComponentClass<any, any> & \"time\" | ComponentClass<any, any> & \"title\" | ComponentClass<any, any> & \"tr\" | ComponentClass<any, any> & \"track\" | ComponentClass<any, any> & \"u\" | ComponentClass<any, any> & \"ul\" | ComponentClass<any, any> & \"var\" | ComponentClass<any, any> & \"video\" | ComponentClass<any, any> & \"wbr\" | ComponentClass<any, any> & \"webview\" | ComponentClass<any, any> & \"svg\" | ComponentClass<any, any> & \"animate\" | ComponentClass<any, any> & \"animateMotion\" | ComponentClass<any, any> & \"animateTransform\" | ComponentClass<any, any> & \"circle\" | ComponentClass<any, any> & \"clipPath\" | ComponentClass<any, any> & \"defs\" | ComponentClass<any, any> & \"desc\" | ComponentClass<any, any> & \"ellipse\" | ComponentClass<any, any> & \"feBlend\" | ComponentClass<any, any> & \"feColorMatrix\" | ComponentClass<any, any> & \"feComponentTransfer\" | ComponentClass<any, any> & \"feComposite\" | ComponentClass<any, any> & \"feConvolveMatrix\" | ComponentClass<any, any> & \"feDiffuseLighting\" | ComponentClass<any, any> & \"feDisplacementMap\" | ComponentClass<any, any> & \"feDistantLight\" | ComponentClass<any, any> & \"feDropShadow\" | ComponentClass<any, any> & \"feFlood\" | ComponentClass<any, any> & \"feFuncA\" | ComponentClass<any, any> & \"feFuncB\" | ComponentClass<any, any> & \"feFuncG\" | ComponentClass<any, any> & \"feFuncR\" | ComponentClass<any, any> & \"feGaussianBlur\" | ComponentClass<any, any> & \"feImage\" | ComponentClass<any, any> & \"feMerge\" | ComponentClass<any, any> & \"feMergeNode\" | ComponentClass<any, any> & \"feMorphology\" | ComponentClass<any, any> & \"feOffset\" | ComponentClass<any, any> & \"fePointLight\" | ComponentClass<any, any> & \"feSpecularLighting\" | ComponentClass<any, any> & \"feSpotLight\" | ComponentClass<any, any> & \"feTile\" | ComponentClass<any, any> & \"feTurbulence\" | ComponentClass<any, any> & \"filter\" | ComponentClass<any, any> & \"foreignObject\" | ComponentClass<any, any> & \"g\" | ComponentClass<any, any> & \"image\" | ComponentClass<any, any> & \"line\" | ComponentClass<any, any> & \"linearGradient\" | ComponentClass<any, any> & \"marker\" | ComponentClass<any, any> & \"mask\" | ComponentClass<any, any> & \"metadata\" | ComponentClass<any, any> & \"mpath\" | ComponentClass<any, any> & \"path\" | ComponentClass<any, any> & \"pattern\" | ComponentClass<any, any> & \"polygon\" | ComponentClass<any, any> & \"polyline\" | ComponentClass<any, any> & \"radialGradient\" | ComponentClass<any, any> & \"rect\" | ComponentClass<any, any> & \"set\" | ComponentClass<any, any> & \"stop\" | ComponentClass<any, any> & \"switch\" | ComponentClass<any, any> & \"text\" | ComponentClass<any, any> & \"textPath\" | ComponentClass<any, any> & \"tspan\" | ComponentClass<any, any> & \"use\" | ComponentClass<any, any> & \"view\" | ComponentClass<any, any> & \"relative-time\" | ComponentClass<any, any> & \"tab-container\" | FunctionComponent<any> & \"object\" | FunctionComponent<any> & \"a\" | FunctionComponent<any> & \"abbr\" | FunctionComponent<any> & \"address\" | FunctionComponent<any> & \"area\" | FunctionComponent<any> & \"article\" | FunctionComponent<any> & \"aside\" | FunctionComponent<any> & \"audio\" | FunctionComponent<any> & \"b\" | FunctionComponent<any> & \"base\" | FunctionComponent<any> & \"bdi\" | FunctionComponent<any> & \"bdo\" | FunctionComponent<any> & \"big\" | FunctionComponent<any> & \"blockquote\" | FunctionComponent<any> & \"body\" | FunctionComponent<any> & \"br\" | FunctionComponent<any> & \"button\" | FunctionComponent<any> & \"canvas\" | FunctionComponent<any> & \"caption\" | FunctionComponent<any> & \"center\" | FunctionComponent<any> & \"cite\" | FunctionComponent<any> & \"code\" | FunctionComponent<any> & \"col\" | FunctionComponent<any> & \"colgroup\" | FunctionComponent<any> & \"data\" | FunctionComponent<any> & \"datalist\" | FunctionComponent<any> & \"dd\" | FunctionComponent<any> & \"del\" | FunctionComponent<any> & \"details\" | FunctionComponent<any> & \"dfn\" | FunctionComponent<any> & \"dialog\" | FunctionComponent<any> & \"div\" | FunctionComponent<any> & \"dl\" | FunctionComponent<any> & \"dt\" | FunctionComponent<any> & \"em\" | FunctionComponent<any> & \"embed\" | FunctionComponent<any> & \"fieldset\" | FunctionComponent<any> & \"figcaption\" | FunctionComponent<any> & \"figure\" | FunctionComponent<any> & \"footer\" | FunctionComponent<any> & \"form\" | FunctionComponent<any> & \"h1\" | FunctionComponent<any> & \"h2\" | FunctionComponent<any> & \"h3\" | FunctionComponent<any> & \"h4\" | FunctionComponent<any> & \"h5\" | FunctionComponent<any> & \"h6\" | FunctionComponent<any> & \"head\" | FunctionComponent<any> & \"header\" | FunctionComponent<any> & \"hgroup\" | FunctionComponent<any> & \"hr\" | FunctionComponent<any> & \"html\" | FunctionComponent<any> & \"i\" | FunctionComponent<any> & \"iframe\" | FunctionComponent<any> & \"img\" | FunctionComponent<any> & \"input\" | FunctionComponent<any> & \"ins\" | FunctionComponent<any> & \"kbd\" | FunctionComponent<any> & \"keygen\" | FunctionComponent<any> & \"label\" | FunctionComponent<any> & \"legend\" | FunctionComponent<any> & \"li\" | FunctionComponent<any> & \"link\" | FunctionComponent<any> & \"main\" | FunctionComponent<any> & \"map\" | FunctionComponent<any> & \"mark\" | FunctionComponent<any> & \"menu\" | FunctionComponent<any> & \"menuitem\" | FunctionComponent<any> & \"meta\" | FunctionComponent<any> & \"meter\" | FunctionComponent<any> & \"nav\" | FunctionComponent<any> & \"noindex\" | FunctionComponent<any> & \"noscript\" | FunctionComponent<any> & \"ol\" | FunctionComponent<any> & \"optgroup\" | FunctionComponent<any> & \"option\" | FunctionComponent<any> & \"output\" | FunctionComponent<any> & \"p\" | FunctionComponent<any> & \"param\" | FunctionComponent<any> & \"picture\" | FunctionComponent<any> & \"pre\" | FunctionComponent<any> & \"progress\" | FunctionComponent<any> & \"q\" | FunctionComponent<any> & \"rp\" | FunctionComponent<any> & \"rt\" | FunctionComponent<any> & \"ruby\" | FunctionComponent<any> & \"s\" | FunctionComponent<any> & \"samp\" | FunctionComponent<any> & \"search\" | FunctionComponent<any> & \"slot\" | FunctionComponent<any> & \"script\" | FunctionComponent<any> & \"section\" | FunctionComponent<any> & \"select\" | FunctionComponent<any> & \"small\" | FunctionComponent<any> & \"source\" | FunctionComponent<any> & \"span\" | FunctionComponent<any> & \"strong\" | FunctionComponent<any> & \"style\" | FunctionComponent<any> & \"sub\" | FunctionComponent<any> & \"summary\" | FunctionComponent<any> & \"sup\" | FunctionComponent<any> & \"table\" | FunctionComponent<any> & \"template\" | FunctionComponent<any> & \"tbody\" | FunctionComponent<any> & \"td\" | FunctionComponent<any> & \"textarea\" | FunctionComponent<any> & \"tfoot\" | FunctionComponent<any> & \"th\" | FunctionComponent<any> & \"thead\" | FunctionComponent<any> & \"time\" | FunctionComponent<any> & \"title\" | FunctionComponent<any> & \"tr\" | FunctionComponent<any> & \"track\" | FunctionComponent<any> & \"u\" | FunctionComponent<any> & \"ul\" | FunctionComponent<any> & \"var\" | FunctionComponent<any> & \"video\" | FunctionComponent<any> & \"wbr\" | FunctionComponent<any> & \"webview\" | FunctionComponent<any> & \"svg\" | FunctionComponent<any> & \"animate\" | FunctionComponent<any> & \"animateMotion\" | FunctionComponent<any> & \"animateTransform\" | FunctionComponent<any> & \"circle\" | FunctionComponent<any> & \"clipPath\" | FunctionComponent<any> & \"defs\" | FunctionComponent<any> & \"desc\" | FunctionComponent<any> & \"ellipse\" | FunctionComponent<any> & \"feBlend\" | FunctionComponent<any> & \"feColorMatrix\" | FunctionComponent<any> & \"feComponentTransfer\" | FunctionComponent<any> & \"feComposite\" | FunctionComponent<any> & \"feConvolveMatrix\" | FunctionComponent<any> & \"feDiffuseLighting\" | FunctionComponent<any> & \"feDisplacementMap\" | FunctionComponent<any> & \"feDistantLight\" | FunctionComponent<any> & \"feDropShadow\" | FunctionComponent<any> & \"feFlood\" | FunctionComponent<any> & \"feFuncA\" | FunctionComponent<any> & \"feFuncB\" | FunctionComponent<any> & \"feFuncG\" | FunctionComponent<any> & \"feFuncR\" | FunctionComponent<any> & \"feGaussianBlur\" | FunctionComponent<any> & \"feImage\" | FunctionComponent<any> & \"feMerge\" | FunctionComponent<any> & \"feMergeNode\" | FunctionComponent<any> & \"feMorphology\" | FunctionComponent<any> & \"feOffset\" | FunctionComponent<any> & \"fePointLight\" | FunctionComponent<any> & \"feSpecularLighting\" | FunctionComponent<any> & \"feSpotLight\" | FunctionComponent<any> & \"feTile\" | FunctionComponent<any> & \"feTurbulence\" | FunctionComponent<any> & \"filter\" | FunctionComponent<any> & \"foreignObject\" | FunctionComponent<any> & \"g\" | FunctionComponent<any> & \"image\" | FunctionComponent<any> & \"line\" | FunctionComponent<any> & \"linearGradient\" | FunctionComponent<any> & \"marker\" | FunctionComponent<any> & \"mask\" | FunctionComponent<any> & \"metadata\" | FunctionComponent<any> & \"mpath\" | FunctionComponent<any> & \"path\" | FunctionComponent<any> & \"pattern\" | FunctionComponent<any> & \"polygon\" | FunctionComponent<any> & \"polyline\" | FunctionComponent<any> & \"radialGradient\" | FunctionComponent<any> & \"rect\" | FunctionComponent<any> & \"set\" | FunctionComponent<any> & \"stop\" | FunctionComponent<any> & \"switch\" | FunctionComponent<any> & \"text\" | FunctionComponent<any> & \"textPath\" | FunctionComponent<any> & \"tspan\" | FunctionComponent<any> & \"use\" | FunctionComponent<any> & \"view\" | FunctionComponent<any> & \"relative-time\" | FunctionComponent<any> & \"tab-container\" | \"symbol\" & ComponentClass<unknown, any> | \"symbol\" & FunctionComponent<unknown> | \"object\" & ComponentClass<unknown, any> | \"object\" & FunctionComponent<unknown> | \"abbr\" & ComponentClass<unknown, any> | \"abbr\" & FunctionComponent<unknown> | \"address\" & ComponentClass<unknown, any> | \"address\" & FunctionComponent<unknown> | \"area\" & ComponentClass<unknown, any> | \"area\" & FunctionComponent<unknown> | \"article\" & ComponentClass<unknown, any> | \"article\" & FunctionComponent<unknown> | \"aside\" & ComponentClass<unknown, any> | \"aside\" & FunctionComponent<unknown> | \"audio\" & ComponentClass<unknown, any> | \"audio\" & FunctionComponent<unknown> | \"b\" & ComponentClass<unknown, any> | \"b\" & FunctionComponent<unknown> | \"base\" & ComponentClass<unknown, any> | \"base\" & FunctionComponent<unknown> | \"bdi\" & ComponentClass<unknown, any> | \"bdi\" & FunctionComponent<unknown> | \"bdo\" & ComponentClass<unknown, any> | \"bdo\" & FunctionComponent<unknown> | \"big\" & ComponentClass<unknown, any> | \"big\" & FunctionComponent<unknown> | \"blockquote\" & ComponentClass<unknown, any> | \"blockquote\" & FunctionComponent<unknown> | \"body\" & ComponentClass<unknown, any> | \"body\" & FunctionComponent<unknown> | \"br\" & ComponentClass<unknown, any> | \"br\" & FunctionComponent<unknown> | \"canvas\" & ComponentClass<unknown, any> | \"canvas\" & FunctionComponent<unknown> | \"caption\" & ComponentClass<unknown, any> | \"caption\" & FunctionComponent<unknown> | \"center\" & ComponentClass<unknown, any> | \"center\" & FunctionComponent<unknown> | \"cite\" & ComponentClass<unknown, any> | \"cite\" & FunctionComponent<unknown> | \"code\" & ComponentClass<unknown, any> | \"code\" & FunctionComponent<unknown> | \"col\" & ComponentClass<unknown, any> | \"col\" & FunctionComponent<unknown> | \"colgroup\" & ComponentClass<unknown, any> | \"colgroup\" & FunctionComponent<unknown> | \"data\" & ComponentClass<unknown, any> | \"data\" & FunctionComponent<unknown> | \"datalist\" & ComponentClass<unknown, any> | \"datalist\" & FunctionComponent<unknown> | \"dd\" & ComponentClass<unknown, any> | \"dd\" & FunctionComponent<unknown> | \"del\" & ComponentClass<unknown, any> | \"del\" & FunctionComponent<unknown> | \"details\" & ComponentClass<unknown, any> | \"details\" & FunctionComponent<unknown> | \"dfn\" & ComponentClass<unknown, any> | \"dfn\" & FunctionComponent<unknown> | \"dialog\" & ComponentClass<unknown, any> | \"dialog\" & FunctionComponent<unknown> | \"div\" & ComponentClass<unknown, any> | \"div\" & FunctionComponent<unknown> | \"dl\" & ComponentClass<unknown, any> | \"dl\" & FunctionComponent<unknown> | \"dt\" & ComponentClass<unknown, any> | \"dt\" & FunctionComponent<unknown> | \"em\" & ComponentClass<unknown, any> | \"em\" & FunctionComponent<unknown> | \"embed\" & ComponentClass<unknown, any> | \"embed\" & FunctionComponent<unknown> | \"fieldset\" & ComponentClass<unknown, any> | \"fieldset\" & FunctionComponent<unknown> | \"figcaption\" & ComponentClass<unknown, any> | \"figcaption\" & FunctionComponent<unknown> | \"figure\" & ComponentClass<unknown, any> | \"figure\" & FunctionComponent<unknown> | \"footer\" & ComponentClass<unknown, any> | \"footer\" & FunctionComponent<unknown> | \"form\" & ComponentClass<unknown, any> | \"form\" & FunctionComponent<unknown> | \"head\" & ComponentClass<unknown, any> | \"head\" & FunctionComponent<unknown> | \"header\" & ComponentClass<unknown, any> | \"header\" & FunctionComponent<unknown> | \"hgroup\" & ComponentClass<unknown, any> | \"hgroup\" & FunctionComponent<unknown> | \"hr\" & ComponentClass<unknown, any> | \"hr\" & FunctionComponent<unknown> | \"html\" & ComponentClass<unknown, any> | \"html\" & FunctionComponent<unknown> | \"i\" & ComponentClass<unknown, any> | \"i\" & FunctionComponent<unknown> | \"iframe\" & ComponentClass<unknown, any> | \"iframe\" & FunctionComponent<unknown> | \"img\" & ComponentClass<unknown, any> | \"img\" & FunctionComponent<unknown> | \"input\" & ComponentClass<unknown, any> | \"input\" & FunctionComponent<unknown> | \"ins\" & ComponentClass<unknown, any> | \"ins\" & FunctionComponent<unknown> | \"kbd\" & ComponentClass<unknown, any> | \"kbd\" & FunctionComponent<unknown> | \"keygen\" & ComponentClass<unknown, any> | \"keygen\" & FunctionComponent<unknown> | \"label\" & ComponentClass<unknown, any> | \"label\" & FunctionComponent<unknown> | \"legend\" & ComponentClass<unknown, any> | \"legend\" & FunctionComponent<unknown> | \"li\" & ComponentClass<unknown, any> | \"li\" & FunctionComponent<unknown> | \"link\" & ComponentClass<unknown, any> | \"link\" & FunctionComponent<unknown> | \"main\" & ComponentClass<unknown, any> | \"main\" & FunctionComponent<unknown> | \"map\" & ComponentClass<unknown, any> | \"map\" & FunctionComponent<unknown> | \"mark\" & ComponentClass<unknown, any> | \"mark\" & FunctionComponent<unknown> | \"menu\" & ComponentClass<unknown, any> | \"menu\" & FunctionComponent<unknown> | \"menuitem\" & ComponentClass<unknown, any> | \"menuitem\" & FunctionComponent<unknown> | \"meta\" & ComponentClass<unknown, any> | \"meta\" & FunctionComponent<unknown> | \"meter\" & ComponentClass<unknown, any> | \"meter\" & FunctionComponent<unknown> | \"nav\" & ComponentClass<unknown, any> | \"nav\" & FunctionComponent<unknown> | \"noindex\" & ComponentClass<unknown, any> | \"noindex\" & FunctionComponent<unknown> | \"noscript\" & ComponentClass<unknown, any> | \"noscript\" & FunctionComponent<unknown> | \"ol\" & ComponentClass<unknown, any> | \"ol\" & FunctionComponent<unknown> | \"optgroup\" & ComponentClass<unknown, any> | \"optgroup\" & FunctionComponent<unknown> | \"option\" & ComponentClass<unknown, any> | \"option\" & FunctionComponent<unknown> | \"output\" & ComponentClass<unknown, any> | \"output\" & FunctionComponent<unknown> | \"p\" & ComponentClass<unknown, any> | \"p\" & FunctionComponent<unknown> | \"param\" & ComponentClass<unknown, any> | \"param\" & FunctionComponent<unknown> | \"picture\" & ComponentClass<unknown, any> | \"picture\" & FunctionComponent<unknown> | \"pre\" & ComponentClass<unknown, any> | \"pre\" & FunctionComponent<unknown> | \"progress\" & ComponentClass<unknown, any> | \"progress\" & FunctionComponent<unknown> | \"q\" & ComponentClass<unknown, any> | \"q\" & FunctionComponent<unknown> | \"rp\" & ComponentClass<unknown, any> | \"rp\" & FunctionComponent<unknown> | \"rt\" & ComponentClass<unknown, any> | \"rt\" & FunctionComponent<unknown> | \"ruby\" & ComponentClass<unknown, any> | \"ruby\" & FunctionComponent<unknown> | \"s\" & ComponentClass<unknown, any> | \"s\" & FunctionComponent<unknown> | \"samp\" & ComponentClass<unknown, any> | \"samp\" & FunctionComponent<unknown> | \"search\" & ComponentClass<unknown, any> | \"search\" & FunctionComponent<unknown> | \"slot\" & ComponentClass<unknown, any> | \"slot\" & FunctionComponent<unknown> | \"script\" & ComponentClass<unknown, any> | \"script\" & FunctionComponent<unknown> | \"section\" & ComponentClass<unknown, any> | \"section\" & FunctionComponent<unknown> | \"select\" & ComponentClass<unknown, any> | \"select\" & FunctionComponent<unknown> | \"small\" & ComponentClass<unknown, any> | \"small\" & FunctionComponent<unknown> | \"source\" & ComponentClass<unknown, any> | \"source\" & FunctionComponent<unknown> | \"span\" & ComponentClass<unknown, any> | \"span\" & FunctionComponent<unknown> | \"strong\" & ComponentClass<unknown, any> | \"strong\" & FunctionComponent<unknown> | \"style\" & ComponentClass<unknown, any> | \"style\" & FunctionComponent<unknown> | \"sub\" & ComponentClass<unknown, any> | \"sub\" & FunctionComponent<unknown> | \"summary\" & ComponentClass<unknown, any> | \"summary\" & FunctionComponent<unknown> | \"sup\" & ComponentClass<unknown, any> | \"sup\" & FunctionComponent<unknown> | \"table\" & ComponentClass<unknown, any> | \"table\" & FunctionComponent<unknown> | \"template\" & ComponentClass<unknown, any> | \"template\" & FunctionComponent<unknown> | \"tbody\" & ComponentClass<unknown, any> | \"tbody\" & FunctionComponent<unknown> | \"td\" & ComponentClass<unknown, any> | \"td\" & FunctionComponent<unknown> | \"textarea\" & ComponentClass<unknown, any> | \"textarea\" & FunctionComponent<unknown> | \"tfoot\" & ComponentClass<unknown, any> | \"tfoot\" & FunctionComponent<unknown> | \"th\" & ComponentClass<unknown, any> | \"th\" & FunctionComponent<unknown> | \"thead\" & ComponentClass<unknown, any> | \"thead\" & FunctionComponent<unknown> | \"time\" & ComponentClass<unknown, any> | \"time\" & FunctionComponent<unknown> | \"title\" & ComponentClass<unknown, any> | \"title\" & FunctionComponent<unknown> | \"tr\" & ComponentClass<unknown, any> | \"tr\" & FunctionComponent<unknown> | \"track\" & ComponentClass<unknown, any> | \"track\" & FunctionComponent<unknown> | \"u\" & ComponentClass<unknown, any> | \"u\" & FunctionComponent<unknown> | \"ul\" & ComponentClass<unknown, any> | \"ul\" & FunctionComponent<unknown> | \"var\" & ComponentClass<unknown, any> | \"var\" & FunctionComponent<unknown> | \"video\" & ComponentClass<unknown, any> | \"video\" & FunctionComponent<unknown> | \"wbr\" & ComponentClass<unknown, any> | \"wbr\" & FunctionComponent<unknown> | \"webview\" & ComponentClass<unknown, any> | \"webview\" & FunctionComponent<unknown> | \"svg\" & ComponentClass<unknown, any> | \"svg\" & FunctionComponent<unknown> | \"animate\" & ComponentClass<unknown, any> | \"animate\" & FunctionComponent<unknown> | \"animateMotion\" & ComponentClass<unknown, any> | \"animateMotion\" & FunctionComponent<unknown> | \"animateTransform\" & ComponentClass<unknown, any> | \"animateTransform\" & FunctionComponent<unknown> | \"circle\" & ComponentClass<unknown, any> | \"circle\" & FunctionComponent<unknown> | \"clipPath\" & ComponentClass<unknown, any> | \"clipPath\" & FunctionComponent<unknown> | \"defs\" & ComponentClass<unknown, any> | \"defs\" & FunctionComponent<unknown> | \"desc\" & ComponentClass<unknown, any> | \"desc\" & FunctionComponent<unknown> | \"ellipse\" & ComponentClass<unknown, any> | \"ellipse\" & FunctionComponent<unknown> | \"feBlend\" & ComponentClass<unknown, any> | \"feBlend\" & FunctionComponent<unknown> | \"feColorMatrix\" & ComponentClass<unknown, any> | \"feColorMatrix\" & FunctionComponent<unknown> | \"feComponentTransfer\" & ComponentClass<unknown, any> | \"feComponentTransfer\" & FunctionComponent<unknown> | \"feComposite\" & ComponentClass<unknown, any> | \"feComposite\" & FunctionComponent<unknown> | \"feConvolveMatrix\" & ComponentClass<unknown, any> | \"feConvolveMatrix\" & FunctionComponent<unknown> | \"feDiffuseLighting\" & ComponentClass<unknown, any> | \"feDiffuseLighting\" & FunctionComponent<unknown> | \"feDisplacementMap\" & ComponentClass<unknown, any> | \"feDisplacementMap\" & FunctionComponent<unknown> | \"feDistantLight\" & ComponentClass<unknown, any> | \"feDistantLight\" & FunctionComponent<unknown> | \"feDropShadow\" & ComponentClass<unknown, any> | \"feDropShadow\" & FunctionComponent<unknown> | \"feFlood\" & ComponentClass<unknown, any> | \"feFlood\" & FunctionComponent<unknown> | \"feFuncA\" & ComponentClass<unknown, any> | \"feFuncA\" & FunctionComponent<unknown> | \"feFuncB\" & ComponentClass<unknown, any> | \"feFuncB\" & FunctionComponent<unknown> | \"feFuncG\" & ComponentClass<unknown, any> | \"feFuncG\" & FunctionComponent<unknown> | \"feFuncR\" & ComponentClass<unknown, any> | \"feFuncR\" & FunctionComponent<unknown> | \"feGaussianBlur\" & ComponentClass<unknown, any> | \"feGaussianBlur\" & FunctionComponent<unknown> | \"feImage\" & ComponentClass<unknown, any> | \"feImage\" & FunctionComponent<unknown> | \"feMerge\" & ComponentClass<unknown, any> | \"feMerge\" & FunctionComponent<unknown> | \"feMergeNode\" & ComponentClass<unknown, any> | \"feMergeNode\" & FunctionComponent<unknown> | \"feMorphology\" & ComponentClass<unknown, any> | \"feMorphology\" & FunctionComponent<unknown> | \"feOffset\" & ComponentClass<unknown, any> | \"feOffset\" & FunctionComponent<unknown> | \"fePointLight\" & ComponentClass<unknown, any> | \"fePointLight\" & FunctionComponent<unknown> | \"feSpecularLighting\" & ComponentClass<unknown, any> | \"feSpecularLighting\" & FunctionComponent<unknown> | \"feSpotLight\" & ComponentClass<unknown, any> | \"feSpotLight\" & FunctionComponent<unknown> | \"feTile\" & ComponentClass<unknown, any> | \"feTile\" & FunctionComponent<unknown> | \"feTurbulence\" & ComponentClass<unknown, any> | \"feTurbulence\" & FunctionComponent<unknown> | \"filter\" & ComponentClass<unknown, any> | \"filter\" & FunctionComponent<unknown> | \"foreignObject\" & ComponentClass<unknown, any> | \"foreignObject\" & FunctionComponent<unknown> | \"g\" & ComponentClass<unknown, any> | \"g\" & FunctionComponent<unknown> | \"image\" & ComponentClass<unknown, any> | \"image\" & FunctionComponent<unknown> | \"line\" & ComponentClass<unknown, any> | \"line\" & FunctionComponent<unknown> | \"linearGradient\" & ComponentClass<unknown, any> | \"linearGradient\" & FunctionComponent<unknown> | \"marker\" & ComponentClass<unknown, any> | \"marker\" & FunctionComponent<unknown> | \"mask\" & ComponentClass<unknown, any> | \"mask\" & FunctionComponent<unknown> | \"metadata\" & ComponentClass<unknown, any> | \"metadata\" & FunctionComponent<unknown> | \"mpath\" & ComponentClass<unknown, any> | \"mpath\" & FunctionComponent<unknown> | \"path\" & ComponentClass<unknown, any> | \"path\" & FunctionComponent<unknown> | \"pattern\" & ComponentClass<unknown, any> | \"pattern\" & FunctionComponent<unknown> | \"polygon\" & ComponentClass<unknown, any> | \"polygon\" & FunctionComponent<unknown> | \"polyline\" & ComponentClass<unknown, any> | \"polyline\" & FunctionComponent<unknown> | \"radialGradient\" & ComponentClass<unknown, any> | \"radialGradient\" & FunctionComponent<unknown> | \"rect\" & ComponentClass<unknown, any> | \"rect\" & FunctionComponent<unknown> | \"set\" & ComponentClass<unknown, any> | \"set\" & FunctionComponent<unknown> | \"stop\" & ComponentClass<unknown, any> | \"stop\" & FunctionComponent<unknown> | \"switch\" & ComponentClass<unknown, any> | \"switch\" & FunctionComponent<unknown> | \"text\" & ComponentClass<unknown, any> | \"text\" & FunctionComponent<unknown> | \"textPath\" & ComponentClass<unknown, any> | \"textPath\" & FunctionComponent<unknown> | \"tspan\" & ComponentClass<unknown, any> | \"tspan\" & FunctionComponent<unknown> | \"use\" & ComponentClass<unknown, any> | \"use\" & FunctionComponent<unknown> | \"view\" & ComponentClass<unknown, any> | \"view\" & FunctionComponent<unknown> | \"relative-time\" & ComponentClass<unknown, any> | \"relative-time\" & FunctionComponent<unknown> | \"tab-container\" & ComponentClass<unknown, any> | \"tab-container\" & FunctionComponent<unknown>",
          "required": false,
          "description": "",
          "defaultValue": "h2"
        },
        {
          "name": "className",
          "type": "string",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": "{}"
        }
      ],
      "subcomponents": [
        {
          "name": "PageHeader.Actions",
          "props": [
            {
              "name": "className",
              "type": "string",
              "required": false,
              "description": "Class name(s) to override styles",
              "defaultValue": ""
            },
            {
              "name": "hidden",
              "type": "boolean | ResponsiveValue<boolean>",
              "required": false,
              "description": "Whether to hide the component.\nThe component can be hidden for all viewport widths, or specified viewport widths.\nSome children have a default value for this prop:\n- `PageHeader.ContextArea`, `PageHeader.ContextAreaActions`, `PageHeader.ContextBar`, and `PageHeader.ParentLink` are hidden on regular and wide viewports by default.\n- `PageHeader.LeadingAction`, and `PageHeader.TrailingAction` are hidden on narrow viewports by default.",
              "defaultValue": false
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": "{}"
            }
          ]
        },
        {
          "name": "PageHeader.Breadcrumbs",
          "props": [
            {
              "name": "className",
              "type": "string",
              "required": false,
              "description": "Class name(s) to override styles",
              "defaultValue": ""
            },
            {
              "name": "hidden",
              "type": "boolean | ResponsiveValue<boolean>",
              "required": false,
              "description": "Whether to hide the component.\nThe component can be hidden for all viewport widths, or specified viewport widths.\nSome children have a default value for this prop:\n- `PageHeader.ContextArea`, `PageHeader.ContextAreaActions`, `PageHeader.ContextBar`, and `PageHeader.ParentLink` are hidden on regular and wide viewports by default.\n- `PageHeader.LeadingAction`, and `PageHeader.TrailingAction` are hidden on narrow viewports by default.",
              "defaultValue": false
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": "{}"
            }
          ]
        },
        {
          "name": "PageHeader.ContextArea",
          "props": [
            {
              "name": "className",
              "type": "string",
              "required": false,
              "description": "Class name(s) to override styles",
              "defaultValue": ""
            },
            {
              "name": "hidden",
              "type": "boolean | ResponsiveValue<boolean>",
              "required": false,
              "description": "Whether to hide the component.\nThe component can be hidden for all viewport widths, or specified viewport widths.\nSome children have a default value for this prop:\n- `PageHeader.ContextArea`, `PageHeader.ContextAreaActions`, `PageHeader.ContextBar`, and `PageHeader.ParentLink` are hidden on regular and wide viewports by default.\n- `PageHeader.LeadingAction`, and `PageHeader.TrailingAction` are hidden on narrow viewports by default.",
              "defaultValue": false
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": "{}"
            }
          ]
        },
        {
          "name": "PageHeader.ContextAreaActions",
          "props": [
            {
              "name": "className",
              "type": "string",
              "required": false,
              "description": "Class name(s) to override styles",
              "defaultValue": ""
            },
            {
              "name": "hidden",
              "type": "boolean | ResponsiveValue<boolean>",
              "required": false,
              "description": "Whether to hide the component.\nThe component can be hidden for all viewport widths, or specified viewport widths.\nSome children have a default value for this prop:\n- `PageHeader.ContextArea`, `PageHeader.ContextAreaActions`, `PageHeader.ContextBar`, and `PageHeader.ParentLink` are hidden on regular and wide viewports by default.\n- `PageHeader.LeadingAction`, and `PageHeader.TrailingAction` are hidden on narrow viewports by default.",
              "defaultValue": false
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": "{}"
            }
          ]
        },
        {
          "name": "PageHeader.ContextBar",
          "props": [
            {
              "name": "className",
              "type": "string",
              "required": false,
              "description": "Class name(s) to override styles",
              "defaultValue": ""
            },
            {
              "name": "hidden",
              "type": "boolean | ResponsiveValue<boolean>",
              "required": false,
              "description": "Whether to hide the component.\nThe component can be hidden for all viewport widths, or specified viewport widths.\nSome children have a default value for this prop:\n- `PageHeader.ContextArea`, `PageHeader.ContextAreaActions`, `PageHeader.ContextBar`, and `PageHeader.ParentLink` are hidden on regular and wide viewports by default.\n- `PageHeader.LeadingAction`, and `PageHeader.TrailingAction` are hidden on narrow viewports by default.",
              "defaultValue": false
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": "{}"
            }
          ]
        },
        {
          "name": "PageHeader.Description",
          "props": [
            {
              "name": "className",
              "type": "string",
              "required": false,
              "description": "Class name(s) to override styles",
              "defaultValue": ""
            },
            {
              "name": "hidden",
              "type": "boolean | ResponsiveValue<boolean>",
              "required": false,
              "description": "Whether to hide the component.\nThe component can be hidden for all viewport widths, or specified viewport widths.\nSome children have a default value for this prop:\n- `PageHeader.ContextArea`, `PageHeader.ContextAreaActions`, `PageHeader.ContextBar`, and `PageHeader.ParentLink` are hidden on regular and wide viewports by default.\n- `PageHeader.LeadingAction`, and `PageHeader.TrailingAction` are hidden on narrow viewports by default.",
              "defaultValue": false
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": "{}"
            }
          ]
        },
        {
          "name": "PageHeader.LeadingAction",
          "props": [
            {
              "name": "className",
              "type": "string",
              "required": false,
              "description": "Class name(s) to override styles",
              "defaultValue": ""
            },
            {
              "name": "hidden",
              "type": "boolean | ResponsiveValue<boolean>",
              "required": false,
              "description": "Whether to hide the component.\nThe component can be hidden for all viewport widths, or specified viewport widths.\nSome children have a default value for this prop:\n- `PageHeader.ContextArea`, `PageHeader.ContextAreaActions`, `PageHeader.ContextBar`, and `PageHeader.ParentLink` are hidden on regular and wide viewports by default.\n- `PageHeader.LeadingAction`, and `PageHeader.TrailingAction` are hidden on narrow viewports by default.",
              "defaultValue": false
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": "{}"
            }
          ]
        },
        {
          "name": "PageHeader.LeadingVisual",
          "props": [
            {
              "name": "className",
              "type": "string",
              "required": false,
              "description": "Class name(s) to override styles",
              "defaultValue": ""
            },
            {
              "name": "hidden",
              "type": "boolean | ResponsiveValue<boolean>",
              "required": false,
              "description": "Whether to hide the component.\nThe component can be hidden for all viewport widths, or specified viewport widths.\nSome children have a default value for this prop:\n- `PageHeader.ContextArea`, `PageHeader.ContextAreaActions`, `PageHeader.ContextBar`, and `PageHeader.ParentLink` are hidden on regular and wide viewports by default.\n- `PageHeader.LeadingAction`, and `PageHeader.TrailingAction` are hidden on narrow viewports by default.",
              "defaultValue": false
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": "{}"
            }
          ]
        },
        {
          "name": "PageHeader.Navigation",
          "props": [
            {
              "name": "aria-label",
              "type": "string",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "aria-labelledby",
              "type": "string",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "as",
              "type": "\"div\" | \"nav\"",
              "required": false,
              "description": "",
              "defaultValue": "h2"
            },
            {
              "name": "className",
              "type": "string",
              "required": false,
              "description": "Class name(s) to override styles",
              "defaultValue": ""
            },
            {
              "name": "hidden",
              "type": "boolean | ResponsiveValue<boolean>",
              "required": false,
              "description": "Whether to hide the component.\nThe component can be hidden for all viewport widths, or specified viewport widths.\nSome children have a default value for this prop:\n- `PageHeader.ContextArea`, `PageHeader.ContextAreaActions`, `PageHeader.ContextBar`, and `PageHeader.ParentLink` are hidden on regular and wide viewports by default.\n- `PageHeader.LeadingAction`, and `PageHeader.TrailingAction` are hidden on narrow viewports by default.",
              "defaultValue": false
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": "{}"
            }
          ]
        },
        {
          "name": "PageHeader.ParentLink",
          "props": [
            {
              "name": "aria-label",
              "type": "string",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "as",
              "type": "\"a\" | \"a\" & ComponentClass<unknown, any> | \"a\" & FunctionComponent<unknown>",
              "required": false,
              "description": "",
              "defaultValue": "h2"
            },
            {
              "name": "className",
              "type": "string",
              "required": false,
              "description": "Class name(s) to override styles",
              "defaultValue": ""
            },
            {
              "name": "hidden",
              "type": "boolean | ResponsiveValue<boolean>",
              "required": false,
              "description": "Whether to hide the component.\nThe component can be hidden for all viewport widths, or specified viewport widths.\nSome children have a default value for this prop:\n- `PageHeader.ContextArea`, `PageHeader.ContextAreaActions`, `PageHeader.ContextBar`, and `PageHeader.ParentLink` are hidden on regular and wide viewports by default.\n- `PageHeader.LeadingAction`, and `PageHeader.TrailingAction` are hidden on narrow viewports by default.",
              "defaultValue": false
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": "{}"
            }
          ]
        },
        {
          "name": "PageHeader.Title",
          "props": [
            {
              "name": "as",
              "type": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\"",
              "required": false,
              "description": "",
              "defaultValue": "h2"
            },
            {
              "name": "className",
              "type": "string",
              "required": false,
              "description": "Class name(s) to override styles",
              "defaultValue": ""
            },
            {
              "name": "hidden",
              "type": "boolean | ResponsiveValue<boolean>",
              "required": false,
              "description": "Whether to hide the component.\nThe component can be hidden for all viewport widths, or specified viewport widths.\nSome children have a default value for this prop:\n- `PageHeader.ContextArea`, `PageHeader.ContextAreaActions`, `PageHeader.ContextBar`, and `PageHeader.ParentLink` are hidden on regular and wide viewports by default.\n- `PageHeader.LeadingAction`, and `PageHeader.TrailingAction` are hidden on narrow viewports by default.",
              "defaultValue": false
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": "{}"
            }
          ]
        },
        {
          "name": "PageHeader.TitleArea",
          "props": [
            {
              "name": "as",
              "type": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<unknown, any> | FunctionComponent<unknown>",
              "required": false,
              "description": "",
              "defaultValue": "h2"
            },
            {
              "name": "className",
              "type": "string",
              "required": false,
              "description": "Class name(s) to override styles",
              "defaultValue": ""
            },
            {
              "name": "hidden",
              "type": "boolean | ResponsiveValue<boolean>",
              "required": false,
              "description": "Whether to hide the component.\nThe component can be hidden for all viewport widths, or specified viewport widths.\nSome children have a default value for this prop:\n- `PageHeader.ContextArea`, `PageHeader.ContextAreaActions`, `PageHeader.ContextBar`, and `PageHeader.ParentLink` are hidden on regular and wide viewports by default.\n- `PageHeader.LeadingAction`, and `PageHeader.TrailingAction` are hidden on narrow viewports by default.",
              "defaultValue": false
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": "{}"
            },
            {
              "name": "variant",
              "type": "\"large\" | \"medium\" | \"subtitle\" | ResponsiveValue<\"large\" | \"medium\" | \"subtitle\">",
              "required": false,
              "description": "",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "PageHeader.TrailingAction",
          "props": [
            {
              "name": "className",
              "type": "string",
              "required": false,
              "description": "Class name(s) to override styles",
              "defaultValue": ""
            },
            {
              "name": "hidden",
              "type": "boolean | ResponsiveValue<boolean>",
              "required": false,
              "description": "Whether to hide the component.\nThe component can be hidden for all viewport widths, or specified viewport widths.\nSome children have a default value for this prop:\n- `PageHeader.ContextArea`, `PageHeader.ContextAreaActions`, `PageHeader.ContextBar`, and `PageHeader.ParentLink` are hidden on regular and wide viewports by default.\n- `PageHeader.LeadingAction`, and `PageHeader.TrailingAction` are hidden on narrow viewports by default.",
              "defaultValue": false
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": "{}"
            }
          ]
        },
        {
          "name": "PageHeader.TrailingVisual",
          "props": [
            {
              "name": "className",
              "type": "string",
              "required": false,
              "description": "Class name(s) to override styles",
              "defaultValue": ""
            },
            {
              "name": "hidden",
              "type": "boolean | ResponsiveValue<boolean>",
              "required": false,
              "description": "Whether to hide the component.\nThe component can be hidden for all viewport widths, or specified viewport widths.\nSome children have a default value for this prop:\n- `PageHeader.ContextArea`, `PageHeader.ContextAreaActions`, `PageHeader.ContextBar`, and `PageHeader.ParentLink` are hidden on regular and wide viewports by default.\n- `PageHeader.LeadingAction`, and `PageHeader.TrailingAction` are hidden on narrow viewports by default.",
              "defaultValue": false
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": "{}"
            }
          ]
        }
      ]
    },
    "page_layout": {
      "id": "page_layout",
      "name": "PageLayout",
      "status": "alpha",
      "a11yReviewed": true,
      "stories": [
        {
          "id": "components-pagelayout--default",
          "code": "(args) => (\n  <PageLayout\n    containerWidth={args.containerWidth}\n    padding={args.padding}\n    rowGap={args.rowGap}\n    columnGap={args.columnGap}\n    sx={args.sx}\n  >\n    {args['Render header?'] ? (\n      <PageLayout.Header\n        padding={args['Header.padding']}\n        divider={{\n          narrow: args['Header.divider.narrow'],\n          regular: args['Header.divider.regular'],\n          wide: args['Header.divider.wide'],\n        }}\n        hidden={{\n          narrow: args['Header.hidden.narrow'],\n          regular: args['Header.hidden.regular'],\n          wide: args['Header.hidden.wide'],\n        }}\n      >\n        <Placeholder\n          height={args['Header placeholder height']}\n          label=\"Header\"\n        />\n      </PageLayout.Header>\n    ) : null}\n    <PageLayout.Content\n      width={args['Content.width']}\n      padding={args['Content.padding']}\n      hidden={{\n        narrow: args['Content.hidden.narrow'],\n        regular: args['Content.hidden.regular'],\n        wide: args['Content.hidden.wide'],\n      }}\n    >\n      <Placeholder\n        height={args['Content placeholder height']}\n        label=\"Content\"\n      />\n    </PageLayout.Content>\n    {args['Render pane?'] ? (\n      <PageLayout.Pane\n        position={{\n          narrow: args['Pane.position.narrow'],\n          regular: args['Pane.position.regular'],\n          wide: args['Pane.position.wide'],\n        }}\n        width={args['Pane.width']}\n        minWidth={args['Pane.minWidth']}\n        sticky={args['Pane.sticky']}\n        resizable={args['Pane.resizable']}\n        padding={args['Pane.padding']}\n        divider={{\n          narrow: args['Pane.divider.narrow'],\n          regular: args['Pane.divider.regular'],\n          wide: args['Pane.divider.wide'],\n        }}\n        hidden={{\n          narrow: args['Pane.hidden.narrow'],\n          regular: args['Pane.hidden.regular'],\n          wide: args['Pane.hidden.wide'],\n        }}\n      >\n        <Placeholder height={args['Pane placeholder height']} label=\"Pane\" />\n      </PageLayout.Pane>\n    ) : null}\n    {args['Render footer?'] ? (\n      <PageLayout.Footer\n        padding={args['Footer.padding']}\n        divider={{\n          narrow: args['Footer.divider.narrow'],\n          regular: args['Footer.divider.regular'],\n          wide: args['Footer.divider.wide'],\n        }}\n        hidden={{\n          narrow: args['Footer.hidden.narrow'],\n          regular: args['Footer.hidden.regular'],\n          wide: args['Footer.hidden.wide'],\n        }}\n      >\n        <Placeholder\n          height={args['Footer placeholder height']}\n          label=\"Footer\"\n        />\n      </PageLayout.Footer>\n    ) : null}\n  </PageLayout>\n)"
        },
        {
          "id": "components-pagelayout-features--pull-request-page",
          "code": "() => (\n  <PageLayout>\n    <PageLayout.Header>\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          gap: 3,\n        }}\n      >\n        <Box>\n          <Heading\n            as=\"h1\"\n            sx={{\n              fontWeight: 'normal',\n            }}\n          >\n            Input validation styles{' '}\n            <Text\n              sx={{\n                color: 'fg.muted',\n                fontWeight: 'light',\n              }}\n            >\n              #1831\n            </Text>\n          </Heading>\n          <Box\n            sx={{\n              display: 'flex',\n              gap: 2,\n              alignItems: 'center',\n            }}\n          >\n            <StateLabel status=\"pullOpened\">Open</StateLabel>\n            <Text\n              sx={{\n                fontSize: 1,\n                color: 'fg.muted',\n              }}\n            >\n              <Link\n                href=\"#\"\n                muted\n                sx={{\n                  fontWeight: 'bold',\n                }}\n              >\n                mperrotti\n              </Link>{' '}\n              wants to merge 3 commits into{' '}\n              <BranchName href=\"#\">main</BranchName> from{' '}\n              <BranchName href=\"#\">mp/validation-styles</BranchName>\n            </Text>\n          </Box>\n        </Box>\n        <TabNav>\n          <TabNav.Link href=\"#\" selected>\n            Conversation\n          </TabNav.Link>\n          <TabNav.Link href=\"#\">Commits</TabNav.Link>\n          <TabNav.Link href=\"#\">Checks</TabNav.Link>\n          <TabNav.Link href=\"#\">Files changed</TabNav.Link>\n        </TabNav>\n      </Box>\n    </PageLayout.Header>\n    <PageLayout.Content>\n      <Box\n        sx={{\n          border: '1px solid',\n          borderRadius: 2,\n          borderColor: 'border.default',\n          height: 200,\n        }}\n      ></Box>\n      <Box\n        sx={{\n          maxWidth: '100%',\n          overflowX: 'auto',\n          border: '1px solid',\n          whiteSpace: 'nowrap',\n          borderColor: 'border.default',\n          mt: 3,\n          p: 3,\n          borderRadius: 2,\n        }}\n        tabIndex={0}\n      >\n        This box has really long content. If it is too long, it will cause x\n        overflow and should show a scrollbar. When this overflows, it should not\n        break to overall page layout!\n      </Box>\n    </PageLayout.Content>\n    <PageLayout.Pane>\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          gap: 3,\n        }}\n      >\n        <Box>\n          <Text\n            sx={{\n              fontSize: 0,\n              fontWeight: 'bold',\n              display: 'block',\n              color: 'fg.muted',\n            }}\n          >\n            Assignees\n          </Text>\n          <Text\n            sx={{\n              fontSize: 0,\n              color: 'fg.muted',\n              lineHeight: 'condensed',\n            }}\n          >\n            No one –{' '}\n            <Link href=\"#\" muted>\n              assign yourself\n            </Link>\n          </Text>\n        </Box>\n        <Box\n          role=\"separator\"\n          sx={{\n            width: '100%',\n            height: 1,\n            backgroundColor: 'border.default',\n          }}\n        ></Box>\n        <Box>\n          <Text\n            sx={{\n              fontSize: 0,\n              fontWeight: 'bold',\n              display: 'block',\n              color: 'fg.muted',\n            }}\n          >\n            Labels\n          </Text>\n          <Text\n            sx={{\n              fontSize: 0,\n              color: 'fg.muted',\n              lineHeight: 'condensed',\n            }}\n          >\n            None yet\n          </Text>\n        </Box>\n      </Box>\n    </PageLayout.Pane>\n  </PageLayout>\n)"
        },
        {
          "id": "components-pagelayout-features--sticky-pane",
          "code": "(args) => (\n  <PageLayout\n    rowGap=\"none\"\n    columnGap=\"none\"\n    padding=\"none\"\n    containerWidth=\"full\"\n  >\n    <PageLayout.Header padding=\"normal\" divider=\"line\">\n      <Placeholder label=\"Header\" height={64} />\n    </PageLayout.Header>\n    <PageLayout.Content padding=\"normal\" width=\"large\">\n      <Box\n        sx={{\n          display: 'grid',\n          gap: 3,\n        }}\n      >\n        {Array.from({\n          length: args.numParagraphsInContent,\n        }).map((_, i) => {\n          const testId = `content${i}`\n          return (\n            <Box\n              key={i}\n              as=\"p\"\n              sx={{\n                margin: 0,\n              }}\n            >\n              <span data-testid={testId}>\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam at\n                enim id lorem tempus egestas a non ipsum. Maecenas imperdiet\n                ante quam, at varius lorem molestie vel. Sed at eros consequat,\n                varius tellus et, auctor felis. Donec pulvinar lacinia urna nec\n                commodo. Phasellus at imperdiet risus. Donec sit amet massa\n                purus. Nunc sem lectus, bibendum a sapien nec, tristique tempus\n                felis. Ut porttitor auctor tellus in imperdiet. Ut blandit\n                tincidunt augue, quis fringilla nunc tincidunt sed. Vestibulum\n                auctor euismod nisi. Nullam tincidunt est in mi tincidunt\n                dictum. Sed consectetur aliquet velit ut ornare.\n              </span>\n            </Box>\n          )\n        })}\n      </Box>\n    </PageLayout.Content>\n    <PageLayout.Pane\n      position=\"start\"\n      resizable\n      padding=\"normal\"\n      divider=\"line\"\n      sticky={args.sticky}\n      aria-label=\"Side pane\"\n    >\n      <Box\n        sx={{\n          display: 'grid',\n          gap: 3,\n        }}\n      >\n        {Array.from({\n          length: args.numParagraphsInPane,\n        }).map((_, i) => {\n          const testId = `paragraph${i}`\n          return (\n            <Box\n              key={i}\n              as=\"p\"\n              sx={{\n                margin: 0,\n              }}\n            >\n              <span data-testid={testId}>\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam at\n                enim id lorem tempus egestas a non ipsum. Maecenas imperdiet\n                ante quam, at varius lorem molestie vel. Sed at eros consequat,\n                varius tellus et, auctor felis. Donec pulvinar lacinia urna nec\n                commodo. Phasellus at imperdiet risus. Donec sit amet massa\n                purus.\n              </span>\n            </Box>\n          )\n        })}\n        <Box as=\"p\">\n          Donec sit amet massa purus. <a href=\"#foo\">Plura de lorem Ispum.</a>\n        </Box>\n      </Box>\n    </PageLayout.Pane>\n    <PageLayout.Footer padding=\"normal\" divider=\"line\">\n      <Placeholder label=\"Footer\" height={64} />\n    </PageLayout.Footer>\n  </PageLayout>\n)"
        },
        {
          "id": "components-pagelayout-features--nested-scroll-container",
          "code": "(args) => (\n  <Box\n    sx={{\n      display: 'grid',\n      gridTemplateRows: 'auto 1fr auto',\n      height: '100vh',\n    }}\n  >\n    <Placeholder label=\"Above scroll container\" height={120} />\n    <Box\n      sx={{\n        overflow: 'auto',\n      }}\n    >\n      <PageLayout\n        rowGap=\"none\"\n        columnGap=\"none\"\n        padding=\"none\"\n        containerWidth=\"full\"\n      >\n        <PageLayout.Header padding=\"normal\" divider=\"line\">\n          <Placeholder label=\"Header\" height={64} />\n        </PageLayout.Header>\n        <PageLayout.Content padding=\"normal\" width=\"large\">\n          <Box\n            sx={{\n              display: 'grid',\n              gap: 3,\n            }}\n            tabIndex={0}\n            role=\"region\"\n            aria-label=\"Page content\"\n          >\n            {Array.from({\n              length: args.numParagraphsInContent,\n            }).map((_, i) => (\n              <Box\n                key={i}\n                as=\"p\"\n                sx={{\n                  margin: 0,\n                }}\n              >\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam at\n                enim id lorem tempus egestas a non ipsum. Maecenas imperdiet\n                ante quam, at varius lorem molestie vel. Sed at eros consequat,\n                varius tellus et, auctor felis. Donec pulvinar lacinia urna nec\n                commodo. Phasellus at imperdiet risus. Donec sit amet massa\n                purus. Nunc sem lectus, bibendum a sapien nec, tristique tempus\n                felis. Ut porttitor auctor tellus in imperdiet. Ut blandit\n                tincidunt augue, quis fringilla nunc tincidunt sed. Vestibulum\n                auctor euismod nisi. Nullam tincidunt est in mi tincidunt\n                dictum. Sed consectetur aliquet velit ut ornare.\n              </Box>\n            ))}\n          </Box>\n        </PageLayout.Content>\n        <PageLayout.Pane\n          position=\"start\"\n          padding=\"normal\"\n          divider=\"line\"\n          sticky\n          aria-label=\"Side pane\"\n        >\n          <Box\n            sx={{\n              display: 'grid',\n              gap: 3,\n            }}\n          >\n            {Array.from({\n              length: args.numParagraphsInPane,\n            }).map((_, i) => (\n              <Box\n                key={i}\n                as=\"p\"\n                sx={{\n                  margin: 0,\n                }}\n              >\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam at\n                enim id lorem tempus egestas a non ipsum. Maecenas imperdiet\n                ante quam, at varius lorem molestie vel. Sed at eros consequat,\n                varius tellus et, auctor felis. Donec pulvinar lacinia urna nec\n                commodo. Phasellus at imperdiet risus. Donec sit amet massa\n                purus.\n              </Box>\n            ))}\n          </Box>\n        </PageLayout.Pane>\n        <PageLayout.Footer padding=\"normal\" divider=\"line\">\n          <Placeholder label=\"Footer\" height={64} />\n        </PageLayout.Footer>\n      </PageLayout>\n    </Box>\n    <Placeholder label=\"Below scroll container\" height={120} />\n  </Box>\n)"
        },
        {
          "id": "components-pagelayout-features--custom-sticky-header",
          "code": "(args) => (\n  // a box to create a sticky top element that will be on the consumer side and outside of the PageLayout component\n  <Box data-testid=\"story-window\">\n    <Box\n      as=\"header\"\n      data-testid=\"sticky-header\"\n      sx={{\n        position: 'sticky',\n        top: 0,\n        height: args.offsetHeader,\n        display: 'grid',\n        placeItems: 'center',\n        backgroundColor: 'canvas.subtle',\n        borderBottom: '1px solid',\n        borderColor: 'border.default',\n        zIndex: 100,\n      }}\n    >\n      Custom sticky header\n    </Box>\n    <PageLayout\n      rowGap=\"none\"\n      columnGap=\"none\"\n      padding=\"none\"\n      containerWidth=\"full\"\n    >\n      <PageLayout.Content padding=\"normal\" width=\"large\">\n        <Box\n          sx={{\n            display: 'grid',\n            gap: 3,\n          }}\n          data-testid=\"scrollContainer\"\n        >\n          {Array.from({\n            length: args.numParagraphsInContent,\n          }).map((_, i) => {\n            const testId = `content${i}`\n            return (\n              <Box\n                key={i}\n                as=\"p\"\n                sx={{\n                  margin: 0,\n                }}\n              >\n                <span data-testid={testId}>\n                  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin\n                  vitae orci et magna consectetur ullamcorper eget ac purus. Nam\n                  at enim id lorem tempus egestas a non ipsum. Maecenas\n                  imperdiet ante quam, at varius lorem molestie vel. Sed at eros\n                  consequat, varius tellus et, auctor felis. Donec pulvinar\n                  lacinia urna nec commodo. Phasellus at imperdiet risus. Donec\n                  sit amet massa purus. Nunc sem lectus, bibendum a sapien nec,\n                  tristique tempus felis. Ut porttitor auctor tellus in\n                  imperdiet. Ut blandit tincidunt augue, quis fringilla nunc\n                  tincidunt sed. Vestibulum auctor euismod nisi. Nullam\n                  tincidunt est in mi tincidunt dictum. Sed consectetur aliquet\n                  velit ut ornare.\n                </span>\n              </Box>\n            )\n          })}\n        </Box>\n      </PageLayout.Content>\n      <PageLayout.Pane\n        position=\"start\"\n        padding=\"normal\"\n        divider=\"line\"\n        aria-label=\"Aside pane\"\n        sticky\n        offsetHeader={args.offsetHeader}\n      >\n        <Box\n          sx={{\n            display: 'grid',\n            gap: 3,\n          }}\n        >\n          {Array.from({\n            length: args.numParagraphsInPane,\n          }).map((_, i) => {\n            const testId = `paragraph${i}`\n            return (\n              <Box\n                key={i}\n                as=\"p\"\n                sx={{\n                  margin: 0,\n                }}\n              >\n                <span data-testid={testId}>\n                  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam\n                  at enim id lorem tempus egestas a non ipsum. Maecenas\n                  imperdiet ante quam, at varius lorem molestie vel. Sed at eros\n                  consequat, varius tellus et, auctor felis. Donec pulvinar\n                  lacinia urna nec commodo. Phasellus at imperdiet risus. Donec\n                  sit amet massa purus.\n                </span>\n              </Box>\n            )\n          })}\n        </Box>\n      </PageLayout.Pane>\n      <PageLayout.Footer padding=\"normal\" divider=\"line\">\n        <Placeholder label=\"Footer\" height={64} />\n      </PageLayout.Footer>\n    </PageLayout>\n  </Box>\n)"
        },
        {
          "id": "components-pagelayout-features--resizable-pane",
          "code": "() => (\n  <PageLayout containerWidth=\"full\">\n    <PageLayout.Header>\n      <Placeholder height={64} label=\"Header\" />\n    </PageLayout.Header>\n    <PageLayout.Pane resizable position=\"start\">\n      <Placeholder height={320} label=\"Pane\" />\n    </PageLayout.Pane>\n    <PageLayout.Content>\n      <Placeholder height={640} label=\"Content\" />\n    </PageLayout.Content>\n    <PageLayout.Footer>\n      <Placeholder height={64} label=\"Footer\" />\n    </PageLayout.Footer>\n  </PageLayout>\n)"
        },
        {
          "id": "components-pagelayout-features--scroll-container-within-page-layout-pane",
          "code": "() => (\n  <Box\n    sx={{\n      display: 'grid',\n      gridTemplateRows: 'auto 1fr auto',\n      height: '100vh',\n    }}\n  >\n    <Box\n      sx={{\n        overflow: 'auto',\n      }}\n    >\n      <Placeholder label=\"Above inner scroll container\" height={120} />\n      <PageLayout\n        rowGap=\"none\"\n        columnGap=\"none\"\n        padding=\"none\"\n        containerWidth=\"full\"\n      >\n        <PageLayout.Pane\n          position=\"start\"\n          padding=\"normal\"\n          divider=\"line\"\n          sticky\n          aria-label=\"Sticky pane\"\n        >\n          <Box\n            sx={{\n              overflow: 'auto',\n            }}\n          >\n            <PageLayout.Pane padding=\"normal\">\n              <Placeholder label=\"Inner scroll container\" height={800} />\n            </PageLayout.Pane>\n          </Box>\n        </PageLayout.Pane>\n        <PageLayout.Content padding=\"normal\" width=\"large\">\n          <Box\n            sx={{\n              display: 'grid',\n            }}\n            tabIndex={0}\n            role=\"region\"\n            aria-label=\"Page content\"\n          >\n            <Placeholder label=\"Page content\" height={1600} />\n          </Box>\n        </PageLayout.Content>\n      </PageLayout>\n      <Placeholder label=\"Beneath inner scroll container\" height={120} />\n    </Box>\n  </Box>\n)"
        },
        {
          "id": "components-pagelayout-features--custom-pane-widths",
          "code": "() => (\n  <PageLayout containerWidth=\"full\">\n    <PageLayout.Header>\n      <Placeholder height={64} label=\"Header\" />\n    </PageLayout.Header>\n    <PageLayout.Pane\n      resizable\n      width={{\n        min: '200px',\n        default: '300px',\n        max: '400px',\n      }}\n    >\n      <Placeholder height={320} label=\"Pane\" />\n    </PageLayout.Pane>\n    <PageLayout.Content>\n      <Placeholder height={640} label=\"Content\" />\n    </PageLayout.Content>\n    <PageLayout.Footer>\n      <Placeholder height={64} label=\"Footer\" />\n    </PageLayout.Footer>\n  </PageLayout>\n)"
        },
        {
          "id": "components-pagelayout-features--with-custom-pane-heading",
          "code": "() => (\n  <PageLayout containerWidth=\"full\">\n    <PageLayout.Header>\n      <Placeholder height={64} label=\"Header\" />\n    </PageLayout.Header>\n    <PageLayout.Pane resizable position=\"start\">\n      <Heading\n        as=\"h2\"\n        sx={{\n          fontSize: 3,\n        }}\n        id=\"pane-heading\"\n      >\n        Pane Heading\n      </Heading>\n      <Placeholder height={320} label=\"Pane\" />\n    </PageLayout.Pane>\n    <PageLayout.Content>\n      <Placeholder height={640} label=\"Content\" />\n    </PageLayout.Content>\n    <PageLayout.Footer>\n      <Placeholder height={64} label=\"Footer\" />\n    </PageLayout.Footer>\n  </PageLayout>\n)"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "_slotsConfig",
          "type": "Record<\"footer\" | \"header\", ElementType<any, keyof IntrinsicElements>>",
          "required": false,
          "description": "Private prop to allow SplitPageLayout to customize slot components",
          "defaultValue": ""
        },
        {
          "name": "columnGap",
          "type": "\"normal\" | \"none\" | \"condensed\"",
          "required": false,
          "description": "The spacing between the content area and pane(s)",
          "defaultValue": "normal"
        },
        {
          "name": "containerWidth",
          "type": "\"large\" | \"medium\" | \"full\" | \"xlarge\"",
          "required": false,
          "description": "The maximum width of the page container",
          "defaultValue": "xlarge"
        },
        {
          "name": "padding",
          "type": "\"normal\" | \"none\" | \"condensed\"",
          "required": false,
          "description": "The spacing between the outer edges of the page container and the viewport",
          "defaultValue": "none"
        },
        {
          "name": "rowGap",
          "type": "\"normal\" | \"none\" | \"condensed\"",
          "required": false,
          "description": "The spacing between the content, header, and footer areas",
          "defaultValue": "normal"
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": "{}"
        }
      ],
      "subcomponents": [
        {
          "name": "PageLayout.Content",
          "props": [
            {
              "name": "aria-label",
              "type": "string",
              "required": false,
              "description": "A unique label for the rendered main landmark",
              "defaultValue": ""
            },
            {
              "name": "aria-labelledby",
              "type": "string",
              "required": false,
              "description": "An id to an element which uniquely labels the rendered main landmark",
              "defaultValue": ""
            },
            {
              "name": "as",
              "type": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
              "required": false,
              "description": "Provide an optional element type for the outermost element rendered by the component.",
              "defaultValue": "main"
            },
            {
              "name": "hidden",
              "type": "boolean | ResponsiveValue<boolean>",
              "required": false,
              "description": "",
              "defaultValue": false
            },
            {
              "name": "padding",
              "type": "\"normal\" | \"none\" | \"condensed\"",
              "required": false,
              "description": "The amount of padding inside the content.",
              "defaultValue": "none"
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": "{}"
            },
            {
              "name": "width",
              "type": "\"large\" | \"medium\" | \"full\" | \"xlarge\"",
              "required": false,
              "description": "The maximum width of the content region.",
              "defaultValue": "medium"
            }
          ]
        },
        {
          "name": "PageLayout.Footer",
          "props": [
            {
              "name": "aria-label",
              "type": "string",
              "required": false,
              "description": "A unique label for the rendered contentinfo landmark",
              "defaultValue": ""
            },
            {
              "name": "aria-labelledby",
              "type": "string",
              "required": false,
              "description": "An id to an element which uniquely labels the rendered contentinfo landmark",
              "defaultValue": ""
            },
            {
              "name": "divider",
              "type": "\"line\" | \"none\" | ResponsiveValue<\"line\" | \"none\", \"line\" | \"none\" | \"filled\">",
              "required": false,
              "description": "The divider style between the footer and the content region. Can be changed for different viewport widths.",
              "defaultValue": "none"
            },
            {
              "name": "dividerWhenNarrow",
              "type": "\"line\" | \"inherit\" | \"none\" | \"filled\"",
              "required": false,
              "description": "@deprecated Use the `divider` prop with a responsive value instead.\n\nBefore:\n```\ndivider=\"line\"\ndividerWhenNarrow=\"filled\"\n```\n\nAfter:\n```\ndivider={{regular: 'line', narrow: 'filled'}}\n```",
              "defaultValue": "inherit"
            },
            {
              "name": "hidden",
              "type": "boolean | ResponsiveValue<boolean>",
              "required": false,
              "description": "Whether the footer is hidden.  Can be changed for different viewport widths.",
              "defaultValue": false
            },
            {
              "name": "padding",
              "type": "\"normal\" | \"none\" | \"condensed\"",
              "required": false,
              "description": "The amount of padding inside the footer.",
              "defaultValue": "none"
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": "{}"
            }
          ]
        },
        {
          "name": "PageLayout.Header",
          "props": [
            {
              "name": "aria-label",
              "type": "string",
              "required": false,
              "description": "A unique label for the rendered banner landmark",
              "defaultValue": ""
            },
            {
              "name": "aria-labelledby",
              "type": "string",
              "required": false,
              "description": "An id to an element which uniquely labels the rendered banner landmark",
              "defaultValue": ""
            },
            {
              "name": "divider",
              "type": "\"line\" | \"none\" | ResponsiveValue<\"line\" | \"none\", \"line\" | \"none\" | \"filled\">",
              "required": false,
              "description": "",
              "defaultValue": "none"
            },
            {
              "name": "dividerWhenNarrow",
              "type": "\"line\" | \"inherit\" | \"none\" | \"filled\"",
              "required": false,
              "description": "@deprecated Use the `divider` prop with a responsive value instead.\n\nBefore:\n```\ndivider=\"line\"\ndividerWhenNarrow=\"filled\"\n```\n\nAfter:\n```\ndivider={{regular: 'line', narrow: 'filled'}}\n```",
              "defaultValue": "inherit"
            },
            {
              "name": "hidden",
              "type": "boolean | ResponsiveValue<boolean>",
              "required": false,
              "description": "",
              "defaultValue": false
            },
            {
              "name": "padding",
              "type": "\"normal\" | \"none\" | \"condensed\"",
              "required": false,
              "description": "",
              "defaultValue": "none"
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": "{}"
            }
          ]
        },
        {
          "name": "PageLayout.Pane",
          "props": [
            {
              "name": "aria-label",
              "type": "string",
              "required": false,
              "description": "Label for the pane. Required if the pane overflows and doesn't have aria-labelledby.",
              "defaultValue": ""
            },
            {
              "name": "aria-labelledby",
              "type": "string",
              "required": false,
              "description": "Id of an element that acts as a label for the pane. Required if the pane overflows and doesn't have aria-label.",
              "defaultValue": ""
            },
            {
              "name": "divider",
              "type": "\"line\" | \"none\" | ResponsiveValue<\"line\" | \"none\", \"line\" | \"none\" | \"filled\">",
              "required": false,
              "description": "The divider style between the pane and the content region.",
              "defaultValue": "none"
            },
            {
              "name": "dividerWhenNarrow",
              "type": "\"line\" | \"inherit\" | \"none\" | \"filled\"",
              "required": false,
              "description": "@deprecated Use the `divider` prop with a responsive value instead.\n\nBefore:\n```\ndivider=\"line\"\ndividerWhenNarrow=\"filled\"\n```\n\nAfter:\n```\ndivider={{regular: 'line', narrow: 'filled'}}\n```",
              "defaultValue": "inherit"
            },
            {
              "name": "hidden",
              "type": "boolean | ResponsiveValue<boolean>",
              "required": false,
              "description": "Whether the pane is hidden. Can be changed for different viewport widths.",
              "defaultValue": false
            },
            {
              "name": "id",
              "type": "string",
              "required": false,
              "description": "May be used to override the default ID passed to the pane element.",
              "defaultValue": ""
            },
            {
              "name": "minWidth",
              "type": "number",
              "required": false,
              "description": "The minimum width of the pane.",
              "defaultValue": 256
            },
            {
              "name": "offsetHeader",
              "type": "string | number",
              "required": false,
              "description": "Use offsetHeader along with the sticky prop to push the sticky pane down to make room for a sticky header if necessary. Use the type `string` to specify the height with a unit i.e. 5rem; otherwise the type `number` will be taken as px.",
              "defaultValue": 0
            },
            {
              "name": "padding",
              "type": "\"normal\" | \"none\" | \"condensed\"",
              "required": false,
              "description": "The amount of padding inside the pane.",
              "defaultValue": "none"
            },
            {
              "name": "position",
              "type": "\"end\" | \"start\" | ResponsiveValue<\"end\" | \"start\">",
              "required": false,
              "description": "Which side of the page the pane should be on. Can be changed for different viewport widths.",
              "defaultValue": ""
            },
            {
              "name": "positionWhenNarrow",
              "type": "\"end\" | \"start\" | \"inherit\"",
              "required": false,
              "description": "@deprecated Use the `position` prop with a responsive value instead.\n\nBefore:\n```\nposition=\"start\"\npositionWhenNarrow=\"end\"\n```\n\nAfter:\n```\nposition={{regular: 'start', narrow: 'end'}}\n```",
              "defaultValue": "inherit"
            },
            {
              "name": "resizable",
              "type": "boolean",
              "required": false,
              "description": "When true, the pane may be resized by the user.",
              "defaultValue": false
            },
            {
              "name": "sticky",
              "type": "boolean",
              "required": false,
              "description": "Whether the pane should stick to the top of the screen while the content scrolls.",
              "defaultValue": false
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": "{}"
            },
            {
              "name": "width",
              "type": "\"small\" | \"large\" | \"medium\" | CustomWidthOptions",
              "required": false,
              "description": "The width of the pane. If using custom widths, provide an object with keys 'min', 'max' and 'default'.",
              "defaultValue": "medium"
            },
            {
              "name": "widthStorageKey",
              "type": "string",
              "required": false,
              "description": "Provide a key used by localStorage to persist the size of the pane on the client.",
              "defaultValue": "paneWidth"
            }
          ]
        }
      ]
    },
    "pagehead": {
      "id": "pagehead",
      "name": "Pagehead",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-pagehead--default",
          "code": "() => <Pagehead>Pagehead</Pagehead>"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "pagination": {
      "id": "pagination",
      "name": "Pagination",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-pagination--default",
          "code": "() => (\n  <Pagination\n    pageCount={15}\n    currentPage={2}\n    onPageChange={(e) => e.preventDefault()}\n    showPages={{\n      narrow: false,\n    }}\n  />\n)"
        },
        {
          "id": "components-pagination-features--larger-page-count-margin",
          "code": "() => (\n  <Pagination\n    pageCount={15}\n    currentPage={5}\n    marginPageCount={4}\n    onPageChange={(e) => e.preventDefault()}\n  />\n)"
        },
        {
          "id": "components-pagination-features--hide-page-numbers",
          "code": "() => (\n  <Pagination\n    pageCount={15}\n    currentPage={5}\n    showPages={false}\n    onPageChange={(e) => e.preventDefault()}\n  />\n)"
        },
        {
          "id": "components-pagination-features--hide-page-numbers-by-viewport",
          "code": "() => (\n  <>\n    <Pagination\n      pageCount={15}\n      currentPage={5}\n      showPages={{\n        narrow: false,\n      }}\n      onPageChange={(e) => e.preventDefault()}\n    />\n    <p>Page numbers are hidden on narrow viewports.</p>\n  </>\n)"
        },
        {
          "id": "components-pagination-features--higher-surrounding-page-count",
          "code": "() => (\n  <Pagination\n    pageCount={15}\n    currentPage={5}\n    surroundingPageCount={4}\n    onPageChange={(e) => e.preventDefault()}\n  />\n)"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "currentPage",
          "type": "number",
          "required": true,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "pageCount",
          "type": "number",
          "required": true,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "hrefBuilder",
          "type": "(n: number) => string",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "marginPageCount",
          "type": "number",
          "required": false,
          "description": "",
          "defaultValue": 1
        },
        {
          "name": "onPageChange",
          "type": "(e: MouseEvent<Element, MouseEvent>, n: number) => void",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "showPages",
          "type": "boolean | ResponsiveValue<boolean>",
          "required": false,
          "description": "",
          "defaultValue": true
        },
        {
          "name": "surroundingPageCount",
          "type": "number",
          "required": false,
          "description": "",
          "defaultValue": 2
        },
        {
          "name": "theme",
          "type": "Record<string, unknown>",
          "required": false,
          "description": "",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "pointer_box": {
      "id": "pointer_box",
      "name": "PointerBox",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-pointerbox--default",
          "code": "() => <PointerBox>Pointer box content</PointerBox>"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "bg",
          "type": "string | string & (string | number | symbol | null)[] | string & { [x: string]: string | number | symbol | undefined; [x: number]: string | number | symbol | undefined; }",
          "required": false,
          "description": "Background color of the box\nThe color utility parses a component's `color` and `bg` props and converts them into CSS declarations.\nBy default the raw value of the prop is returned.\n\nColor palettes can be configured with the ThemeProvider to use keys as prop values, with support for dot notation.\nArray values are converted into responsive values.\n\n[MDN Reference](https://developer.mozilla.org/en-US/docs/Web/CSS/background-color)",
          "defaultValue": ""
        },
        {
          "name": "border",
          "type": "string | number | string & (Border<TLengthStyledSystem> | null)[] | string & { [x: string]: Border<TLengthStyledSystem> | undefined; [x: number]: Border<TLengthStyledSystem> | undefined; } | number & (Border<TLengthStyledSystem> | null)[] | number & { [x: string]: Border<TLengthStyledSystem> | undefined; [x: number]: Border<TLengthStyledSystem> | undefined; }",
          "required": false,
          "description": "Width of the border around the box\nThe border CSS property sets an element's border. It's a shorthand for border-width, border-style,\nand border-color.\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border)",
          "defaultValue": ""
        },
        {
          "name": "borderColor",
          "type": "string | string & (string | number | symbol | null)[] | string & { [x: string]: string | number | symbol | undefined; [x: number]: string | number | symbol | undefined; }",
          "required": false,
          "description": "Color of the border around the box\nThe border-color shorthand CSS property sets the color of all sides of an element's border.\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-color)",
          "defaultValue": ""
        },
        {
          "name": "caret",
          "type": "\"left\" | \"right\" | \"top\" | \"top-left\" | \"top-right\" | \"right-top\" | \"right-bottom\" | \"bottom\" | \"bottom-left\" | \"bottom-right\" | \"left-top\" | \"left-bottom\"",
          "required": false,
          "description": "Sets the location of the caret. The format is [edge]-[position on edge]. For example, right-top will position the caret on the top of the right edge of the box.",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "SystemCssProperties & { bg?: string | undefined; backgroundColor?: string | undefined; borderColor?: string | undefined; } | CSSPseudoSelectorProps & { bg?: string | undefined; backgroundColor?: string | undefined; borderColor?: string | undefined; } | CSSSelectorObject & { bg?: string | undefined; backgroundColor?: string | undefined; borderColor?: string | undefined; } | VariantProperty & { bg?: string | undefined; backgroundColor?: string | undefined; borderColor?: string | undefined; } | UseThemeFunction & { bg?: string | undefined; backgroundColor?: string | undefined; borderColor?: string | undefined; } | EmotionLabel & { bg?: string | undefined; backgroundColor?: string | undefined; borderColor?: string | undefined; } | BetterCssProperties & { bg?: string | undefined; backgroundColor?: string | undefined; borderColor?: string | undefined; } | CSSCustomProperties & { bg?: string | undefined; backgroundColor?: string | undefined; borderColor?: string | undefined; } | CSSSelectorObject & { bg?: string | undefined; backgroundColor?: string | undefined; borderColor?: string | undefined; }",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "popover": {
      "id": "popover",
      "name": "Popover",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-popover--default",
          "code": "() => (\n  <Popover relative open={true} caret=\"top\">\n    <Popover.Content\n      sx={{\n        marginTop: 2,\n      }}\n    >\n      <Heading\n        sx={{\n          fontSize: 2,\n        }}\n      >\n        Popover heading\n      </Heading>\n      <Text as=\"p\">Message about popovers</Text>\n      <Button>Got it!</Button>\n    </Popover.Content>\n  </Popover>\n)"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "caret",
          "type": "\"left\" | \"right\" | \"top\" | \"top-left\" | \"top-right\" | \"right-top\" | \"right-bottom\" | \"bottom\" | \"bottom-left\" | \"bottom-right\" | \"left-top\" | \"left-bottom\"",
          "required": false,
          "description": "Controls the position of the caret",
          "defaultValue": "top"
        },
        {
          "name": "open",
          "type": "boolean",
          "required": false,
          "description": "Controls the visibility of the popover.",
          "defaultValue": ""
        },
        {
          "name": "relative",
          "type": "boolean",
          "required": false,
          "description": "Set to true to render the popover using relative positioning.",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        }
      ],
      "subcomponents": [
        {
          "name": "Popover.Content",
          "props": [
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    "portal": {
      "id": "portal",
      "name": "Portal",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-portal--default",
          "code": "() => (\n  <>\n    Root position\n    <Box bg=\"red.2\" p={3}>\n      Outer container\n      <Box bg=\"green.2\" p={3}>\n        Inner container\n        <Portal>\n          Portaled content rendered at <code>&lt;BaseStyles&gt;</code> root.\n        </Portal>\n      </Box>\n    </Box>\n  </>\n)"
        },
        {
          "id": "components-portal-features--custom-portal-root-by-id",
          "code": "() => (\n  <>\n    Root position\n    <Box bg=\"red.2\" p={3} id=\"__primerPortalRoot__\">\n      Outer container\n      <Box bg=\"green.2\" p={3}>\n        Inner container\n        <Portal>Portaled content rendered at the outer container.</Portal>\n      </Box>\n    </Box>\n  </>\n)"
        },
        {
          "id": "components-portal-features--custom-portal-root-by-registration",
          "code": "() => {\n  const outerContainerRef = React.useRef<HTMLDivElement>(null)\n  const [mounted, setMounted] = React.useState(false)\n  React.useEffect(() => {\n    if (outerContainerRef.current instanceof HTMLElement) {\n      registerPortalRoot(outerContainerRef.current)\n      setMounted(true)\n    }\n  }, [])\n  return (\n    <>\n      Root position\n      <Box bg=\"red.2\" p={3} ref={outerContainerRef}>\n        {mounted ? (\n          <>\n            Outer container\n            <Box bg=\"green.2\" p={3}>\n              Inner container\n              <Portal>Portaled content rendered at the outer container.</Portal>\n            </Box>\n          </>\n        ) : null}\n      </Box>\n    </>\n  )\n}"
        },
        {
          "id": "components-portal-features--multiple-portal-roots",
          "code": "() => {\n  const outerContainerRef = React.useRef<HTMLDivElement>(null)\n  const innerContainerRef = React.useRef<HTMLDivElement>(null)\n  const [mounted, setMounted] = React.useState(false)\n  React.useEffect(() => {\n    if (\n      outerContainerRef.current instanceof HTMLElement &&\n      innerContainerRef.current instanceof HTMLElement\n    ) {\n      registerPortalRoot(outerContainerRef.current, 'outer')\n      registerPortalRoot(innerContainerRef.current, 'inner')\n      setMounted(true)\n    }\n  }, [outerContainerRef])\n  return (\n    <>\n      Root position\n      <Box bg=\"red.2\" p={3} ref={outerContainerRef}>\n        Outer container\n        <Box bg=\"green.2\" p={3} ref={innerContainerRef}>\n          {mounted ? (\n            <>\n              <Portal containerName=\"outer\">\n                Portaled content rendered at the outer container.\n              </Portal>\n              <Portal containerName=\"inner\">\n                Portaled content rendered at the end of the inner container.\n              </Portal>\n              <Portal>\n                Portaled content rendered at <code>&lt;BaseStyles&gt;</code>{' '}\n                root.\n              </Portal>\n            </>\n          ) : null}\n          Inner container\n        </Box>\n      </Box>\n    </>\n  )\n}"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "containerName",
          "type": "string",
          "required": false,
          "description": "Optional. Mount this portal at the container specified\nby this name. The container must be previously registered\nwith `registerPortal`.",
          "defaultValue": ""
        },
        {
          "name": "onMount",
          "type": "() => void",
          "required": false,
          "description": "Called when this portal is added to the DOM",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "progress_bar": {
      "id": "progress_bar",
      "name": "ProgressBar",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-progressbar--default",
          "code": "() => <ProgressBar aria-label=\"Upload test.png\" />"
        },
        {
          "id": "components-progressbar-features--progress-zero",
          "code": "() => <ProgressBar progress=\"0\" aria-label=\"Upload test.png\" />"
        },
        {
          "id": "components-progressbar-features--progress-half",
          "code": "() => <ProgressBar progress=\"50\" aria-label=\"Upload test.png\" />"
        },
        {
          "id": "components-progressbar-features--progress-done",
          "code": "() => <ProgressBar progress=\"100\" aria-label=\"Upload test.png\" />"
        },
        {
          "id": "components-progressbar-features--size-small",
          "code": "() => (\n  <ProgressBar progress=\"66\" barSize=\"small\" aria-label=\"Upload test.png\" />\n)"
        },
        {
          "id": "components-progressbar-features--size-large",
          "code": "() => (\n  <ProgressBar progress=\"66\" barSize=\"large\" aria-label=\"Upload test.png\" />\n)"
        },
        {
          "id": "components-progressbar-features--inline",
          "code": "() => (\n  <ProgressBar\n    inline\n    progress=\"66\"\n    sx={{\n      width: '100px',\n    }}\n    aria-label=\"Upload test.png\"\n  />\n)"
        },
        {
          "id": "components-progressbar-features--color",
          "code": "() => (\n  <ProgressBar progress=\"66\" bg=\"done.emphasis\" aria-label=\"Upload test.png\" />\n)"
        },
        {
          "id": "components-progressbar-features--multiple-items",
          "code": "() => (\n  <ProgressBar aria-valuenow={70} aria-label=\"Upload test.png\">\n    <ProgressBar.Item progress={33} />\n    <ProgressBar.Item\n      progress={23}\n      sx={{\n        backgroundColor: 'danger.emphasis',\n      }}\n    />\n    <ProgressBar.Item\n      progress={14}\n      sx={{\n        backgroundColor: 'severe.emphasis',\n      }}\n    />\n  </ProgressBar>\n)"
        },
        {
          "id": "components-progressbar-features--animated",
          "code": "() => <ProgressBar progress=\"50\" aria-label=\"Upload test.png\" animated />"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "animated",
          "type": "boolean",
          "required": false,
          "description": "Whether the filled in area(s) of the progress bar will be animated or not",
          "defaultValue": ""
        },
        {
          "name": "barSize",
          "type": "\"small\" | \"default\" | \"large\"",
          "required": false,
          "description": "Controls the height of the progress bar. If omitted, height is set to the default height.",
          "defaultValue": "default"
        },
        {
          "name": "bg",
          "type": "string",
          "required": false,
          "description": "Set the progress bar color",
          "defaultValue": "success.emphasis"
        },
        {
          "name": "inline",
          "type": "boolean",
          "required": false,
          "description": "Styles the progress bar inline",
          "defaultValue": ""
        },
        {
          "name": "progress",
          "type": "string | number",
          "required": false,
          "description": "Used to set the size of the green bar",
          "defaultValue": "0"
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        }
      ],
      "subcomponents": [
        {
          "name": "ProgressBar.Item",
          "props": [
            {
              "name": "progress",
              "type": "string | number",
              "required": false,
              "description": "Used to set the size of the green bar",
              "defaultValue": "0"
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    "radio": {
      "id": "radio",
      "name": "Radio",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-radio--default",
          "code": "() => (\n  <Box as=\"form\">\n    <FormControl>\n      <Radio name=\"default-radio-name\" value=\"default\" />\n      <FormControl.Label>Label</FormControl.Label>\n    </FormControl>\n  </Box>\n)"
        },
        {
          "id": "components-radio-features--with-leading-visual",
          "code": "() => {\n  return (\n    <Box as=\"form\">\n      <FormControl>\n        <FormControl.LeadingVisual>\n          <MarkGithubIcon />\n        </FormControl.LeadingVisual>\n        <Radio value=\"default\" name=\"default-radio-name\" />\n        <FormControl.Label>Default label</FormControl.Label>\n      </FormControl>\n    </Box>\n  )\n}"
        },
        {
          "id": "components-radio-features--disabled",
          "code": "() => {\n  return (\n    <Box as=\"form\">\n      <FormControl disabled>\n        <Radio value=\"default\" name=\"default-radio-name\" />\n        <FormControl.Label>Default label</FormControl.Label>\n      </FormControl>\n    </Box>\n  )\n}"
        },
        {
          "id": "components-radio-features--with-caption",
          "code": "() => {\n  return (\n    <Box as=\"form\">\n      <FormControl>\n        <Radio value=\"default\" name=\"default-radio-name\" />\n        <FormControl.Label>Default label</FormControl.Label>\n        <FormControl.Caption>This is a caption</FormControl.Caption>\n      </FormControl>\n    </Box>\n  )\n}"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "checked",
          "type": "boolean",
          "required": false,
          "description": "Indicates whether the radio button is selected",
          "defaultValue": ""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "required": false,
          "description": "Apply inactive visual appearance to the radio button",
          "defaultValue": ""
        },
        {
          "name": "name",
          "type": "string",
          "required": false,
          "description": "Name attribute of the input element. Required for grouping radio inputs",
          "defaultValue": ""
        },
        {
          "name": "required",
          "type": "boolean",
          "required": false,
          "description": "Indicates whether the radio button must be checked before the form can be submitted",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        },
        {
          "name": "validationStatus",
          "type": "\"success\" | \"error\"",
          "required": false,
          "description": "Only used to inform ARIA attributes. Individual radio inputs do not have validation styles.",
          "defaultValue": ""
        },
        {
          "name": "value",
          "type": "string | string & readonly string[]",
          "required": false,
          "description": "A unique value that is never shown to the user.\nUsed during form submission and to identify which radio button in a group is selected",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "radio_group": {
      "id": "radio_group",
      "name": "RadioGroup",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-radiogroup--default",
          "code": "() => (\n  <RadioGroup name=\"defaultRadioGroup\">\n    <RadioGroup.Label>Choices</RadioGroup.Label>\n    <FormControl>\n      <Radio value=\"one\" />\n      <FormControl.Label>Choice one</FormControl.Label>\n    </FormControl>\n    <FormControl>\n      <Radio value=\"two\" defaultChecked />\n      <FormControl.Label>Choice two</FormControl.Label>\n    </FormControl>\n    <FormControl>\n      <Radio value=\"three\" />\n      <FormControl.Label>Choice three</FormControl.Label>\n    </FormControl>\n  </RadioGroup>\n)"
        },
        {
          "id": "components-radiogroup-features--visually-hidden-label",
          "code": "() => (\n  <RadioGroup name=\"defaultRadioGroup\">\n    <RadioGroup.Label visuallyHidden>Choices</RadioGroup.Label>\n    <FormControl>\n      <Radio value=\"one\" defaultChecked />\n      <FormControl.Label>Choice one</FormControl.Label>\n    </FormControl>\n    <FormControl>\n      <Radio value=\"two\" />\n      <FormControl.Label>Choice two</FormControl.Label>\n    </FormControl>\n    <FormControl>\n      <Radio value=\"three\" />\n      <FormControl.Label>Choice three</FormControl.Label>\n    </FormControl>\n  </RadioGroup>\n)"
        },
        {
          "id": "components-radiogroup-features--with-external-label",
          "code": "() => (\n  <>\n    <Box\n      id=\"choiceHeading\"\n      borderBottomWidth=\"1px\"\n      borderBottomStyle=\"solid\"\n      borderBottomColor=\"border.default\"\n      pb={2}\n      mb={3}\n      fontSize={3}\n    >\n      External label\n    </Box>\n    <RadioGroup aria-labelledby=\"choiceHeading\" name=\"defaultRadioGroup\">\n      <FormControl>\n        <Radio value=\"one\" />\n        <FormControl.Label>Choice one</FormControl.Label>\n      </FormControl>\n      <FormControl>\n        <Radio value=\"two\" />\n        <FormControl.Label>Choice two</FormControl.Label>\n      </FormControl>\n      <FormControl>\n        <Radio value=\"three\" />\n        <FormControl.Label>Choice three</FormControl.Label>\n      </FormControl>\n    </RadioGroup>\n  </>\n)"
        },
        {
          "id": "components-radiogroup-features--error",
          "code": "() => (\n  <RadioGroup name=\"defaultRadioGroup\">\n    <RadioGroup.Label>Choices</RadioGroup.Label>\n    <FormControl>\n      <Radio value=\"one\" defaultChecked />\n      <FormControl.Label>Choice one</FormControl.Label>\n    </FormControl>\n    <FormControl>\n      <Radio value=\"two\" />\n      <FormControl.Label>Choice two</FormControl.Label>\n    </FormControl>\n    <FormControl>\n      <Radio value=\"three\" />\n      <FormControl.Label>Choice three</FormControl.Label>\n    </FormControl>\n    <RadioGroup.Validation variant=\"error\">\n      Something went wrong\n    </RadioGroup.Validation>\n  </RadioGroup>\n)"
        },
        {
          "id": "components-radiogroup-features--success",
          "code": "() => (\n  <RadioGroup name=\"defaultRadioGroup\">\n    <RadioGroup.Label>Choices</RadioGroup.Label>\n    <FormControl>\n      <Radio value=\"one\" />\n      <FormControl.Label>Choice one</FormControl.Label>\n    </FormControl>\n    <FormControl>\n      <Radio value=\"two\" defaultChecked />\n      <FormControl.Label>Choice two</FormControl.Label>\n    </FormControl>\n    <FormControl>\n      <Radio value=\"three\" />\n      <FormControl.Label>Choice three</FormControl.Label>\n    </FormControl>\n    <RadioGroup.Validation variant=\"success\">Great job!</RadioGroup.Validation>\n  </RadioGroup>\n)"
        },
        {
          "id": "components-radiogroup-features--caption",
          "code": "() => (\n  <RadioGroup name=\"defaultRadioGroup\">\n    <RadioGroup.Label>Choices</RadioGroup.Label>\n    <RadioGroup.Caption>Caption</RadioGroup.Caption>\n    <FormControl>\n      <Radio value=\"one\" />\n      <FormControl.Label>Choice one</FormControl.Label>\n    </FormControl>\n    <FormControl>\n      <Radio value=\"two\" defaultChecked />\n      <FormControl.Label>Choice two</FormControl.Label>\n    </FormControl>\n    <FormControl>\n      <Radio value=\"three\" />\n      <FormControl.Label>Choice three</FormControl.Label>\n    </FormControl>\n  </RadioGroup>\n)"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "name",
          "type": "string",
          "required": true,
          "description": "The name used to identify this group of radios",
          "defaultValue": ""
        },
        {
          "name": "aria-labelledby",
          "type": "string",
          "required": false,
          "description": "Used when associating the input group with a label other than `CheckboxOrRadioGroup.Label`",
          "defaultValue": ""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "required": false,
          "description": "Whether the input group allows user input",
          "defaultValue": ""
        },
        {
          "name": "id",
          "type": "string",
          "required": false,
          "description": "The unique identifier for this input group. Used to associate the label, validation text, and caption text.\nYou may want a custom ID to make it easier to select elements in integration tests.",
          "defaultValue": ""
        },
        {
          "name": "onChange",
          "type": "(selected: string | null, e?: ChangeEvent<HTMLInputElement> | undefined) => void",
          "required": false,
          "description": "An onChange handler that gets called when the selection changes",
          "defaultValue": ""
        },
        {
          "name": "required",
          "type": "boolean",
          "required": false,
          "description": "If true, the user must make a selection before the owning form can be submitted",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        }
      ],
      "subcomponents": [
        {
          "name": "RadioGroup.Caption",
          "props": [
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "RadioGroup.Label",
          "props": [
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            },
            {
              "name": "visuallyHidden",
              "type": "boolean",
              "required": false,
              "description": "Whether to visually hide the fieldset legend",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "RadioGroup.Validation",
          "props": [
            {
              "name": "variant",
              "type": "\"success\" | \"error\"",
              "required": true,
              "description": "Changes the visual style to match the validation status",
              "defaultValue": ""
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    "relative_time": {
      "id": "relative_time",
      "name": "RelativeTime",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-relativetime--default",
          "code": "() => <RelativeTime date={new Date('2020-01-01T00:00:00Z')} noTitle={true} />"
        },
        {
          "id": "components-relativetime-features--micro-format",
          "code": "(args) => {\n  const { date, ...rest } = args\n  return <RelativeTime {...rest} date={new Date(date)} format=\"micro\" />\n}"
        },
        {
          "id": "components-relativetime-features--recent-time",
          "code": "(args) => {\n  const { ...rest } = args\n  return <RelativeTime {...rest} date={new Date()} />\n}"
        },
        {
          "id": "components-relativetime-features--count-down-timer",
          "code": "(args) => {\n  const { ...rest } = args\n  return <RelativeTime {...rest} />\n}"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "attributeChangedCallback",
          "type": "(attrName: string, oldValue: unknown, newValue: unknown) => void",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "connectedCallback",
          "type": "() => void",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "date",
          "type": "null | Date",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "datetime",
          "type": "string",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "day",
          "type": "\"numeric\" | \"2-digit\"",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "disconnectedCallback",
          "type": "() => void",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "format",
          "type": "\"datetime\" | \"auto\" | \"relative\" | \"micro\" | \"elapsed\" | \"duration\"",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "formatStyle",
          "type": "\"narrow\" | \"short\" | \"long\"",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "hour",
          "type": "\"numeric\" | \"2-digit\"",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "minute",
          "type": "\"numeric\" | \"2-digit\"",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "month",
          "type": "\"numeric\" | \"narrow\" | \"2-digit\" | \"short\" | \"long\"",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "noTitle",
          "type": "boolean",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "onRelativeTimeUpdated",
          "type": "null | (event: RelativeTimeUpdatedEvent) => void",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "precision",
          "type": "\"second\" | \"minute\" | \"hour\" | \"day\" | \"month\" | \"year\" | \"week\" | \"millisecond\"",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "second",
          "type": "\"numeric\" | \"2-digit\"",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        },
        {
          "name": "tense",
          "type": "\"auto\" | \"past\" | \"future\"",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "threshold",
          "type": "string",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "timeZoneName",
          "type": "\"short\" | \"long\" | \"shortOffset\" | \"longOffset\" | \"shortGeneric\" | \"longGeneric\"",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "update",
          "type": "() => void",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "weekday",
          "type": "\"narrow\" | \"short\" | \"long\"",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "year",
          "type": "\"numeric\" | \"2-digit\"",
          "required": false,
          "description": "",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "segmented_control": {
      "id": "segmented_control",
      "name": "SegmentedControl",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-segmentedcontrol--default",
          "code": "() => (\n  <SegmentedControl aria-label=\"File view\">\n    <SegmentedControl.Button defaultSelected>Preview</SegmentedControl.Button>\n    <SegmentedControl.Button>Raw</SegmentedControl.Button>\n    <SegmentedControl.Button>Blame</SegmentedControl.Button>\n  </SegmentedControl>\n)"
        },
        {
          "id": "components-segmentedcontrol-features--with-icons",
          "code": "() => (\n  <SegmentedControl aria-label=\"File view\">\n    <SegmentedControl.Button\n      defaultSelected\n      aria-label={'Preview'}\n      leadingIcon={EyeIcon}\n    >\n      Preview\n    </SegmentedControl.Button>\n    <SegmentedControl.Button aria-label={'Raw'} leadingIcon={FileCodeIcon}>\n      Raw\n    </SegmentedControl.Button>\n    <SegmentedControl.Button aria-label={'Blame'} leadingIcon={PeopleIcon}>\n      Blame\n    </SegmentedControl.Button>\n  </SegmentedControl>\n)"
        },
        {
          "id": "components-segmentedcontrol-features--controlled",
          "code": "() => {\n  const [selectedIndex, setSelectedIndex] = useState(0)\n  const handleChange = (i: number) => {\n    setSelectedIndex(i)\n  }\n  return (\n    <SegmentedControl aria-label=\"File view\" onChange={handleChange}>\n      <SegmentedControl.Button selected={selectedIndex === 0}>\n        Preview\n      </SegmentedControl.Button>\n      <SegmentedControl.Button selected={selectedIndex === 1}>\n        Raw\n      </SegmentedControl.Button>\n      <SegmentedControl.Button selected={selectedIndex === 2}>\n        Blame\n      </SegmentedControl.Button>\n    </SegmentedControl>\n  )\n}"
        },
        {
          "id": "components-segmentedcontrol-features--variant-narrow-hide-labels",
          "code": "() => (\n  <SegmentedControl\n    aria-label=\"File view\"\n    variant={{\n      narrow: 'hideLabels',\n      regular: 'default',\n      wide: 'default',\n    }}\n  >\n    <SegmentedControl.Button\n      defaultSelected\n      aria-label={'Preview'}\n      leadingIcon={EyeIcon}\n    >\n      Preview\n    </SegmentedControl.Button>\n    <SegmentedControl.Button aria-label={'Raw'} leadingIcon={FileCodeIcon}>\n      Raw\n    </SegmentedControl.Button>\n    <SegmentedControl.Button aria-label={'Blame'} leadingIcon={PeopleIcon}>\n      Blame\n    </SegmentedControl.Button>\n  </SegmentedControl>\n)"
        },
        {
          "id": "components-segmentedcontrol-features--variant-narrow-action-menu",
          "code": "() => (\n  <SegmentedControl\n    aria-label=\"File view\"\n    variant={{\n      narrow: 'dropdown',\n      regular: 'default',\n      wide: 'default',\n    }}\n  >\n    <SegmentedControl.Button\n      defaultSelected\n      aria-label={'Preview'}\n      leadingIcon={EyeIcon}\n    >\n      Preview\n    </SegmentedControl.Button>\n    <SegmentedControl.Button aria-label={'Raw'} leadingIcon={FileCodeIcon}>\n      Raw\n    </SegmentedControl.Button>\n    <SegmentedControl.Button aria-label={'Blame'} leadingIcon={PeopleIcon}>\n      Blame\n    </SegmentedControl.Button>\n  </SegmentedControl>\n)"
        },
        {
          "id": "components-segmentedcontrol-features--fullwidth-narrow",
          "code": "() => (\n  <SegmentedControl\n    aria-label=\"File view\"\n    fullWidth={{\n      narrow: true,\n      regular: false,\n      wide: false,\n    }}\n  >\n    <SegmentedControl.Button\n      defaultSelected\n      aria-label={'Preview'}\n      leadingIcon={EyeIcon}\n    >\n      Preview\n    </SegmentedControl.Button>\n    <SegmentedControl.Button aria-label={'Raw'} leadingIcon={FileCodeIcon}>\n      Raw\n    </SegmentedControl.Button>\n    <SegmentedControl.Button aria-label={'Blame'} leadingIcon={PeopleIcon}>\n      Blame\n    </SegmentedControl.Button>\n  </SegmentedControl>\n)"
        },
        {
          "id": "components-segmentedcontrol-features--fullwidth-regular",
          "code": "() => (\n  <SegmentedControl\n    aria-label=\"File view\"\n    fullWidth={{\n      narrow: false,\n      regular: true,\n      wide: false,\n    }}\n  >\n    <SegmentedControl.Button\n      defaultSelected\n      aria-label={'Preview'}\n      leadingIcon={EyeIcon}\n    >\n      Preview\n    </SegmentedControl.Button>\n    <SegmentedControl.Button aria-label={'Raw'} leadingIcon={FileCodeIcon}>\n      Raw\n    </SegmentedControl.Button>\n    <SegmentedControl.Button aria-label={'Blame'} leadingIcon={PeopleIcon}>\n      Blame\n    </SegmentedControl.Button>\n  </SegmentedControl>\n)"
        },
        {
          "id": "components-segmentedcontrol-features--fullwidth-all",
          "code": "() => (\n  <SegmentedControl aria-label=\"File view\" fullWidth>\n    <SegmentedControl.Button\n      defaultSelected\n      aria-label={'Preview'}\n      leadingIcon={EyeIcon}\n    >\n      Preview\n    </SegmentedControl.Button>\n    <SegmentedControl.Button aria-label={'Raw'} leadingIcon={FileCodeIcon}>\n      Raw\n    </SegmentedControl.Button>\n    <SegmentedControl.Button aria-label={'Blame'} leadingIcon={PeopleIcon}>\n      Blame\n    </SegmentedControl.Button>\n  </SegmentedControl>\n)"
        },
        {
          "id": "components-segmentedcontrol-features--icon-only",
          "code": "() => (\n  <SegmentedControl aria-label=\"File view\">\n    <SegmentedControl.IconButton\n      defaultSelected\n      aria-label={'Preview'}\n      icon={EyeIcon}\n    />\n    <SegmentedControl.IconButton aria-label={'Raw'} icon={FileCodeIcon} />\n    <SegmentedControl.IconButton aria-label={'Blame'} icon={PeopleIcon} />\n  </SegmentedControl>\n)"
        },
        {
          "id": "components-segmentedcontrol-features--associated-with-a-label-and-caption",
          "code": "() => (\n  <Box\n    display=\"flex\"\n    sx={(theme) => ({\n      flexDirection: 'column',\n      gap: theme.space[1],\n      [`@media screen and (min-width: ${theme.breakpoints[1]})`]: {\n        flexDirection: 'row',\n      },\n    })}\n  >\n    <Box flexGrow={1}>\n      <Text fontSize={2} fontWeight=\"bold\" id=\"scLabel-vert\" display=\"block\">\n        File view\n      </Text>\n      <Text color=\"fg.subtle\" fontSize={1} id=\"scCaption-vert\" display=\"block\">\n        Change the way the file is viewed\n      </Text>\n    </Box>\n    <SegmentedControl\n      aria-labelledby=\"scLabel-vert\"\n      aria-describedby=\"scCaption-vert\"\n    >\n      <SegmentedControl.Button defaultSelected>Preview</SegmentedControl.Button>\n      <SegmentedControl.Button>Raw</SegmentedControl.Button>\n      <SegmentedControl.Button>Blame</SegmentedControl.Button>\n    </SegmentedControl>\n  </Box>\n)"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "aria-describedby",
          "type": "string",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "aria-label",
          "type": "string",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "aria-labelledby",
          "type": "string",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "fullWidth",
          "type": "boolean | ResponsiveValue<boolean>",
          "required": false,
          "description": "Whether the control fills the width of its parent",
          "defaultValue": ""
        },
        {
          "name": "onChange",
          "type": "(selectedIndex: number) => void",
          "required": false,
          "description": "The handler that gets called when a segment is selected",
          "defaultValue": ""
        },
        {
          "name": "size",
          "type": "\"small\" | \"medium\"",
          "required": false,
          "description": "The size of the buttons",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        },
        {
          "name": "variant",
          "type": "\"default\" | Partial<Record<WidthOnlyViewportRangeKeys, \"default\" | \"hideLabels\" | \"dropdown\">>",
          "required": false,
          "description": "Configure alternative ways to render the control when it gets rendered in tight spaces",
          "defaultValue": "default"
        }
      ],
      "subcomponents": [
        {
          "name": "SegmentedControl.Button",
          "props": [
            {
              "name": "children",
              "type": "string & ReactNode",
              "required": false,
              "description": "The visible label rendered in the button",
              "defaultValue": ""
            },
            {
              "name": "defaultSelected",
              "type": "boolean",
              "required": false,
              "description": "Whether the segment is selected. This is used for uncontrolled `SegmentedControls` to pick one `SegmentedControlButton` that is selected on the initial render.",
              "defaultValue": ""
            },
            {
              "name": "leadingIcon",
              "type": "FunctionComponent<PropsWithChildren<IconProps>>",
              "required": false,
              "description": "The leading icon comes before item label",
              "defaultValue": ""
            },
            {
              "name": "selected",
              "type": "boolean",
              "required": false,
              "description": "Whether the segment is selected. This is used for controlled `SegmentedControls`, and needs to be updated using the `onChange` handler on `SegmentedControl`.",
              "defaultValue": ""
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "SegmentedControl.IconButton",
          "props": [
            {
              "name": "icon",
              "type": "FunctionComponent<PropsWithChildren<IconProps>>",
              "required": true,
              "description": "The icon that represents the segmented control item",
              "defaultValue": ""
            },
            {
              "name": "aria-label",
              "type": "string",
              "required": false,
              "description": "Defines a string value that labels the current element.\n@see aria-labelledby.",
              "defaultValue": ""
            },
            {
              "name": "defaultSelected",
              "type": "boolean",
              "required": false,
              "description": "Whether the segment is selected. This is used for uncontrolled SegmentedControls to pick one SegmentedControlButton that is selected on the initial render.",
              "defaultValue": ""
            },
            {
              "name": "selected",
              "type": "boolean",
              "required": false,
              "description": "Whether the segment is selected. This is used for controlled SegmentedControls, and needs to be updated using the onChange handler on SegmentedControl.",
              "defaultValue": ""
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    "select": {
      "id": "select",
      "name": "Select",
      "status": "alpha",
      "a11yReviewed": true,
      "stories": [
        {
          "id": "components-select--default",
          "code": "() => (\n  <Box as=\"form\">\n    <FormControl>\n      <FormControl.Label>Default label</FormControl.Label>\n      <Select>\n        <Select.Option value=\"one\">Choice one</Select.Option>\n        <Select.Option value=\"two\">Choice two</Select.Option>\n        <Select.Option value=\"three\">Choice three</Select.Option>\n        <Select.Option value=\"four\">Choice four</Select.Option>\n        <Select.Option value=\"five\">Choice five</Select.Option>\n        <Select.Option value=\"six\">Choice six</Select.Option>\n      </Select>\n    </FormControl>\n  </Box>\n)"
        },
        {
          "id": "components-select-features--with-option-groups",
          "code": "() => (\n  <Box as=\"form\">\n    <FormControl>\n      <FormControl.Label>Default label</FormControl.Label>\n      <Select>\n        <Select.OptGroup label=\"Group one\">\n          <Select.Option value=\"one\">Choice one</Select.Option>\n          <Select.Option value=\"two\">Choice two</Select.Option>\n          <Select.Option value=\"three\">Choice three</Select.Option>\n          <Select.Option value=\"four\">Choice four</Select.Option>\n        </Select.OptGroup>\n        <Select.OptGroup disabled label=\"Group two\">\n          <Select.Option value=\"five\">Choice five</Select.Option>\n          <Select.Option value=\"six\">Choice six</Select.Option>\n        </Select.OptGroup>\n      </Select>\n    </FormControl>\n  </Box>\n)"
        },
        {
          "id": "components-select-features--disabled",
          "code": "() => (\n  <Box as=\"form\">\n    <FormControl disabled>\n      <FormControl.Label>Default label</FormControl.Label>\n      <Select>\n        <Select.Option value=\"one\">Choice one</Select.Option>\n        <Select.Option value=\"two\">Choice two</Select.Option>\n        <Select.Option value=\"three\">Choice three</Select.Option>\n        <Select.Option value=\"four\">Choice four</Select.Option>\n        <Select.Option value=\"five\">Choice five</Select.Option>\n        <Select.Option value=\"six\">Choice six</Select.Option>\n      </Select>\n    </FormControl>\n  </Box>\n)"
        },
        {
          "id": "components-select-features--with-caption",
          "code": "() => (\n  <Box as=\"form\">\n    <FormControl>\n      <FormControl.Label>Default label</FormControl.Label>\n      <FormControl.Caption>This is a caption</FormControl.Caption>\n      <Select>\n        <Select.Option value=\"one\">Choice one</Select.Option>\n        <Select.Option value=\"two\">Choice two</Select.Option>\n        <Select.Option value=\"three\">Choice three</Select.Option>\n        <Select.Option value=\"four\">Choice four</Select.Option>\n        <Select.Option value=\"five\">Choice five</Select.Option>\n        <Select.Option value=\"six\">Choice six</Select.Option>\n      </Select>\n    </FormControl>\n  </Box>\n)"
        },
        {
          "id": "components-select-features--visually-hidden-label",
          "code": "() => (\n  <Box as=\"form\">\n    <FormControl>\n      <FormControl.Label visuallyHidden>Default label</FormControl.Label>\n      <Select>\n        <Select.Option value=\"one\">Choice one</Select.Option>\n        <Select.Option value=\"two\">Choice two</Select.Option>\n        <Select.Option value=\"three\">Choice three</Select.Option>\n        <Select.Option value=\"four\">Choice four</Select.Option>\n        <Select.Option value=\"five\">Choice five</Select.Option>\n        <Select.Option value=\"six\">Choice six</Select.Option>\n      </Select>\n    </FormControl>\n  </Box>\n)"
        },
        {
          "id": "components-select-features--error",
          "code": "() => (\n  <Box as=\"form\">\n    <FormControl>\n      <FormControl.Label>Default label</FormControl.Label>\n      <Select>\n        <Select.Option value=\"one\">Choice one</Select.Option>\n        <Select.Option value=\"two\">Choice two</Select.Option>\n        <Select.Option value=\"three\">Choice three</Select.Option>\n        <Select.Option value=\"four\">Choice four</Select.Option>\n        <Select.Option value=\"five\">Choice five</Select.Option>\n        <Select.Option value=\"six\">Choice six</Select.Option>\n      </Select>\n      <FormControl.Validation variant=\"error\">\n        Something went wrong\n      </FormControl.Validation>\n    </FormControl>\n  </Box>\n)"
        },
        {
          "id": "components-select-features--success",
          "code": "() => (\n  <Box as=\"form\">\n    <FormControl>\n      <FormControl.Label>Default label</FormControl.Label>\n      <Select>\n        <Select.Option value=\"one\">Choice one</Select.Option>\n        <Select.Option value=\"two\">Choice two</Select.Option>\n        <Select.Option value=\"three\">Choice three</Select.Option>\n        <Select.Option value=\"four\">Choice four</Select.Option>\n        <Select.Option value=\"five\">Choice five</Select.Option>\n        <Select.Option value=\"six\">Choice six</Select.Option>\n      </Select>\n      <FormControl.Validation variant=\"success\">Success</FormControl.Validation>\n    </FormControl>\n  </Box>\n)"
        },
        {
          "id": "components-select-features--block",
          "code": "() => (\n  <Box as=\"form\">\n    <FormControl>\n      <FormControl.Label>Default label</FormControl.Label>\n      <Select block>\n        <Select.Option value=\"one\">Choice one</Select.Option>\n        <Select.Option value=\"two\">Choice two</Select.Option>\n        <Select.Option value=\"three\">Choice three</Select.Option>\n        <Select.Option value=\"four\">Choice four</Select.Option>\n        <Select.Option value=\"five\">Choice five</Select.Option>\n        <Select.Option value=\"six\">Choice six</Select.Option>\n      </Select>\n    </FormControl>\n  </Box>\n)"
        },
        {
          "id": "components-select-features--small",
          "code": "() => (\n  <Box as=\"form\">\n    <FormControl>\n      <FormControl.Label>Default label</FormControl.Label>\n      <Select size=\"small\">\n        <Select.Option value=\"one\">Choice one</Select.Option>\n        <Select.Option value=\"two\">Choice two</Select.Option>\n        <Select.Option value=\"three\">Choice three</Select.Option>\n        <Select.Option value=\"four\">Choice four</Select.Option>\n        <Select.Option value=\"five\">Choice five</Select.Option>\n        <Select.Option value=\"six\">Choice six</Select.Option>\n      </Select>\n    </FormControl>\n  </Box>\n)"
        },
        {
          "id": "components-select-features--large",
          "code": "() => (\n  <Box as=\"form\">\n    <FormControl>\n      <FormControl.Label>Default label</FormControl.Label>\n      <Select size=\"large\">\n        <Select.Option value=\"one\">Choice one</Select.Option>\n        <Select.Option value=\"two\">Choice two</Select.Option>\n        <Select.Option value=\"three\">Choice three</Select.Option>\n        <Select.Option value=\"four\">Choice four</Select.Option>\n        <Select.Option value=\"five\">Choice five</Select.Option>\n        <Select.Option value=\"six\">Choice six</Select.Option>\n      </Select>\n    </FormControl>\n  </Box>\n)"
        },
        {
          "id": "components-select-features--with-custom-styling",
          "code": "() => (\n  <Box as=\"form\">\n    <FormControl>\n      <FormControl.Label>Default label</FormControl.Label>\n      <Select\n        sx={{\n          borderRadius: '12px',\n          border: '1px dashed #000000',\n        }}\n      >\n        <Select.Option value=\"one\">Choice one</Select.Option>\n        <Select.Option value=\"two\">Choice two</Select.Option>\n        <Select.Option value=\"three\">Choice three</Select.Option>\n        <Select.Option value=\"four\">Choice four</Select.Option>\n        <Select.Option value=\"five\">Choice five</Select.Option>\n        <Select.Option value=\"six\">Choice six</Select.Option>\n      </Select>\n    </FormControl>\n  </Box>\n)"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "block",
          "type": "boolean",
          "required": false,
          "description": "Whether the input takes up the full width of its parent",
          "defaultValue": ""
        },
        {
          "name": "contrast",
          "type": "boolean",
          "required": false,
          "description": "Whether the background color of the input has contrast against the default background color.",
          "defaultValue": ""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "required": false,
          "description": "Whether the input is styled to look disabled.",
          "defaultValue": ""
        },
        {
          "name": "hasTrailingAction",
          "type": "boolean",
          "required": false,
          "description": "Whether the input has a trailing action.",
          "defaultValue": ""
        },
        {
          "name": "isInputFocused",
          "type": "boolean",
          "required": false,
          "description": "Whether the input is focused.",
          "defaultValue": ""
        },
        {
          "name": "monospace",
          "type": "boolean",
          "required": false,
          "description": "Whether the text rendered in the input is in a monospace font.",
          "defaultValue": ""
        },
        {
          "name": "placeholder",
          "type": "string",
          "required": false,
          "description": "Text to show in a Select when no option is selected.",
          "defaultValue": ""
        },
        {
          "name": "size",
          "type": "\"small\" | \"large\" | \"medium\"",
          "required": false,
          "description": "The size of the input.",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        },
        {
          "name": "validationStatus",
          "type": "\"success\" | \"error\"",
          "required": false,
          "description": "The result of validation on the input.",
          "defaultValue": ""
        }
      ],
      "subcomponents": [
        {
          "name": "Select.OptGroup",
          "props": []
        },
        {
          "name": "Select.Option",
          "props": [
            {
              "name": "value",
              "type": "string | readonly string[] & string",
              "required": false,
              "description": "",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    "select_panel": {
      "id": "select_panel",
      "docsId": "select_panel",
      "name": "SelectPanel",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-selectpanel--default",
          "code": "() => {\n  const [selected, setSelected] = React.useState<ItemInput[]>([\n    items[0],\n    items[1],\n  ])\n  const [filter, setFilter] = React.useState('')\n  const filteredItems = items.filter((item) =>\n    item.text.toLowerCase().startsWith(filter.toLowerCase()),\n  )\n  const [open, setOpen] = useState(false)\n  return (\n    <>\n      <h1>Multi Select Panel</h1>\n      <SelectPanel\n        title=\"Select labels\"\n        subtitle=\"Use labels to organize issues and pull requests\"\n        renderAnchor={({\n          children,\n          'aria-labelledby': ariaLabelledBy,\n          ...anchorProps\n        }) => (\n          <Button\n            trailingAction={TriangleDownIcon}\n            aria-labelledby={` ${ariaLabelledBy}`}\n            {...anchorProps}\n            aria-haspopup=\"dialog\"\n          >\n            {children ?? 'Select Labels'}\n          </Button>\n        )}\n        open={open}\n        onOpenChange={setOpen}\n        items={filteredItems}\n        selected={selected}\n        onSelectedChange={setSelected}\n        onFilterChange={setFilter}\n      />\n    </>\n  )\n}"
        },
        {
          "id": "components-selectpanel-features--with-item-dividers",
          "code": "() => {\n  const [selected, setSelected] = React.useState<ItemInput[]>([\n    items[0],\n    items[1],\n  ])\n  const [filter, setFilter] = React.useState('')\n  const filteredItems = items.filter((item) =>\n    item.text.toLowerCase().startsWith(filter.toLowerCase()),\n  )\n  const [open, setOpen] = useState(false)\n  return (\n    <SelectPanel\n      title=\"Select labels\"\n      subtitle=\"Use labels to organize issues and pull requests\"\n      renderAnchor={({\n        children,\n        'aria-labelledby': ariaLabelledBy,\n        ...anchorProps\n      }) => (\n        <Button\n          trailingAction={TriangleDownIcon}\n          aria-labelledby={` ${ariaLabelledBy}`}\n          {...anchorProps}\n          aria-haspopup=\"dialog\"\n        >\n          {children ?? 'Select Labels'}\n        </Button>\n      )}\n      placeholderText=\"Filter labels\"\n      open={open}\n      onOpenChange={setOpen}\n      items={filteredItems}\n      selected={selected}\n      onSelectedChange={setSelected}\n      onFilterChange={setFilter}\n      showItemDividers={true}\n    />\n  )\n}"
        },
        {
          "id": "components-selectpanel-features--with-placeholder-for-seach-input",
          "code": "() => {\n  const [selected, setSelected] = React.useState<ItemInput[]>([\n    items[0],\n    items[1],\n  ])\n  const [filter, setFilter] = React.useState('')\n  const filteredItems = items.filter((item) =>\n    item.text.toLowerCase().startsWith(filter.toLowerCase()),\n  )\n  const [open, setOpen] = useState(false)\n  return (\n    <SelectPanel\n      title=\"Select labels\"\n      subtitle=\"Use labels to organize issues and pull requests\"\n      renderAnchor={({\n        children,\n        'aria-labelledby': ariaLabelledBy,\n        ...anchorProps\n      }) => (\n        <Button\n          trailingAction={TriangleDownIcon}\n          aria-labelledby={` ${ariaLabelledBy}`}\n          {...anchorProps}\n          aria-haspopup=\"dialog\"\n        >\n          {children ?? 'Select Labels'}\n        </Button>\n      )}\n      placeholderText=\"Filter labels\"\n      open={open}\n      onOpenChange={setOpen}\n      items={filteredItems}\n      selected={selected}\n      onSelectedChange={setSelected}\n      onFilterChange={setFilter}\n    />\n  )\n}"
        },
        {
          "id": "components-selectpanel-features--with-placeholder-select",
          "code": "() => {\n  const [selected, setSelected] = React.useState<ItemInput[]>([])\n  const [filter, setFilter] = React.useState('')\n  const filteredItems = items.filter((item) =>\n    item.text.toLowerCase().startsWith(filter.toLowerCase()),\n  )\n  const [open, setOpen] = useState(false)\n  return (\n    <SelectPanel\n      title=\"Select labels\"\n      subtitle=\"Use labels to organize issues and pull requests\"\n      renderAnchor={({\n        children,\n        'aria-labelledby': ariaLabelledBy,\n        ...anchorProps\n      }) => (\n        <Button\n          trailingAction={TriangleDownIcon}\n          aria-labelledby={` ${ariaLabelledBy}`}\n          {...anchorProps}\n          aria-haspopup=\"dialog\"\n        >\n          {children ?? 'Select Labels'}\n        </Button>\n      )}\n      placeholder=\"Select issue labels\"\n      open={open}\n      onOpenChange={setOpen}\n      items={filteredItems}\n      selected={selected}\n      onSelectedChange={setSelected}\n      onFilterChange={setFilter}\n    />\n  )\n}"
        },
        {
          "id": "components-selectpanel-features--single-select",
          "code": "() => {\n  const [selected, setSelected] = React.useState<ItemInput | undefined>(\n    items[0],\n  )\n  const [filter, setFilter] = React.useState('')\n  const filteredItems = items.filter((item) =>\n    item.text.toLowerCase().startsWith(filter.toLowerCase()),\n  )\n  const [open, setOpen] = useState(false)\n  return (\n    <>\n      <h1>Single Select Panel</h1>\n      <div>Please select a label that describe your issue:</div>\n      <SelectPanel\n        renderAnchor={({\n          children,\n          'aria-labelledby': ariaLabelledBy,\n          ...anchorProps\n        }) => (\n          <Button\n            trailingAction={TriangleDownIcon}\n            aria-labelledby={` ${ariaLabelledBy}`}\n            {...anchorProps}\n          >\n            {children ?? 'Select Labels'}\n          </Button>\n        )}\n        placeholderText=\"Filter Labels\"\n        open={open}\n        onOpenChange={setOpen}\n        items={filteredItems}\n        selected={selected}\n        onSelectedChange={setSelected}\n        onFilterChange={setFilter}\n        showItemDividers={true}\n        overlayProps={{\n          width: 'small',\n          height: 'xsmall',\n        }}\n      />\n    </>\n  )\n}"
        },
        {
          "id": "components-selectpanel-features--multi-select",
          "code": "() => {\n  const [selected, setSelected] = React.useState<ItemInput[]>([\n    items[0],\n    items[1],\n  ])\n  const [filter, setFilter] = React.useState('')\n  const filteredItems = items.filter((item) =>\n    item.text.toLowerCase().startsWith(filter.toLowerCase()),\n  )\n  const [open, setOpen] = useState(false)\n  const buttonRef = useRef<HTMLButtonElement>(null)\n  return (\n    <>\n      <h1>Multi Select Panel With Footer</h1>\n      <SelectPanel\n        renderAnchor={({\n          children,\n          'aria-labelledby': ariaLabelledBy,\n          ...anchorProps\n        }) => (\n          <Button\n            trailingAction={TriangleDownIcon}\n            aria-labelledby={` ${ariaLabelledBy}`}\n            {...anchorProps}\n          >\n            {children ?? 'Select Labels'}\n          </Button>\n        )}\n        anchorRef={buttonRef}\n        placeholderText=\"Filter Labels\"\n        open={open}\n        onOpenChange={setOpen}\n        items={filteredItems}\n        selected={selected}\n        onSelectedChange={setSelected}\n        onFilterChange={setFilter}\n        showItemDividers={true}\n        overlayProps={{\n          width: 'small',\n          height: 'medium',\n        }}\n      />\n    </>\n  )\n}"
        },
        {
          "id": "components-selectpanel-features--with-external-anchor",
          "code": "() => {\n  const [selected, setSelected] = React.useState<ItemInput | undefined>(\n    items[0],\n  )\n  const [filter, setFilter] = React.useState('')\n  const filteredItems = items.filter((item) =>\n    item.text.toLowerCase().startsWith(filter.toLowerCase()),\n  )\n  const [open, setOpen] = useState(false)\n  const buttonRef = useRef<HTMLButtonElement>(null)\n  return (\n    <>\n      <h1>Select Panel With External Anchor</h1>\n      <Button\n        trailingAction={TriangleDownIcon}\n        ref={buttonRef}\n        onClick={() => setOpen(!open)}\n      >\n        Custom: {selected?.text || 'Click Me'}\n      </Button>\n      <SelectPanel\n        renderAnchor={null}\n        anchorRef={buttonRef}\n        placeholderText=\"Filter Labels\"\n        open={open}\n        onOpenChange={setOpen}\n        items={filteredItems}\n        selected={selected}\n        onSelectedChange={setSelected}\n        onFilterChange={setFilter}\n        showItemDividers={true}\n        overlayProps={{\n          width: 'small',\n          height: 'xsmall',\n        }}\n      />\n    </>\n  )\n}"
        },
        {
          "id": "components-selectpanel-features--with-footer",
          "code": "() => {\n  const [selected, setSelected] = React.useState<ItemInput | undefined>(\n    items[0],\n  )\n  const [filter, setFilter] = React.useState('')\n  const filteredItems = items.filter((item) =>\n    item.text.toLowerCase().startsWith(filter.toLowerCase()),\n  )\n  const [open, setOpen] = useState(false)\n  const buttonRef = useRef<HTMLButtonElement>(null)\n  return (\n    <>\n      <h1>Select Panel With Footer</h1>\n      <SelectPanel\n        renderAnchor={({\n          children,\n          'aria-labelledby': ariaLabelledBy,\n          ...anchorProps\n        }) => (\n          <Button\n            trailingAction={TriangleDownIcon}\n            aria-labelledby={` ${ariaLabelledBy}`}\n            {...anchorProps}\n          >\n            {children ?? 'Select Labels'}\n          </Button>\n        )}\n        anchorRef={buttonRef}\n        placeholderText=\"Filter Labels\"\n        open={open}\n        onOpenChange={setOpen}\n        items={filteredItems}\n        selected={selected}\n        onSelectedChange={setSelected}\n        onFilterChange={setFilter}\n        showItemDividers={true}\n        overlayProps={{\n          width: 'small',\n          height: 'medium',\n        }}\n        footer={\n          <Button size=\"small\" block>\n            Edit labels\n          </Button>\n        }\n      />\n    </>\n  )\n}"
        },
        {
          "id": "components-selectpanel-features--with-groups",
          "code": "() => {\n  const [selectedIDs, setSelectedIDs] = useState<string[]>([])\n  const [filter, setFilter] = React.useState('')\n  const filteredItems = listOfItems.filter(\n    (item) => item.text?.toLowerCase().startsWith(filter.toLowerCase()),\n  )\n  const [open, setOpen] = useState(false)\n  const buttonRef = useRef<HTMLButtonElement>(null)\n  const onSelectedChange = async (selections: ItemInput[]) => {\n    const _selectedIDs = selections.flatMap((item) => {\n      if (item.id === undefined || typeof item.id !== 'string') {\n        return []\n      }\n      return item.id\n    })\n    setSelectedIDs(_selectedIDs)\n  }\n  const selectedObjects: ItemInput[] = useMemo(() => {\n    const selected: ItemInput[] = []\n    for (const selectedID of selectedIDs) {\n      const item = listOfItems.find((value) => value.id === selectedID)\n      if (item) {\n        selected.push(item)\n      }\n    }\n    return selected\n  }, [selectedIDs])\n  return (\n    <SelectPanel\n      variant=\"full\"\n      title=\"Attach files and symbols\"\n      subtitle=\"Choose which files and symbols you want to chat about. Use fewer references for more accurate responses.\"\n      renderAnchor={({\n        children,\n        'aria-labelledby': ariaLabelledBy,\n        ...anchorProps\n      }) => (\n        <Button\n          trailingAction={TriangleDownIcon}\n          aria-labelledby={` ${ariaLabelledBy}`}\n          {...anchorProps}\n        >\n          {children ?? 'Select Labels'}\n        </Button>\n      )}\n      anchorRef={buttonRef}\n      groupMetadata={groupMetadata}\n      placeholderText=\"Filter things\"\n      open={open}\n      onOpenChange={setOpen}\n      items={filteredItems}\n      selected={selectedObjects}\n      onSelectedChange={onSelectedChange}\n      onFilterChange={setFilter}\n      showItemDividers={true}\n      overlayProps={{\n        width: 'large',\n        height: 'xlarge',\n      }}\n    />\n  )\n}"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "items",
          "type": "ItemInput[]",
          "required": true,
          "description": "A collection of `Item` props and `Item`-level custom `Item` renderers.",
          "defaultValue": ""
        },
        {
          "name": "onFilterChange",
          "type": "(value: string, e: ChangeEvent<HTMLInputElement>) => void",
          "required": true,
          "description": "Callback when the search input changes",
          "defaultValue": ""
        },
        {
          "name": "onOpenChange",
          "type": "(open: boolean, gesture: \"anchor-click\" | \"anchor-key-press\" | \"click-outside\" | \"escape\" | \"selection\") => void",
          "required": true,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "onSelectedChange",
          "type": "(selected: ItemInput | undefined) => void | (selected: ItemInput[]) => void",
          "required": true,
          "description": "Provide a callback called when the selected item changes\nProvide a callback called when the selected items change",
          "defaultValue": ""
        },
        {
          "name": "open",
          "type": "boolean",
          "required": true,
          "description": "Determines whether the overlay portion of the component should be shown or not",
          "defaultValue": ""
        },
        {
          "name": "selected",
          "type": "undefined | Merge<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"ref\">, ItemProps> | Partial<ItemProps> & { renderItem: RenderItemFn; } & { key?: Key | undefined; } | ItemInput[]",
          "required": true,
          "description": "Specify the selected items\nSpecify the selected item",
          "defaultValue": ""
        },
        {
          "name": "anchorId",
          "type": "string",
          "required": false,
          "description": "An override to the internal id that will be spread on to the renderAnchor",
          "defaultValue": ""
        },
        {
          "name": "anchorRef",
          "type": "RefObject<HTMLElement>",
          "required": false,
          "description": "An override to the internal renderAnchor ref that will be used to position the overlay.\nWhen renderAnchor is null this can be used to make an anchor that is detached from ActionMenu.\nAn override to the internal ref that will be spread on to the renderAnchor",
          "defaultValue": ""
        },
        {
          "name": "filterValue",
          "type": "string",
          "required": false,
          "description": "The current value of the search input",
          "defaultValue": ""
        },
        {
          "name": "footer",
          "type": "string | ReactElement<any, string | JSXElementConstructor<any>>",
          "required": false,
          "description": "Footer rendered at the end of the panel",
          "defaultValue": ""
        },
        {
          "name": "groupMetadata",
          "type": "((Omit<GroupProps, \"items\"> | Omit<Partial<GroupProps> & { renderItem?: RenderItemFn | undefined; renderGroup?: (({ header, items, ...props }: GroupProps) => Element) | undefined; }, \"items\">) & { ...; })[]",
          "required": false,
          "description": "A collection of `Group` props (except `items`), plus a unique group identifier\nand `Group`-level custom `Item` or `Group` renderers.",
          "defaultValue": ""
        },
        {
          "name": "id",
          "type": "string",
          "required": false,
          "description": "id to attach to the base DOM node of the list",
          "defaultValue": ""
        },
        {
          "name": "inputLabel",
          "type": "string",
          "required": false,
          "description": "The aria-label for the filter input",
          "defaultValue": "Filter items"
        },
        {
          "name": "inputRef",
          "type": "RefObject<HTMLInputElement>",
          "required": false,
          "description": "Ref to pass through to the search input",
          "defaultValue": ""
        },
        {
          "name": "loading",
          "type": "boolean",
          "required": false,
          "description": "Whether the items are loading",
          "defaultValue": ""
        },
        {
          "name": "overlayProps",
          "type": "Partial<Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"ref\"> & { ...; }, \"style\" | ... 8 more ... | keyof BaseOverlayProps> & Omit<...> & BaseOverlayProps & { ...; }>",
          "required": false,
          "description": "See [Overlay props](/react/Overlay#props)",
          "defaultValue": ""
        },
        {
          "name": "placeholder",
          "type": "string",
          "required": false,
          "description": "Text used in anchor when there are no selected items",
          "defaultValue": ""
        },
        {
          "name": "placeholderText",
          "type": "string",
          "required": false,
          "description": "Text used as placeholder for search input",
          "defaultValue": "Filter items"
        },
        {
          "name": "renderAnchor",
          "type": "null | <T extends HTMLAttributes<HTMLElement>>(props: T) => Element",
          "required": false,
          "description": "A custom function component used to render the anchor element.\nWhen renderAnchor is null, an anchorRef is required.\nA custom function component used to render the anchor element.\nWill receive the selected text as `children` prop when an item is activated.",
          "defaultValue": "props => {\n    const {children, ...rest} = props\n    return (\n      <Button trailingAction={TriangleDownIcon} {...rest}>\n        {children}\n      </Button>\n    )\n  }"
        },
        {
          "name": "renderGroup",
          "type": "({ header, items, ...props }: GroupProps) => Element",
          "required": false,
          "description": "A `List`-level custom `Group` renderer. Every `Group` within this `List`\nwithout a `Group`-level custom `Item` renderer will be rendered using\nthis function component.",
          "defaultValue": ""
        },
        {
          "name": "renderItem",
          "type": "RenderItemFn",
          "required": false,
          "description": "A `List`-level custom `Item` renderer. Every `Item` within this `List`\nwithout a `Group`-level or `Item`-level custom `Item` renderer will be\nrendered using this function component.",
          "defaultValue": ""
        },
        {
          "name": "role",
          "type": "\"article\" | \"button\" | \"dialog\" | \"figure\" | \"form\" | \"img\" | \"link\" | \"main\" | \"menu\" | \"menuitem\" | \"option\" | \"search\" | \"table\" | \"switch\" | \"list\" | \"alert\" | \"alertdialog\" | \"application\" | \"banner\" | \"cell\" | \"checkbox\" | \"columnheader\" | \"combobox\" | \"complementary\" | \"contentinfo\" | \"definition\" | \"directory\" | \"document\" | \"feed\" | \"grid\" | \"gridcell\" | \"group\" | \"heading\" | \"listbox\" | \"listitem\" | \"log\" | \"marquee\" | \"math\" | \"menubar\" | \"menuitemcheckbox\" | \"menuitemradio\" | \"navigation\" | \"none\" | \"note\" | \"presentation\" | \"progressbar\" | \"radio\" | \"radiogroup\" | \"region\" | \"row\" | \"rowgroup\" | \"rowheader\" | \"scrollbar\" | \"searchbox\" | \"separator\" | \"slider\" | \"spinbutton\" | \"status\" | \"tab\" | \"tablist\" | \"tabpanel\" | \"term\" | \"textbox\" | \"timer\" | \"toolbar\" | \"tooltip\" | \"tree\" | \"treegrid\" | \"treeitem\"",
          "required": false,
          "description": "The ARIA role describing the function of `List` component. `listbox` is a common value.",
          "defaultValue": ""
        },
        {
          "name": "showItemDividers",
          "type": "boolean",
          "required": false,
          "description": "Whether to display a divider above each `Item` in this `List` when it does not follow a `Header` or `Divider`.",
          "defaultValue": ""
        },
        {
          "name": "subtitle",
          "type": "string | ReactElement<any, string | JSXElementConstructor<any>>",
          "required": false,
          "description": "When provided, a subtitle is displayed below the title",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        },
        {
          "name": "textInputProps",
          "type": "Partial<Omit<TextInputProps, \"onChange\">>",
          "required": false,
          "description": "Props to pass through to the search input",
          "defaultValue": ""
        },
        {
          "name": "title",
          "type": "string | ReactElement<any, string | JSXElementConstructor<any>>",
          "required": false,
          "description": "A descriptive title for the panel",
          "defaultValue": "isMultiSelectVariant(selected) ? 'Select items' : 'Select an item'"
        },
        {
          "name": "variant",
          "type": "\"inset\" | \"full\"",
          "required": false,
          "description": "Style variations. Usage is discretionary.\n\n- `\"inset\"` - `List` children are offset (vertically and horizontally) from `List`’s edges\n- `\"full\"` - `List` children are flush (vertically and horizontally) with `List` edges",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "spinner": {
      "id": "spinner",
      "name": "Spinner",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-spinner--default",
          "code": "() => <Spinner />"
        },
        {
          "id": "components-spinner-features--small",
          "code": "() => <Spinner size=\"small\" />"
        },
        {
          "id": "components-spinner-features--large",
          "code": "() => <Spinner size=\"large\" />"
        },
        {
          "id": "components-spinner-features--suppress-screen-reader-text",
          "code": "() => (\n  <Box\n    sx={{\n      alignItems: 'center',\n      display: 'flex',\n      gap: '0.25rem',\n    }}\n  >\n    <Spinner size=\"small\" srText={null} />\n    <AriaStatus>Loading...</AriaStatus>\n  </Box>\n)"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "aria-label",
          "type": "string",
          "required": false,
          "description": "@deprecated Use `srText` instead.",
          "defaultValue": ""
        },
        {
          "name": "size",
          "type": "\"small\" | \"large\" | \"medium\"",
          "required": false,
          "description": "Sets the width and height of the spinner.",
          "defaultValue": ""
        },
        {
          "name": "srText",
          "type": "null | string",
          "required": false,
          "description": "Sets the text conveyed by assistive technologies such as screen readers. Set to `null` if the loading state is displayed in a text node somewhere else on the page.",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "split_page_layout": {
      "id": "split_page_layout",
      "name": "SplitPageLayout",
      "status": "alpha",
      "a11yReviewed": true,
      "stories": [
        {
          "id": "components-splitpagelayout--default",
          "code": "() => (\n  <SplitPageLayout>\n    <SplitPageLayout.Header>\n      <Placeholder label=\"Header\" height={100} />\n    </SplitPageLayout.Header>\n    <SplitPageLayout.Pane position=\"start\">\n      <Placeholder label=\"Pane\" height={400} />\n    </SplitPageLayout.Pane>\n    <SplitPageLayout.Content>\n      <Placeholder label=\"Content\" height={600} />\n    </SplitPageLayout.Content>\n    <SplitPageLayout.Footer>\n      <Placeholder label=\"Footer\" height={100} />\n    </SplitPageLayout.Footer>\n  </SplitPageLayout>\n)"
        },
        {
          "id": "components-splitpagelayout-features--settings-page",
          "code": "() => (\n  <SplitPageLayout>\n    <SplitPageLayout.Pane position=\"start\">\n      <NavList aria-label=\"Main navigation\">\n        <NavList.Item href=\"#\">Profile</NavList.Item>\n        <NavList.Item href=\"#\" aria-current=\"page\">\n          Account\n        </NavList.Item>\n        <NavList.Item href=\"#\">Emails</NavList.Item>\n        <NavList.Item href=\"#\">Notifications</NavList.Item>\n      </NavList>\n    </SplitPageLayout.Pane>\n    <SplitPageLayout.Content>\n      <Heading\n        as=\"h2\"\n        sx={{\n          fontSize: 4,\n          fontWeight: 'normal',\n          color: 'danger.fg',\n          mb: 2,\n        }}\n      >\n        Danger zone\n      </Heading>\n      <Box\n        sx={{\n          border: '1px solid',\n          borderColor: 'danger.emphasis',\n          borderRadius: 2,\n          p: 3,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          gap: 3,\n        }}\n      >\n        <Box\n          sx={{\n            display: 'grid',\n            gap: 1,\n          }}\n        >\n          <Text\n            sx={{\n              fontSize: 1,\n              fontWeight: 'bold',\n              color: 'danger.fg',\n            }}\n          >\n            Delete account\n          </Text>\n          <Text\n            sx={{\n              fontSize: 1,\n              color: 'fg.muted',\n            }}\n          >\n            Are you sure you don&apos;t want to just downgrade your account to a\n            free account? We won&apos;t charge your credit card anymore.\n          </Text>\n        </Box>\n        <Button variant=\"danger\">Delete account</Button>\n      </Box>\n    </SplitPageLayout.Content>\n  </SplitPageLayout>\n)"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        }
      ],
      "subcomponents": [
        {
          "name": "SplitPageLayout.Content",
          "props": [
            {
              "name": "aria-label",
              "type": "string",
              "required": false,
              "description": "A unique label for the rendered main landmark",
              "defaultValue": ""
            },
            {
              "name": "aria-labelledby",
              "type": "string",
              "required": false,
              "description": "An id to an element which uniquely labels the rendered main landmark",
              "defaultValue": ""
            },
            {
              "name": "as",
              "type": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
              "required": false,
              "description": "Provide an optional element type for the outermost element rendered by the component.",
              "defaultValue": "'main'"
            },
            {
              "name": "hidden",
              "type": "boolean | ResponsiveValue<boolean>",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "padding",
              "type": "\"normal\" | \"none\" | \"condensed\"",
              "required": false,
              "description": "The amount of padding inside the content.",
              "defaultValue": "normal"
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            },
            {
              "name": "width",
              "type": "\"large\" | \"medium\" | \"full\" | \"xlarge\"",
              "required": false,
              "description": "The maximum width of the content region.",
              "defaultValue": "large"
            }
          ]
        },
        {
          "name": "SplitPageLayout.Footer",
          "props": [
            {
              "name": "aria-label",
              "type": "string",
              "required": false,
              "description": "A unique label for the rendered contentinfo landmark",
              "defaultValue": ""
            },
            {
              "name": "aria-labelledby",
              "type": "string",
              "required": false,
              "description": "An id to an element which uniquely labels the rendered contentinfo landmark",
              "defaultValue": ""
            },
            {
              "name": "divider",
              "type": "\"line\" | \"none\" | ResponsiveValue<\"line\" | \"none\", \"line\" | \"none\" | \"filled\">",
              "required": false,
              "description": "The divider style between the footer and the content region. Can be changed for different viewport widths.",
              "defaultValue": "line"
            },
            {
              "name": "dividerWhenNarrow",
              "type": "\"line\" | \"inherit\" | \"none\" | \"filled\"",
              "required": false,
              "description": "@deprecated Use the `divider` prop with a responsive value instead.\n\nBefore:\n```\ndivider=\"line\"\ndividerWhenNarrow=\"filled\"\n```\n\nAfter:\n```\ndivider={{regular: 'line', narrow: 'filled'}}\n```",
              "defaultValue": ""
            },
            {
              "name": "hidden",
              "type": "boolean | ResponsiveValue<boolean>",
              "required": false,
              "description": "Whether the footer is hidden.  Can be changed for different viewport widths.",
              "defaultValue": ""
            },
            {
              "name": "padding",
              "type": "\"normal\" | \"none\" | \"condensed\"",
              "required": false,
              "description": "The amount of padding inside the footer.",
              "defaultValue": "normal"
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "SplitPageLayout.Header",
          "props": [
            {
              "name": "aria-label",
              "type": "string",
              "required": false,
              "description": "A unique label for the rendered banner landmark",
              "defaultValue": ""
            },
            {
              "name": "aria-labelledby",
              "type": "string",
              "required": false,
              "description": "An id to an element which uniquely labels the rendered banner landmark",
              "defaultValue": ""
            },
            {
              "name": "divider",
              "type": "\"line\" | \"none\" | ResponsiveValue<\"line\" | \"none\", \"line\" | \"none\" | \"filled\">",
              "required": false,
              "description": "",
              "defaultValue": "line"
            },
            {
              "name": "dividerWhenNarrow",
              "type": "\"line\" | \"inherit\" | \"none\" | \"filled\"",
              "required": false,
              "description": "@deprecated Use the `divider` prop with a responsive value instead.\n\nBefore:\n```\ndivider=\"line\"\ndividerWhenNarrow=\"filled\"\n```\n\nAfter:\n```\ndivider={{regular: 'line', narrow: 'filled'}}\n```",
              "defaultValue": ""
            },
            {
              "name": "hidden",
              "type": "boolean | ResponsiveValue<boolean>",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "padding",
              "type": "\"normal\" | \"none\" | \"condensed\"",
              "required": false,
              "description": "",
              "defaultValue": "normal"
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "SplitPageLayout.Pane",
          "props": [
            {
              "name": "aria-label",
              "type": "string",
              "required": false,
              "description": "Label for the pane. Required if the pane overflows and doesn't have aria-labelledby.",
              "defaultValue": ""
            },
            {
              "name": "aria-labelledby",
              "type": "string",
              "required": false,
              "description": "Id of an element that acts as a label for the pane. Required if the pane overflows and doesn't have aria-label.",
              "defaultValue": ""
            },
            {
              "name": "divider",
              "type": "\"line\" | \"none\" | ResponsiveValue<\"line\" | \"none\", \"line\" | \"none\" | \"filled\">",
              "required": false,
              "description": "The divider style between the pane and the content region.",
              "defaultValue": "line"
            },
            {
              "name": "dividerWhenNarrow",
              "type": "\"line\" | \"inherit\" | \"none\" | \"filled\"",
              "required": false,
              "description": "@deprecated Use the `divider` prop with a responsive value instead.\n\nBefore:\n```\ndivider=\"line\"\ndividerWhenNarrow=\"filled\"\n```\n\nAfter:\n```\ndivider={{regular: 'line', narrow: 'filled'}}\n```",
              "defaultValue": ""
            },
            {
              "name": "hidden",
              "type": "boolean | ResponsiveValue<boolean>",
              "required": false,
              "description": "Whether the pane is hidden. Can be changed for different viewport widths.",
              "defaultValue": ""
            },
            {
              "name": "id",
              "type": "string",
              "required": false,
              "description": "May be used to override the default ID passed to the pane element.",
              "defaultValue": ""
            },
            {
              "name": "minWidth",
              "type": "number",
              "required": false,
              "description": "The minimum width of the pane.",
              "defaultValue": "256"
            },
            {
              "name": "offsetHeader",
              "type": "string | number",
              "required": false,
              "description": "Use offsetHeader along with the sticky prop to push the sticky pane down to make room for a sticky header if necessary. Use the type `string` to specify the height with a unit i.e. 5rem; otherwise the type `number` will be taken as px.",
              "defaultValue": "0"
            },
            {
              "name": "padding",
              "type": "\"normal\" | \"none\" | \"condensed\"",
              "required": false,
              "description": "The amount of padding inside the pane.",
              "defaultValue": "normal"
            },
            {
              "name": "position",
              "type": "\"end\" | \"start\" | ResponsiveValue<\"end\" | \"start\">",
              "required": false,
              "description": "Which side of the page the pane should be on. Can be changed for different viewport widths.",
              "defaultValue": "start"
            },
            {
              "name": "positionWhenNarrow",
              "type": "\"end\" | \"start\" | \"inherit\"",
              "required": false,
              "description": "@deprecated Use the `position` prop with a responsive value instead.\n\nBefore:\n```\nposition=\"start\"\npositionWhenNarrow=\"end\"\n```\n\nAfter:\n```\nposition={{regular: 'start', narrow: 'end'}}\n```",
              "defaultValue": ""
            },
            {
              "name": "resizable",
              "type": "boolean",
              "required": false,
              "description": "When true, the pane may be resized by the user.",
              "defaultValue": ""
            },
            {
              "name": "sticky",
              "type": "boolean",
              "required": false,
              "description": "Whether the pane should stick to the top of the screen while the content scrolls.",
              "defaultValue": true
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            },
            {
              "name": "width",
              "type": "\"small\" | \"large\" | \"medium\" | CustomWidthOptions",
              "required": false,
              "description": "The width of the pane. If using custom widths, provide an object with keys 'min', 'max' and 'default'.",
              "defaultValue": "large"
            },
            {
              "name": "widthStorageKey",
              "type": "string",
              "required": false,
              "description": "Provide a key used by localStorage to persist the size of the pane on the client.",
              "defaultValue": "paneWidth"
            }
          ]
        }
      ]
    },
    "stack": {
      "id": "stack",
      "name": "Stack",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "align",
          "type": "\"center\" | \"end\" | \"start\" | \"baseline\" | \"stretch\" | ResponsiveValue<AlignScale>",
          "required": false,
          "description": "Specify the alignment between items in the cross-axis of the direction",
          "defaultValue": "stretch"
        },
        {
          "name": "as",
          "type": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
          "required": false,
          "description": "Customize the element type of the rendered container",
          "defaultValue": ""
        },
        {
          "name": "direction",
          "type": "\"vertical\" | \"horizontal\" | ResponsiveValue<DirectionScale>",
          "required": false,
          "description": "Specify the direction for the stack container",
          "defaultValue": "vertical"
        },
        {
          "name": "gap",
          "type": "\"normal\" | \"none\" | \"condensed\" | \"spacious\" | ResponsiveValue<GapScale>",
          "required": false,
          "description": "Specify the gap between children elements in the stack",
          "defaultValue": ""
        },
        {
          "name": "justify",
          "type": "\"center\" | \"end\" | \"start\" | \"space-between\" | \"space-evenly\" | ResponsiveValue<JustifyScale>",
          "required": false,
          "description": "Specify how items will be distributed in the stacking direction",
          "defaultValue": "start"
        },
        {
          "name": "padding",
          "type": "\"normal\" | \"none\" | \"condensed\" | \"spacious\" | ResponsiveValue<PaddingScale>",
          "required": false,
          "description": "Specify the padding of the stack container",
          "defaultValue": "none"
        },
        {
          "name": "wrap",
          "type": "\"wrap\" | \"nowrap\" | ResponsiveValue<WrapScale>",
          "required": false,
          "description": "Specify whether items are forced onto one line or can wrap onto multiple lines",
          "defaultValue": "nowrap"
        }
      ],
      "subcomponents": [
        {
          "name": "Stack.Item",
          "props": [
            {
              "name": "as",
              "type": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
              "required": false,
              "description": "Customize the element type of the rendered container",
              "defaultValue": ""
            },
            {
              "name": "grow",
              "type": "boolean | ResponsiveValue<boolean>",
              "required": false,
              "description": "Allow item to keep size or expand to fill the available space",
              "defaultValue": false
            }
          ]
        }
      ]
    },
    "state_label": {
      "id": "state_label",
      "name": "StateLabel",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-statelabel--default",
          "code": "() => <StateLabel status=\"issueOpened\">Open</StateLabel>"
        },
        {
          "id": "components-statelabel-features--issue-opened",
          "code": "() => <StateLabel status=\"issueOpened\">Open</StateLabel>"
        },
        {
          "id": "components-statelabel-features--issue-closed",
          "code": "() => <StateLabel status=\"issueClosed\">Closed</StateLabel>"
        },
        {
          "id": "components-statelabel-features--issue-closed-not-planned",
          "code": "() => <StateLabel status=\"issueClosedNotPlanned\">Closed</StateLabel>"
        },
        {
          "id": "components-statelabel-features--issue-draft",
          "code": "() => <StateLabel status=\"issueDraft\">Draft</StateLabel>"
        },
        {
          "id": "components-statelabel-features--pull-opened",
          "code": "() => <StateLabel status=\"pullOpened\">Open</StateLabel>"
        },
        {
          "id": "components-statelabel-features--pull-closed",
          "code": "() => <StateLabel status=\"pullClosed\">Closed</StateLabel>"
        },
        {
          "id": "components-statelabel-features--pull-merged",
          "code": "() => <StateLabel status=\"pullMerged\">Merged</StateLabel>"
        },
        {
          "id": "components-statelabel-features--queued",
          "code": "() => <StateLabel status=\"pullQueued\">Queued</StateLabel>"
        },
        {
          "id": "components-statelabel-features--draft",
          "code": "() => <StateLabel status=\"draft\">Draft</StateLabel>"
        },
        {
          "id": "components-statelabel-features--unavailable",
          "code": "() => <StateLabel status=\"unavailable\">Unavailable</StateLabel>"
        },
        {
          "id": "components-statelabel-features--small",
          "code": "() => (\n  <StateLabel status=\"issueOpened\" variant=\"small\">\n    Open\n  </StateLabel>\n)"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "status",
          "type": "\"unavailable\" | \"issueClosed\" | \"issueClosedNotPlanned\" | \"pullClosed\" | \"pullMerged\" | \"pullQueued\" | \"issueOpened\" | \"pullOpened\" | \"draft\" | \"issueDraft\"",
          "required": true,
          "description": "Kind of status the label represents",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        },
        {
          "name": "variant",
          "type": "\"small\" | \"normal\"",
          "required": false,
          "description": "Size variant",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "sub_nav": {
      "id": "sub_nav",
      "name": "SubNav",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-subnav--default",
          "code": "() => (\n  <SubNav aria-label=\"Main\">\n    <SubNav.Links>\n      <SubNav.Link href=\"#home\" selected>\n        Home\n      </SubNav.Link>\n      <SubNav.Link href=\"#documentation\">Documentation</SubNav.Link>\n      <SubNav.Link href=\"#support\">Support</SubNav.Link>\n    </SubNav.Links>\n  </SubNav>\n)"
        },
        {
          "id": "components-subnav-features--selected",
          "code": "() => (\n  <SubNav aria-label=\"Main\">\n    <SubNav.Links>\n      <SubNav.Link href=\"#home\" selected>\n        Home\n      </SubNav.Link>\n      <SubNav.Link href=\"#documentation\">Documentation</SubNav.Link>\n      <SubNav.Link href=\"#support\">Support</SubNav.Link>\n    </SubNav.Links>\n  </SubNav>\n)"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "actions",
          "type": "ReactNode",
          "required": false,
          "description": "Place another element, such as a button, to the opposite side of the navigation items.",
          "defaultValue": ""
        },
        {
          "name": "align",
          "type": "\"right\"",
          "required": false,
          "description": "Use `right` to have navigation items aligned right.",
          "defaultValue": ""
        },
        {
          "name": "full",
          "type": "boolean",
          "required": false,
          "description": "Used to make navigation fill the width of the container.",
          "defaultValue": ""
        },
        {
          "name": "label",
          "type": "string",
          "required": false,
          "description": "Used to set the `aria-label` on the top level `<nav>` element.",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        }
      ],
      "subcomponents": [
        {
          "name": "SubNav.Link",
          "props": [
            {
              "name": "selected",
              "type": "boolean",
              "required": false,
              "description": "Whether this item represents the current page",
              "defaultValue": ""
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            },
            {
              "name": "to",
              "type": "string | Partial<Path>",
              "required": false,
              "description": "Used when the item is rendered using a component like React Router's `Link`. The path to navigate to.",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "SubNav.Links",
          "props": [
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    "tab_nav": {
      "id": "tab_nav",
      "name": "TabNav",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-tabnav--default",
          "code": "() => (\n  <TabNav aria-label=\"Main\">\n    <TabNav.Link href=\"#\" selected>\n      Home\n    </TabNav.Link>\n    <TabNav.Link href=\"#\">Documentation</TabNav.Link>\n    <TabNav.Link href=\"#\">Support</TabNav.Link>\n  </TabNav>\n)"
        },
        {
          "id": "components-tabnav-features--selected",
          "code": "() => (\n  <TabNav aria-label=\"Main\">\n    <TabNav.Link href=\"#\">Home</TabNav.Link>\n    <TabNav.Link href=\"#\" selected>\n      Documentation\n    </TabNav.Link>\n    <TabNav.Link href=\"#\">Support</TabNav.Link>\n  </TabNav>\n)"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        }
      ],
      "subcomponents": [
        {
          "name": "TabNav.Link",
          "props": [
            {
              "name": "as",
              "type": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<unknown, any> | FunctionComponent<unknown>",
              "required": true,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "href",
              "type": "string",
              "required": false,
              "description": "Used to populate the `href` attribute when using an `<a>` tag",
              "defaultValue": ""
            },
            {
              "name": "selected",
              "type": "boolean",
              "required": false,
              "description": "Whether this item represents the current page",
              "defaultValue": ""
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            },
            {
              "name": "to",
              "type": "string | Partial<Path>",
              "required": false,
              "description": "Used when the item is rendered using a component like React Router's `Link`. The path to navigate to.",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    "text": {
      "id": "text",
      "name": "Text",
      "status": "alpha",
      "a11yReviewed": true,
      "stories": [
        {
          "id": "components-text--default",
          "code": "() => <Text>Default Text</Text>"
        },
        {
          "id": "components-text-features--polymorphism",
          "code": "() => (\n  <Box\n    sx={{\n      display: 'flex',\n      flexDirection: 'column',\n    }}\n  >\n    <Text as=\"em\">Emphasized text</Text>\n    <Text as=\"i\">Italicized text</Text>\n    <Text as=\"strong\">Strong text</Text>\n    <Text as=\"small\">Small text</Text>\n    <Text as=\"u\">Text with underline</Text>\n  </Box>\n)"
        },
        {
          "id": "components-text-features--styled-text",
          "code": "() => (\n  <Text\n    as=\"p\"\n    sx={{\n      color: 'fg.onEmphasis',\n      bg: 'neutral.emphasis',\n      p: 2,\n    }}\n    size=\"small\"\n  >\n    Stylized text\n  </Text>\n)"
        },
        {
          "id": "components-text-features--size-small",
          "code": "() => (\n  <Text as=\"span\" size=\"small\">\n    Stylized text\n  </Text>\n)"
        },
        {
          "id": "components-text-features--size-medium",
          "code": "() => (\n  <Text as=\"span\" size=\"medium\">\n    Stylized text\n  </Text>\n)"
        },
        {
          "id": "components-text-features--size-large",
          "code": "() => (\n  <Text as=\"span\" size=\"large\">\n    Stylized text\n  </Text>\n)"
        },
        {
          "id": "components-text-features--light-weight",
          "code": "() => (\n  <Text as=\"span\" weight=\"light\">\n    Stylized text\n  </Text>\n)"
        },
        {
          "id": "components-text-features--normal-weight",
          "code": "() => (\n  <Text as=\"span\" weight=\"normal\">\n    Stylized text\n  </Text>\n)"
        },
        {
          "id": "components-text-features--medium-weight",
          "code": "() => (\n  <Text as=\"span\" weight=\"medium\">\n    Stylized text\n  </Text>\n)"
        },
        {
          "id": "components-text-features--semibold-weight",
          "code": "() => (\n  <Text as=\"span\" weight=\"semibold\">\n    Stylized text\n  </Text>\n)"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "size",
          "type": "\"small\" | \"large\" | \"medium\"",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        },
        {
          "name": "weight",
          "type": "\"medium\" | \"normal\" | \"light\" | \"semibold\"",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "whiteSpace",
          "type": "\"pre\" | \"normal\" | \"nowrap\" | \"pre-wrap\" | \"pre-line\"",
          "required": false,
          "description": "",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "text_input": {
      "id": "text_input",
      "name": "TextInput",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-textinput--default",
          "code": "() => (\n  <Box as=\"form\">\n    <FormControl>\n      <FormControl.Label>Default label</FormControl.Label>\n      <TextInput />\n    </FormControl>\n  </Box>\n)"
        },
        {
          "id": "components-textinput-features--disabled",
          "code": "() => (\n  <Box as=\"form\">\n    <FormControl>\n      <FormControl.Label>Default label</FormControl.Label>\n      <TextInput disabled />\n    </FormControl>\n  </Box>\n)"
        },
        {
          "id": "components-textinput-features--with-caption",
          "code": "() => (\n  <Box as=\"form\">\n    <FormControl>\n      <FormControl.Label>Default label</FormControl.Label>\n      <FormControl.Caption>This is a caption</FormControl.Caption>\n      <TextInput />\n    </FormControl>\n  </Box>\n)"
        },
        {
          "id": "components-textinput-features--visually-hidden-label",
          "code": "() => (\n  <Box as=\"form\">\n    <FormControl>\n      <FormControl.Label visuallyHidden>Default label</FormControl.Label>\n      <TextInput />\n    </FormControl>\n  </Box>\n)"
        },
        {
          "id": "components-textinput-features--error",
          "code": "() => (\n  <Box as=\"form\">\n    <FormControl>\n      <FormControl.Label>Default label</FormControl.Label>\n      <TextInput />\n      <FormControl.Validation variant=\"error\">\n        Something went wrong\n      </FormControl.Validation>\n    </FormControl>\n  </Box>\n)"
        },
        {
          "id": "components-textinput-features--success",
          "code": "() => (\n  <Box as=\"form\">\n    <FormControl>\n      <FormControl.Label>Default label</FormControl.Label>\n      <TextInput />\n      <FormControl.Validation variant=\"success\">\n        Something went wrong\n      </FormControl.Validation>\n    </FormControl>\n  </Box>\n)"
        },
        {
          "id": "components-textinput-features--block",
          "code": "() => (\n  <Box as=\"form\">\n    <FormControl>\n      <FormControl.Label>Default label</FormControl.Label>\n      <TextInput block />\n    </FormControl>\n  </Box>\n)"
        },
        {
          "id": "components-textinput-features--small",
          "code": "() => (\n  <Box as=\"form\">\n    <FormControl>\n      <FormControl.Label>Default label</FormControl.Label>\n      <TextInput size=\"small\" />\n    </FormControl>\n  </Box>\n)"
        },
        {
          "id": "components-textinput-features--large",
          "code": "() => (\n  <Box as=\"form\">\n    <FormControl>\n      <FormControl.Label>Default label</FormControl.Label>\n      <TextInput size=\"large\" />\n    </FormControl>\n  </Box>\n)"
        },
        {
          "id": "components-textinput-features--required",
          "code": "() => (\n  <Box as=\"form\">\n    <FormControl required>\n      <FormControl.Label>Default label</FormControl.Label>\n      <TextInput size=\"large\" />\n    </FormControl>\n  </Box>\n)"
        },
        {
          "id": "components-textinput-features--with-leading-visual",
          "code": "() => (\n  <Box as=\"form\">\n    <FormControl>\n      <FormControl.Label>Default label</FormControl.Label>\n      <TextInput leadingVisual={CheckIcon} />\n    </FormControl>\n    <FormControl>\n      <FormControl.Label>Enter monies</FormControl.Label>\n      <TextInput leadingVisual=\"$\" />\n    </FormControl>\n  </Box>\n)"
        },
        {
          "id": "components-textinput-features--with-trailing-icon",
          "code": "() => (\n  <Box>\n    <FormControl>\n      <FormControl.Label>Default label</FormControl.Label>\n      <TextInput trailingVisual={CheckIcon} />\n    </FormControl>\n    <FormControl>\n      <FormControl.Label>Enter monies</FormControl.Label>\n      <TextInput trailingVisual=\"minutes\" placeholder=\"200\" />\n    </FormControl>\n  </Box>\n)"
        },
        {
          "id": "components-textinput-features--with-trailing-action",
          "code": "() => {\n  const [value, setValue] = useState('sample text')\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setValue(event.target.value)\n  }\n  return (\n    <Box as=\"form\">\n      <FormControl>\n        <FormControl.Label>Default label</FormControl.Label>\n        <TextInput\n          value={value}\n          onChange={handleChange}\n          trailingAction={\n            <Stack\n              justify=\"center\"\n              style={{\n                minWidth: '34px',\n              }}\n            >\n              {value.length ? (\n                <TextInput.Action\n                  onClick={() => setValue('')}\n                  icon={XCircleFillIcon}\n                  aria-label=\"Clear input\"\n                />\n              ) : undefined}\n            </Stack>\n          }\n        />\n      </FormControl>\n    </Box>\n  )\n}"
        },
        {
          "id": "components-textinput-features--with-tooltip-direction",
          "code": "() => {\n  const [value, setValue] = useState('sample text')\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setValue(event.target.value)\n  }\n  return (\n    <Box as=\"form\">\n      <FormControl>\n        <FormControl.Label>Default label</FormControl.Label>\n        <TextInput\n          value={value}\n          onChange={handleChange}\n          trailingAction={\n            <Stack\n              justify=\"center\"\n              style={{\n                minWidth: '34px',\n              }}\n            >\n              {value.length ? (\n                <TextInput.Action\n                  onClick={() => setValue('')}\n                  icon={XCircleFillIcon}\n                  aria-label=\"Clear input\"\n                  tooltipDirection=\"nw\"\n                />\n              ) : undefined}\n            </Stack>\n          }\n        />\n      </FormControl>\n    </Box>\n  )\n}"
        },
        {
          "id": "components-textinput-features--with-loading-indicator",
          "code": "(args: FormControlArgs<TextInputProps>) => {\n  return (\n    <Box as=\"form\">\n      <h3>No visual</h3>\n\n      <Box mb={2}>\n        <FormControl>\n          <FormControl.Label>Default label</FormControl.Label>\n          <TextInput value=\"auto\" {...args} />\n        </FormControl>\n      </Box>\n      <Box mb={2}>\n        <FormControl>\n          <FormControl.Label>Default label</FormControl.Label>\n          <TextInput value=\"leading\" {...args} loaderPosition=\"leading\" />\n        </FormControl>\n      </Box>\n      <Box mb={5}>\n        <FormControl>\n          <FormControl.Label>Default label</FormControl.Label>\n          <FormControl.Label>Default label</FormControl.Label>\n          <TextInput value=\"trailing\" {...args} loaderPosition=\"trailing\" />\n        </FormControl>\n      </Box>\n\n      <h3>Leading visual</h3>\n\n      <Box mb={2}>\n        <FormControl>\n          <FormControl.Label>Default label</FormControl.Label>\n          <TextInput leadingVisual={CalendarIcon} {...args} value=\"auto\" />\n        </FormControl>\n      </Box>\n      <Box mb={2}>\n        <FormControl>\n          <FormControl.Label>Default label</FormControl.Label>\n          <TextInput\n            leadingVisual={CalendarIcon}\n            {...args}\n            loaderPosition=\"leading\"\n            value=\"leading\"\n          />\n        </FormControl>\n      </Box>\n      <Box mb={5}>\n        <FormControl>\n          <FormControl.Label>Default label</FormControl.Label>\n          <TextInput\n            leadingVisual={CalendarIcon}\n            {...args}\n            loaderPosition=\"trailing\"\n            value=\"trailing\"\n          />\n        </FormControl>\n      </Box>\n\n      <h3>Trailing visual</h3>\n      <FormControl>\n        <Box mb={2}>\n          <FormControl>\n            <FormControl.Label>Default label</FormControl.Label>\n            <TextInput trailingVisual={CalendarIcon} {...args} value=\"auto\" />\n          </FormControl>\n        </Box>\n        <Box mb={2}>\n          <FormControl>\n            <FormControl.Label>Default label</FormControl.Label>\n            <TextInput\n              trailingVisual={CalendarIcon}\n              {...args}\n              loaderPosition=\"leading\"\n              value=\"leading\"\n            />\n          </FormControl>\n        </Box>\n        <Box mb={5}>\n          <FormControl>\n            <FormControl.Label>Default label</FormControl.Label>\n            <TextInput\n              trailingVisual={CalendarIcon}\n              {...args}\n              loaderPosition=\"trailing\"\n              value=\"trailing\"\n            />\n          </FormControl>\n        </Box>\n      </FormControl>\n\n      <h3>Both visuals</h3>\n\n      <Box mb={2}>\n        <FormControl>\n          <FormControl.Label>Default label</FormControl.Label>\n          <TextInput\n            size=\"small\"\n            leadingVisual={CalendarIcon}\n            trailingVisual={CalendarIcon}\n            {...args}\n            value=\"auto\"\n          />\n        </FormControl>\n      </Box>\n      <Box mb={2}>\n        <FormControl>\n          <FormControl.Label>Default label</FormControl.Label>\n          <TextInput\n            leadingVisual={CalendarIcon}\n            trailingVisual={CalendarIcon}\n            {...args}\n            loaderPosition=\"leading\"\n            value=\"leading\"\n          />\n        </FormControl>\n      </Box>\n      <Box mb={2}>\n        <FormControl>\n          <FormControl.Label>Default label</FormControl.Label>\n          <TextInput\n            size=\"large\"\n            leadingVisual={CalendarIcon}\n            trailingVisual={CalendarIcon}\n            {...args}\n            loaderPosition=\"trailing\"\n            value=\"trailing\"\n          />\n        </FormControl>\n      </Box>\n    </Box>\n  )\n}"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "as",
          "type": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<unknown, any> | FunctionComponent<unknown>",
          "required": true,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "block",
          "type": "boolean",
          "required": false,
          "description": "Whether the input takes up the full width of its parent",
          "defaultValue": ""
        },
        {
          "name": "contrast",
          "type": "boolean",
          "required": false,
          "description": "Whether the background color of the input has contrast against the default background color.",
          "defaultValue": ""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "required": false,
          "description": "Whether the input is styled to look disabled.",
          "defaultValue": ""
        },
        {
          "name": "icon",
          "type": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
          "required": false,
          "description": "@deprecated Use `leadingVisual` or `trailingVisual` prop instead",
          "defaultValue": ""
        },
        {
          "name": "leadingVisual",
          "type": "null | string | number | false | true | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | ComponentClass<any, any> | FunctionComponent<any>",
          "required": false,
          "description": "A visual that renders inside the input before the typing area",
          "defaultValue": ""
        },
        {
          "name": "loaderPosition",
          "type": "\"auto\" | \"leading\" | \"trailing\"",
          "required": false,
          "description": "Which position to render the loading indicator\n'auto' (default): at the end of the input, unless a `leadingVisual` is passed. Then, it will render at the beginning\n'leading': at the beginning of the input\n'trailing': at the end of the input",
          "defaultValue": ""
        },
        {
          "name": "loading",
          "type": "boolean",
          "required": false,
          "description": "Whether the to show a loading indicator in the input",
          "defaultValue": ""
        },
        {
          "name": "monospace",
          "type": "boolean",
          "required": false,
          "description": "Whether the text rendered in the input is in a monospace font.",
          "defaultValue": ""
        },
        {
          "name": "size",
          "type": "\"small\" | \"large\" | \"medium\"",
          "required": false,
          "description": "The size of the input.",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        },
        {
          "name": "trailingAction",
          "type": "ReactElement<HTMLProps<HTMLButtonElement>, string | JSXElementConstructor<any>>",
          "required": false,
          "description": "A visual that renders inside the input after the typing area",
          "defaultValue": ""
        },
        {
          "name": "trailingVisual",
          "type": "null | string | number | false | true | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | ComponentClass<any, any> | FunctionComponent<any>",
          "required": false,
          "description": "A visual that renders inside the input after the typing area",
          "defaultValue": ""
        },
        {
          "name": "validationStatus",
          "type": "\"success\" | \"error\"",
          "required": false,
          "description": "The result of validation on the input.",
          "defaultValue": ""
        },
        {
          "name": "variant",
          "type": "\"small\" | \"large\" | \"medium\"",
          "required": false,
          "description": "@deprecated Use `size` prop instead",
          "defaultValue": ""
        }
      ],
      "subcomponents": [
        {
          "name": "TextInput.Action",
          "props": [
            {
              "name": "aria-label",
              "type": "string",
              "required": false,
              "description": "Text that appears in a tooltip. If an icon is passed, this is also used as the label used by assistive technologies.",
              "defaultValue": ""
            },
            {
              "name": "children",
              "type": "ReactNode",
              "required": false,
              "description": "@deprecated Text input action buttons should only use icon buttons",
              "defaultValue": ""
            },
            {
              "name": "icon",
              "type": "FunctionComponent<PropsWithChildren<IconProps>>",
              "required": false,
              "description": "The icon to render inside the button",
              "defaultValue": ""
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            },
            {
              "name": "tooltipDirection",
              "type": "\"s\" | \"nw\" | \"n\" | \"ne\" | \"e\" | \"se\" | \"sw\" | \"w\"",
              "required": false,
              "description": "Position of tooltip. If no position is passed or defaults to \"n\"",
              "defaultValue": ""
            },
            {
              "name": "variant",
              "type": "\"link\" | \"default\" | \"danger\" | \"primary\" | \"invisible\"",
              "required": false,
              "description": "@deprecated Text input action buttons should only use the 'invisible' button variant\nDetermine's the styles on a button one of 'default' | 'primary' | 'invisible' | 'danger'",
              "defaultValue": "invisible"
            }
          ]
        }
      ]
    },
    "text_input_with_tokens": {
      "id": "text_input_with_tokens",
      "name": "TextInputWithTokens",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-textinputwithtokens--default",
          "code": "() => {\n  const [tokens, setTokens] = useState([...mockTokens].slice(0, 3))\n  const onTokenRemove: (tokenId: string | number) => void = (tokenId) => {\n    setTokens(tokens.filter((token) => token.id !== tokenId))\n  }\n  return (\n    <FormControl>\n      <FormControl.Label>Default label</FormControl.Label>\n      <TextInputWithTokens tokens={tokens} onTokenRemove={onTokenRemove} />\n    </FormControl>\n  )\n}"
        },
        {
          "id": "components-textinputwithtokens-features--with-leading-visual",
          "code": "() => {\n  const [tokens, setTokens] = useState([...mockTokens].slice(0, 3))\n  const onTokenRemove: (tokenId: string | number) => void = (tokenId) => {\n    setTokens(tokens.filter((token) => token.id !== tokenId))\n  }\n  return (\n    <FormControl>\n      <FormControl.Label>Default label</FormControl.Label>\n      <TextInputWithTokens\n        leadingVisual={NumberIcon}\n        tokens={tokens}\n        onTokenRemove={onTokenRemove}\n      />\n    </FormControl>\n  )\n}"
        },
        {
          "id": "components-textinputwithtokens-features--with-trailing-visual",
          "code": "() => {\n  const [tokens, setTokens] = useState([...mockTokens].slice(0, 3))\n  const onTokenRemove: (tokenId: string | number) => void = (tokenId) => {\n    setTokens(tokens.filter((token) => token.id !== tokenId))\n  }\n  return (\n    <FormControl>\n      <FormControl.Label>Default label</FormControl.Label>\n      <TextInputWithTokens\n        trailingVisual={CheckIcon}\n        tokens={tokens}\n        onTokenRemove={onTokenRemove}\n      />\n    </FormControl>\n  )\n}"
        },
        {
          "id": "components-textinputwithtokens-features--with-loading-indicator",
          "code": "(args: FormControlArgs<TextInputWithTokensProps>) => {\n  const [tokens, setTokens] = useState([...mockTokens].slice(0, 3))\n  const onTokenRemove: (tokenId: string | number) => void = (tokenId) => {\n    setTokens(tokens.filter((token) => token.id !== tokenId))\n  }\n  return (\n    <Box\n      display=\"grid\"\n      sx={{\n        gap: 3,\n      }}\n      as=\"form\"\n    >\n      <FormControl>\n        <FormControl.Label>No visual</FormControl.Label>\n        <TextInputWithTokens\n          {...args}\n          tokens={tokens}\n          onTokenRemove={onTokenRemove}\n        />\n      </FormControl>\n\n      <FormControl>\n        <FormControl.Label>Leading visual</FormControl.Label>\n        <TextInputWithTokens\n          {...args}\n          tokens={tokens}\n          onTokenRemove={onTokenRemove}\n          leadingVisual={NumberIcon}\n        />\n      </FormControl>\n\n      <FormControl>\n        <FormControl.Label>Both visuals</FormControl.Label>\n        <TextInputWithTokens\n          {...args}\n          tokens={tokens}\n          onTokenRemove={onTokenRemove}\n          leadingVisual={NumberIcon}\n          trailingVisual={CheckIcon}\n        />\n      </FormControl>\n    </Box>\n  )\n}"
        },
        {
          "id": "components-textinputwithtokens-features--using-issue-label-tokens",
          "code": "() => {\n  const [tokens, setTokens] = useState([\n    {\n      text: 'enhancement',\n      id: 1,\n      fillColor: '#a2eeef',\n    },\n    {\n      text: 'bug',\n      id: 2,\n      fillColor: '#d73a4a',\n    },\n    {\n      text: 'good first issue',\n      id: 3,\n      fillColor: '#0cf478',\n    },\n  ])\n  const onTokenRemove: (tokenId: string | number) => void = (tokenId) => {\n    setTokens(tokens.filter((token) => token.id !== tokenId))\n  }\n  return (\n    <Box as=\"form\">\n      <FormControl>\n        <FormControl.Label>Default label</FormControl.Label>\n        <TextInputWithTokens\n          tokenComponent={IssueLabelToken}\n          tokens={tokens}\n          onTokenRemove={onTokenRemove}\n        />\n      </FormControl>\n    </Box>\n  )\n}"
        },
        {
          "id": "components-textinputwithtokens-features--unstyled",
          "code": "() => {\n  const [tokens, setTokens] = useState([...mockTokens].slice(0, 2))\n  const onTokenRemove: (tokenId: string | number) => void = (tokenId) => {\n    setTokens(tokens.filter((token) => token.id !== tokenId))\n  }\n  return (\n    <Box as=\"form\">\n      <FormControl>\n        <FormControl.Label visuallyHidden>Default label</FormControl.Label>\n        <TextInputWithTokens\n          tokens={tokens}\n          onTokenRemove={onTokenRemove}\n          sx={{\n            border: '0',\n            padding: '0',\n            boxShadow: 'none',\n            ':focus-within': {\n              border: '0',\n              boxShadow: 'none',\n            },\n          }}\n        />\n      </FormControl>\n    </Box>\n  )\n}"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "onTokenRemove",
          "type": "(tokenId: string | number) => void",
          "required": true,
          "description": "The function that gets called when a token is removed",
          "defaultValue": ""
        },
        {
          "name": "tokens",
          "type": "any[] | (Omit<(Omit<DetailedHTMLProps<AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>, \"ref\"> & { ...; }) | (Omit<...> & { ...; }) | (Omit<...> & { ...; }), keyof TokenProps> & TokenProps & { ...; })[]",
          "required": true,
          "description": "The array of tokens to render",
          "defaultValue": ""
        },
        {
          "name": "block",
          "type": "boolean",
          "required": false,
          "description": "Whether the input takes up the full width of its parent",
          "defaultValue": ""
        },
        {
          "name": "contrast",
          "type": "boolean",
          "required": false,
          "description": "Whether the background color of the input has contrast against the default background color.",
          "defaultValue": ""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "required": false,
          "description": "Whether the input is styled to look disabled.",
          "defaultValue": ""
        },
        {
          "name": "hideTokenRemoveButtons",
          "type": "boolean",
          "required": false,
          "description": "Whether the remove buttons should be rendered in the tokens",
          "defaultValue": ""
        },
        {
          "name": "icon",
          "type": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
          "required": false,
          "description": "@deprecated Use `leadingVisual` or `trailingVisual` prop instead",
          "defaultValue": ""
        },
        {
          "name": "leadingVisual",
          "type": "null | string | number | false | true | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | ComponentClass<any, any> | FunctionComponent<any>",
          "required": false,
          "description": "A visual that renders inside the input before the typing area",
          "defaultValue": ""
        },
        {
          "name": "loaderPosition",
          "type": "\"auto\" | \"leading\" | \"trailing\"",
          "required": false,
          "description": "Which position to render the loading indicator\n'auto' (default): at the end of the input, unless a `leadingVisual` is passed. Then, it will render at the beginning\n'leading': at the beginning of the input\n'trailing': at the end of the input",
          "defaultValue": ""
        },
        {
          "name": "loading",
          "type": "boolean",
          "required": false,
          "description": "Whether the to show a loading indicator in the input",
          "defaultValue": ""
        },
        {
          "name": "maxHeight",
          "type": "string | number | string & {}",
          "required": false,
          "description": "The maximum height of the component. If the content in the input exceeds this height,\nit will scroll vertically",
          "defaultValue": ""
        },
        {
          "name": "monospace",
          "type": "boolean",
          "required": false,
          "description": "Whether the text rendered in the input is in a monospace font.",
          "defaultValue": ""
        },
        {
          "name": "preventTokenWrapping",
          "type": "boolean",
          "required": false,
          "description": "Whether tokens should render inline horizontally. By default, tokens wrap to new lines.",
          "defaultValue": ""
        },
        {
          "name": "size",
          "type": "\"small\" | \"large\" | \"medium\" | \"xlarge\"",
          "required": false,
          "description": "The size of the tokens and text input",
          "defaultValue": "xlarge"
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        },
        {
          "name": "tokenComponent",
          "type": "ComponentClass<any, any> | FunctionComponent<any> | ForwardRefComponent<\"a\" | \"button\" | \"span\", TokenProps>",
          "required": false,
          "description": "The component used to render each token",
          "defaultValue": "Token"
        },
        {
          "name": "trailingAction",
          "type": "ReactElement<HTMLProps<HTMLButtonElement>, string | JSXElementConstructor<any>>",
          "required": false,
          "description": "A visual that renders inside the input after the typing area",
          "defaultValue": ""
        },
        {
          "name": "trailingVisual",
          "type": "null | string | number | false | true | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | ComponentClass<any, any> | FunctionComponent<any>",
          "required": false,
          "description": "A visual that renders inside the input after the typing area",
          "defaultValue": ""
        },
        {
          "name": "validationStatus",
          "type": "\"success\" | \"error\"",
          "required": false,
          "description": "The result of validation on the input.",
          "defaultValue": ""
        },
        {
          "name": "variant",
          "type": "\"small\" | \"large\" | \"medium\"",
          "required": false,
          "description": "@deprecated Use `size` prop instead",
          "defaultValue": ""
        },
        {
          "name": "visibleTokenCount",
          "type": "number",
          "required": false,
          "description": "The number of tokens to display before truncating",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "textarea": {
      "id": "textarea",
      "name": "Textarea",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-textarea--default",
          "code": "() => (\n  <Box as=\"form\">\n    <FormControl>\n      <FormControl.Label>Default label</FormControl.Label>\n      <Textarea />\n    </FormControl>\n  </Box>\n)"
        },
        {
          "id": "components-textarea-features--disabled",
          "code": "() => (\n  <Box as=\"form\">\n    <FormControl>\n      <FormControl.Label>Default label</FormControl.Label>\n      <Textarea disabled />\n    </FormControl>\n  </Box>\n)"
        },
        {
          "id": "components-textarea-features--with-caption",
          "code": "() => (\n  <Box as=\"form\">\n    <FormControl>\n      <FormControl.Label>Default label</FormControl.Label>\n      <FormControl.Caption>This is a caption</FormControl.Caption>\n      <Textarea />\n    </FormControl>\n  </Box>\n)"
        },
        {
          "id": "components-textarea-features--visually-hidden-label",
          "code": "() => (\n  <Box as=\"form\">\n    <FormControl>\n      <FormControl.Label visuallyHidden>Default label</FormControl.Label>\n      <Textarea />\n    </FormControl>\n  </Box>\n)"
        },
        {
          "id": "components-textarea-features--error",
          "code": "() => (\n  <Box as=\"form\">\n    <FormControl>\n      <FormControl.Label>Default label</FormControl.Label>\n      <Textarea />\n      <FormControl.Validation variant=\"error\">\n        Something went wrong\n      </FormControl.Validation>\n    </FormControl>\n  </Box>\n)"
        },
        {
          "id": "components-textarea-features--success",
          "code": "() => (\n  <Box as=\"form\">\n    <FormControl>\n      <FormControl.Label>Default label</FormControl.Label>\n      <Textarea />\n      <FormControl.Validation variant=\"success\">Success</FormControl.Validation>\n    </FormControl>\n  </Box>\n)"
        },
        {
          "id": "components-textarea-features--block",
          "code": "() => (\n  <Box as=\"form\">\n    <FormControl>\n      <FormControl.Label>Default label</FormControl.Label>\n      <Textarea block />\n    </FormControl>\n  </Box>\n)"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "block",
          "type": "boolean",
          "required": false,
          "description": "Expands with width of the component to fill the parent elements",
          "defaultValue": ""
        },
        {
          "name": "contrast",
          "type": "boolean",
          "required": false,
          "description": "apply a high contrast color to background",
          "defaultValue": ""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "required": false,
          "description": "Apply inactive visual appearance to the Textarea",
          "defaultValue": ""
        },
        {
          "name": "resize",
          "type": "\"vertical\" | \"none\" | \"both\" | \"horizontal\"",
          "required": false,
          "description": "Allows resizing of the textarea",
          "defaultValue": "both"
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        },
        {
          "name": "validationStatus",
          "type": "\"success\" | \"error\"",
          "required": false,
          "description": "Indicates whether the Textarea validation state",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "timeline": {
      "id": "timeline",
      "name": "Timeline",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-timeline--default",
          "code": "() => (\n  <Timeline>\n    <Timeline.Item>\n      <Timeline.Badge>\n        <Octicon icon={GitCommitIcon} aria-label=\"Commit\" />\n      </Timeline.Badge>\n      <Timeline.Body>This is a message</Timeline.Body>\n    </Timeline.Item>\n    <Timeline.Item>\n      <Timeline.Badge>\n        <Octicon icon={GitCommitIcon} aria-label=\"Commit\" />\n      </Timeline.Badge>\n      <Timeline.Body>This is a message</Timeline.Body>\n    </Timeline.Item>\n    <Timeline.Item>\n      <Timeline.Badge>\n        <Octicon icon={GitCommitIcon} aria-label=\"Commit\" />\n      </Timeline.Badge>\n      <Timeline.Body>This is a message</Timeline.Body>\n    </Timeline.Item>\n  </Timeline>\n)"
        },
        {
          "id": "components-timeline-features--clip-sidebar",
          "code": "() => (\n  <Timeline clipSidebar>\n    <Timeline.Item>\n      <Timeline.Badge>\n        <Octicon icon={GitCommitIcon} aria-label=\"Commit\" />\n      </Timeline.Badge>\n      <Timeline.Body>This is a message</Timeline.Body>\n    </Timeline.Item>\n    <Timeline.Item>\n      <Timeline.Badge>\n        <Octicon icon={GitCommitIcon} aria-label=\"Commit\" />\n      </Timeline.Badge>\n      <Timeline.Body>This is a message</Timeline.Body>\n    </Timeline.Item>\n  </Timeline>\n)"
        },
        {
          "id": "components-timeline-features--condensed-items",
          "code": "() => (\n  <Timeline>\n    <Timeline.Item condensed>\n      <Timeline.Badge>\n        <Octicon icon={GitCommitIcon} aria-label=\"Commit\" />\n      </Timeline.Badge>\n      <Timeline.Body>This is a message</Timeline.Body>\n    </Timeline.Item>\n    <Timeline.Item condensed>\n      <Timeline.Badge>\n        <Octicon icon={GitCommitIcon} aria-label=\"Commit\" />\n      </Timeline.Badge>\n      <Timeline.Body>This is a message</Timeline.Body>\n    </Timeline.Item>\n  </Timeline>\n)"
        },
        {
          "id": "components-timeline-features--timeline-break",
          "code": "() => (\n  <Timeline>\n    <Timeline.Item>\n      <Timeline.Badge\n        sx={{\n          bg: 'done.emphasis',\n        }}\n      >\n        <Octicon\n          icon={GitMergeIcon}\n          color=\"fg.onEmphasis\"\n          aria-label=\"Merged\"\n        />\n      </Timeline.Badge>\n      <Timeline.Body>This is a message</Timeline.Body>\n    </Timeline.Item>\n    <Timeline.Break />\n    <Timeline.Item>\n      <Timeline.Badge>\n        <Octicon icon={GitBranchIcon} aria-label=\"Branch\" />\n      </Timeline.Badge>\n      <Timeline.Body>This is a message</Timeline.Body>\n    </Timeline.Item>\n  </Timeline>\n)"
        },
        {
          "id": "components-timeline-features--with-inline-links",
          "code": "() => (\n  <Timeline>\n    <Timeline.Item>\n      <Timeline.Badge>\n        <Octicon icon={GitCommitIcon} aria-label=\"Commit\" />\n      </Timeline.Badge>\n      <Timeline.Body>\n        <Link\n          href=\"#\"\n          sx={{\n            fontWeight: 'bold',\n            color: 'fg.default',\n            mr: 1,\n          }}\n          muted\n        >\n          Monalisa\n        </Link>\n        enabled auto-merge (squash)\n      </Timeline.Body>\n    </Timeline.Item>\n  </Timeline>\n)"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "clipSidebar",
          "type": "boolean",
          "required": false,
          "description": "Hides the sidebar above the first Timeline.Item and below the last Timeline.Item.",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        }
      ],
      "subcomponents": [
        {
          "name": "Timeline.Badge",
          "props": [
            {
              "name": "children",
              "type": "ReactNode",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "Timeline.Body",
          "props": [
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "Timeline.Break",
          "props": [
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "Timeline.Item",
          "props": [
            {
              "name": "condensed",
              "type": "boolean",
              "required": false,
              "description": "Reduces vertical padding and removes background from an item's badge.",
              "defaultValue": ""
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    "toggle_switch": {
      "id": "toggle_switch",
      "name": "ToggleSwitch",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-toggleswitch--default",
          "code": "() => (\n  <>\n    <Text id=\"toggle\" fontWeight=\"bold\" fontSize={1}>\n      Toggle label\n    </Text>\n    <ToggleSwitch aria-labelledby=\"toggle\" />\n  </>\n)"
        },
        {
          "id": "components-toggleswitch-features--small",
          "code": "() => (\n  <ToggleSwitchStoryWrapper>\n    <Text id=\"toggle\" fontWeight={'bold'} fontSize={1}>\n      Toggle label\n    </Text>\n    <ToggleSwitch size=\"small\" aria-labelledby=\"toggle\" />\n  </ToggleSwitchStoryWrapper>\n)"
        },
        {
          "id": "components-toggleswitch-features--with-caption",
          "code": "() => (\n  <Box display=\"flex\" alignItems={'start'}>\n    <Box flexGrow={1}>\n      <Text fontSize={2} fontWeight=\"bold\" id=\"switchLabel\" display=\"block\">\n        Notifications\n      </Text>\n      <Text color=\"fg.subtle\" fontSize={1} id=\"switchCaption\" display=\"block\">\n        Notifications will be delivered via email and the GitHub notification\n        center\n      </Text>\n    </Box>\n    <ToggleSwitch\n      aria-labelledby=\"switchLabel\"\n      aria-describedby=\"switchCaption\"\n    />\n  </Box>\n)"
        },
        {
          "id": "components-toggleswitch-features--disabled",
          "code": "() => (\n  <ToggleSwitchStoryWrapper>\n    <Text id=\"toggle\" fontWeight={'bold'} fontSize={1}>\n      Toggle label\n    </Text>\n    <ToggleSwitch disabled aria-labelledby=\"toggle\" />\n  </ToggleSwitchStoryWrapper>\n)"
        },
        {
          "id": "components-toggleswitch-features--checked",
          "code": "() => (\n  <ToggleSwitchStoryWrapper>\n    <Text id=\"toggle\" fontWeight={'bold'} fontSize={1}>\n      Toggle label\n    </Text>\n    <ToggleSwitch checked aria-labelledby=\"toggle\" />\n  </ToggleSwitchStoryWrapper>\n)"
        },
        {
          "id": "components-toggleswitch-features--checked-disabled",
          "code": "() => (\n  <ToggleSwitchStoryWrapper>\n    <Text id=\"toggle\" fontWeight={'bold'} fontSize={1}>\n      Toggle label\n    </Text>\n    <ToggleSwitch checked disabled aria-labelledby=\"toggle\" />\n  </ToggleSwitchStoryWrapper>\n)"
        },
        {
          "id": "components-toggleswitch-features--loading",
          "code": "() => (\n  <ToggleSwitchStoryWrapper>\n    <Text id=\"toggle\" fontWeight={'bold'} fontSize={1}>\n      Toggle label\n    </Text>\n    <ToggleSwitch loading aria-labelledby=\"toggle\" />\n  </ToggleSwitchStoryWrapper>\n)"
        },
        {
          "id": "components-toggleswitch-features--label-end",
          "code": "() => (\n  <ToggleSwitchStoryWrapper>\n    <Text id=\"toggle\" fontWeight={'bold'} fontSize={1}>\n      Toggle label\n    </Text>\n    <ToggleSwitch statusLabelPosition=\"end\" aria-labelledby=\"toggle\" />\n  </ToggleSwitchStoryWrapper>\n)"
        },
        {
          "id": "components-toggleswitch-features--controlled",
          "code": "() => {\n  const [isOn, setIsOn] = React.useState(false)\n  const onClick = React.useCallback(() => {\n    setIsOn(!isOn)\n  }, [setIsOn, isOn])\n  const handleSwitchChange = (on: boolean) => {\n    action(`new switch \"on\" state: ${on}`)\n  }\n  return (\n    <>\n      <Box display=\"flex\" maxWidth=\"300px\">\n        <Box flexGrow={1} fontSize={2} fontWeight=\"bold\" id=\"switchLabel\">\n          Notifications\n        </Box>\n        <ToggleSwitch\n          onClick={onClick}\n          onChange={handleSwitchChange}\n          checked={isOn}\n          aria-labelledby=\"switchLabel\"\n        />\n      </Box>\n      <p>The switch is {isOn ? 'on' : 'off'}</p>\n    </>\n  )\n}"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "aria-describedby",
          "type": "string",
          "required": false,
          "description": "The ID(s) of the DOM node(s) that describes the switch",
          "defaultValue": ""
        },
        {
          "name": "aria-labelledby",
          "type": "string",
          "required": false,
          "description": "The ID of the DOM node that labels the switch",
          "defaultValue": ""
        },
        {
          "name": "checked",
          "type": "boolean",
          "required": false,
          "description": "Whether the switch is turned on",
          "defaultValue": ""
        },
        {
          "name": "defaultChecked",
          "type": "boolean",
          "required": false,
          "description": "Uncontrolled - whether the switch is turned on",
          "defaultValue": ""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "required": false,
          "description": "Whether the switch is ready for user input",
          "defaultValue": ""
        },
        {
          "name": "loading",
          "type": "boolean",
          "required": false,
          "description": "Whether the switch's value is being calculated",
          "defaultValue": ""
        },
        {
          "name": "onChange",
          "type": "(checked: boolean) => void",
          "required": false,
          "description": "The callback that is called when the switch is toggled on or off",
          "defaultValue": ""
        },
        {
          "name": "onClick",
          "type": "MouseEventHandler",
          "required": false,
          "description": "The callback that is called when the switch is clicked",
          "defaultValue": ""
        },
        {
          "name": "size",
          "type": "\"small\" | \"medium\"",
          "required": false,
          "description": "Size of the switch",
          "defaultValue": ""
        },
        {
          "name": "statusLabelPosition",
          "type": "\"end\" | \"start\"",
          "required": false,
          "description": "Whether the \"on\" and \"off\" labels should appear before or after the switch.\n**This should only be changed when the switch's alignment needs to be adjusted.** For example: It needs to be left-aligned because the label appears above it and the caption appears below it.",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "avatar_token": {
      "id": "avatar_token",
      "name": "AvatarToken",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "avatarSrc",
          "type": "string",
          "required": true,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "text",
          "type": "ReactNode",
          "required": true,
          "description": "The text label inside the token",
          "defaultValue": ""
        },
        {
          "name": "as",
          "type": "\"a\" | \"button\" | \"span\" | \"button\" & ComponentClass<unknown, any> | \"button\" & FunctionComponent<unknown> | \"a\" & ComponentClass<unknown, any> | \"a\" & FunctionComponent<unknown> | \"span\" & ComponentClass<unknown, any> | \"span\" & FunctionComponent<unknown>",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "required": false,
          "description": "Whether or not the token is disabled (non-interactive).",
          "defaultValue": ""
        },
        {
          "name": "hideRemoveButton",
          "type": "boolean",
          "required": false,
          "description": "Whether the remove button should be rendered in the token",
          "defaultValue": ""
        },
        {
          "name": "id",
          "type": "string | number",
          "required": false,
          "description": "A unique identifier that can be associated with the token",
          "defaultValue": ""
        },
        {
          "name": "isSelected",
          "type": "boolean",
          "required": false,
          "description": "Whether the token is selected",
          "defaultValue": ""
        },
        {
          "name": "onRemove",
          "type": "() => void",
          "required": false,
          "description": "The function that gets called when a user clicks the remove button, or keys \"Backspace\" or \"Delete\" when focused on the token",
          "defaultValue": ""
        },
        {
          "name": "size",
          "type": "\"small\" | \"large\" | \"medium\" | \"xlarge\"",
          "required": false,
          "description": "Which size the token will be rendered at",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "issue_label_token": {
      "id": "issue_label_token",
      "name": "IssueLabelToken",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "text",
          "type": "ReactNode",
          "required": true,
          "description": "The text label inside the token",
          "defaultValue": ""
        },
        {
          "name": "as",
          "type": "\"a\" | \"button\" | \"span\" | \"button\" & ComponentClass<unknown, any> | \"button\" & FunctionComponent<unknown> | \"a\" & ComponentClass<unknown, any> | \"a\" & FunctionComponent<unknown> | \"span\" & ComponentClass<unknown, any> | \"span\" & FunctionComponent<unknown>",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "required": false,
          "description": "Whether or not the token is disabled (non-interactive).",
          "defaultValue": ""
        },
        {
          "name": "fillColor",
          "type": "string",
          "required": false,
          "description": "The color that corresponds to the label",
          "defaultValue": "#999"
        },
        {
          "name": "hideRemoveButton",
          "type": "boolean",
          "required": false,
          "description": "Whether the remove button should be rendered in the token",
          "defaultValue": ""
        },
        {
          "name": "id",
          "type": "string | number",
          "required": false,
          "description": "A unique identifier that can be associated with the token",
          "defaultValue": ""
        },
        {
          "name": "isSelected",
          "type": "boolean",
          "required": false,
          "description": "Whether the token is selected",
          "defaultValue": ""
        },
        {
          "name": "onRemove",
          "type": "() => void",
          "required": false,
          "description": "The function that gets called when a user clicks the remove button, or keys \"Backspace\" or \"Delete\" when focused on the token",
          "defaultValue": ""
        },
        {
          "name": "size",
          "type": "\"small\" | \"large\" | \"medium\" | \"xlarge\"",
          "required": false,
          "description": "Which size the token will be rendered at",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "token": {
      "id": "token",
      "name": "Token",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-token--default",
          "code": "() => <Token text=\"token\" />"
        },
        {
          "id": "components-token-features--interactive-token",
          "code": "() => {\n  return (\n    <Box\n      display=\"flex\"\n      sx={{\n        alignItems: 'start',\n        gap: get('space.2'),\n      }}\n    >\n      <Token\n        as=\"a\"\n        href=\"/?path=/story/components-token-features--issue-label-token-custom-colors\"\n        text=\"Link\"\n      />\n      <Token as=\"button\" onClick={action('clicked')} text=\"Button\" />\n      <Token\n        as=\"span\"\n        tabIndex={0}\n        onFocus={action('focused')}\n        text=\"Focusable Span\"\n      />\n    </Box>\n  )\n}"
        },
        {
          "id": "components-token-features--token-with-leading-visual",
          "code": "() => {\n  return <Token text=\"token\" leadingVisual={GitBranchIcon} />\n}"
        },
        {
          "id": "components-token-features--token-with-on-remove-fn",
          "code": "() => {\n  return (\n    <Box\n      display=\"flex\"\n      sx={{\n        alignItems: 'start',\n        gap: get('space.2'),\n      }}\n    >\n      <Token text=\"token\" onRemove={action('remove me')} />\n      <Token\n        as=\"a\"\n        href=\"/?path=/story/components-token-features--issue-label-token-custom-colors\"\n        onRemove={action('remove me')}\n        text=\"Link\"\n      />\n      <Token\n        as=\"button\"\n        onClick={action('clicked')}\n        onRemove={action('remove me')}\n        text=\"Button\"\n      />\n      <Token\n        as=\"span\"\n        tabIndex={0}\n        onFocus={action('focused')}\n        onRemove={action('remove me')}\n        text=\"Focusable Span\"\n      />\n    </Box>\n  )\n}"
        },
        {
          "id": "components-token-features--default-issue-label-token",
          "code": "() => {\n  return <IssueLabelToken text=\"good first issue\" />\n}"
        },
        {
          "id": "components-token-features--interactive-issue-label-token",
          "code": "() => {\n  return (\n    <Box\n      display=\"flex\"\n      sx={{\n        alignItems: 'start',\n        gap: get('space.2'),\n      }}\n    >\n      <IssueLabelToken\n        as=\"a\"\n        href=\"/?path=/story/components-token-features--issue-label-token-custom-colors\"\n        text=\"Link\"\n      />\n      <IssueLabelToken as=\"button\" onClick={action('clicked')} text=\"Button\" />\n      <IssueLabelToken\n        as=\"span\"\n        tabIndex={0}\n        onFocus={action('focused')}\n        text=\"Focusable Span\"\n      />\n    </Box>\n  )\n}"
        },
        {
          "id": "components-token-features--issue-label-token-with-on-remove-fn",
          "code": "() => {\n  return (\n    <Box\n      display=\"flex\"\n      sx={{\n        alignItems: 'start',\n        gap: get('space.2'),\n      }}\n    >\n      <IssueLabelToken text=\"token\" onRemove={action('remove me')} />\n      <IssueLabelToken\n        as=\"a\"\n        href=\"/?path=/story/components-token-features--issue-label-token-custom-colors\"\n        onRemove={action('remove me')}\n        text=\"Link\"\n      />\n      <IssueLabelToken\n        as=\"button\"\n        onClick={action('clicked')}\n        onRemove={action('remove me')}\n        text=\"Button\"\n      />\n      <IssueLabelToken\n        as=\"span\"\n        tabIndex={0}\n        onFocus={action('focused')}\n        onRemove={action('remove me')}\n        text=\"Focusable Span\"\n      />\n    </Box>\n  )\n}"
        },
        {
          "id": "components-token-features--small-token",
          "code": "() => <Token text=\"token\" size=\"small\" />"
        },
        {
          "id": "components-token-features--large-token",
          "code": "() => <Token text=\"token\" size=\"xlarge\" />"
        },
        {
          "id": "components-token-features--x-large-token",
          "code": "() => <Token text=\"token\" size=\"xlarge\" />"
        },
        {
          "id": "components-token-features--issue-label-token-custom-colors",
          "code": "() => {\n  return (\n    <Box\n      display=\"flex\"\n      sx={{\n        flexDirection: 'column',\n        alignItems: 'start',\n        gap: get('space.2'),\n      }}\n    >\n      <Box\n        display=\"flex\"\n        sx={{\n          alignItems: 'start',\n          gap: get('space.2'),\n        }}\n      >\n        <IssueLabelToken\n          as=\"a\"\n          href=\"/?path=/story/components-token-features--issue-label-token-custom-colors\"\n          text=\"Link\"\n          fillColor=\"#0366d6\"\n        />\n        <IssueLabelToken\n          as=\"button\"\n          onClick={action('clicked')}\n          text=\"Button\"\n          fillColor=\"lightpink\"\n        />\n        <IssueLabelToken\n          as=\"span\"\n          tabIndex={0}\n          onFocus={action('focused')}\n          text=\"Focusable Span\"\n          fillColor=\"coral\"\n        />\n      </Box>\n      <h3>Color examples</h3>\n      <Box\n        display=\"flex\"\n        flexWrap=\"wrap\"\n        sx={{\n          alignItems: 'start',\n          gap: get('space.2'),\n        }}\n      >\n        <IssueLabelToken\n          as=\"a\"\n          href=\"/?path=/story/components-token-features--issue-label-token-custom-colors\"\n          text=\"😀 Link\"\n          fillColor=\"#8c50c8\"\n        />\n        <IssueLabelToken\n          as=\"a\"\n          href=\"/?path=/story/components-token-features--issue-label-token-custom-colors\"\n          text=\"Token\"\n          fillColor=\"#a9d3bc\"\n        />\n        <IssueLabelToken\n          as=\"a\"\n          href=\"/?path=/story/components-token-features--issue-label-token-custom-colors\"\n          text=\"🚨 Problem\"\n          fillColor=\"#98afa7\"\n        />\n        <IssueLabelToken\n          as=\"a\"\n          href=\"/?path=/story/components-token-features--issue-label-token-custom-colors\"\n          text=\"📥 Inbox\"\n          fillColor=\"#573807\"\n        />\n        <IssueLabelToken\n          as=\"a\"\n          href=\"/?path=/story/components-token-features--issue-label-token-custom-colors\"\n          text=\"deeppink\"\n          fillColor=\"#b7b41e\"\n        />\n        <IssueLabelToken\n          as=\"a\"\n          href=\"/?path=/story/components-token-features--issue-label-token-custom-colors\"\n          text=\"👹 Link\"\n          fillColor=\"#0f65b1\"\n        />\n        <IssueLabelToken\n          as=\"a\"\n          href=\"/?path=/story/components-token-features--issue-label-token-custom-colors\"\n          text=\"Tiger\"\n          fillColor=\"#e7bc68\"\n        />\n        <IssueLabelToken\n          as=\"a\"\n          href=\"/?path=/story/components-token-features--issue-label-token-custom-colors\"\n          text=\"🐛 coral\"\n          fillColor=\"#D6F2DE\"\n        />\n        <IssueLabelToken\n          as=\"a\"\n          href=\"/?path=/story/components-token-features--issue-label-token-custom-colors\"\n          text=\"Long label\"\n          fillColor=\"#161E37\"\n        />\n        <IssueLabelToken\n          as=\"a\"\n          href=\"/?path=/story/components-token-features--issue-label-token-custom-colors\"\n          text=\"✅ Done\"\n          fillColor=\"#232323\"\n        />\n        <IssueLabelToken\n          as=\"a\"\n          href=\"/?path=/story/components-token-features--issue-label-token-custom-colors\"\n          text=\"Hello\"\n          fillColor=\"#E0E0E0\"\n        />\n        <IssueLabelToken\n          as=\"a\"\n          href=\"/?path=/story/components-token-features--issue-label-token-custom-colors\"\n          text=\"Lorem\"\n          fillColor=\"#aed531\"\n        />\n        <IssueLabelToken\n          as=\"a\"\n          href=\"/?path=/story/components-token-features--issue-label-token-custom-colors\"\n          text=\"Lorem\"\n          fillColor=\"#d980fc\"\n        />\n        <IssueLabelToken\n          as=\"a\"\n          href=\"/?path=/story/components-token-features--issue-label-token-custom-colors\"\n          text=\"Lorem\"\n          fillColor=\"#e7f922\"\n        />\n        <IssueLabelToken\n          as=\"a\"\n          href=\"/?path=/story/components-token-features--issue-label-token-custom-colors\"\n          text=\"🚀 Lorem\"\n          fillColor=\"#ef70e9\"\n        />\n        <IssueLabelToken\n          as=\"a\"\n          href=\"/?path=/story/components-token-features--issue-label-token-custom-colors\"\n          text=\"Lorem\"\n          fillColor=\"#72ea84\"\n        />\n        <IssueLabelToken\n          as=\"a\"\n          href=\"/?path=/story/components-token-features--issue-label-token-custom-colors\"\n          text=\"Lorem\"\n          fillColor=\"#87e50b\"\n        />\n        <IssueLabelToken\n          as=\"a\"\n          href=\"/?path=/story/components-token-features--issue-label-token-custom-colors\"\n          text=\"🤷 Lorem\"\n          fillColor=\"#fcf646\"\n        />\n        <IssueLabelToken\n          as=\"a\"\n          href=\"/?path=/story/components-token-features--issue-label-token-custom-colors\"\n          text=\"💡 Light\"\n          fillColor=\"#E40C74\"\n        />\n      </Box>\n    </Box>\n  )\n}"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "text",
          "type": "ReactNode",
          "required": true,
          "description": "The text label inside the token",
          "defaultValue": ""
        },
        {
          "name": "as",
          "type": "\"a\" | \"button\" | \"span\" | \"button\" & ComponentClass<unknown, any> | \"button\" & FunctionComponent<unknown> | \"a\" & ComponentClass<unknown, any> | \"a\" & FunctionComponent<unknown> | \"span\" & ComponentClass<unknown, any> | \"span\" & FunctionComponent<unknown>",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "required": false,
          "description": "Whether or not the token is disabled (non-interactive).",
          "defaultValue": ""
        },
        {
          "name": "hideRemoveButton",
          "type": "boolean",
          "required": false,
          "description": "Whether the remove button should be rendered in the token",
          "defaultValue": ""
        },
        {
          "name": "id",
          "type": "string | number",
          "required": false,
          "description": "A unique identifier that can be associated with the token",
          "defaultValue": ""
        },
        {
          "name": "isSelected",
          "type": "boolean",
          "required": false,
          "description": "Whether the token is selected",
          "defaultValue": ""
        },
        {
          "name": "leadingVisual",
          "type": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
          "required": false,
          "description": "A component that renders before the token text",
          "defaultValue": ""
        },
        {
          "name": "onRemove",
          "type": "() => void",
          "required": false,
          "description": "The function that gets called when a user clicks the remove button, or keys \"Backspace\" or \"Delete\" when focused on the token",
          "defaultValue": ""
        },
        {
          "name": "size",
          "type": "\"small\" | \"large\" | \"medium\" | \"xlarge\"",
          "required": false,
          "description": "Which size the token will be rendered at",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "tooltip": {
      "id": "tooltip",
      "docsId": "tooltip",
      "name": "Tooltip",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-tooltip--default",
          "code": "() => (\n  <>\n    <Box\n      sx={{\n        mb: 3,\n      }}\n    >\n      <Banner\n        title=\"Planned for deprecation\"\n        description={\n          <div data-a11y-link-underlines=\"true\">\n            There are plans to deprecate this component in a future release. We\n            recommend using{' '}\n            <Link\n              inline={true}\n              href=\"/?path=/story/components-tooltipv2--default\"\n            >\n              Tooltip\n            </Link>{' '}\n            instead.\n          </div>\n        }\n        variant=\"warning\"\n      />\n    </Box>\n    <Box\n      sx={{\n        p: 5,\n      }}\n    >\n      <Tooltip aria-label=\"Hello, Tooltip!\">\n        <Button>Hover me</Button>\n      </Tooltip>\n    </Box>\n  </>\n)"
        },
        {
          "id": "components-tooltip-features--all-directions",
          "code": "() => (\n  <Box\n    sx={{\n      padding: 5,\n      display: 'flex',\n      gap: '8px',\n    }}\n  >\n    <Tooltip direction=\"n\" aria-label=\"Supplementary text\">\n      <Button>North</Button>\n    </Tooltip>\n    <Tooltip direction=\"s\" aria-label=\"Supplementary text\">\n      <Button>South</Button>\n    </Tooltip>\n    <Tooltip direction=\"e\" aria-label=\"Supplementary text\">\n      <Button>East</Button>\n    </Tooltip>\n    <Tooltip direction=\"w\" aria-label=\"Supplementary text\">\n      <Button>West</Button>\n    </Tooltip>\n    <Tooltip direction=\"ne\" aria-label=\"Supplementary text\">\n      <Button>North East</Button>\n    </Tooltip>\n    <Tooltip direction=\"nw\" aria-label=\"Supplementary text\">\n      <Button>North West</Button>\n    </Tooltip>\n    <Tooltip direction=\"se\" aria-label=\"Supplementary text\">\n      <Button>Southeast</Button>\n    </Tooltip>\n    <Tooltip direction=\"sw\" aria-label=\"Supplementary text\">\n      <Button>Southwest</Button>\n    </Tooltip>\n  </Box>\n)"
        },
        {
          "id": "components-tooltip-features--icon-button-tooltip",
          "code": "() => (\n  <Box\n    sx={{\n      p: 5,\n    }}\n  >\n    <Tooltip aria-label=\"Search\">\n      <IconButton icon={SearchIcon} aria-label=\"Search\" />\n    </Tooltip>\n  </Box>\n)"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "align",
          "type": "\"left\" | \"right\"",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "direction",
          "type": "\"s\" | \"nw\" | \"n\" | \"ne\" | \"e\" | \"se\" | \"sw\" | \"w\"",
          "required": false,
          "description": "Sets where the tooltip renders in relation to the target.",
          "defaultValue": "n"
        },
        {
          "name": "noDelay",
          "type": "boolean",
          "required": false,
          "description": "When set to `true`, tooltip appears without any delay.",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        },
        {
          "name": "text",
          "type": "string",
          "required": false,
          "description": "Text content of the tooltip. Also used as an aria-label.",
          "defaultValue": ""
        },
        {
          "name": "wrap",
          "type": "boolean",
          "required": false,
          "description": "Use `true` to allow text within tooltip to wrap.",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "tooltip_v2": {
      "id": "tooltip_v2",
      "docsId": "tooltip",
      "name": "Tooltip",
      "status": "beta",
      "a11yReviewed": true,
      "stories": [
        {
          "id": "components-tooltip--default",
          "code": "() => (\n  <Box\n    sx={{\n      p: 6,\n    }}\n  >\n    <Tooltip text=\"This change can't be undone.\">\n      <Button>Delete</Button>\n    </Tooltip>\n  </Box>\n)"
        },
        {
          "id": "components-tooltip-features--anchor-has-margin",
          "code": "() => (\n  <Box\n    sx={{\n      p: 5,\n    }}\n  >\n    <Tooltip text=\"Tooltip is still centered\">\n      <Button\n        sx={{\n          marginLeft: 3,\n        }}\n      >\n        Button has 16px margin Left\n      </Button>\n    </Tooltip>\n  </Box>\n)"
        },
        {
          "id": "components-tooltip-features--label-type",
          "code": "() => (\n  <Box>\n    <Tooltip text=\"Contribution Documentation for 'Primer React'\" type=\"label\">\n      <Link\n        href=\"https://github.com/primer/react/contributor-docs/CONTRIBUTING.md\"\n        sx={{\n          ml: 1,\n          color: 'fg.muted',\n        }}\n      >\n        <Octicon\n          icon={BookIcon}\n          sx={{\n            color: 'fg.muted',\n          }}\n        />\n      </Link>\n    </Tooltip>\n  </Box>\n)"
        },
        {
          "id": "components-tooltip-features--description-type",
          "code": "() => (\n  <Box\n    sx={{\n      p: 5,\n    }}\n  >\n    <Tooltip text=\"Supplementary text\" direction=\"n\">\n      <Button>Save</Button>\n    </Tooltip>\n  </Box>\n)"
        },
        {
          "id": "components-tooltip-features--icon-button-with-description",
          "code": "() => (\n  <Box\n    sx={{\n      p: 5,\n    }}\n  >\n    <Tooltip text=\"Supplementary text for icon button\" direction=\"e\">\n      <IconButton icon={SearchIcon} aria-label=\"Search\" />\n    </Tooltip>\n  </Box>\n)"
        },
        {
          "id": "components-tooltip-features--all-directions",
          "code": "() => (\n  <Box\n    sx={{\n      padding: 5,\n      display: 'flex',\n      gap: '8px',\n    }}\n  >\n    <Tooltip direction=\"n\" text=\"Supplementary text\">\n      <Button>North</Button>\n    </Tooltip>\n    <Tooltip direction=\"s\" text=\"Supplementary text\">\n      <Button>South</Button>\n    </Tooltip>\n    <Tooltip direction=\"e\" text=\"Supplementary text\">\n      <Button>East</Button>\n    </Tooltip>\n    <Tooltip direction=\"w\" text=\"Supplementary text\">\n      <Button>West</Button>\n    </Tooltip>\n    <Tooltip direction=\"ne\" text=\"Supplementary text\">\n      <Button>North East</Button>\n    </Tooltip>\n    <Tooltip direction=\"nw\" text=\"Supplementary text\">\n      <Button>North West</Button>\n    </Tooltip>\n    <Tooltip direction=\"se\" text=\"Supplementary text\">\n      <Button>Southeast</Button>\n    </Tooltip>\n    <Tooltip direction=\"sw\" text=\"Supplementary text\">\n      <Button>Southwest</Button>\n    </Tooltip>\n  </Box>\n)"
        },
        {
          "id": "components-tooltip-features--multiline-text",
          "code": "() => (\n  <Box>\n    <Tooltip\n      direction=\"e\"\n      text=\"Random long text that needs to be wrapped and be multipline and have some paddings around\"\n    >\n      <Button>Multiline East</Button>\n    </Tooltip>\n  </Box>\n)"
        },
        {
          "id": "components-tooltip-features--calculated-direction",
          "code": "() => (\n  <Box\n    sx={{\n      padding: 5,\n      display: 'flex',\n      gap: '8px',\n    }}\n  >\n    <Tooltip\n      direction=\"w\"\n      text=\"But appears in the east direction due to not having enough space in the west\"\n    >\n      <Button>West</Button>\n    </Tooltip>\n\n    <Tooltip text=\"The direction here is north by default but there is not enough space in the north therefore the tooltip appears in the south\">\n      <Button>North</Button>\n    </Tooltip>\n  </Box>\n)"
        },
        {
          "id": "components-tooltip-features--on-action-menu-anchor",
          "code": "() => (\n  <Box\n    sx={{\n      display: 'flex',\n      padding: 5,\n      gap: 2,\n    }}\n  >\n    <ActionMenu>\n      <ActionMenu.Anchor>\n        <Tooltip text=\"Supplementary text to add here\" direction=\"n\">\n          <Button\n            leadingVisual={GitBranchIcon}\n            trailingAction={TriangleDownIcon}\n          >\n            ActionMenu.Anchor w/ t\n          </Button>\n        </Tooltip>\n      </ActionMenu.Anchor>\n      <ActionMenu.Overlay width=\"medium\">\n        <ActionList>\n          <ActionList.Item onSelect={() => alert('Main')}>\n            <ActionList.LeadingVisual>\n              <CheckIcon />\n            </ActionList.LeadingVisual>\n            main <ActionList.TrailingVisual>default</ActionList.TrailingVisual>\n          </ActionList.Item>\n          <ActionList.Item onSelect={() => alert('Branch 1')}>\n            branch-1\n          </ActionList.Item>\n          <ActionList.Item onSelect={() => alert('Branch 2')}>\n            branch-2\n          </ActionList.Item>\n        </ActionList>\n      </ActionMenu.Overlay>\n    </ActionMenu>\n    <ActionMenu>\n      <Tooltip text=\"Supplementary text to add here\" direction=\"n\">\n        <ActionMenu.Button leadingVisual={GitBranchIcon}>\n          ActionMenu.Button w/ t\n        </ActionMenu.Button>\n      </Tooltip>\n      <ActionMenu.Overlay width=\"medium\">\n        <ActionList>\n          <ActionList.Item onSelect={() => alert('Main')}>\n            <ActionList.LeadingVisual>\n              <CheckIcon />\n            </ActionList.LeadingVisual>\n            main <ActionList.TrailingVisual>default</ActionList.TrailingVisual>\n          </ActionList.Item>\n          <ActionList.Item onSelect={() => alert('Branch 1')}>\n            branch-1\n          </ActionList.Item>\n          <ActionList.Item onSelect={() => alert('Branch 2')}>\n            branch-2\n          </ActionList.Item>\n        </ActionList>\n      </ActionMenu.Overlay>\n    </ActionMenu>\n    <ActionMenu>\n      <ActionMenu.Anchor>\n        <Button leadingVisual={GitBranchIcon} trailingAction={TriangleDownIcon}>\n          ActionMenu.Anchor\n        </Button>\n      </ActionMenu.Anchor>\n      <ActionMenu.Overlay width=\"medium\">\n        <ActionList>\n          <ActionList.Item onSelect={() => alert('Main')}>\n            <ActionList.LeadingVisual>\n              <CheckIcon />\n            </ActionList.LeadingVisual>\n            main <ActionList.TrailingVisual>default</ActionList.TrailingVisual>\n          </ActionList.Item>\n          <ActionList.Item onSelect={() => alert('Branch 1')}>\n            branch-1\n          </ActionList.Item>\n          <ActionList.Item onSelect={() => alert('Branch 2')}>\n            branch-2\n          </ActionList.Item>\n        </ActionList>\n      </ActionMenu.Overlay>\n    </ActionMenu>\n    <ActionMenu>\n      <ActionMenu.Button leadingVisual={GitBranchIcon}>\n        ActionMenu.Button\n      </ActionMenu.Button>\n\n      <ActionMenu.Overlay width=\"medium\">\n        <ActionList>\n          <ActionList.Item onSelect={() => alert('Main')}>\n            <ActionList.LeadingVisual>\n              <CheckIcon />\n            </ActionList.LeadingVisual>\n            main <ActionList.TrailingVisual>default</ActionList.TrailingVisual>\n          </ActionList.Item>\n          <ActionList.Item onSelect={() => alert('Branch 1')}>\n            branch-1\n          </ActionList.Item>\n          <ActionList.Item onSelect={() => alert('Branch 2')}>\n            branch-2\n          </ActionList.Item>\n        </ActionList>\n      </ActionMenu.Overlay>\n    </ActionMenu>\n  </Box>\n)"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "text",
          "type": "string",
          "required": true,
          "description": "The text to be displayed in the tooltip",
          "defaultValue": ""
        },
        {
          "name": "direction",
          "type": "\"s\" | \"nw\" | \"n\" | \"ne\" | \"e\" | \"se\" | \"sw\" | \"w\"",
          "required": false,
          "description": "TSets where the tooltip renders in relation to the target.",
          "defaultValue": "s"
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        },
        {
          "name": "type",
          "type": "\"label\" | \"description\"",
          "required": false,
          "description": "The type of tooltip. `label` is used for labelling the element that triggers tooltip. `description` is used for describing or adding a suplementary information to the element that triggers the tooltip.",
          "defaultValue": "description"
        }
      ],
      "subcomponents": []
    },
    "tree_view": {
      "id": "tree_view",
      "name": "TreeView",
      "status": "beta",
      "a11yReviewed": true,
      "stories": [
        {
          "id": "components-treeview--default",
          "code": "() => (\n  <nav aria-label=\"Files changed\">\n    <TreeView aria-label=\"Files changed\">\n      <TreeView.Item id=\"src\" defaultExpanded>\n        <TreeView.LeadingVisual>\n          <TreeView.DirectoryIcon />\n        </TreeView.LeadingVisual>\n        src\n        <TreeView.SubTree>\n          <TreeView.Item id=\"src/Avatar.tsx\">\n            <TreeView.LeadingVisual>\n              <FileIcon />\n            </TreeView.LeadingVisual>\n            Avatar.tsx\n            <TreeView.TrailingVisual label=\"Added\">\n              <Octicon icon={DiffAddedIcon} color=\"success.fg\" />\n            </TreeView.TrailingVisual>\n          </TreeView.Item>\n          <TreeView.Item id=\"src/Button.tsx\" current>\n            <TreeView.LeadingVisual>\n              <FileIcon />\n            </TreeView.LeadingVisual>\n            Button.tsx\n            <TreeView.TrailingVisual label=\"Modified\">\n              <Octicon icon={DiffModifiedIcon} color=\"attention.fg\" />\n            </TreeView.TrailingVisual>\n          </TreeView.Item>\n        </TreeView.SubTree>\n      </TreeView.Item>\n      <TreeView.Item id=\"package.json\">\n        <TreeView.LeadingVisual>\n          <FileIcon />\n        </TreeView.LeadingVisual>\n        package.json\n        <TreeView.TrailingVisual label=\"Modified\">\n          <Octicon icon={DiffModifiedIcon} color=\"attention.fg\" />\n        </TreeView.TrailingVisual>\n      </TreeView.Item>\n    </TreeView>\n  </nav>\n)"
        },
        {
          "id": "components-treeview-features--files",
          "code": "() => (\n  <nav aria-label=\"Files\">\n    <TreeView aria-label=\"Files\">\n      <TreeView.Item id=\"src\" defaultExpanded>\n        <TreeView.LeadingVisual>\n          <TreeView.DirectoryIcon />\n        </TreeView.LeadingVisual>\n        src\n        <TreeView.SubTree>\n          <TreeView.Item id=\"src/Avatar.tsx\">\n            <TreeView.LeadingVisual>\n              <FileIcon />\n            </TreeView.LeadingVisual>\n            Avatar.tsx\n          </TreeView.Item>\n          <TreeView.Item id=\"src/Button\" current>\n            <TreeView.LeadingVisual>\n              <TreeView.DirectoryIcon />\n            </TreeView.LeadingVisual>\n            Button\n            <TreeView.SubTree>\n              <TreeView.Item id=\"src/Button/Button.tsx\">\n                <TreeView.LeadingVisual>\n                  <FileIcon />\n                </TreeView.LeadingVisual>\n                Button.tsx\n              </TreeView.Item>\n              <TreeView.Item id=\"src/Button/Button.test.tsx\">\n                <TreeView.LeadingVisual>\n                  <FileIcon />\n                </TreeView.LeadingVisual>\n                Button.test.tsx\n              </TreeView.Item>\n            </TreeView.SubTree>\n          </TreeView.Item>\n          <TreeView.Item id=\"src/ReallyLongFileNameThatShouldBeTruncated.tsx\">\n            <TreeView.LeadingVisual>\n              <FileIcon />\n            </TreeView.LeadingVisual>\n            ReallyLongFileNameThatShouldBeTruncated.tsx\n          </TreeView.Item>\n        </TreeView.SubTree>\n      </TreeView.Item>\n      <TreeView.Item\n        id=\"public\"\n        // eslint-disable-next-line no-console\n        onExpandedChange={(isExpanded) =>\n          console.log(\n            `${isExpanded ? 'Expanded' : 'Collapsed'} \"public\" folder `,\n          )\n        }\n      >\n        <TreeView.LeadingVisual>\n          <TreeView.DirectoryIcon />\n        </TreeView.LeadingVisual>\n        public\n        <TreeView.SubTree>\n          <TreeView.Item id=\"public/index.html\">\n            <TreeView.LeadingVisual>\n              <FileIcon />\n            </TreeView.LeadingVisual>\n            index.html\n          </TreeView.Item>\n          <TreeView.Item id=\"public/favicon.ico\">\n            <TreeView.LeadingVisual>\n              <FileIcon />\n            </TreeView.LeadingVisual>\n            favicon.ico\n          </TreeView.Item>\n        </TreeView.SubTree>\n      </TreeView.Item>\n      <TreeView.Item id=\"package.json\">\n        <TreeView.LeadingVisual>\n          <FileIcon />\n        </TreeView.LeadingVisual>\n        package.json\n      </TreeView.Item>\n    </TreeView>\n  </nav>\n)"
        },
        {
          "id": "components-treeview-features--files-changed",
          "code": "() => {\n  return (\n    <nav aria-label=\"Files\">\n      <TreeView aria-label=\"Files\">\n        <TreeView.Item id=\"src\" defaultExpanded>\n          <TreeView.LeadingVisual>\n            <TreeView.DirectoryIcon />\n          </TreeView.LeadingVisual>\n          src\n          <TreeView.SubTree>\n            <TreeView.Item id=\"src/Avatar.tsx\">\n              <TreeView.LeadingVisual>\n                <FileIcon />\n              </TreeView.LeadingVisual>\n              Avatar.tsx\n              <TreeView.TrailingVisual label=\"added\">\n                <Octicon icon={DiffAddedIcon} color=\"success.fg\" />\n              </TreeView.TrailingVisual>\n            </TreeView.Item>\n            <TreeView.Item id=\"src/Button\" defaultExpanded>\n              <TreeView.LeadingVisual>\n                <TreeView.DirectoryIcon />\n              </TreeView.LeadingVisual>\n              Button\n              <TreeView.SubTree>\n                <TreeView.Item id=\"src/Button/Button.tsx\" current>\n                  <TreeView.LeadingVisual>\n                    <FileIcon />\n                  </TreeView.LeadingVisual>\n                  Button.tsx\n                  <TreeView.TrailingVisual label=\"modified\">\n                    <Octicon icon={DiffModifiedIcon} color=\"attention.fg\" />\n                  </TreeView.TrailingVisual>\n                </TreeView.Item>\n                <TreeView.Item id=\"src/Button/Button.test.tsx\">\n                  <TreeView.LeadingVisual>\n                    <FileIcon />\n                  </TreeView.LeadingVisual>\n                  Button.test.tsx\n                  <TreeView.TrailingVisual label=\"modified\">\n                    <Octicon icon={DiffModifiedIcon} color=\"attention.fg\" />\n                  </TreeView.TrailingVisual>\n                </TreeView.Item>\n              </TreeView.SubTree>\n            </TreeView.Item>\n            <TreeView.Item id=\"src/ReallyLongFileNameThatShouldBeTruncated.tsx\">\n              <TreeView.LeadingVisual>\n                <FileIcon />\n              </TreeView.LeadingVisual>\n              ReallyLongFileNameThatShouldBeTruncated.tsx\n              <TreeView.TrailingVisual label=\"modified\">\n                <Octicon icon={DiffModifiedIcon} color=\"attention.fg\" />\n              </TreeView.TrailingVisual>\n            </TreeView.Item>\n          </TreeView.SubTree>\n        </TreeView.Item>\n        <TreeView.Item id=\"public\" defaultExpanded>\n          <TreeView.LeadingVisual>\n            <TreeView.DirectoryIcon />\n          </TreeView.LeadingVisual>\n          public\n          <TreeView.SubTree>\n            <TreeView.Item id=\"public/index.html\">\n              <TreeView.LeadingVisual>\n                <FileIcon />\n              </TreeView.LeadingVisual>\n              index.html\n              <TreeView.TrailingVisual label=\"renamed\">\n                <Octicon icon={DiffRenamedIcon} />\n              </TreeView.TrailingVisual>\n            </TreeView.Item>\n            <TreeView.Item id=\"public/favicon.ico\">\n              <TreeView.LeadingVisual>\n                <FileIcon />\n              </TreeView.LeadingVisual>\n              favicon.ico\n              <TreeView.TrailingVisual label=\"removed\">\n                <Octicon icon={DiffRemovedIcon} color=\"danger.fg\" />\n              </TreeView.TrailingVisual>\n            </TreeView.Item>\n          </TreeView.SubTree>\n        </TreeView.Item>\n      </TreeView>\n    </nav>\n  )\n}"
        },
        {
          "id": "components-treeview-features--controlled",
          "code": "() => {\n  const [currentPath, setCurrentPath] = React.useState<string[]>([\n    'src',\n    'Avatar.tsx',\n  ])\n  const [tree, setTree] = React.useState<TreeItem[]>(intialTree)\n  return (\n    <Box\n      sx={{\n        display: 'grid',\n        gap: 3,\n      }}\n    >\n      <Box\n        sx={{\n          display: 'flex',\n          gap: 2,\n        }}\n      >\n        <Button onClick={() => setTree(collapseAll)}>Collapse all</Button>\n        <Button onClick={() => setTree(expandAll)}>Expand all</Button>\n      </Box>\n      <nav aria-label=\"Files\">\n        <CurrentPathContext.Provider\n          value={{\n            currentPath,\n            setCurrentPath,\n          }}\n        >\n          <TreeView aria-label=\"Files\">\n            {tree.map((item) => (\n              <TreeItem\n                key={item.data.name}\n                item={item}\n                path={[item.data.name]}\n                onExpandedChange={(path, expanded) =>\n                  setTree((tree) => setExpanded(tree, path, expanded))\n                }\n              />\n            ))}\n          </TreeView>\n        </CurrentPathContext.Provider>\n      </nav>\n    </Box>\n  )\n}"
        },
        {
          "id": "components-treeview-features--async-success",
          "code": "(args) => {\n  const [isLoading, setIsLoading] = React.useState(false)\n  const [asyncItems, setAsyncItems] = React.useState<string[]>([])\n  let state: SubTreeState = 'initial'\n  if (isLoading) {\n    state = 'loading'\n  } else if (asyncItems.length > 0) {\n    state = 'done'\n  }\n  return (\n    <nav aria-label=\"Files\">\n      <TreeView aria-label=\"Files\">\n        <TreeView.Item id=\"file-1\">\n          <TreeView.LeadingVisual>\n            <FileIcon />\n          </TreeView.LeadingVisual>\n          Some file\n        </TreeView.Item>\n        <TreeView.Item\n          id=\"async-directory\"\n          onExpandedChange={async (isExpanded) => {\n            if (asyncItems.length === 0 && isExpanded) {\n              setIsLoading(true)\n\n              // Load items\n              const items = await loadItems(args.responseTime)\n              setIsLoading(false)\n              setAsyncItems(items)\n            }\n          }}\n        >\n          <TreeView.LeadingVisual>\n            <TreeView.DirectoryIcon />\n          </TreeView.LeadingVisual>\n          Directory with async items\n          <TreeView.SubTree state={state}>\n            {asyncItems.map((item) => (\n              <TreeView.Item id={`item-${item}`} key={item}>\n                <TreeView.LeadingVisual>\n                  <FileIcon />\n                </TreeView.LeadingVisual>\n                {item}\n              </TreeView.Item>\n            ))}\n          </TreeView.SubTree>\n        </TreeView.Item>\n        <TreeView.Item id=\"another-file\">\n          <TreeView.LeadingVisual>\n            <FileIcon />\n          </TreeView.LeadingVisual>\n          Another file\n        </TreeView.Item>\n      </TreeView>\n    </nav>\n  )\n}"
        },
        {
          "id": "components-treeview-features--async-with-count",
          "code": "(args) => {\n  const [isLoading, setIsLoading] = React.useState(false)\n  const [asyncItems, setAsyncItems] = React.useState<string[]>([])\n  let state: SubTreeState = 'initial'\n  if (isLoading) {\n    state = 'loading'\n  } else if (asyncItems.length > 0) {\n    state = 'done'\n  }\n  return (\n    <nav aria-label=\"Files\">\n      <TreeView aria-label=\"Files\">\n        <TreeView.Item id=\"some-file\">\n          <TreeView.LeadingVisual>\n            <FileIcon />\n          </TreeView.LeadingVisual>\n          Some file\n        </TreeView.Item>\n        <TreeView.Item\n          id=\"async-directory\"\n          onExpandedChange={async (isExpanded) => {\n            if (asyncItems.length === 0 && isExpanded) {\n              setIsLoading(true)\n\n              // Load items\n              const items = await loadItems(args.responseTime)\n              setIsLoading(false)\n              setAsyncItems(items)\n            }\n          }}\n        >\n          <TreeView.LeadingVisual>\n            <TreeView.DirectoryIcon />\n          </TreeView.LeadingVisual>\n          Directory with async items\n          <TreeView.SubTree state={state} count={args.count}>\n            {asyncItems.map((item) => (\n              <TreeView.Item key={item} id={`item-${item}`}>\n                <TreeView.LeadingVisual>\n                  <FileIcon />\n                </TreeView.LeadingVisual>\n                {item}\n              </TreeView.Item>\n            ))}\n          </TreeView.SubTree>\n        </TreeView.Item>\n        <TreeView.Item id=\"another-file\">\n          <TreeView.LeadingVisual>\n            <FileIcon />\n          </TreeView.LeadingVisual>\n          Another file\n        </TreeView.Item>\n      </TreeView>\n    </nav>\n  )\n}"
        },
        {
          "id": "components-treeview-features--async-error",
          "code": "(args) => {\n  const [isLoading, setIsLoading] = React.useState(false)\n  const [asyncItems, setAsyncItems] = React.useState<string[]>([])\n  const [error, setError] = React.useState<Error | null>(null)\n  let state: SubTreeState = 'initial'\n  if (isLoading) {\n    state = 'loading'\n  } else if (error) {\n    state = 'error'\n  } else if (asyncItems.length > 0) {\n    state = 'done'\n  }\n  async function loadItems() {\n    if (asyncItems.length === 0) {\n      setIsLoading(true)\n      try {\n        // Try to load items\n        const items = await alwaysFails(args.responseTime)\n        setAsyncItems(items)\n      } catch (error) {\n        setError(error as Error)\n      } finally {\n        setIsLoading(false)\n      }\n    }\n  }\n  return (\n    <TreeView aria-label=\"Files\">\n      <TreeView.Item id=\"some-file\">\n        <TreeView.LeadingVisual>\n          <FileIcon />\n        </TreeView.LeadingVisual>\n        Some file\n      </TreeView.Item>\n      <TreeView.Item\n        id=\"async-directory\"\n        onExpandedChange={(isExpanded) => {\n          if (isExpanded) {\n            loadItems()\n          }\n        }}\n      >\n        <TreeView.LeadingVisual>\n          <TreeView.DirectoryIcon />\n        </TreeView.LeadingVisual>\n        Directory with async items\n        <TreeView.SubTree state={state}>\n          {error ? (\n            <TreeView.ErrorDialog\n              onRetry={() => {\n                setError(null)\n                loadItems()\n              }}\n              onDismiss={() => {\n                setError(null)\n              }}\n            >\n              {error.message}\n            </TreeView.ErrorDialog>\n          ) : null}\n          {asyncItems.map((item) => (\n            <TreeView.Item key={item} id={`item-${item}`}>\n              <TreeView.LeadingVisual>\n                <FileIcon />\n              </TreeView.LeadingVisual>\n              {item}\n            </TreeView.Item>\n          ))}\n        </TreeView.SubTree>\n      </TreeView.Item>\n      <TreeView.Item id=\"another-file\">\n        <TreeView.LeadingVisual>\n          <FileIcon />\n        </TreeView.LeadingVisual>\n        Another file\n      </TreeView.Item>\n    </TreeView>\n  )\n}"
        },
        {
          "id": "components-treeview-features--empty-directories",
          "code": "() => {\n  const [state, setState] = React.useState<SubTreeState>('loading')\n  const timeoutId = React.useRef<ReturnType<typeof setTimeout> | null>(null)\n  React.useEffect(() => {\n    return () => {\n      if (timeoutId.current) {\n        clearTimeout(timeoutId.current)\n        timeoutId.current = null\n      }\n    }\n  }, [])\n  return (\n    <TreeView aria-label=\"Files\">\n      <TreeView.Item\n        id=\"src\"\n        onExpandedChange={(expanded) => {\n          if (expanded) {\n            timeoutId.current = setTimeout(() => {\n              setState('done')\n              timeoutId.current = null\n            }, 2000)\n          }\n        }}\n      >\n        <TreeView.LeadingVisual>\n          <TreeView.DirectoryIcon />\n        </TreeView.LeadingVisual>\n        src\n        <TreeView.SubTree state={state} />\n      </TreeView.Item>\n      <TreeView.Item id=\".github\">\n        <TreeView.LeadingVisual>\n          <TreeView.DirectoryIcon />\n        </TreeView.LeadingVisual>\n        .github\n        <TreeView.SubTree />\n      </TreeView.Item>\n    </TreeView>\n  )\n}"
        },
        {
          "id": "components-treeview-features--nested-trees",
          "code": "() => {\n  const [isLoading, setIsLoading] = React.useState(false)\n  const [asyncItems, setAsyncItems] = React.useState<string[]>([])\n  let state: SubTreeState = 'initial'\n  if (isLoading) {\n    state = 'loading'\n  } else if (asyncItems.length > 0) {\n    state = 'done'\n  }\n  return (\n    <nav aria-label=\"Files\">\n      <TreeView aria-label=\"Files\">\n        <TreeView.Item id=\"file-1\">\n          <TreeView.LeadingVisual>\n            <FileIcon />\n          </TreeView.LeadingVisual>\n          Some file\n        </TreeView.Item>\n        <TreeView.Item\n          id=\"async-directory\"\n          onExpandedChange={async (isExpanded) => {\n            if (asyncItems.length === 0 && isExpanded) {\n              setIsLoading(true)\n\n              // Load items\n              const items = await loadItems(1000)\n              setIsLoading(false)\n              setAsyncItems(items)\n            }\n          }}\n        >\n          <TreeView.LeadingVisual>\n            <TreeView.DirectoryIcon />\n          </TreeView.LeadingVisual>\n          Directory with async items\n          <TreeView.SubTree state={state}>\n            {asyncItems.map((item) => (\n              <TreeView.Item id={`item-${item}`} key={item}>\n                <TreeView.LeadingVisual>\n                  <FileIcon />\n                </TreeView.LeadingVisual>\n                {item}\n              </TreeView.Item>\n            ))}\n            <TreeView.Item id=\"nested-directory\">\n              Nested Sub-tree\n              <TreeView.SubTree state=\"done\">\n                <TreeView.Item id=\"nested-directory/file-1\">\n                  <TreeView.LeadingVisual>\n                    <FileIcon />\n                  </TreeView.LeadingVisual>\n                  Some file\n                </TreeView.Item>\n                <TreeView.Item id=\"nested-directory/another-file\">\n                  <TreeView.LeadingVisual>\n                    <FileIcon />\n                  </TreeView.LeadingVisual>\n                  Another file\n                </TreeView.Item>\n              </TreeView.SubTree>\n            </TreeView.Item>\n          </TreeView.SubTree>\n        </TreeView.Item>\n        <TreeView.Item id=\"another-file\">\n          <TreeView.LeadingVisual>\n            <FileIcon />\n          </TreeView.LeadingVisual>\n          Another file\n        </TreeView.Item>\n      </TreeView>\n    </nav>\n  )\n}"
        },
        {
          "id": "components-treeview-features--nested-scroll-container",
          "code": "() => {\n  return (\n    <Box\n      sx={{\n        maxHeight: '50vh',\n        overflow: 'auto',\n      }}\n    >\n      <TreeView aria-label=\"Files\">\n        {Array.from({\n          length: 100,\n        }).map((_, i) => (\n          <TreeView.Item key={i} id={`directory-${i}`}>\n            <TreeView.LeadingVisual>\n              <TreeView.DirectoryIcon />\n            </TreeView.LeadingVisual>\n            Directory {i}\n            <TreeView.SubTree>\n              {Array.from({\n                length: 10,\n              }).map((_, j) => (\n                <TreeView.Item\n                  key={j}\n                  id={`directory-${i}/file-${j}`}\n                  // eslint-disable-next-line no-console\n                  onSelect={() => console.log(`Directory ${i}/File ${j}`)}\n                >\n                  <TreeView.LeadingVisual>\n                    <FileIcon />\n                  </TreeView.LeadingVisual>\n                  File {j}\n                </TreeView.Item>\n              ))}\n            </TreeView.SubTree>\n          </TreeView.Item>\n        ))}\n      </TreeView>\n    </Box>\n  )\n}"
        },
        {
          "id": "components-treeview-features--stress-test",
          "code": "() => {\n  return (\n    <TreeView aria-label=\"Files\">\n      {Array.from({\n        length: 1000,\n      }).map((_, i) => (\n        <TreeView.Item key={i} id={`directory-${i}`}>\n          <TreeView.LeadingVisual>\n            <TreeView.DirectoryIcon />\n          </TreeView.LeadingVisual>\n          Directory {i}\n          <TreeView.SubTree>\n            {Array.from({\n              length: 100,\n            }).map((_, j) => (\n              <TreeView.Item key={j} id={`directory-${i}/file-${j}`}>\n                <TreeView.LeadingVisual>\n                  <FileIcon />\n                </TreeView.LeadingVisual>\n                File {j}\n              </TreeView.Item>\n            ))}\n          </TreeView.SubTree>\n        </TreeView.Item>\n      ))}\n    </TreeView>\n  )\n}"
        },
        {
          "id": "components-treeview-features--contain-intrinsic-size",
          "code": "() => {\n  return (\n    <TreeView aria-label=\"Files\">\n      {Array.from({\n        length: 10,\n      }).map((_, i) => (\n        <TreeView.Item\n          key={i}\n          id={`directory-${i}`}\n          defaultExpanded\n          containIntrinsicSize=\"2rem\"\n        >\n          <TreeView.LeadingVisual>\n            <TreeView.DirectoryIcon />\n          </TreeView.LeadingVisual>\n          Directory {i}\n          <TreeView.SubTree>\n            {Array.from({\n              length: 1000,\n            }).map((_, j) => (\n              <TreeView.Item\n                key={j}\n                id={`directory-${i}/file-${j}`}\n                containIntrinsicSize=\"2rem\"\n              >\n                <TreeView.LeadingVisual>\n                  <FileIcon />\n                </TreeView.LeadingVisual>\n                File {j}\n              </TreeView.Item>\n            ))}\n          </TreeView.SubTree>\n        </TreeView.Item>\n      ))}\n    </TreeView>\n  )\n}"
        },
        {
          "id": "components-treeview-features--initial-focus",
          "code": "() => (\n  <div>\n    <Button>Focusable element before TreeView</Button>\n    <TreeView aria-label=\"Test tree\">\n      <TreeView.Item id=\"src\" defaultExpanded>\n        <TreeView.LeadingVisual>\n          <TreeView.DirectoryIcon />\n        </TreeView.LeadingVisual>\n        src\n        <TreeView.SubTree>\n          <TreeView.Item id=\"src/Avatar.tsx\">\n            <TreeView.LeadingVisual>\n              <FileIcon />\n            </TreeView.LeadingVisual>\n            Avatar.tsx\n          </TreeView.Item>\n          <TreeView.Item id=\"src/Button\" defaultExpanded>\n            <TreeView.LeadingVisual>\n              <TreeView.DirectoryIcon />\n            </TreeView.LeadingVisual>\n            Button\n            <TreeView.SubTree>\n              <TreeView.Item id=\"src/Button/Button.tsx\">\n                <TreeView.LeadingVisual>\n                  <FileIcon />\n                </TreeView.LeadingVisual>\n                Button.tsx\n              </TreeView.Item>\n              <TreeView.Item id=\"src/Button/Button.test.tsx\">\n                <TreeView.LeadingVisual>\n                  <FileIcon />\n                </TreeView.LeadingVisual>\n                Button.test.tsx\n              </TreeView.Item>\n              <TreeView.Item id=\"src/Button/Button2.tsx\">\n                <TreeView.LeadingVisual>\n                  <FileIcon />\n                </TreeView.LeadingVisual>\n                Button2.tsx\n              </TreeView.Item>\n              <TreeView.Item id=\"src/Button/Button2.test.tsx\">\n                <TreeView.LeadingVisual>\n                  <FileIcon />\n                </TreeView.LeadingVisual>\n                Button2.test.tsx\n              </TreeView.Item>\n              <TreeView.Item id=\"src/Button/Button3.tsx\">\n                <TreeView.LeadingVisual>\n                  <FileIcon />\n                </TreeView.LeadingVisual>\n                Button3.tsx\n              </TreeView.Item>\n              <TreeView.Item id=\"src/Button/Button3.test.tsx\">\n                <TreeView.LeadingVisual>\n                  <FileIcon />\n                </TreeView.LeadingVisual>\n                Button3.test.tsx\n              </TreeView.Item>\n              <TreeView.Item id=\"src/Button/Button4.tsx\">\n                <TreeView.LeadingVisual>\n                  <FileIcon />\n                </TreeView.LeadingVisual>\n                Button4.tsx\n              </TreeView.Item>\n              <TreeView.Item id=\"src/Button/Button4.test.tsx\">\n                <TreeView.LeadingVisual>\n                  <FileIcon />\n                </TreeView.LeadingVisual>\n                Button4.test.tsx\n              </TreeView.Item>\n              <TreeView.Item id=\"src/Button/Button5.tsx\">\n                <TreeView.LeadingVisual>\n                  <FileIcon />\n                </TreeView.LeadingVisual>\n                Button5.tsx\n              </TreeView.Item>\n              <TreeView.Item id=\"src/Button/Button5.test.tsx\">\n                <TreeView.LeadingVisual>\n                  <FileIcon />\n                </TreeView.LeadingVisual>\n                Button5.test.tsx\n              </TreeView.Item>\n              <TreeView.Item id=\"src/Button/Button6.tsx\">\n                <TreeView.LeadingVisual>\n                  <FileIcon />\n                </TreeView.LeadingVisual>\n                Button6.tsx\n              </TreeView.Item>\n              <TreeView.Item id=\"src/Button/Button6.test.tsx\">\n                <TreeView.LeadingVisual>\n                  <FileIcon />\n                </TreeView.LeadingVisual>\n                Button6.test.tsx\n              </TreeView.Item>\n              <TreeView.Item id=\"src/Button/Button7.tsx\">\n                <TreeView.LeadingVisual>\n                  <FileIcon />\n                </TreeView.LeadingVisual>\n                Button7.tsx\n              </TreeView.Item>\n              <TreeView.Item id=\"src/Button/Button7.test.tsx\" current>\n                <TreeView.LeadingVisual>\n                  <FileIcon />\n                </TreeView.LeadingVisual>\n                Button7.test.tsx\n              </TreeView.Item>\n            </TreeView.SubTree>\n          </TreeView.Item>\n          <TreeView.Item id=\"src/ReallyLongFileNameThatShouldBeTruncated.tsx\">\n            <TreeView.LeadingVisual>\n              <FileIcon />\n            </TreeView.LeadingVisual>\n            ReallyLongFileNameThatShouldBeTruncated.tsx\n          </TreeView.Item>\n        </TreeView.SubTree>\n      </TreeView.Item>\n    </TreeView>\n    <Button>Focusable element after TreeView</Button>\n  </div>\n)"
        },
        {
          "id": "components-treeview-features--focus-management",
          "code": "() => (\n  <div>\n    <Button>Focusable element before TreeView</Button>\n    <TreeView aria-label=\"Test tree\">\n      <TreeView.Item id=\"src\" defaultExpanded>\n        <TreeView.LeadingVisual>\n          <TreeView.DirectoryIcon />\n        </TreeView.LeadingVisual>\n        src\n        <TreeView.SubTree>\n          <TreeView.Item id=\"src/Avatar.tsx\">\n            <TreeView.LeadingVisual>\n              <FileIcon />\n            </TreeView.LeadingVisual>\n            Avatar.tsx\n            <IconButton\n              variant=\"invisible\"\n              icon={KebabHorizontalIcon}\n              aria-label=\"Secondary actions\"\n              aria-hidden\n              tabIndex={-1}\n            ></IconButton>\n          </TreeView.Item>\n          <TreeView.Item id=\"src/Button\" defaultExpanded>\n            <TreeView.LeadingVisual>\n              <TreeView.DirectoryIcon />\n            </TreeView.LeadingVisual>\n            Button\n            <TreeView.SubTree>\n              <TreeView.Item id=\"src/Button/Button.tsx\">\n                <TreeView.LeadingVisual>\n                  <FileIcon />\n                </TreeView.LeadingVisual>\n                Button.tsx\n                <IconButton\n                  variant=\"invisible\"\n                  icon={KebabHorizontalIcon}\n                  aria-label=\"Secondary actions\"\n                  aria-hidden\n                  tabIndex={-1}\n                ></IconButton>\n              </TreeView.Item>\n            </TreeView.SubTree>\n          </TreeView.Item>\n        </TreeView.SubTree>\n      </TreeView.Item>\n    </TreeView>\n    <Button>Focusable element after TreeView</Button>\n  </div>\n)"
        },
        {
          "id": "components-treeview-features--without-indentation",
          "code": "() => (\n  <nav aria-label=\"Files changed\">\n    <TreeView aria-label=\"Files changed\" flat>\n      <TreeView.Item id=\"src\" defaultExpanded>\n        <TreeView.LeadingVisual>\n          <TreeView.DirectoryIcon />\n        </TreeView.LeadingVisual>\n        src\n      </TreeView.Item>\n      <TreeView.Item id=\"src/Avatar.tsx\">\n        <TreeView.LeadingVisual>\n          <FileIcon />\n        </TreeView.LeadingVisual>\n        Avatar.tsx\n        <TreeView.TrailingVisual label=\"Added\">\n          <Octicon icon={DiffAddedIcon} color=\"success.fg\" />\n        </TreeView.TrailingVisual>\n      </TreeView.Item>\n      <TreeView.Item id=\"src/Button.tsx\" current>\n        <TreeView.LeadingVisual>\n          <FileIcon />\n        </TreeView.LeadingVisual>\n        Button.tsx\n        <TreeView.TrailingVisual label=\"Modified\">\n          <Octicon icon={DiffModifiedIcon} color=\"attention.fg\" />\n        </TreeView.TrailingVisual>\n      </TreeView.Item>\n      <TreeView.Item id=\"package.json\">\n        <TreeView.LeadingVisual>\n          <FileIcon />\n        </TreeView.LeadingVisual>\n        package.json\n        <TreeView.TrailingVisual label=\"Modified\">\n          <Octicon icon={DiffModifiedIcon} color=\"attention.fg\" />\n        </TreeView.TrailingVisual>\n      </TreeView.Item>\n    </TreeView>\n  </nav>\n)"
        },
        {
          "id": "components-treeview-features--leading-action",
          "code": "() => {\n  return (\n    <TreeView aria-label=\"Issues\">\n      <TreeView.Item id=\"item-0\">\n        <TreeView.LeadingAction>\n          <IconButton\n            icon={GrabberIcon}\n            aria-label=\"Reorder item 1\"\n            variant=\"invisible\"\n          />\n        </TreeView.LeadingAction>\n        <TreeView.LeadingVisual>\n          <Octicon\n            icon={IssueClosedIcon}\n            sx={{\n              color: 'done.fg',\n            }}\n          />\n        </TreeView.LeadingVisual>\n        Item 1\n      </TreeView.Item>\n      <TreeView.Item id=\"item-2\">\n        <TreeView.LeadingAction>\n          <IconButton\n            icon={GrabberIcon}\n            aria-label=\"Reorder item 2\"\n            variant=\"invisible\"\n          />\n        </TreeView.LeadingAction>\n        <TreeView.LeadingVisual>\n          <Octicon\n            icon={IssueOpenedIcon}\n            sx={{\n              color: 'open.fg',\n            }}\n          />\n        </TreeView.LeadingVisual>\n        Item 2\n        <TreeView.SubTree>\n          <TreeView.Item id=\"item-2-sub-task-1\">\n            <TreeView.LeadingVisual>\n              <Octicon\n                icon={IssueOpenedIcon}\n                sx={{\n                  color: 'open.fg',\n                }}\n              />\n            </TreeView.LeadingVisual>\n            sub task 1\n          </TreeView.Item>\n          <TreeView.Item id=\"item-2-sub-task-2\">\n            <TreeView.LeadingVisual>\n              <Octicon\n                icon={IssueOpenedIcon}\n                sx={{\n                  color: 'open.fg',\n                }}\n              />\n            </TreeView.LeadingVisual>\n            sub task 2\n          </TreeView.Item>\n        </TreeView.SubTree>\n      </TreeView.Item>\n      <TreeView.Item id=\"item-3\">\n        <TreeView.LeadingAction>\n          <IconButton\n            icon={GrabberIcon}\n            aria-label=\"Reorder item 3\"\n            variant=\"invisible\"\n          />\n        </TreeView.LeadingAction>\n        <TreeView.LeadingVisual>\n          <Octicon\n            icon={IssueOpenedIcon}\n            sx={{\n              color: 'open.fg',\n            }}\n          />\n        </TreeView.LeadingVisual>\n        Item 3\n      </TreeView.Item>\n    </TreeView>\n  )\n}"
        },
        {
          "id": "components-treeview-features--multiline-items",
          "code": "() => (\n  <nav aria-label=\"Files changed\">\n    <TreeView aria-label=\"Files changed\">\n      <TreeView.Item id=\"src\" defaultExpanded>\n        <TreeView.LeadingVisual>\n          <TreeView.DirectoryIcon />\n        </TreeView.LeadingVisual>\n        <div\n          style={{\n            whiteSpace: 'wrap',\n          }}\n        >\n          this is a very long directory name that we have intentionally allowed\n          to wrap over multiple lines to demonstrate alignment\n        </div>\n        <TreeView.SubTree>\n          <TreeView.Item id=\"src/Avatar.tsx\">\n            <TreeView.LeadingVisual>\n              <FileIcon />\n            </TreeView.LeadingVisual>\n            Avatar.tsx\n            <TreeView.TrailingVisual label=\"Added\">\n              <Octicon icon={DiffAddedIcon} color=\"success.fg\" />\n            </TreeView.TrailingVisual>\n          </TreeView.Item>\n        </TreeView.SubTree>\n      </TreeView.Item>\n      <TreeView.Item id=\"src\" defaultExpanded>\n        <TreeView.LeadingVisual>\n          <TreeView.DirectoryIcon />\n        </TreeView.LeadingVisual>\n        <div\n          style={{\n            whiteSpace: 'wrap',\n          }}\n        >\n          this is a medium directory name that we wrap over 2 lines to\n          demonstrate alignment\n        </div>\n        <TreeView.TrailingVisual label=\"Added\">\n          <Octicon icon={DiffAddedIcon} color=\"success.fg\" />\n        </TreeView.TrailingVisual>\n        <TreeView.SubTree>\n          <TreeView.Item id=\"src/Avatar.tsx\">\n            <TreeView.LeadingVisual>\n              <FileIcon />\n            </TreeView.LeadingVisual>\n            Avatar.tsx\n            <TreeView.TrailingVisual label=\"Added\">\n              <Octicon icon={DiffAddedIcon} color=\"success.fg\" />\n            </TreeView.TrailingVisual>\n          </TreeView.Item>\n        </TreeView.SubTree>\n      </TreeView.Item>\n      <TreeView.Item id=\"src\" defaultExpanded>\n        <TreeView.LeadingVisual>\n          <TreeView.DirectoryIcon />\n        </TreeView.LeadingVisual>\n        this is a very long directory name that we have intentionally NOT\n        allowed to wrap over multiple lines to demonstrate alignment\n        <TreeView.SubTree>\n          <TreeView.Item id=\"src/Avatar.tsx\">\n            <TreeView.LeadingVisual>\n              <FileIcon />\n            </TreeView.LeadingVisual>\n            Avatar.tsx\n            <TreeView.TrailingVisual label=\"Added\">\n              <Octicon icon={DiffAddedIcon} color=\"success.fg\" />\n            </TreeView.TrailingVisual>\n          </TreeView.Item>\n        </TreeView.SubTree>\n      </TreeView.Item>\n      <TreeView.Item id=\"src\" defaultExpanded>\n        <TreeView.LeadingVisual>\n          <TreeView.DirectoryIcon />\n        </TreeView.LeadingVisual>\n        short name\n        <TreeView.SubTree>\n          <TreeView.Item id=\"src/Avatar.tsx\">\n            <TreeView.LeadingVisual>\n              <FileIcon />\n            </TreeView.LeadingVisual>\n            Avatar.tsx\n            <TreeView.TrailingVisual label=\"Added\">\n              <Octicon icon={DiffAddedIcon} color=\"success.fg\" />\n            </TreeView.TrailingVisual>\n          </TreeView.Item>\n        </TreeView.SubTree>\n      </TreeView.Item>\n    </TreeView>\n  </nav>\n)"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "children",
          "type": "ReactNode",
          "required": true,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "aria-label",
          "type": "string",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "aria-labelledby",
          "type": "string",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "className",
          "type": "string",
          "required": false,
          "description": "Class name(s) used to customize styles",
          "defaultValue": ""
        },
        {
          "name": "flat",
          "type": "boolean",
          "required": false,
          "description": "Prevents the tree from indenting items. This should only be used when the tree is used to display a flat list of items.",
          "defaultValue": ""
        }
      ],
      "subcomponents": [
        {
          "name": "TreeView.ErrorDialog",
          "props": [
            {
              "name": "children",
              "type": "ReactNode",
              "required": true,
              "description": "The content of the dialog. This is usually a message explaining the error.",
              "defaultValue": ""
            },
            {
              "name": "onDismiss",
              "type": "() => void",
              "required": false,
              "description": "Event handler called when the dialog is dismissed.",
              "defaultValue": ""
            },
            {
              "name": "onRetry",
              "type": "() => void",
              "required": false,
              "description": "Event handler called when the user clicks the retry button.",
              "defaultValue": ""
            },
            {
              "name": "title",
              "type": "string",
              "required": false,
              "description": "The title of the dialog. This is usually a short description of the error.",
              "defaultValue": "Error"
            }
          ]
        },
        {
          "name": "TreeView.Item",
          "props": [
            {
              "name": "children",
              "type": "ReactNode",
              "required": true,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "id",
              "type": "string",
              "required": true,
              "description": "A unique identifier for the item.",
              "defaultValue": ""
            },
            {
              "name": "aria-label",
              "type": "string",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "aria-labelledby",
              "type": "string",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "className",
              "type": "string",
              "required": false,
              "description": "Class name(s) used to customize styles",
              "defaultValue": ""
            },
            {
              "name": "containIntrinsicSize",
              "type": "string",
              "required": false,
              "description": "The size of this item's contents. Passing this will set 'content-visiblity: auto' on the content container, delaying rendering until the item is in the viewport.",
              "defaultValue": ""
            },
            {
              "name": "current",
              "type": "boolean",
              "required": false,
              "description": "Indicates whether the item is the current item. No more than one item should be current at once. The path to the current item will be expanded by default.",
              "defaultValue": "false"
            },
            {
              "name": "defaultExpanded",
              "type": "boolean",
              "required": false,
              "description": "The expanded state of the item when it is initially rendered. Use when you do not need to control the state.",
              "defaultValue": ""
            },
            {
              "name": "expanded",
              "type": "boolean",
              "required": false,
              "description": "The controlled expanded state of item. Must be used in conjunction with onExpandedChange.",
              "defaultValue": ""
            },
            {
              "name": "onExpandedChange",
              "type": "(expanded: boolean) => void",
              "required": false,
              "description": "Event handler called when the expanded state of the item changes.",
              "defaultValue": ""
            },
            {
              "name": "onSelect",
              "type": "(event: KeyboardEvent<HTMLElement> | MouseEvent<HTMLElement, MouseEvent>) => void",
              "required": false,
              "description": "Callback when a tree view node is activated",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "TreeView.LeadingAction",
          "props": [
            {
              "name": "children",
              "type": "undefined | null | string | number | false | true | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | (props: { isExpanded: boolean; }) => ReactNode",
              "required": true,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "label",
              "type": "string",
              "required": false,
              "description": "Provide an accessible label for the visual. This is not necessary for decorative visuals.",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "TreeView.LeadingVisual",
          "props": [
            {
              "name": "children",
              "type": "undefined | null | string | number | false | true | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | (props: { isExpanded: boolean; }) => ReactNode",
              "required": true,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "label",
              "type": "string",
              "required": false,
              "description": "Provide an accessible label for the visual. This is not necessary for decorative visuals.",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "TreeView.SubTree",
          "props": [
            {
              "name": "children",
              "type": "ReactNode",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "count",
              "type": "number",
              "required": false,
              "description": "The number of items expected to be in the subtree. When in the loading state, the subtree will render a skeleton loading placeholder with the specified count of items",
              "defaultValue": ""
            },
            {
              "name": "state",
              "type": "\"loading\" | \"initial\" | \"done\" | \"error\"",
              "required": false,
              "description": "Specify a state if items in the subtree are loaded asynchronously. An asynchronous subtree can be in one of the following states: 'initial', 'loading', 'done', or 'error'. In the 'initial' state, items are neither loaded nor loading. In the 'loading' state, items are loading and the subtree will render a loading indicator. In the 'done' state, items are loaded. Screen readers will announce when a subtree enters the 'done' state. An 'error' state means that an error occured while loading items.",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "TreeView.TrailingVisual",
          "props": [
            {
              "name": "children",
              "type": "undefined | null | string | number | false | true | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | (props: { isExpanded: boolean; }) => ReactNode",
              "required": true,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "label",
              "type": "string",
              "required": false,
              "description": "Provide an accessible label for the visual. This is not necessary for decorative visuals.",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    "truncate": {
      "id": "truncate",
      "name": "Truncate",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "components-truncate--default",
          "code": "() => <Truncate title=\"Some example text\">Some example text</Truncate>"
        },
        {
          "id": "components-truncate-features--expandable",
          "code": "() => (\n  <Truncate title=\"Hover this example text\" expandable>\n    Hover this example text\n  </Truncate>\n)"
        },
        {
          "id": "components-truncate-features--inline",
          "code": "() => (\n  <>\n    <ArrowRightIcon />\n    <Truncate title=\"Inline example text\" inline>\n      Inline example text\n    </Truncate>\n    <ArrowLeftIcon />\n  </>\n)"
        },
        {
          "id": "components-truncate-features--max-width",
          "code": "() => (\n  <Truncate title=\"Some example text with a max width\" maxWidth={200}>\n    Some example text with a max width\n  </Truncate>\n)"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "as",
          "type": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<unknown, any> | FunctionComponent<unknown>",
          "required": true,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "expandable",
          "type": "boolean",
          "required": false,
          "description": "Displays text as inline block and vertical aligns to the top.",
          "defaultValue": "false"
        },
        {
          "name": "inline",
          "type": "boolean",
          "required": false,
          "description": "Displays text as inline block and vertical aligns to the top.",
          "defaultValue": "false"
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        },
        {
          "name": "title",
          "type": "string",
          "required": false,
          "description": "@deprecated use children instead",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "underline_nav": {
      "id": "underline_nav",
      "name": "UnderlineNav",
      "status": "beta",
      "a11yReviewed": true,
      "stories": [
        {
          "id": "components-underlinenav--default",
          "code": "() => {\n  const children = ['Code', 'Pull requests', 'Actions', 'Projects', 'Wiki']\n  return (\n    <UnderlineNav aria-label=\"Repository\">\n      {children.map((child: string, index: number) => (\n        <UnderlineNavItem\n          key={index}\n          href=\"#\"\n          aria-current={index === 0 ? 'page' : undefined}\n        >\n          {child}\n        </UnderlineNavItem>\n      ))}\n    </UnderlineNav>\n  )\n}"
        },
        {
          "id": "components-underlinenav-features--default",
          "code": "() => {\n  return (\n    <UnderlineNav aria-label=\"Repository\">\n      <UnderlineNav.Item aria-current=\"page\">Code</UnderlineNav.Item>\n      <UnderlineNav.Item>Issues</UnderlineNav.Item>\n      <UnderlineNav.Item>Pull Requests</UnderlineNav.Item>\n    </UnderlineNav>\n  )\n}"
        },
        {
          "id": "components-underlinenav-features--with-icons",
          "code": "() => {\n  return (\n    <UnderlineNav aria-label=\"Repository with icons\">\n      <UnderlineNav.Item icon={<CodeIcon />}>Code</UnderlineNav.Item>\n      <UnderlineNav.Item icon={<EyeIcon />} counter={6}>\n        Issues\n      </UnderlineNav.Item>\n      <UnderlineNav.Item aria-current=\"page\" icon={<GitPullRequestIcon />}>\n        Pull Requests\n      </UnderlineNav.Item>\n      <UnderlineNav.Item icon={<CommentDiscussionIcon />} counter={7}>\n        Discussions\n      </UnderlineNav.Item>\n      <UnderlineNav.Item icon={<ProjectIcon />}>Projects</UnderlineNav.Item>\n    </UnderlineNav>\n  )\n}"
        },
        {
          "id": "components-underlinenav-features--with-counter-labels",
          "code": "() => {\n  return (\n    <UnderlineNav aria-label=\"Repository with counters\">\n      <UnderlineNav.Item aria-current=\"page\" icon={<CodeIcon />} counter=\"11K\">\n        Code\n      </UnderlineNav.Item>\n      <UnderlineNav.Item icon={<IssueOpenedIcon />} counter={12}>\n        Issues\n      </UnderlineNav.Item>\n    </UnderlineNav>\n  )\n}"
        },
        {
          "id": "components-underlinenav-features--overflow-template",
          "code": "({ initialSelectedIndex = 1 }: { initialSelectedIndex?: number }) => {\n  const [selectedIndex, setSelectedIndex] = React.useState<number | null>(\n    initialSelectedIndex,\n  )\n  return (\n    <UnderlineNav\n      aria-label=\"Repository\"\n      // @ts-ignore UnderlineNav does not take selectionVariant prop, but we need to pass it to the underlying ActionList so it doesn't show Selections.\n      selectionVariant={undefined}\n    >\n      {items.map((item, index) => (\n        <UnderlineNav.Item\n          key={item.navigation}\n          icon={item.icon}\n          aria-current={index === selectedIndex ? 'page' : undefined}\n          // Set so that navigation in interaction tests does not cause the\n          // page to load the storybook iframe URL and instead keeps the test in\n          // the local preview\n          target=\"_self\"\n          onSelect={(event) => {\n            event.preventDefault()\n            setSelectedIndex(index)\n          }}\n          counter={item.counter}\n          href={item.href}\n        >\n          {item.navigation}\n        </UnderlineNav.Item>\n      ))}\n    </UnderlineNav>\n  )\n}"
        },
        {
          "id": "components-underlinenav-features--overflow-on-narrow-screen",
          "code": "() => {\n  return <OverflowTemplate initialSelectedIndex={1} />\n}"
        },
        {
          "id": "components-underlinenav-features--counters-loading-state",
          "code": "() => {\n  const [selectedIndex, setSelectedIndex] = React.useState<number | null>(1)\n  return (\n    <UnderlineNav\n      aria-label=\"Repository with loading counters\"\n      loadingCounters={true}\n    >\n      {items.map((item, index) => (\n        <UnderlineNav.Item\n          key={item.navigation}\n          icon={item.icon}\n          aria-current={index === selectedIndex ? 'page' : undefined}\n          onSelect={() => setSelectedIndex(index)}\n          counter={item.counter}\n        >\n          {item.navigation}\n        </UnderlineNav.Item>\n      ))}\n    </UnderlineNav>\n  )\n}"
        }
      ],
      "importPath": "@primer/react",
      "props": [
        {
          "name": "children",
          "type": "ReactNode",
          "required": true,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "aria-label",
          "type": "string",
          "required": false,
          "description": "A unique name for the rendered 'nav' landmark. It will also be used to label the arrow\\nbuttons that control the scroll behaviour on coarse pointer devices. (I.e.\\n'Scroll ${aria-label} left/right')\\n",
          "defaultValue": ""
        },
        {
          "name": "as",
          "type": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
          "required": false,
          "description": "",
          "defaultValue": "nav"
        },
        {
          "name": "loadingCounters",
          "type": "boolean",
          "required": false,
          "description": "Whether the navigation items are in loading state. Component waits for all the counters to finish loading to prevent multiple layout shifts.",
          "defaultValue": false
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "",
          "defaultValue": ""
        }
      ],
      "subcomponents": [
        {
          "name": "UnderlineNav.Item",
          "props": [
            {
              "name": "aria-current",
              "type": "false | true | \"time\" | \"step\" | \"date\" | \"true\" | \"false\" | \"page\" | \"location\"",
              "required": false,
              "description": "Is `UnderlineNav.Item` current page?",
              "defaultValue": ""
            },
            {
              "name": "as",
              "type": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> & \"symbol\" | FunctionComponent<any> & \"symbol\" | \"h1\" & ComponentClass<unknown, any> | \"h1\" & FunctionComponent<unknown> | \"h2\" & ComponentClass<unknown, any> | \"h2\" & FunctionComponent<unknown> | \"h3\" & ComponentClass<unknown, any> | \"h3\" & FunctionComponent<unknown> | \"h4\" & ComponentClass<unknown, any> | \"h4\" & FunctionComponent<unknown> | \"h5\" & ComponentClass<unknown, any> | \"h5\" & FunctionComponent<unknown> | \"h6\" & ComponentClass<unknown, any> | \"h6\" & FunctionComponent<unknown> | \"button\" & ComponentClass<unknown, any> | \"button\" & FunctionComponent<unknown> | \"a\" & ComponentClass<unknown, any> | \"a\" & FunctionComponent<unknown> | \"symbol\" & ComponentClass<any, any> | \"symbol\" & FunctionComponent<any> | \"object\" & ComponentClass<any, any> | \"object\" & FunctionComponent<any> | \"a\" & ComponentClass<any, any> | \"a\" & FunctionComponent<any> | \"abbr\" & ComponentClass<any, any> | \"abbr\" & FunctionComponent<any> | \"address\" & ComponentClass<any, any> | \"address\" & FunctionComponent<any> | \"area\" & ComponentClass<any, any> | \"area\" & FunctionComponent<any> | \"article\" & ComponentClass<any, any> | \"article\" & FunctionComponent<any> | \"aside\" & ComponentClass<any, any> | \"aside\" & FunctionComponent<any> | \"audio\" & ComponentClass<any, any> | \"audio\" & FunctionComponent<any> | \"b\" & ComponentClass<any, any> | \"b\" & FunctionComponent<any> | \"base\" & ComponentClass<any, any> | \"base\" & FunctionComponent<any> | \"bdi\" & ComponentClass<any, any> | \"bdi\" & FunctionComponent<any> | \"bdo\" & ComponentClass<any, any> | \"bdo\" & FunctionComponent<any> | \"big\" & ComponentClass<any, any> | \"big\" & FunctionComponent<any> | \"blockquote\" & ComponentClass<any, any> | \"blockquote\" & FunctionComponent<any> | \"body\" & ComponentClass<any, any> | \"body\" & FunctionComponent<any> | \"br\" & ComponentClass<any, any> | \"br\" & FunctionComponent<any> | \"button\" & ComponentClass<any, any> | \"button\" & FunctionComponent<any> | \"canvas\" & ComponentClass<any, any> | \"canvas\" & FunctionComponent<any> | \"caption\" & ComponentClass<any, any> | \"caption\" & FunctionComponent<any> | \"center\" & ComponentClass<any, any> | \"center\" & FunctionComponent<any> | \"cite\" & ComponentClass<any, any> | \"cite\" & FunctionComponent<any> | \"code\" & ComponentClass<any, any> | \"code\" & FunctionComponent<any> | \"col\" & ComponentClass<any, any> | \"col\" & FunctionComponent<any> | \"colgroup\" & ComponentClass<any, any> | \"colgroup\" & FunctionComponent<any> | \"data\" & ComponentClass<any, any> | \"data\" & FunctionComponent<any> | \"datalist\" & ComponentClass<any, any> | \"datalist\" & FunctionComponent<any> | \"dd\" & ComponentClass<any, any> | \"dd\" & FunctionComponent<any> | \"del\" & ComponentClass<any, any> | \"del\" & FunctionComponent<any> | \"details\" & ComponentClass<any, any> | \"details\" & FunctionComponent<any> | \"dfn\" & ComponentClass<any, any> | \"dfn\" & FunctionComponent<any> | \"dialog\" & ComponentClass<any, any> | \"dialog\" & FunctionComponent<any> | \"div\" & ComponentClass<any, any> | \"div\" & FunctionComponent<any> | \"dl\" & ComponentClass<any, any> | \"dl\" & FunctionComponent<any> | \"dt\" & ComponentClass<any, any> | \"dt\" & FunctionComponent<any> | \"em\" & ComponentClass<any, any> | \"em\" & FunctionComponent<any> | \"embed\" & ComponentClass<any, any> | \"embed\" & FunctionComponent<any> | \"fieldset\" & ComponentClass<any, any> | \"fieldset\" & FunctionComponent<any> | \"figcaption\" & ComponentClass<any, any> | \"figcaption\" & FunctionComponent<any> | \"figure\" & ComponentClass<any, any> | \"figure\" & FunctionComponent<any> | \"footer\" & ComponentClass<any, any> | \"footer\" & FunctionComponent<any> | \"form\" & ComponentClass<any, any> | \"form\" & FunctionComponent<any> | \"h1\" & ComponentClass<any, any> | \"h1\" & FunctionComponent<any> | \"h2\" & ComponentClass<any, any> | \"h2\" & FunctionComponent<any> | \"h3\" & ComponentClass<any, any> | \"h3\" & FunctionComponent<any> | \"h4\" & ComponentClass<any, any> | \"h4\" & FunctionComponent<any> | \"h5\" & ComponentClass<any, any> | \"h5\" & FunctionComponent<any> | \"h6\" & ComponentClass<any, any> | \"h6\" & FunctionComponent<any> | \"head\" & ComponentClass<any, any> | \"head\" & FunctionComponent<any> | \"header\" & ComponentClass<any, any> | \"header\" & FunctionComponent<any> | \"hgroup\" & ComponentClass<any, any> | \"hgroup\" & FunctionComponent<any> | \"hr\" & ComponentClass<any, any> | \"hr\" & FunctionComponent<any> | \"html\" & ComponentClass<any, any> | \"html\" & FunctionComponent<any> | \"i\" & ComponentClass<any, any> | \"i\" & FunctionComponent<any> | \"iframe\" & ComponentClass<any, any> | \"iframe\" & FunctionComponent<any> | \"img\" & ComponentClass<any, any> | \"img\" & FunctionComponent<any> | \"input\" & ComponentClass<any, any> | \"input\" & FunctionComponent<any> | \"ins\" & ComponentClass<any, any> | \"ins\" & FunctionComponent<any> | \"kbd\" & ComponentClass<any, any> | \"kbd\" & FunctionComponent<any> | \"keygen\" & ComponentClass<any, any> | \"keygen\" & FunctionComponent<any> | \"label\" & ComponentClass<any, any> | \"label\" & FunctionComponent<any> | \"legend\" & ComponentClass<any, any> | \"legend\" & FunctionComponent<any> | \"li\" & ComponentClass<any, any> | \"li\" & FunctionComponent<any> | \"link\" & ComponentClass<any, any> | \"link\" & FunctionComponent<any> | \"main\" & ComponentClass<any, any> | \"main\" & FunctionComponent<any> | \"map\" & ComponentClass<any, any> | \"map\" & FunctionComponent<any> | \"mark\" & ComponentClass<any, any> | \"mark\" & FunctionComponent<any> | \"menu\" & ComponentClass<any, any> | \"menu\" & FunctionComponent<any> | \"menuitem\" & ComponentClass<any, any> | \"menuitem\" & FunctionComponent<any> | \"meta\" & ComponentClass<any, any> | \"meta\" & FunctionComponent<any> | \"meter\" & ComponentClass<any, any> | \"meter\" & FunctionComponent<any> | \"nav\" & ComponentClass<any, any> | \"nav\" & FunctionComponent<any> | \"noindex\" & ComponentClass<any, any> | \"noindex\" & FunctionComponent<any> | \"noscript\" & ComponentClass<any, any> | \"noscript\" & FunctionComponent<any> | \"ol\" & ComponentClass<any, any> | \"ol\" & FunctionComponent<any> | \"optgroup\" & ComponentClass<any, any> | \"optgroup\" & FunctionComponent<any> | \"option\" & ComponentClass<any, any> | \"option\" & FunctionComponent<any> | \"output\" & ComponentClass<any, any> | \"output\" & FunctionComponent<any> | \"p\" & ComponentClass<any, any> | \"p\" & FunctionComponent<any> | \"param\" & ComponentClass<any, any> | \"param\" & FunctionComponent<any> | \"picture\" & ComponentClass<any, any> | \"picture\" & FunctionComponent<any> | \"pre\" & ComponentClass<any, any> | \"pre\" & FunctionComponent<any> | \"progress\" & ComponentClass<any, any> | \"progress\" & FunctionComponent<any> | \"q\" & ComponentClass<any, any> | \"q\" & FunctionComponent<any> | \"rp\" & ComponentClass<any, any> | \"rp\" & FunctionComponent<any> | \"rt\" & ComponentClass<any, any> | \"rt\" & FunctionComponent<any> | \"ruby\" & ComponentClass<any, any> | \"ruby\" & FunctionComponent<any> | \"s\" & ComponentClass<any, any> | \"s\" & FunctionComponent<any> | \"samp\" & ComponentClass<any, any> | \"samp\" & FunctionComponent<any> | \"search\" & ComponentClass<any, any> | \"search\" & FunctionComponent<any> | \"slot\" & ComponentClass<any, any> | \"slot\" & FunctionComponent<any> | \"script\" & ComponentClass<any, any> | \"script\" & FunctionComponent<any> | \"section\" & ComponentClass<any, any> | \"section\" & FunctionComponent<any> | \"select\" & ComponentClass<any, any> | \"select\" & FunctionComponent<any> | \"small\" & ComponentClass<any, any> | \"small\" & FunctionComponent<any> | \"source\" & ComponentClass<any, any> | \"source\" & FunctionComponent<any> | \"span\" & ComponentClass<any, any> | \"span\" & FunctionComponent<any> | \"strong\" & ComponentClass<any, any> | \"strong\" & FunctionComponent<any> | \"style\" & ComponentClass<any, any> | \"style\" & FunctionComponent<any> | \"sub\" & ComponentClass<any, any> | \"sub\" & FunctionComponent<any> | \"summary\" & ComponentClass<any, any> | \"summary\" & FunctionComponent<any> | \"sup\" & ComponentClass<any, any> | \"sup\" & FunctionComponent<any> | \"table\" & ComponentClass<any, any> | \"table\" & FunctionComponent<any> | \"template\" & ComponentClass<any, any> | \"template\" & FunctionComponent<any> | \"tbody\" & ComponentClass<any, any> | \"tbody\" & FunctionComponent<any> | \"td\" & ComponentClass<any, any> | \"td\" & FunctionComponent<any> | \"textarea\" & ComponentClass<any, any> | \"textarea\" & FunctionComponent<any> | \"tfoot\" & ComponentClass<any, any> | \"tfoot\" & FunctionComponent<any> | \"th\" & ComponentClass<any, any> | \"th\" & FunctionComponent<any> | \"thead\" & ComponentClass<any, any> | \"thead\" & FunctionComponent<any> | \"time\" & ComponentClass<any, any> | \"time\" & FunctionComponent<any> | \"title\" & ComponentClass<any, any> | \"title\" & FunctionComponent<any> | \"tr\" & ComponentClass<any, any> | \"tr\" & FunctionComponent<any> | \"track\" & ComponentClass<any, any> | \"track\" & FunctionComponent<any> | \"u\" & ComponentClass<any, any> | \"u\" & FunctionComponent<any> | \"ul\" & ComponentClass<any, any> | \"ul\" & FunctionComponent<any> | \"var\" & ComponentClass<any, any> | \"var\" & FunctionComponent<any> | \"video\" & ComponentClass<any, any> | \"video\" & FunctionComponent<any> | \"wbr\" & ComponentClass<any, any> | \"wbr\" & FunctionComponent<any> | \"webview\" & ComponentClass<any, any> | \"webview\" & FunctionComponent<any> | \"svg\" & ComponentClass<any, any> | \"svg\" & FunctionComponent<any> | \"animate\" & ComponentClass<any, any> | \"animate\" & FunctionComponent<any> | \"animateMotion\" & ComponentClass<any, any> | \"animateMotion\" & FunctionComponent<any> | \"animateTransform\" & ComponentClass<any, any> | \"animateTransform\" & FunctionComponent<any> | \"circle\" & ComponentClass<any, any> | \"circle\" & FunctionComponent<any> | \"clipPath\" & ComponentClass<any, any> | \"clipPath\" & FunctionComponent<any> | \"defs\" & ComponentClass<any, any> | \"defs\" & FunctionComponent<any> | \"desc\" & ComponentClass<any, any> | \"desc\" & FunctionComponent<any> | \"ellipse\" & ComponentClass<any, any> | \"ellipse\" & FunctionComponent<any> | \"feBlend\" & ComponentClass<any, any> | \"feBlend\" & FunctionComponent<any> | \"feColorMatrix\" & ComponentClass<any, any> | \"feColorMatrix\" & FunctionComponent<any> | \"feComponentTransfer\" & ComponentClass<any, any> | \"feComponentTransfer\" & FunctionComponent<any> | \"feComposite\" & ComponentClass<any, any> | \"feComposite\" & FunctionComponent<any> | \"feConvolveMatrix\" & ComponentClass<any, any> | \"feConvolveMatrix\" & FunctionComponent<any> | \"feDiffuseLighting\" & ComponentClass<any, any> | \"feDiffuseLighting\" & FunctionComponent<any> | \"feDisplacementMap\" & ComponentClass<any, any> | \"feDisplacementMap\" & FunctionComponent<any> | \"feDistantLight\" & ComponentClass<any, any> | \"feDistantLight\" & FunctionComponent<any> | \"feDropShadow\" & ComponentClass<any, any> | \"feDropShadow\" & FunctionComponent<any> | \"feFlood\" & ComponentClass<any, any> | \"feFlood\" & FunctionComponent<any> | \"feFuncA\" & ComponentClass<any, any> | \"feFuncA\" & FunctionComponent<any> | \"feFuncB\" & ComponentClass<any, any> | \"feFuncB\" & FunctionComponent<any> | \"feFuncG\" & ComponentClass<any, any> | \"feFuncG\" & FunctionComponent<any> | \"feFuncR\" & ComponentClass<any, any> | \"feFuncR\" & FunctionComponent<any> | \"feGaussianBlur\" & ComponentClass<any, any> | \"feGaussianBlur\" & FunctionComponent<any> | \"feImage\" & ComponentClass<any, any> | \"feImage\" & FunctionComponent<any> | \"feMerge\" & ComponentClass<any, any> | \"feMerge\" & FunctionComponent<any> | \"feMergeNode\" & ComponentClass<any, any> | \"feMergeNode\" & FunctionComponent<any> | \"feMorphology\" & ComponentClass<any, any> | \"feMorphology\" & FunctionComponent<any> | \"feOffset\" & ComponentClass<any, any> | \"feOffset\" & FunctionComponent<any> | \"fePointLight\" & ComponentClass<any, any> | \"fePointLight\" & FunctionComponent<any> | \"feSpecularLighting\" & ComponentClass<any, any> | \"feSpecularLighting\" & FunctionComponent<any> | \"feSpotLight\" & ComponentClass<any, any> | \"feSpotLight\" & FunctionComponent<any> | \"feTile\" & ComponentClass<any, any> | \"feTile\" & FunctionComponent<any> | \"feTurbulence\" & ComponentClass<any, any> | \"feTurbulence\" & FunctionComponent<any> | \"filter\" & ComponentClass<any, any> | \"filter\" & FunctionComponent<any> | \"foreignObject\" & ComponentClass<any, any> | \"foreignObject\" & FunctionComponent<any> | \"g\" & ComponentClass<any, any> | \"g\" & FunctionComponent<any> | \"image\" & ComponentClass<any, any> | \"image\" & FunctionComponent<any> | \"line\" & ComponentClass<any, any> | \"line\" & FunctionComponent<any> | \"linearGradient\" & ComponentClass<any, any> | \"linearGradient\" & FunctionComponent<any> | \"marker\" & ComponentClass<any, any> | \"marker\" & FunctionComponent<any> | \"mask\" & ComponentClass<any, any> | \"mask\" & FunctionComponent<any> | \"metadata\" & ComponentClass<any, any> | \"metadata\" & FunctionComponent<any> | \"mpath\" & ComponentClass<any, any> | \"mpath\" & FunctionComponent<any> | \"path\" & ComponentClass<any, any> | \"path\" & FunctionComponent<any> | \"pattern\" & ComponentClass<any, any> | \"pattern\" & FunctionComponent<any> | \"polygon\" & ComponentClass<any, any> | \"polygon\" & FunctionComponent<any> | \"polyline\" & ComponentClass<any, any> | \"polyline\" & FunctionComponent<any> | \"radialGradient\" & ComponentClass<any, any> | \"radialGradient\" & FunctionComponent<any> | \"rect\" & ComponentClass<any, any> | \"rect\" & FunctionComponent<any> | \"set\" & ComponentClass<any, any> | \"set\" & FunctionComponent<any> | \"stop\" & ComponentClass<any, any> | \"stop\" & FunctionComponent<any> | \"switch\" & ComponentClass<any, any> | \"switch\" & FunctionComponent<any> | \"text\" & ComponentClass<any, any> | \"text\" & FunctionComponent<any> | \"textPath\" & ComponentClass<any, any> | \"textPath\" & FunctionComponent<any> | \"tspan\" & ComponentClass<any, any> | \"tspan\" & FunctionComponent<any> | \"use\" & ComponentClass<any, any> | \"use\" & FunctionComponent<any> | \"view\" & ComponentClass<any, any> | \"view\" & FunctionComponent<any> | \"relative-time\" & ComponentClass<any, any> | \"relative-time\" & FunctionComponent<any> | \"tab-container\" & ComponentClass<any, any> | \"tab-container\" & FunctionComponent<any> | ComponentClass<any, any> & ComponentClass<unknown, any> | ComponentClass<any, any> & FunctionComponent<unknown> | FunctionComponent<any> & ComponentClass<unknown, any> | FunctionComponent<any> & FunctionComponent<unknown> | ComponentClass<any, any> & \"object\" | ComponentClass<any, any> & \"a\" | ComponentClass<any, any> & \"abbr\" | ComponentClass<any, any> & \"address\" | ComponentClass<any, any> & \"area\" | ComponentClass<any, any> & \"article\" | ComponentClass<any, any> & \"aside\" | ComponentClass<any, any> & \"audio\" | ComponentClass<any, any> & \"b\" | ComponentClass<any, any> & \"base\" | ComponentClass<any, any> & \"bdi\" | ComponentClass<any, any> & \"bdo\" | ComponentClass<any, any> & \"big\" | ComponentClass<any, any> & \"blockquote\" | ComponentClass<any, any> & \"body\" | ComponentClass<any, any> & \"br\" | ComponentClass<any, any> & \"button\" | ComponentClass<any, any> & \"canvas\" | ComponentClass<any, any> & \"caption\" | ComponentClass<any, any> & \"center\" | ComponentClass<any, any> & \"cite\" | ComponentClass<any, any> & \"code\" | ComponentClass<any, any> & \"col\" | ComponentClass<any, any> & \"colgroup\" | ComponentClass<any, any> & \"data\" | ComponentClass<any, any> & \"datalist\" | ComponentClass<any, any> & \"dd\" | ComponentClass<any, any> & \"del\" | ComponentClass<any, any> & \"details\" | ComponentClass<any, any> & \"dfn\" | ComponentClass<any, any> & \"dialog\" | ComponentClass<any, any> & \"div\" | ComponentClass<any, any> & \"dl\" | ComponentClass<any, any> & \"dt\" | ComponentClass<any, any> & \"em\" | ComponentClass<any, any> & \"embed\" | ComponentClass<any, any> & \"fieldset\" | ComponentClass<any, any> & \"figcaption\" | ComponentClass<any, any> & \"figure\" | ComponentClass<any, any> & \"footer\" | ComponentClass<any, any> & \"form\" | ComponentClass<any, any> & \"h1\" | ComponentClass<any, any> & \"h2\" | ComponentClass<any, any> & \"h3\" | ComponentClass<any, any> & \"h4\" | ComponentClass<any, any> & \"h5\" | ComponentClass<any, any> & \"h6\" | ComponentClass<any, any> & \"head\" | ComponentClass<any, any> & \"header\" | ComponentClass<any, any> & \"hgroup\" | ComponentClass<any, any> & \"hr\" | ComponentClass<any, any> & \"html\" | ComponentClass<any, any> & \"i\" | ComponentClass<any, any> & \"iframe\" | ComponentClass<any, any> & \"img\" | ComponentClass<any, any> & \"input\" | ComponentClass<any, any> & \"ins\" | ComponentClass<any, any> & \"kbd\" | ComponentClass<any, any> & \"keygen\" | ComponentClass<any, any> & \"label\" | ComponentClass<any, any> & \"legend\" | ComponentClass<any, any> & \"li\" | ComponentClass<any, any> & \"link\" | ComponentClass<any, any> & \"main\" | ComponentClass<any, any> & \"map\" | ComponentClass<any, any> & \"mark\" | ComponentClass<any, any> & \"menu\" | ComponentClass<any, any> & \"menuitem\" | ComponentClass<any, any> & \"meta\" | ComponentClass<any, any> & \"meter\" | ComponentClass<any, any> & \"nav\" | ComponentClass<any, any> & \"noindex\" | ComponentClass<any, any> & \"noscript\" | ComponentClass<any, any> & \"ol\" | ComponentClass<any, any> & \"optgroup\" | ComponentClass<any, any> & \"option\" | ComponentClass<any, any> & \"output\" | ComponentClass<any, any> & \"p\" | ComponentClass<any, any> & \"param\" | ComponentClass<any, any> & \"picture\" | ComponentClass<any, any> & \"pre\" | ComponentClass<any, any> & \"progress\" | ComponentClass<any, any> & \"q\" | ComponentClass<any, any> & \"rp\" | ComponentClass<any, any> & \"rt\" | ComponentClass<any, any> & \"ruby\" | ComponentClass<any, any> & \"s\" | ComponentClass<any, any> & \"samp\" | ComponentClass<any, any> & \"search\" | ComponentClass<any, any> & \"slot\" | ComponentClass<any, any> & \"script\" | ComponentClass<any, any> & \"section\" | ComponentClass<any, any> & \"select\" | ComponentClass<any, any> & \"small\" | ComponentClass<any, any> & \"source\" | ComponentClass<any, any> & \"span\" | ComponentClass<any, any> & \"strong\" | ComponentClass<any, any> & \"style\" | ComponentClass<any, any> & \"sub\" | ComponentClass<any, any> & \"summary\" | ComponentClass<any, any> & \"sup\" | ComponentClass<any, any> & \"table\" | ComponentClass<any, any> & \"template\" | ComponentClass<any, any> & \"tbody\" | ComponentClass<any, any> & \"td\" | ComponentClass<any, any> & \"textarea\" | ComponentClass<any, any> & \"tfoot\" | ComponentClass<any, any> & \"th\" | ComponentClass<any, any> & \"thead\" | ComponentClass<any, any> & \"time\" | ComponentClass<any, any> & \"title\" | ComponentClass<any, any> & \"tr\" | ComponentClass<any, any> & \"track\" | ComponentClass<any, any> & \"u\" | ComponentClass<any, any> & \"ul\" | ComponentClass<any, any> & \"var\" | ComponentClass<any, any> & \"video\" | ComponentClass<any, any> & \"wbr\" | ComponentClass<any, any> & \"webview\" | ComponentClass<any, any> & \"svg\" | ComponentClass<any, any> & \"animate\" | ComponentClass<any, any> & \"animateMotion\" | ComponentClass<any, any> & \"animateTransform\" | ComponentClass<any, any> & \"circle\" | ComponentClass<any, any> & \"clipPath\" | ComponentClass<any, any> & \"defs\" | ComponentClass<any, any> & \"desc\" | ComponentClass<any, any> & \"ellipse\" | ComponentClass<any, any> & \"feBlend\" | ComponentClass<any, any> & \"feColorMatrix\" | ComponentClass<any, any> & \"feComponentTransfer\" | ComponentClass<any, any> & \"feComposite\" | ComponentClass<any, any> & \"feConvolveMatrix\" | ComponentClass<any, any> & \"feDiffuseLighting\" | ComponentClass<any, any> & \"feDisplacementMap\" | ComponentClass<any, any> & \"feDistantLight\" | ComponentClass<any, any> & \"feDropShadow\" | ComponentClass<any, any> & \"feFlood\" | ComponentClass<any, any> & \"feFuncA\" | ComponentClass<any, any> & \"feFuncB\" | ComponentClass<any, any> & \"feFuncG\" | ComponentClass<any, any> & \"feFuncR\" | ComponentClass<any, any> & \"feGaussianBlur\" | ComponentClass<any, any> & \"feImage\" | ComponentClass<any, any> & \"feMerge\" | ComponentClass<any, any> & \"feMergeNode\" | ComponentClass<any, any> & \"feMorphology\" | ComponentClass<any, any> & \"feOffset\" | ComponentClass<any, any> & \"fePointLight\" | ComponentClass<any, any> & \"feSpecularLighting\" | ComponentClass<any, any> & \"feSpotLight\" | ComponentClass<any, any> & \"feTile\" | ComponentClass<any, any> & \"feTurbulence\" | ComponentClass<any, any> & \"filter\" | ComponentClass<any, any> & \"foreignObject\" | ComponentClass<any, any> & \"g\" | ComponentClass<any, any> & \"image\" | ComponentClass<any, any> & \"line\" | ComponentClass<any, any> & \"linearGradient\" | ComponentClass<any, any> & \"marker\" | ComponentClass<any, any> & \"mask\" | ComponentClass<any, any> & \"metadata\" | ComponentClass<any, any> & \"mpath\" | ComponentClass<any, any> & \"path\" | ComponentClass<any, any> & \"pattern\" | ComponentClass<any, any> & \"polygon\" | ComponentClass<any, any> & \"polyline\" | ComponentClass<any, any> & \"radialGradient\" | ComponentClass<any, any> & \"rect\" | ComponentClass<any, any> & \"set\" | ComponentClass<any, any> & \"stop\" | ComponentClass<any, any> & \"switch\" | ComponentClass<any, any> & \"text\" | ComponentClass<any, any> & \"textPath\" | ComponentClass<any, any> & \"tspan\" | ComponentClass<any, any> & \"use\" | ComponentClass<any, any> & \"view\" | ComponentClass<any, any> & \"relative-time\" | ComponentClass<any, any> & \"tab-container\" | FunctionComponent<any> & \"object\" | FunctionComponent<any> & \"a\" | FunctionComponent<any> & \"abbr\" | FunctionComponent<any> & \"address\" | FunctionComponent<any> & \"area\" | FunctionComponent<any> & \"article\" | FunctionComponent<any> & \"aside\" | FunctionComponent<any> & \"audio\" | FunctionComponent<any> & \"b\" | FunctionComponent<any> & \"base\" | FunctionComponent<any> & \"bdi\" | FunctionComponent<any> & \"bdo\" | FunctionComponent<any> & \"big\" | FunctionComponent<any> & \"blockquote\" | FunctionComponent<any> & \"body\" | FunctionComponent<any> & \"br\" | FunctionComponent<any> & \"button\" | FunctionComponent<any> & \"canvas\" | FunctionComponent<any> & \"caption\" | FunctionComponent<any> & \"center\" | FunctionComponent<any> & \"cite\" | FunctionComponent<any> & \"code\" | FunctionComponent<any> & \"col\" | FunctionComponent<any> & \"colgroup\" | FunctionComponent<any> & \"data\" | FunctionComponent<any> & \"datalist\" | FunctionComponent<any> & \"dd\" | FunctionComponent<any> & \"del\" | FunctionComponent<any> & \"details\" | FunctionComponent<any> & \"dfn\" | FunctionComponent<any> & \"dialog\" | FunctionComponent<any> & \"div\" | FunctionComponent<any> & \"dl\" | FunctionComponent<any> & \"dt\" | FunctionComponent<any> & \"em\" | FunctionComponent<any> & \"embed\" | FunctionComponent<any> & \"fieldset\" | FunctionComponent<any> & \"figcaption\" | FunctionComponent<any> & \"figure\" | FunctionComponent<any> & \"footer\" | FunctionComponent<any> & \"form\" | FunctionComponent<any> & \"h1\" | FunctionComponent<any> & \"h2\" | FunctionComponent<any> & \"h3\" | FunctionComponent<any> & \"h4\" | FunctionComponent<any> & \"h5\" | FunctionComponent<any> & \"h6\" | FunctionComponent<any> & \"head\" | FunctionComponent<any> & \"header\" | FunctionComponent<any> & \"hgroup\" | FunctionComponent<any> & \"hr\" | FunctionComponent<any> & \"html\" | FunctionComponent<any> & \"i\" | FunctionComponent<any> & \"iframe\" | FunctionComponent<any> & \"img\" | FunctionComponent<any> & \"input\" | FunctionComponent<any> & \"ins\" | FunctionComponent<any> & \"kbd\" | FunctionComponent<any> & \"keygen\" | FunctionComponent<any> & \"label\" | FunctionComponent<any> & \"legend\" | FunctionComponent<any> & \"li\" | FunctionComponent<any> & \"link\" | FunctionComponent<any> & \"main\" | FunctionComponent<any> & \"map\" | FunctionComponent<any> & \"mark\" | FunctionComponent<any> & \"menu\" | FunctionComponent<any> & \"menuitem\" | FunctionComponent<any> & \"meta\" | FunctionComponent<any> & \"meter\" | FunctionComponent<any> & \"nav\" | FunctionComponent<any> & \"noindex\" | FunctionComponent<any> & \"noscript\" | FunctionComponent<any> & \"ol\" | FunctionComponent<any> & \"optgroup\" | FunctionComponent<any> & \"option\" | FunctionComponent<any> & \"output\" | FunctionComponent<any> & \"p\" | FunctionComponent<any> & \"param\" | FunctionComponent<any> & \"picture\" | FunctionComponent<any> & \"pre\" | FunctionComponent<any> & \"progress\" | FunctionComponent<any> & \"q\" | FunctionComponent<any> & \"rp\" | FunctionComponent<any> & \"rt\" | FunctionComponent<any> & \"ruby\" | FunctionComponent<any> & \"s\" | FunctionComponent<any> & \"samp\" | FunctionComponent<any> & \"search\" | FunctionComponent<any> & \"slot\" | FunctionComponent<any> & \"script\" | FunctionComponent<any> & \"section\" | FunctionComponent<any> & \"select\" | FunctionComponent<any> & \"small\" | FunctionComponent<any> & \"source\" | FunctionComponent<any> & \"span\" | FunctionComponent<any> & \"strong\" | FunctionComponent<any> & \"style\" | FunctionComponent<any> & \"sub\" | FunctionComponent<any> & \"summary\" | FunctionComponent<any> & \"sup\" | FunctionComponent<any> & \"table\" | FunctionComponent<any> & \"template\" | FunctionComponent<any> & \"tbody\" | FunctionComponent<any> & \"td\" | FunctionComponent<any> & \"textarea\" | FunctionComponent<any> & \"tfoot\" | FunctionComponent<any> & \"th\" | FunctionComponent<any> & \"thead\" | FunctionComponent<any> & \"time\" | FunctionComponent<any> & \"title\" | FunctionComponent<any> & \"tr\" | FunctionComponent<any> & \"track\" | FunctionComponent<any> & \"u\" | FunctionComponent<any> & \"ul\" | FunctionComponent<any> & \"var\" | FunctionComponent<any> & \"video\" | FunctionComponent<any> & \"wbr\" | FunctionComponent<any> & \"webview\" | FunctionComponent<any> & \"svg\" | FunctionComponent<any> & \"animate\" | FunctionComponent<any> & \"animateMotion\" | FunctionComponent<any> & \"animateTransform\" | FunctionComponent<any> & \"circle\" | FunctionComponent<any> & \"clipPath\" | FunctionComponent<any> & \"defs\" | FunctionComponent<any> & \"desc\" | FunctionComponent<any> & \"ellipse\" | FunctionComponent<any> & \"feBlend\" | FunctionComponent<any> & \"feColorMatrix\" | FunctionComponent<any> & \"feComponentTransfer\" | FunctionComponent<any> & \"feComposite\" | FunctionComponent<any> & \"feConvolveMatrix\" | FunctionComponent<any> & \"feDiffuseLighting\" | FunctionComponent<any> & \"feDisplacementMap\" | FunctionComponent<any> & \"feDistantLight\" | FunctionComponent<any> & \"feDropShadow\" | FunctionComponent<any> & \"feFlood\" | FunctionComponent<any> & \"feFuncA\" | FunctionComponent<any> & \"feFuncB\" | FunctionComponent<any> & \"feFuncG\" | FunctionComponent<any> & \"feFuncR\" | FunctionComponent<any> & \"feGaussianBlur\" | FunctionComponent<any> & \"feImage\" | FunctionComponent<any> & \"feMerge\" | FunctionComponent<any> & \"feMergeNode\" | FunctionComponent<any> & \"feMorphology\" | FunctionComponent<any> & \"feOffset\" | FunctionComponent<any> & \"fePointLight\" | FunctionComponent<any> & \"feSpecularLighting\" | FunctionComponent<any> & \"feSpotLight\" | FunctionComponent<any> & \"feTile\" | FunctionComponent<any> & \"feTurbulence\" | FunctionComponent<any> & \"filter\" | FunctionComponent<any> & \"foreignObject\" | FunctionComponent<any> & \"g\" | FunctionComponent<any> & \"image\" | FunctionComponent<any> & \"line\" | FunctionComponent<any> & \"linearGradient\" | FunctionComponent<any> & \"marker\" | FunctionComponent<any> & \"mask\" | FunctionComponent<any> & \"metadata\" | FunctionComponent<any> & \"mpath\" | FunctionComponent<any> & \"path\" | FunctionComponent<any> & \"pattern\" | FunctionComponent<any> & \"polygon\" | FunctionComponent<any> & \"polyline\" | FunctionComponent<any> & \"radialGradient\" | FunctionComponent<any> & \"rect\" | FunctionComponent<any> & \"set\" | FunctionComponent<any> & \"stop\" | FunctionComponent<any> & \"switch\" | FunctionComponent<any> & \"text\" | FunctionComponent<any> & \"textPath\" | FunctionComponent<any> & \"tspan\" | FunctionComponent<any> & \"use\" | FunctionComponent<any> & \"view\" | FunctionComponent<any> & \"relative-time\" | FunctionComponent<any> & \"tab-container\" | \"symbol\" & ComponentClass<unknown, any> | \"symbol\" & FunctionComponent<unknown> | \"object\" & ComponentClass<unknown, any> | \"object\" & FunctionComponent<unknown> | \"abbr\" & ComponentClass<unknown, any> | \"abbr\" & FunctionComponent<unknown> | \"address\" & ComponentClass<unknown, any> | \"address\" & FunctionComponent<unknown> | \"area\" & ComponentClass<unknown, any> | \"area\" & FunctionComponent<unknown> | \"article\" & ComponentClass<unknown, any> | \"article\" & FunctionComponent<unknown> | \"aside\" & ComponentClass<unknown, any> | \"aside\" & FunctionComponent<unknown> | \"audio\" & ComponentClass<unknown, any> | \"audio\" & FunctionComponent<unknown> | \"b\" & ComponentClass<unknown, any> | \"b\" & FunctionComponent<unknown> | \"base\" & ComponentClass<unknown, any> | \"base\" & FunctionComponent<unknown> | \"bdi\" & ComponentClass<unknown, any> | \"bdi\" & FunctionComponent<unknown> | \"bdo\" & ComponentClass<unknown, any> | \"bdo\" & FunctionComponent<unknown> | \"big\" & ComponentClass<unknown, any> | \"big\" & FunctionComponent<unknown> | \"blockquote\" & ComponentClass<unknown, any> | \"blockquote\" & FunctionComponent<unknown> | \"body\" & ComponentClass<unknown, any> | \"body\" & FunctionComponent<unknown> | \"br\" & ComponentClass<unknown, any> | \"br\" & FunctionComponent<unknown> | \"canvas\" & ComponentClass<unknown, any> | \"canvas\" & FunctionComponent<unknown> | \"caption\" & ComponentClass<unknown, any> | \"caption\" & FunctionComponent<unknown> | \"center\" & ComponentClass<unknown, any> | \"center\" & FunctionComponent<unknown> | \"cite\" & ComponentClass<unknown, any> | \"cite\" & FunctionComponent<unknown> | \"code\" & ComponentClass<unknown, any> | \"code\" & FunctionComponent<unknown> | \"col\" & ComponentClass<unknown, any> | \"col\" & FunctionComponent<unknown> | \"colgroup\" & ComponentClass<unknown, any> | \"colgroup\" & FunctionComponent<unknown> | \"data\" & ComponentClass<unknown, any> | \"data\" & FunctionComponent<unknown> | \"datalist\" & ComponentClass<unknown, any> | \"datalist\" & FunctionComponent<unknown> | \"dd\" & ComponentClass<unknown, any> | \"dd\" & FunctionComponent<unknown> | \"del\" & ComponentClass<unknown, any> | \"del\" & FunctionComponent<unknown> | \"details\" & ComponentClass<unknown, any> | \"details\" & FunctionComponent<unknown> | \"dfn\" & ComponentClass<unknown, any> | \"dfn\" & FunctionComponent<unknown> | \"dialog\" & ComponentClass<unknown, any> | \"dialog\" & FunctionComponent<unknown> | \"div\" & ComponentClass<unknown, any> | \"div\" & FunctionComponent<unknown> | \"dl\" & ComponentClass<unknown, any> | \"dl\" & FunctionComponent<unknown> | \"dt\" & ComponentClass<unknown, any> | \"dt\" & FunctionComponent<unknown> | \"em\" & ComponentClass<unknown, any> | \"em\" & FunctionComponent<unknown> | \"embed\" & ComponentClass<unknown, any> | \"embed\" & FunctionComponent<unknown> | \"fieldset\" & ComponentClass<unknown, any> | \"fieldset\" & FunctionComponent<unknown> | \"figcaption\" & ComponentClass<unknown, any> | \"figcaption\" & FunctionComponent<unknown> | \"figure\" & ComponentClass<unknown, any> | \"figure\" & FunctionComponent<unknown> | \"footer\" & ComponentClass<unknown, any> | \"footer\" & FunctionComponent<unknown> | \"form\" & ComponentClass<unknown, any> | \"form\" & FunctionComponent<unknown> | \"head\" & ComponentClass<unknown, any> | \"head\" & FunctionComponent<unknown> | \"header\" & ComponentClass<unknown, any> | \"header\" & FunctionComponent<unknown> | \"hgroup\" & ComponentClass<unknown, any> | \"hgroup\" & FunctionComponent<unknown> | \"hr\" & ComponentClass<unknown, any> | \"hr\" & FunctionComponent<unknown> | \"html\" & ComponentClass<unknown, any> | \"html\" & FunctionComponent<unknown> | \"i\" & ComponentClass<unknown, any> | \"i\" & FunctionComponent<unknown> | \"iframe\" & ComponentClass<unknown, any> | \"iframe\" & FunctionComponent<unknown> | \"img\" & ComponentClass<unknown, any> | \"img\" & FunctionComponent<unknown> | \"input\" & ComponentClass<unknown, any> | \"input\" & FunctionComponent<unknown> | \"ins\" & ComponentClass<unknown, any> | \"ins\" & FunctionComponent<unknown> | \"kbd\" & ComponentClass<unknown, any> | \"kbd\" & FunctionComponent<unknown> | \"keygen\" & ComponentClass<unknown, any> | \"keygen\" & FunctionComponent<unknown> | \"label\" & ComponentClass<unknown, any> | \"label\" & FunctionComponent<unknown> | \"legend\" & ComponentClass<unknown, any> | \"legend\" & FunctionComponent<unknown> | \"li\" & ComponentClass<unknown, any> | \"li\" & FunctionComponent<unknown> | \"link\" & ComponentClass<unknown, any> | \"link\" & FunctionComponent<unknown> | \"main\" & ComponentClass<unknown, any> | \"main\" & FunctionComponent<unknown> | \"map\" & ComponentClass<unknown, any> | \"map\" & FunctionComponent<unknown> | \"mark\" & ComponentClass<unknown, any> | \"mark\" & FunctionComponent<unknown> | \"menu\" & ComponentClass<unknown, any> | \"menu\" & FunctionComponent<unknown> | \"menuitem\" & ComponentClass<unknown, any> | \"menuitem\" & FunctionComponent<unknown> | \"meta\" & ComponentClass<unknown, any> | \"meta\" & FunctionComponent<unknown> | \"meter\" & ComponentClass<unknown, any> | \"meter\" & FunctionComponent<unknown> | \"nav\" & ComponentClass<unknown, any> | \"nav\" & FunctionComponent<unknown> | \"noindex\" & ComponentClass<unknown, any> | \"noindex\" & FunctionComponent<unknown> | \"noscript\" & ComponentClass<unknown, any> | \"noscript\" & FunctionComponent<unknown> | \"ol\" & ComponentClass<unknown, any> | \"ol\" & FunctionComponent<unknown> | \"optgroup\" & ComponentClass<unknown, any> | \"optgroup\" & FunctionComponent<unknown> | \"option\" & ComponentClass<unknown, any> | \"option\" & FunctionComponent<unknown> | \"output\" & ComponentClass<unknown, any> | \"output\" & FunctionComponent<unknown> | \"p\" & ComponentClass<unknown, any> | \"p\" & FunctionComponent<unknown> | \"param\" & ComponentClass<unknown, any> | \"param\" & FunctionComponent<unknown> | \"picture\" & ComponentClass<unknown, any> | \"picture\" & FunctionComponent<unknown> | \"pre\" & ComponentClass<unknown, any> | \"pre\" & FunctionComponent<unknown> | \"progress\" & ComponentClass<unknown, any> | \"progress\" & FunctionComponent<unknown> | \"q\" & ComponentClass<unknown, any> | \"q\" & FunctionComponent<unknown> | \"rp\" & ComponentClass<unknown, any> | \"rp\" & FunctionComponent<unknown> | \"rt\" & ComponentClass<unknown, any> | \"rt\" & FunctionComponent<unknown> | \"ruby\" & ComponentClass<unknown, any> | \"ruby\" & FunctionComponent<unknown> | \"s\" & ComponentClass<unknown, any> | \"s\" & FunctionComponent<unknown> | \"samp\" & ComponentClass<unknown, any> | \"samp\" & FunctionComponent<unknown> | \"search\" & ComponentClass<unknown, any> | \"search\" & FunctionComponent<unknown> | \"slot\" & ComponentClass<unknown, any> | \"slot\" & FunctionComponent<unknown> | \"script\" & ComponentClass<unknown, any> | \"script\" & FunctionComponent<unknown> | \"section\" & ComponentClass<unknown, any> | \"section\" & FunctionComponent<unknown> | \"select\" & ComponentClass<unknown, any> | \"select\" & FunctionComponent<unknown> | \"small\" & ComponentClass<unknown, any> | \"small\" & FunctionComponent<unknown> | \"source\" & ComponentClass<unknown, any> | \"source\" & FunctionComponent<unknown> | \"span\" & ComponentClass<unknown, any> | \"span\" & FunctionComponent<unknown> | \"strong\" & ComponentClass<unknown, any> | \"strong\" & FunctionComponent<unknown> | \"style\" & ComponentClass<unknown, any> | \"style\" & FunctionComponent<unknown> | \"sub\" & ComponentClass<unknown, any> | \"sub\" & FunctionComponent<unknown> | \"summary\" & ComponentClass<unknown, any> | \"summary\" & FunctionComponent<unknown> | \"sup\" & ComponentClass<unknown, any> | \"sup\" & FunctionComponent<unknown> | \"table\" & ComponentClass<unknown, any> | \"table\" & FunctionComponent<unknown> | \"template\" & ComponentClass<unknown, any> | \"template\" & FunctionComponent<unknown> | \"tbody\" & ComponentClass<unknown, any> | \"tbody\" & FunctionComponent<unknown> | \"td\" & ComponentClass<unknown, any> | \"td\" & FunctionComponent<unknown> | \"textarea\" & ComponentClass<unknown, any> | \"textarea\" & FunctionComponent<unknown> | \"tfoot\" & ComponentClass<unknown, any> | \"tfoot\" & FunctionComponent<unknown> | \"th\" & ComponentClass<unknown, any> | \"th\" & FunctionComponent<unknown> | \"thead\" & ComponentClass<unknown, any> | \"thead\" & FunctionComponent<unknown> | \"time\" & ComponentClass<unknown, any> | \"time\" & FunctionComponent<unknown> | \"title\" & ComponentClass<unknown, any> | \"title\" & FunctionComponent<unknown> | \"tr\" & ComponentClass<unknown, any> | \"tr\" & FunctionComponent<unknown> | \"track\" & ComponentClass<unknown, any> | \"track\" & FunctionComponent<unknown> | \"u\" & ComponentClass<unknown, any> | \"u\" & FunctionComponent<unknown> | \"ul\" & ComponentClass<unknown, any> | \"ul\" & FunctionComponent<unknown> | \"var\" & ComponentClass<unknown, any> | \"var\" & FunctionComponent<unknown> | \"video\" & ComponentClass<unknown, any> | \"video\" & FunctionComponent<unknown> | \"wbr\" & ComponentClass<unknown, any> | \"wbr\" & FunctionComponent<unknown> | \"webview\" & ComponentClass<unknown, any> | \"webview\" & FunctionComponent<unknown> | \"svg\" & ComponentClass<unknown, any> | \"svg\" & FunctionComponent<unknown> | \"animate\" & ComponentClass<unknown, any> | \"animate\" & FunctionComponent<unknown> | \"animateMotion\" & ComponentClass<unknown, any> | \"animateMotion\" & FunctionComponent<unknown> | \"animateTransform\" & ComponentClass<unknown, any> | \"animateTransform\" & FunctionComponent<unknown> | \"circle\" & ComponentClass<unknown, any> | \"circle\" & FunctionComponent<unknown> | \"clipPath\" & ComponentClass<unknown, any> | \"clipPath\" & FunctionComponent<unknown> | \"defs\" & ComponentClass<unknown, any> | \"defs\" & FunctionComponent<unknown> | \"desc\" & ComponentClass<unknown, any> | \"desc\" & FunctionComponent<unknown> | \"ellipse\" & ComponentClass<unknown, any> | \"ellipse\" & FunctionComponent<unknown> | \"feBlend\" & ComponentClass<unknown, any> | \"feBlend\" & FunctionComponent<unknown> | \"feColorMatrix\" & ComponentClass<unknown, any> | \"feColorMatrix\" & FunctionComponent<unknown> | \"feComponentTransfer\" & ComponentClass<unknown, any> | \"feComponentTransfer\" & FunctionComponent<unknown> | \"feComposite\" & ComponentClass<unknown, any> | \"feComposite\" & FunctionComponent<unknown> | \"feConvolveMatrix\" & ComponentClass<unknown, any> | \"feConvolveMatrix\" & FunctionComponent<unknown> | \"feDiffuseLighting\" & ComponentClass<unknown, any> | \"feDiffuseLighting\" & FunctionComponent<unknown> | \"feDisplacementMap\" & ComponentClass<unknown, any> | \"feDisplacementMap\" & FunctionComponent<unknown> | \"feDistantLight\" & ComponentClass<unknown, any> | \"feDistantLight\" & FunctionComponent<unknown> | \"feDropShadow\" & ComponentClass<unknown, any> | \"feDropShadow\" & FunctionComponent<unknown> | \"feFlood\" & ComponentClass<unknown, any> | \"feFlood\" & FunctionComponent<unknown> | \"feFuncA\" & ComponentClass<unknown, any> | \"feFuncA\" & FunctionComponent<unknown> | \"feFuncB\" & ComponentClass<unknown, any> | \"feFuncB\" & FunctionComponent<unknown> | \"feFuncG\" & ComponentClass<unknown, any> | \"feFuncG\" & FunctionComponent<unknown> | \"feFuncR\" & ComponentClass<unknown, any> | \"feFuncR\" & FunctionComponent<unknown> | \"feGaussianBlur\" & ComponentClass<unknown, any> | \"feGaussianBlur\" & FunctionComponent<unknown> | \"feImage\" & ComponentClass<unknown, any> | \"feImage\" & FunctionComponent<unknown> | \"feMerge\" & ComponentClass<unknown, any> | \"feMerge\" & FunctionComponent<unknown> | \"feMergeNode\" & ComponentClass<unknown, any> | \"feMergeNode\" & FunctionComponent<unknown> | \"feMorphology\" & ComponentClass<unknown, any> | \"feMorphology\" & FunctionComponent<unknown> | \"feOffset\" & ComponentClass<unknown, any> | \"feOffset\" & FunctionComponent<unknown> | \"fePointLight\" & ComponentClass<unknown, any> | \"fePointLight\" & FunctionComponent<unknown> | \"feSpecularLighting\" & ComponentClass<unknown, any> | \"feSpecularLighting\" & FunctionComponent<unknown> | \"feSpotLight\" & ComponentClass<unknown, any> | \"feSpotLight\" & FunctionComponent<unknown> | \"feTile\" & ComponentClass<unknown, any> | \"feTile\" & FunctionComponent<unknown> | \"feTurbulence\" & ComponentClass<unknown, any> | \"feTurbulence\" & FunctionComponent<unknown> | \"filter\" & ComponentClass<unknown, any> | \"filter\" & FunctionComponent<unknown> | \"foreignObject\" & ComponentClass<unknown, any> | \"foreignObject\" & FunctionComponent<unknown> | \"g\" & ComponentClass<unknown, any> | \"g\" & FunctionComponent<unknown> | \"image\" & ComponentClass<unknown, any> | \"image\" & FunctionComponent<unknown> | \"line\" & ComponentClass<unknown, any> | \"line\" & FunctionComponent<unknown> | \"linearGradient\" & ComponentClass<unknown, any> | \"linearGradient\" & FunctionComponent<unknown> | \"marker\" & ComponentClass<unknown, any> | \"marker\" & FunctionComponent<unknown> | \"mask\" & ComponentClass<unknown, any> | \"mask\" & FunctionComponent<unknown> | \"metadata\" & ComponentClass<unknown, any> | \"metadata\" & FunctionComponent<unknown> | \"mpath\" & ComponentClass<unknown, any> | \"mpath\" & FunctionComponent<unknown> | \"path\" & ComponentClass<unknown, any> | \"path\" & FunctionComponent<unknown> | \"pattern\" & ComponentClass<unknown, any> | \"pattern\" & FunctionComponent<unknown> | \"polygon\" & ComponentClass<unknown, any> | \"polygon\" & FunctionComponent<unknown> | \"polyline\" & ComponentClass<unknown, any> | \"polyline\" & FunctionComponent<unknown> | \"radialGradient\" & ComponentClass<unknown, any> | \"radialGradient\" & FunctionComponent<unknown> | \"rect\" & ComponentClass<unknown, any> | \"rect\" & FunctionComponent<unknown> | \"set\" & ComponentClass<unknown, any> | \"set\" & FunctionComponent<unknown> | \"stop\" & ComponentClass<unknown, any> | \"stop\" & FunctionComponent<unknown> | \"switch\" & ComponentClass<unknown, any> | \"switch\" & FunctionComponent<unknown> | \"text\" & ComponentClass<unknown, any> | \"text\" & FunctionComponent<unknown> | \"textPath\" & ComponentClass<unknown, any> | \"textPath\" & FunctionComponent<unknown> | \"tspan\" & ComponentClass<unknown, any> | \"tspan\" & FunctionComponent<unknown> | \"use\" & ComponentClass<unknown, any> | \"use\" & FunctionComponent<unknown> | \"view\" & ComponentClass<unknown, any> | \"view\" & FunctionComponent<unknown> | \"relative-time\" & ComponentClass<unknown, any> | \"relative-time\" & FunctionComponent<unknown> | \"tab-container\" & ComponentClass<unknown, any> | \"tab-container\" & FunctionComponent<unknown>",
              "required": false,
              "description": "Renders `UnderlineNav.Item` as given component i.e. react-router's Link",
              "defaultValue": ""
            },
            {
              "name": "children",
              "type": "ReactNode",
              "required": false,
              "description": "Primary content for an UnderlineNav",
              "defaultValue": ""
            },
            {
              "name": "counter",
              "type": "string | number",
              "required": false,
              "description": "Counter",
              "defaultValue": ""
            },
            {
              "name": "download",
              "type": "string",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "href",
              "type": "string",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "hrefLang",
              "type": "string",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "icon",
              "type": "ReactElement<any, string | JSXElementConstructor<any>> | FunctionComponent<IconProps>",
              "required": false,
              "description": "Icon before the text",
              "defaultValue": ""
            },
            {
              "name": "media",
              "type": "string",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "onSelect",
              "type": "(event: KeyboardEvent<HTMLAnchorElement> | MouseEvent<HTMLAnchorElement, MouseEvent>) => void",
              "required": false,
              "description": "Callback that will trigger both on click selection and keyboard selection.",
              "defaultValue": ""
            },
            {
              "name": "ping",
              "type": "string",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "referrerPolicy",
              "type": "\"\" | \"origin\" | \"no-referrer\" | \"no-referrer-when-downgrade\" | \"origin-when-cross-origin\" | \"same-origin\" | \"strict-origin\" | \"strict-origin-when-cross-origin\" | \"unsafe-url\"",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "rel",
              "type": "string",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            },
            {
              "name": "target",
              "type": "string",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "type",
              "type": "string",
              "required": false,
              "description": "",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    "filtered_search": {
      "id": "filtered_search",
      "name": "FilteredSearch",
      "status": "deprecated",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "deprecated-components-filteredsearch--default",
          "code": "() => (\n  <FilteredSearch>\n    <ActionMenu>\n      <ActionMenu.Button as=\"summary\">Filter</ActionMenu.Button>\n      <ActionMenu.Overlay>\n        <ActionList>\n          <ActionList.Item>Item 1</ActionList.Item>\n          <ActionList.Item>Item 2</ActionList.Item>\n          <ActionList.Item>Item 3</ActionList.Item>\n        </ActionList>\n      </ActionMenu.Overlay>\n    </ActionMenu>\n    <TextInput aria-label=\"Filtered search\" leadingVisual={SearchIcon} />\n  </FilteredSearch>\n)"
        }
      ],
      "importPath": "@primer/react/deprecated",
      "props": [
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "legacy_underline_nav": {
      "id": "legacy_underline_nav",
      "name": "UnderlineNav",
      "status": "deprecated",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "deprecated-components-underlinenav--default",
          "code": "() => (\n  <UnderlineNav aria-label=\"Main\">\n    <UnderlineNav.Link href=\"#home\" selected>\n      Home\n    </UnderlineNav.Link>\n    <UnderlineNav.Link href=\"#documentation\">Documentation</UnderlineNav.Link>\n    <UnderlineNav.Link href=\"#support\">Support</UnderlineNav.Link>\n  </UnderlineNav>\n)"
        },
        {
          "id": "deprecated-components-underlinenav-features--actions",
          "code": "() => (\n  <UnderlineNav aria-label=\"Main\" actions={<Button>Click me</Button>}>\n    <UnderlineNav.Link href=\"#home\" selected>\n      Home\n    </UnderlineNav.Link>\n    <UnderlineNav.Link href=\"#documentation\">Documentation</UnderlineNav.Link>\n    <UnderlineNav.Link href=\"#support\">Support</UnderlineNav.Link>\n  </UnderlineNav>\n)"
        }
      ],
      "importPath": "@primer/react/deprecated",
      "props": [
        {
          "name": "actions",
          "type": "ReactNode",
          "required": false,
          "description": "Place another element, such as a button, to the opposite side of the navigation items.",
          "defaultValue": ""
        },
        {
          "name": "align",
          "type": "\"right\"",
          "required": false,
          "description": "Use `right` to have navigation items aligned right.",
          "defaultValue": ""
        },
        {
          "name": "full",
          "type": "boolean",
          "required": false,
          "description": "Used to make navigation fill the width of the container.",
          "defaultValue": ""
        },
        {
          "name": "label",
          "type": "string",
          "required": false,
          "description": "Used to set the `aria-label` on the top level `<nav>` element.",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        }
      ],
      "subcomponents": [
        {
          "name": "UnderlineNav.Link",
          "props": [
            {
              "name": "selected",
              "type": "boolean",
              "required": false,
              "description": "Whether this child represents the current page",
              "defaultValue": ""
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            },
            {
              "name": "to",
              "type": "string | Partial<Path>",
              "required": false,
              "description": "Used when the link is rendered using a component like React Router's `Link`. The path to navigate to.",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    "drafts_inline_autocomplete": {
      "id": "drafts_inline_autocomplete",
      "name": "InlineAutocomplete",
      "status": "deprecated",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "deprecated-components-inlineautocomplete--default",
          "code": "({ loading, tabInserts }: ArgProps) => {\n  const [suggestions, setSuggestions] = useState<Suggestions | null>(null)\n  const onShowSuggestions = (event: ShowSuggestionsEvent) => {\n    if (loading) {\n      setSuggestions('loading')\n      return\n    }\n    setSuggestions(filteredUsers(event.query).map((user) => user.login))\n  }\n  return (\n    <FormControl>\n      <FormControl.Label>Inline Autocomplete Demo</FormControl.Label>\n      <FormControl.Caption>\n        Try typing &apos;@&apos; to show user suggestions.\n      </FormControl.Caption>\n      <InlineAutocomplete\n        triggers={[\n          {\n            triggerChar: '@',\n          },\n        ]}\n        suggestions={suggestions}\n        onShowSuggestions={onShowSuggestions}\n        onHideSuggestions={() => setSuggestions(null)}\n        tabInsertsSuggestions={tabInserts}\n      >\n        <Textarea />\n      </InlineAutocomplete>\n    </FormControl>\n  )\n}"
        },
        {
          "id": "deprecated-components-inlineautocomplete-features--single-line",
          "code": "({ loading, tabInserts }: ArgProps) => {\n  const [suggestions, setSuggestions] = useState<Suggestions | null>(null)\n  const onShowSuggestions = (event: ShowSuggestionsEvent) => {\n    if (loading) {\n      setSuggestions('loading')\n      return\n    }\n    setSuggestions(filteredUsers(event.query).map((user) => user.login))\n  }\n  return (\n    <FormControl>\n      <FormControl.Label>Inline Autocomplete Demo</FormControl.Label>\n      <FormControl.Caption>\n        Try typing &apos;@&apos; to show user suggestions.\n      </FormControl.Caption>\n      <InlineAutocomplete\n        triggers={[\n          {\n            triggerChar: '@',\n          },\n        ]}\n        suggestions={suggestions}\n        onShowSuggestions={onShowSuggestions}\n        onHideSuggestions={() => setSuggestions(null)}\n        tabInsertsSuggestions={tabInserts}\n      >\n        <TextInput\n          sx={{\n            lineHeight: 1.2,\n          }}\n        />\n      </InlineAutocomplete>\n    </FormControl>\n  )\n}"
        },
        {
          "id": "deprecated-components-inlineautocomplete-features--on-select-suggestion",
          "code": "({ loading, tabInserts }: ArgProps) => {\n  const [suggestions, setSuggestions] = useState<Suggestions | null>(null)\n  const onShowSuggestions = (event: ShowSuggestionsEvent) => {\n    if (loading) {\n      setSuggestions('loading')\n      return\n    }\n    setSuggestions(filteredUsers(event.query).map((user) => user.login))\n  }\n  return (\n    <FormControl>\n      <FormControl.Label>Inline Autocomplete Demo</FormControl.Label>\n      <FormControl.Caption>\n        Try typing &apos;@&apos; to show user suggestions.\n      </FormControl.Caption>\n      <InlineAutocomplete\n        triggers={[\n          {\n            triggerChar: '@',\n          },\n        ]}\n        onSelectSuggestion={(suggestion) =>\n          window.alert(`Selected ${suggestion}`)\n        }\n        suggestions={suggestions}\n        onShowSuggestions={onShowSuggestions}\n        onHideSuggestions={() => setSuggestions(null)}\n        tabInsertsSuggestions={tabInserts}\n      >\n        <TextInput\n          sx={{\n            lineHeight: 1.2,\n          }}\n        />\n      </InlineAutocomplete>\n    </FormControl>\n  )\n}"
        },
        {
          "id": "deprecated-components-inlineautocomplete-features--custom-rendering",
          "code": "({ loading, tabInserts }: ArgProps) => {\n  const [suggestions, setSuggestions] = useState<Suggestions | null>(null)\n  const onShowSuggestions = (event: ShowSuggestionsEvent) => {\n    if (loading) {\n      setSuggestions('loading')\n      return\n    }\n    setSuggestions(\n      filteredUsers(event.query).map((user) => ({\n        value: user.login,\n        render: (props) => <UserSuggestion user={user} {...props} />,\n      })),\n    )\n  }\n  const onHideSuggestions = () => setSuggestions(null)\n  return (\n    <FormControl>\n      <FormControl.Label>Inline Autocomplete Demo</FormControl.Label>\n      <FormControl.Caption>\n        Try typing &apos;@&apos; to show user suggestions.\n      </FormControl.Caption>\n      <InlineAutocomplete\n        triggers={[\n          {\n            triggerChar: '@',\n          },\n        ]}\n        suggestions={suggestions}\n        onShowSuggestions={onShowSuggestions}\n        onHideSuggestions={onHideSuggestions}\n        tabInsertsSuggestions={tabInserts}\n      >\n        <Textarea />\n      </InlineAutocomplete>\n    </FormControl>\n  )\n}"
        },
        {
          "id": "deprecated-components-inlineautocomplete-features--above-positioning",
          "code": "() => {\n  const [suggestions, setSuggestions] = useState<Suggestions | null>(null)\n  const onShowSuggestions = (event: ShowSuggestionsEvent) => {\n    setSuggestions(\n      filteredUsers(event.query).map((user) => ({\n        value: user.login,\n        render: (props) => <UserSuggestion user={user} {...props} />,\n      })),\n    )\n  }\n  const onHideSuggestions = () => setSuggestions(null)\n  return (\n    <FormControl\n      sx={{\n        position: 'absolute',\n        bottom: '15px',\n      }}\n    >\n      <FormControl.Label>Inline Autocomplete Demo</FormControl.Label>\n      <FormControl.Caption>\n        Try typing &apos;@&apos; to show user suggestions.\n      </FormControl.Caption>\n      <InlineAutocomplete\n        triggers={[\n          {\n            triggerChar: '@',\n          },\n        ]}\n        suggestions={suggestions}\n        onShowSuggestions={onShowSuggestions}\n        onHideSuggestions={onHideSuggestions}\n        suggestionsPlacement=\"above\"\n      >\n        <Textarea\n          sx={{\n            height: '70px',\n          }}\n        />\n      </InlineAutocomplete>\n    </FormControl>\n  )\n}"
        },
        {
          "id": "deprecated-components-inlineautocomplete-features--auto-positioning",
          "code": "() => {\n  const [suggestions, setSuggestions] = useState<Suggestions | null>(null)\n  const onShowSuggestions = (event: ShowSuggestionsEvent) => {\n    setSuggestions(\n      filteredUsers(event.query).map((user) => ({\n        value: user.login,\n        render: (props) => <UserSuggestion user={user} {...props} />,\n      })),\n    )\n  }\n  const onHideSuggestions = () => setSuggestions(null)\n  return (\n    <FormControl\n      sx={{\n        position: 'absolute',\n        bottom: '15px',\n      }}\n    >\n      <FormControl.Label>Inline Autocomplete Demo</FormControl.Label>\n      <FormControl.Caption>\n        Try typing &apos;@&apos; to show user suggestions.\n      </FormControl.Caption>\n      <InlineAutocomplete\n        triggers={[\n          {\n            triggerChar: '@',\n          },\n        ]}\n        suggestions={suggestions}\n        onShowSuggestions={onShowSuggestions}\n        onHideSuggestions={onHideSuggestions}\n      >\n        <Textarea\n          sx={{\n            height: '70px',\n          }}\n        />\n      </InlineAutocomplete>\n    </FormControl>\n  )\n}"
        }
      ],
      "importPath": "@primer/react/deprecated",
      "props": [
        {
          "name": "onHideSuggestions",
          "type": "() => void",
          "required": true,
          "description": "Called when suggestions should be hidden. Set `suggestions` to `null` in this case.",
          "defaultValue": ""
        },
        {
          "name": "onShowSuggestions",
          "type": "(event: ShowSuggestionsEvent) => void",
          "required": true,
          "description": "Called when a valid suggestion query is updated. This should be handled by setting the\n`suggestions` prop accordingly.",
          "defaultValue": ""
        },
        {
          "name": "suggestions",
          "type": "null | \"loading\" | Suggestion[]",
          "required": true,
          "description": "The currently visible list of suggestions. If `loading`, a loading indicator will be\nshown. If `null` or empty, the list will be hidden. Suggestion sort will be preserved.\n\nTypically, this should not contain more than five or so suggestions.",
          "defaultValue": ""
        },
        {
          "name": "triggers",
          "type": "Trigger[]",
          "required": true,
          "description": "Register the triggers that can cause suggestions to appear.",
          "defaultValue": ""
        },
        {
          "name": "children",
          "type": "ReactElement<DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement> | DetailedHTMLProps<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>, string | JSXElementConstructor<...>> & RefAttributes<...> & string | ReactElement<DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement> | DetailedHTMLProps<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>, string | JSXElementConstructor<...>> & RefAttributes<...> & number | ReactElement<DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement> | DetailedHTMLProps<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>, string | JSXElementConstructor<...>> & RefAttributes<...> & false | ReactElement<DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement> | DetailedHTMLProps<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>, string | JSXElementConstructor<...>> & RefAttributes<...> & true | ReactElement<DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement> | DetailedHTMLProps<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>, string | JSXElementConstructor<...>> & RefAttributes<...> & ReactElement<...> | ReactElement<DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement> | DetailedHTMLProps<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>, string | JSXElementConstructor<...>> & RefAttributes<...> & Iterable<...> | ReactElement<DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement> | DetailedHTMLProps<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>, string | JSXElementConstructor<...>> & RefAttributes<...> & ReactPortal",
          "required": false,
          "description": "An `input` or `textarea` compatible component to extend. A compatible component is any\ncomponent that forwards a ref and props to an underlying `input` or `textarea` element,\nincluding but not limited to `Input`, `TextArea`, `input`, `textarea`, `styled.input`,\nand `styled.textarea`. If the child is not compatible, a runtime `TypeError` will be\nthrown.",
          "defaultValue": ""
        },
        {
          "name": "onSelectSuggestion",
          "type": "(event: SelectSuggestionsEvent) => void",
          "required": false,
          "description": "Called when a suggestion is selected.\n@note This should be used only for performing side effects, not for modifying\nthe inserted text. Do not call `setState` in this handler or the user's cursor\nposition / undo history could be lost.",
          "defaultValue": ""
        },
        {
          "name": "suggestionsPlacement",
          "type": "\"above\" | \"below\"",
          "required": false,
          "description": "Control which side of the insertion point the suggestions list appears on by default. This\nshould almost always be `\"below\"` because it typically provides a better user experience\n(the most-relevant suggestions will appear closest to the text). However, if the input\nis always near the bottom of the screen (ie, a chat composition form), it may be better to\ndisplay the suggestions above the input.\n\nIn either case, if there is not enough room to display the suggestions in the default direction,\nthe suggestions will appear in the other direction.",
          "defaultValue": "below"
        },
        {
          "name": "sx",
          "type": "Omit<BetterSystemStyleObject, \"position\">",
          "required": false,
          "description": "The `AutocompleteTextarea` has a container for positioning the suggestions overlay.\nThis can break some layouts (ie, if the editor must expand with `flex: 1` to fill space)\nso you can override container styles here. Usually this should not be necessary.\n`position` may not be overriden.",
          "defaultValue": ""
        },
        {
          "name": "tabInsertsSuggestions",
          "type": "boolean",
          "required": false,
          "description": "If `true`, suggestions will be applied with both `Tab` and `Enter`, instead of just\n`Enter`. This may be expected behavior for users used to IDEs, but use caution when\nhijacking browser tabbing capability.",
          "defaultValue": false
        }
      ],
      "subcomponents": []
    },
    "drafts_markdown_editor": {
      "id": "drafts_markdown_editor",
      "name": "MarkdownEditor",
      "status": "deprecated",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "deprecated-components-markdowneditor--default",
          "code": "() => {\n  const [value, setValue] = useState('')\n  return (\n    <>\n      <MarkdownEditor\n        value={value}\n        onChange={setValue}\n        placeholder=\"Enter some Markdown...\"\n        onRenderPreview={renderPreview}\n        emojiSuggestions={emojis}\n      >\n        <MarkdownEditor.Label>Markdown Editor Example</MarkdownEditor.Label>\n      </MarkdownEditor>\n      <p>\n        Note: for demo purposes, files starting with &quot;A&quot; will be\n        rejected.\n      </p>\n    </>\n  )\n}"
        },
        {
          "id": "deprecated-components-markdowneditor-features--custom-toolbar",
          "code": "({\n  disabled,\n  fullHeight,\n  monospace,\n  minHeightLines,\n  maxHeightLines,\n  hideLabel,\n  required,\n  fileUploadsEnabled,\n  onSubmit,\n  onDiffClick,\n  savedRepliesEnabled,\n  pasteUrlsAsPlainText,\n}: ArgProps) => {\n  const [value, setValue] = useState('')\n  return (\n    <Box\n      sx={{\n        maxWidth: 800,\n      }}\n    >\n      <MarkdownEditor\n        value={value}\n        onChange={setValue}\n        onPrimaryAction={onSubmit}\n        disabled={disabled}\n        fullHeight={fullHeight}\n        monospace={monospace}\n        minHeightLines={minHeightLines}\n        maxHeightLines={maxHeightLines}\n        placeholder=\"Enter some Markdown...\"\n        onRenderPreview={renderPreview}\n        onUploadFile={fileUploadsEnabled ? onUploadFile : undefined}\n        emojiSuggestions={emojis}\n        mentionSuggestions={mentionables}\n        referenceSuggestions={references}\n        required={required}\n        savedReplies={savedRepliesEnabled ? savedReplies : undefined}\n        pasteUrlsAsPlainText={pasteUrlsAsPlainText}\n      >\n        <MarkdownEditor.Label visuallyHidden={hideLabel}>\n          Markdown Editor Example\n        </MarkdownEditor.Label>\n\n        <MarkdownEditor.Toolbar>\n          <MarkdownEditor.ToolbarButton\n            icon={DiffIcon}\n            onClick={onDiffClick}\n            aria-label=\"Custom Button\"\n          />\n          <MarkdownEditor.DefaultToolbarButtons />\n        </MarkdownEditor.Toolbar>\n      </MarkdownEditor>\n      <p>\n        Note: for demo purposes, files starting with &quot;A&quot; will be\n        rejected.\n      </p>\n    </Box>\n  )\n}"
        },
        {
          "id": "deprecated-components-markdowneditor-features--custom-footer",
          "code": "({\n  disabled,\n  fullHeight,\n  monospace,\n  minHeightLines,\n  maxHeightLines,\n  hideLabel,\n  required,\n  fileUploadsEnabled,\n  onSubmit,\n  onFooterClick,\n  savedRepliesEnabled,\n  pasteUrlsAsPlainText,\n}: ArgProps) => {\n  const [value, setValue] = useState('')\n  return (\n    <Box\n      sx={{\n        maxWidth: 800,\n      }}\n    >\n      <MarkdownEditor\n        value={value}\n        onChange={setValue}\n        onPrimaryAction={onSubmit}\n        disabled={disabled}\n        fullHeight={fullHeight}\n        monospace={monospace}\n        minHeightLines={minHeightLines}\n        maxHeightLines={maxHeightLines}\n        placeholder=\"Enter some Markdown...\"\n        onRenderPreview={renderPreview}\n        onUploadFile={fileUploadsEnabled ? onUploadFile : undefined}\n        emojiSuggestions={emojis}\n        mentionSuggestions={mentionables}\n        referenceSuggestions={references}\n        required={required}\n        savedReplies={savedRepliesEnabled ? savedReplies : undefined}\n        pasteUrlsAsPlainText={pasteUrlsAsPlainText}\n      >\n        <MarkdownEditor.Label visuallyHidden={hideLabel}>\n          Markdown Editor Example - Custom Footer\n        </MarkdownEditor.Label>\n\n        <MarkdownEditor.Footer>\n          <MarkdownEditor.FooterButton\n            variant=\"invisible\"\n            onClick={onFooterClick}\n            leadingVisual={PlusIcon}\n            sx={{\n              borderRadius: '14px',\n              color: 'fg.muted',\n              borderColor: 'border.muted',\n            }}\n          >\n            Add Button\n          </MarkdownEditor.FooterButton>\n\n          <MarkdownEditor.Actions>\n            <MarkdownEditor.ActionButton\n              variant=\"danger\"\n              onClick={() => setValue('')}\n            >\n              Reset\n            </MarkdownEditor.ActionButton>\n            <MarkdownEditor.ActionButton variant=\"primary\" onClick={onSubmit}>\n              Submit\n            </MarkdownEditor.ActionButton>\n          </MarkdownEditor.Actions>\n        </MarkdownEditor.Footer>\n      </MarkdownEditor>\n      <p>\n        Note: for demo purposes, files starting with &quot;A&quot; will be\n        rejected.\n      </p>\n    </Box>\n  )\n}"
        },
        {
          "id": "deprecated-components-markdowneditor-features--custom-footer-actions",
          "code": "({\n  disabled,\n  fullHeight,\n  monospace,\n  minHeightLines,\n  maxHeightLines,\n  hideLabel,\n  required,\n  fileUploadsEnabled,\n  onSubmit,\n  savedRepliesEnabled,\n  pasteUrlsAsPlainText,\n}: ArgProps) => {\n  const [value, setValue] = useState('')\n  return (\n    <Box\n      sx={{\n        maxWidth: 800,\n      }}\n    >\n      <MarkdownEditor\n        value={value}\n        onChange={setValue}\n        onPrimaryAction={onSubmit}\n        disabled={disabled}\n        fullHeight={fullHeight}\n        monospace={monospace}\n        minHeightLines={minHeightLines}\n        maxHeightLines={maxHeightLines}\n        placeholder=\"Enter some Markdown...\"\n        onRenderPreview={renderPreview}\n        onUploadFile={fileUploadsEnabled ? onUploadFile : undefined}\n        emojiSuggestions={emojis}\n        mentionSuggestions={mentionables}\n        referenceSuggestions={references}\n        required={required}\n        savedReplies={savedRepliesEnabled ? savedReplies : undefined}\n        pasteUrlsAsPlainText={pasteUrlsAsPlainText}\n      >\n        <MarkdownEditor.Label visuallyHidden={hideLabel}>\n          Markdown Editor Example\n        </MarkdownEditor.Label>\n\n        <MarkdownEditor.Actions>\n          <MarkdownEditor.ActionButton\n            variant=\"danger\"\n            onClick={() => setValue('')}\n          >\n            Reset\n          </MarkdownEditor.ActionButton>\n          <MarkdownEditor.ActionButton variant=\"primary\" onClick={onSubmit}>\n            Submit\n          </MarkdownEditor.ActionButton>\n        </MarkdownEditor.Actions>\n      </MarkdownEditor>\n      <p>\n        Note: for demo purposes, files starting with &quot;A&quot; will be\n        rejected.\n      </p>\n    </Box>\n  )\n}"
        },
        {
          "id": "deprecated-components-markdowneditor-features--lazy-loaded-suggestions",
          "code": "({\n  disabled,\n  fullHeight,\n  monospace,\n  minHeightLines,\n  maxHeightLines,\n  hideLabel,\n  required,\n  fileUploadsEnabled,\n  onSubmit,\n  savedRepliesEnabled,\n  pasteUrlsAsPlainText,\n}: ArgProps) => {\n  const [value, setValue] = useState('')\n  const emojiSuggestions = useLazySuggestions(emojis)\n  const mentionSuggestions = useLazySuggestions(mentionables)\n  const referenceSuggestions = useLazySuggestions(references)\n  return (\n    <Box\n      sx={{\n        maxWidth: 800,\n      }}\n    >\n      <MarkdownEditor\n        value={value}\n        onChange={setValue}\n        onPrimaryAction={onSubmit}\n        disabled={disabled}\n        fullHeight={fullHeight}\n        monospace={monospace}\n        minHeightLines={minHeightLines}\n        maxHeightLines={maxHeightLines}\n        placeholder=\"Enter some Markdown...\"\n        onRenderPreview={renderPreview}\n        onUploadFile={fileUploadsEnabled ? onUploadFile : undefined}\n        emojiSuggestions={emojiSuggestions}\n        mentionSuggestions={mentionSuggestions}\n        referenceSuggestions={referenceSuggestions}\n        savedReplies={savedRepliesEnabled ? savedReplies : undefined}\n        required={required}\n        pasteUrlsAsPlainText={pasteUrlsAsPlainText}\n      >\n        <MarkdownEditor.Label visuallyHidden={hideLabel}>\n          Markdown Editor Example\n        </MarkdownEditor.Label>\n      </MarkdownEditor>\n      <p>\n        Note: for demo purposes, files starting with &quot;A&quot; will be\n        rejected.\n      </p>\n    </Box>\n  )\n}"
        }
      ],
      "importPath": "@primer/react/deprecated",
      "props": [
        {
          "name": "children",
          "type": "ReactNode",
          "required": true,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "onChange",
          "type": "(newMarkdown: string) => void",
          "required": true,
          "description": "Called when the value changes.",
          "defaultValue": ""
        },
        {
          "name": "onRenderPreview",
          "type": "(markdown: string) => Promise<string>",
          "required": true,
          "description": "Accepts Markdown and returns rendered HTML. To prevent XSS attacks,\nthe HTML should be sanitized and/or come from a trusted source.",
          "defaultValue": ""
        },
        {
          "name": "value",
          "type": "string",
          "required": true,
          "description": "Current value of the editor as a multiline markdown string.",
          "defaultValue": ""
        },
        {
          "name": "acceptedFileTypes",
          "type": "FileType[]",
          "required": false,
          "description": "Array of allowed file types. If `onUploadFile` is defined but this array is not, all\nfile types will be accepted. You can still reject file types by rejecting the `onUploadFile`\npromise, but setting this array provides a better user experience by preventing the\nupload in the first place.",
          "defaultValue": ""
        },
        {
          "name": "aria-describedby",
          "type": "string",
          "required": false,
          "description": "ID of the describing element.",
          "defaultValue": ""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "required": false,
          "description": "Disable the editor and all related buttons. Users can still switch between preview & edit modes.",
          "defaultValue": false
        },
        {
          "name": "emojiSuggestions",
          "type": "\"loading\" | Emoji[] | () => Promise<Emoji[]>",
          "required": false,
          "description": "Array of all possible emojis to suggest. Leave `undefined` to disable emoji autocomplete.\nFor lazy-loading suggestions, an async function can be provided instead.",
          "defaultValue": ""
        },
        {
          "name": "fullHeight",
          "type": "boolean",
          "required": false,
          "description": "Force the editor to take up the full height of the container and disallow resizing. Only\nuse when the container height is tall enough that the user will never want to expand the\ninput further, ie when it takes the full height of the viewport.",
          "defaultValue": ""
        },
        {
          "name": "maxHeightLines",
          "type": "number",
          "required": false,
          "description": "Maximum number of visible lines of text in the editor. Has no effect if `fullHeight = true`.",
          "defaultValue": 35
        },
        {
          "name": "maxLength",
          "type": "number",
          "required": false,
          "description": "Maximum number of characters the markdown can hold (includes formatting characters like `*`).",
          "defaultValue": ""
        },
        {
          "name": "mentionSuggestions",
          "type": "\"loading\" | Mentionable[] | () => Promise<Mentionable[]>",
          "required": false,
          "description": "Array of all possible mention suggestions. Leave `undefined` to disable `@`-mention autocomplete.\nFor lazy-loading suggestions, an async function can be provided instead.",
          "defaultValue": ""
        },
        {
          "name": "minHeightLines",
          "type": "number",
          "required": false,
          "description": "Minimum number of visible lines of text in the editor.",
          "defaultValue": 5
        },
        {
          "name": "monospace",
          "type": "boolean",
          "required": false,
          "description": "Control whether the editor font is monospace.",
          "defaultValue": false
        },
        {
          "name": "name",
          "type": "string",
          "required": false,
          "description": "The name that will be given to the `textarea`.",
          "defaultValue": ""
        },
        {
          "name": "onChangeViewMode",
          "type": "(newViewMode: MarkdownViewMode) => void",
          "required": false,
          "description": "If `viewMode` is controlled, this will be called on change.",
          "defaultValue": ""
        },
        {
          "name": "onPrimaryAction",
          "type": "() => void",
          "required": false,
          "description": "Called when the user presses `Ctrl`/`Cmd` + `Enter`. Should almost always be wired to\nthe same event as clicking the primary `actionButton`.",
          "defaultValue": ""
        },
        {
          "name": "onUploadFile",
          "type": "(file: File) => Promise<FileUploadResult>",
          "required": false,
          "description": "Uploads a file to a hosting service and returns the URL. If not provided, file uploads\nwill be disabled.",
          "defaultValue": ""
        },
        {
          "name": "pasteUrlsAsPlainText",
          "type": "boolean",
          "required": false,
          "description": "Control whether URLs are pasted as plain text instead of as formatted links (if the\nuser has selected some text before pasting). Defaults to `false` (URLs will paste as\nlinks). This should typically be controlled by user settings.\n\nUsers can always toggle this behavior by holding `shift` when pasting.",
          "defaultValue": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "required": false,
          "description": "Placeholder text to show when the editor is empty. By default, no placeholder will be shown.",
          "defaultValue": ""
        },
        {
          "name": "referenceSuggestions",
          "type": "\"loading\" | Reference[] | () => Promise<Reference[]>",
          "required": false,
          "description": "Array of all possible references to suggest. Leave `undefined` to disable `#`-reference autocomplete.\nFor lazy-loading suggestions, an async function can be provided instead.",
          "defaultValue": ""
        },
        {
          "name": "required",
          "type": "boolean",
          "required": false,
          "description": "Control whether the input is required.",
          "defaultValue": false
        },
        {
          "name": "savedReplies",
          "type": "SavedReply[]",
          "required": false,
          "description": "To enable the saved replies feature, provide an array of replies.",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        },
        {
          "name": "viewMode",
          "type": "\"preview\" | \"edit\"",
          "required": false,
          "description": "Optionally control the view mode. If uncontrolled, leave this `undefined`.",
          "defaultValue": ""
        }
      ],
      "subcomponents": [
        {
          "name": "MarkdownEditor.ActionButton",
          "props": [
            {
              "name": "alignContent",
              "type": "\"center\" | \"start\"",
              "required": false,
              "description": "Content alignment for when visuals are present",
              "defaultValue": ""
            },
            {
              "name": "block",
              "type": "boolean",
              "required": false,
              "description": "Allow button width to fill its container.",
              "defaultValue": ""
            },
            {
              "name": "children",
              "type": "ReactNode",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "count",
              "type": "number",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "disabled",
              "type": "boolean",
              "required": false,
              "description": "Items that are disabled can not be clicked, selected, or navigated through.",
              "defaultValue": ""
            },
            {
              "name": "icon",
              "type": "null | \"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
              "required": false,
              "description": "The icon for the IconButton",
              "defaultValue": ""
            },
            {
              "name": "inactive",
              "type": "boolean",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "labelWrap",
              "type": "boolean",
              "required": false,
              "description": "Whether the button label should wrap to multiple lines of it is longer than the button width.",
              "defaultValue": ""
            },
            {
              "name": "leadingVisual",
              "type": "null | \"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
              "required": false,
              "description": "The leading visual which comes before the button content",
              "defaultValue": ""
            },
            {
              "name": "loading",
              "type": "boolean",
              "required": false,
              "description": "When true, the button is in a loading state.",
              "defaultValue": ""
            },
            {
              "name": "loadingAnnouncement",
              "type": "string",
              "required": false,
              "description": "The content to announce to screen readers when loading.",
              "defaultValue": ""
            },
            {
              "name": "size",
              "type": "\"small\" | \"large\" | \"medium\"",
              "required": false,
              "description": "Size of button and fontSize of text in button",
              "defaultValue": ""
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            },
            {
              "name": "trailingAction",
              "type": "null | \"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
              "required": false,
              "description": "Trailing action appears to the right of the trailing visual and is always locked to the end",
              "defaultValue": ""
            },
            {
              "name": "trailingVisual",
              "type": "null | \"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
              "required": false,
              "description": "The trailing visual which comes after the button content",
              "defaultValue": ""
            },
            {
              "name": "variant",
              "type": "\"link\" | \"default\" | \"danger\" | \"primary\" | \"invisible\"",
              "required": false,
              "description": "Determine's the styles on a button one of 'default' | 'primary' | 'invisible' | 'danger'",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "MarkdownEditor.Actions",
          "props": [
            {
              "name": "children",
              "type": "ReactNode",
              "required": false,
              "description": "Markdown editor actions",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "MarkdownEditor.DefaultToolbarButtons",
          "props": []
        },
        {
          "name": "MarkdownEditor.Footer",
          "props": [
            {
              "name": "children",
              "type": "ReactNode",
              "required": false,
              "description": "Children to render in the footer",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "MarkdownEditor.FooterButton",
          "props": [
            {
              "name": "alignContent",
              "type": "\"center\" | \"start\"",
              "required": false,
              "description": "Content alignment for when visuals are present",
              "defaultValue": ""
            },
            {
              "name": "block",
              "type": "boolean",
              "required": false,
              "description": "Allow button width to fill its container.",
              "defaultValue": ""
            },
            {
              "name": "children",
              "type": "ReactNode",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "count",
              "type": "number",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "disabled",
              "type": "boolean",
              "required": false,
              "description": "Items that are disabled can not be clicked, selected, or navigated through.",
              "defaultValue": ""
            },
            {
              "name": "icon",
              "type": "null | \"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
              "required": false,
              "description": "The icon for the IconButton",
              "defaultValue": ""
            },
            {
              "name": "inactive",
              "type": "boolean",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "labelWrap",
              "type": "boolean",
              "required": false,
              "description": "Whether the button label should wrap to multiple lines of it is longer than the button width.",
              "defaultValue": ""
            },
            {
              "name": "leadingVisual",
              "type": "null | \"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
              "required": false,
              "description": "The leading visual which comes before the button content",
              "defaultValue": ""
            },
            {
              "name": "loading",
              "type": "boolean",
              "required": false,
              "description": "When true, the button is in a loading state.",
              "defaultValue": ""
            },
            {
              "name": "loadingAnnouncement",
              "type": "string",
              "required": false,
              "description": "The content to announce to screen readers when loading.",
              "defaultValue": ""
            },
            {
              "name": "size",
              "type": "\"small\" | \"large\" | \"medium\"",
              "required": false,
              "description": "Size of button and fontSize of text in button",
              "defaultValue": ""
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            },
            {
              "name": "trailingAction",
              "type": "null | \"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
              "required": false,
              "description": "Trailing action appears to the right of the trailing visual and is always locked to the end",
              "defaultValue": ""
            },
            {
              "name": "trailingVisual",
              "type": "null | \"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
              "required": false,
              "description": "The trailing visual which comes after the button content",
              "defaultValue": ""
            },
            {
              "name": "variant",
              "type": "\"link\" | \"default\" | \"danger\" | \"primary\" | \"invisible\"",
              "required": false,
              "description": "Determine's the styles on a button one of 'default' | 'primary' | 'invisible' | 'danger'",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "MarkdownEditor.Label",
          "props": [
            {
              "name": "children",
              "type": "ReactNode",
              "required": false,
              "description": "Label content",
              "defaultValue": ""
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            },
            {
              "name": "visuallyHidden",
              "type": "boolean",
              "required": false,
              "description": "Whether the label is visually hidden",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "MarkdownEditor.Toolbar",
          "props": [
            {
              "name": "children",
              "type": "ReactNode",
              "required": false,
              "description": "",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "MarkdownEditor.ToolbarButton",
          "props": [
            {
              "name": "icon",
              "type": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
              "required": true,
              "description": "Provide an octicon. It will be placed in the center of the button",
              "defaultValue": ""
            },
            {
              "name": "aria-label",
              "type": "string",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "aria-labelledby",
              "type": "string",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "block",
              "type": "boolean",
              "required": false,
              "description": "Allow button width to fill its container.",
              "defaultValue": ""
            },
            {
              "name": "description",
              "type": "string",
              "required": false,
              "description": "If `description` is provided, we will use a Tooltip to describe the button. Then `aria-label` is used to label the button.",
              "defaultValue": ""
            },
            {
              "name": "disabled",
              "type": "boolean",
              "required": false,
              "description": "Items that are disabled can not be clicked, selected, or navigated through.",
              "defaultValue": ""
            },
            {
              "name": "inactive",
              "type": "boolean",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "keyshortcuts",
              "type": "string",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "labelWrap",
              "type": "boolean",
              "required": false,
              "description": "Whether the button label should wrap to multiple lines of it is longer than the button width.",
              "defaultValue": ""
            },
            {
              "name": "loading",
              "type": "boolean",
              "required": false,
              "description": "When true, the button is in a loading state.",
              "defaultValue": ""
            },
            {
              "name": "loadingAnnouncement",
              "type": "string",
              "required": false,
              "description": "The content to announce to screen readers when loading.",
              "defaultValue": ""
            },
            {
              "name": "size",
              "type": "\"small\" | \"large\" | \"medium\"",
              "required": false,
              "description": "Size of button and fontSize of text in button",
              "defaultValue": ""
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            },
            {
              "name": "tooltipDirection",
              "type": "\"s\" | \"nw\" | \"n\" | \"ne\" | \"e\" | \"se\" | \"sw\" | \"w\"",
              "required": false,
              "description": "Sets where the tooltip renders in relation to the target.",
              "defaultValue": ""
            },
            {
              "name": "unsafeDisableTooltip",
              "type": "boolean",
              "required": false,
              "description": "Do not use. This is planned to be a temporary prop until the default tooltip on icon buttons are fully rolled out.",
              "defaultValue": ""
            },
            {
              "name": "variant",
              "type": "\"link\" | \"default\" | \"danger\" | \"primary\" | \"invisible\"",
              "required": false,
              "description": "Determine's the styles on a button one of 'default' | 'primary' | 'invisible' | 'danger'",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "MarkdownEditor.ToolbarButton",
          "props": [
            {
              "name": "icon",
              "type": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
              "required": true,
              "description": "Provide an octicon. It will be placed in the center of the button",
              "defaultValue": ""
            },
            {
              "name": "aria-label",
              "type": "string",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "aria-labelledby",
              "type": "string",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "block",
              "type": "boolean",
              "required": false,
              "description": "Allow button width to fill its container.",
              "defaultValue": ""
            },
            {
              "name": "description",
              "type": "string",
              "required": false,
              "description": "If `description` is provided, we will use a Tooltip to describe the button. Then `aria-label` is used to label the button.",
              "defaultValue": ""
            },
            {
              "name": "disabled",
              "type": "boolean",
              "required": false,
              "description": "Items that are disabled can not be clicked, selected, or navigated through.",
              "defaultValue": ""
            },
            {
              "name": "inactive",
              "type": "boolean",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "keyshortcuts",
              "type": "string",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "labelWrap",
              "type": "boolean",
              "required": false,
              "description": "Whether the button label should wrap to multiple lines of it is longer than the button width.",
              "defaultValue": ""
            },
            {
              "name": "loading",
              "type": "boolean",
              "required": false,
              "description": "When true, the button is in a loading state.",
              "defaultValue": ""
            },
            {
              "name": "loadingAnnouncement",
              "type": "string",
              "required": false,
              "description": "The content to announce to screen readers when loading.",
              "defaultValue": ""
            },
            {
              "name": "size",
              "type": "\"small\" | \"large\" | \"medium\"",
              "required": false,
              "description": "Size of button and fontSize of text in button",
              "defaultValue": ""
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            },
            {
              "name": "tooltipDirection",
              "type": "\"s\" | \"nw\" | \"n\" | \"ne\" | \"e\" | \"se\" | \"sw\" | \"w\"",
              "required": false,
              "description": "Sets where the tooltip renders in relation to the target.",
              "defaultValue": ""
            },
            {
              "name": "unsafeDisableTooltip",
              "type": "boolean",
              "required": false,
              "description": "Do not use. This is planned to be a temporary prop until the default tooltip on icon buttons are fully rolled out.",
              "defaultValue": ""
            },
            {
              "name": "variant",
              "type": "\"link\" | \"default\" | \"danger\" | \"primary\" | \"invisible\"",
              "required": false,
              "description": "Determine's the styles on a button one of 'default' | 'primary' | 'invisible' | 'danger'",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    "drafts_markdown_viewer": {
      "id": "drafts_markdown_viewer",
      "name": "MarkdownViewer",
      "status": "deprecated",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "deprecated-components-markdownviewer--default",
          "code": "({ loading, linksInNewTab }: ArgProps) => (\n  <MarkdownViewer\n    loading={loading}\n    openLinksInNewTab={linksInNewTab}\n    dangerousRenderedHTML={htmlObject}\n  />\n)"
        },
        {
          "id": "deprecated-components-markdownviewer-features--link-interception",
          "code": "({ loading }: ArgProps) => (\n  <MarkdownViewer\n    loading={loading}\n    onLinkClick={(event) => {\n      event.preventDefault()\n      alert(\n        `Link clicked: ${\n          event.target instanceof HTMLAnchorElement\n            ? event.target.href\n            : 'unknown'\n        }`,\n      )\n    }}\n    dangerousRenderedHTML={htmlObject}\n  />\n)"
        },
        {
          "id": "deprecated-components-markdownviewer-features--interactive",
          "code": "({ loading, linksInNewTab }: ArgProps) => {\n  const [markdown, setMarkdown] = useState(sampleMarkdownSource)\n  const [disabled, setDisabled] = useState(false)\n\n  // Any state-setting inside a debounced function and/or after an async call should be done safely\n  // to avoid setting state after the component unmounts\n  const safeSetDisabled = useSafeAsyncCallback(setDisabled)\n  const saveChanges = useCallback(async () => {\n    // Disable interaction for the duration of the request to avoid conflicts\n    safeSetDisabled(true)\n    // In production this would make an API request to save the markdown and update the rendered HTML\n    await new Promise((r) => setTimeout(r, 500))\n    safeSetDisabled(false)\n  }, [safeSetDisabled])\n\n  // saveChanges itself must also be called safely to avoid accidentally calling an outdated reference\n  // Important to allow calling after unmount to avoid loss of data if the component unmounts before saving\n  const safeSaveChanges = useSafeAsyncCallback(saveChanges, true)\n\n  // We always want to debounce the request to avoid disabling checkboxes in between every click\n  const debouncedSaveChanges = useMemo(\n    () => debounce(safeSaveChanges, 1000),\n    [safeSaveChanges],\n  )\n  return (\n    <MarkdownViewer\n      loading={loading}\n      openLinksInNewTab={linksInNewTab}\n      onChange={(md) => {\n        setMarkdown(md)\n        debouncedSaveChanges()\n      }}\n      markdownValue={markdown}\n      dangerousRenderedHTML={htmlObject}\n      disabled={disabled}\n    />\n  )\n}"
        }
      ],
      "importPath": "@primer/react/deprecated",
      "props": [
        {
          "name": "dangerousRenderedHTML",
          "type": "{ __html: string | TrustedHTML; }",
          "required": true,
          "description": "Set the rendered HTML of the viewer. To prevent XSS, ensure that the source of this\nHTML is trusted!",
          "defaultValue": ""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "required": false,
          "description": "Control whether interaction is disabled.",
          "defaultValue": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "required": false,
          "description": "Show a loading spinner instead of content.",
          "defaultValue": false
        },
        {
          "name": "markdownValue",
          "type": "string",
          "required": false,
          "description": "The markdown the HTML was rendered from. This is not used for viewing, only as a source\nfor change events.",
          "defaultValue": ""
        },
        {
          "name": "onChange",
          "type": "(markdown: string) => void | Promise<void>",
          "required": false,
          "description": "Called when the user interacts and updates the Markdown. The rendered Markdown is\nupdated eagerly - if the request fails, a rejected Promise should be returned by\nthis handler. In that case, the viewer will revert the visual change.\n\nIf the change is handled by an async API request (as it typically will be in production\ncode), the viewer should be `disabled` while the request is pending to avoid conflicts.\nTo allow users to check multiple boxes rapidly, the API request should be debounced (an\nideal debounce duration is about 1 second).",
          "defaultValue": ""
        },
        {
          "name": "onLinkClick",
          "type": "(event: MouseEvent) => void",
          "required": false,
          "description": "Called when the user clicks a link element. This can be used to intercept the click\nand provide custom routing. Note that this is a native HTML `MouseEvent` and not a\n`React.ClickEvent`.",
          "defaultValue": ""
        },
        {
          "name": "openLinksInNewTab",
          "type": "boolean",
          "required": false,
          "description": "",
          "defaultValue": false
        }
      ],
      "subcomponents": []
    },
    "select_panel_v2": {
      "id": "select_panel_v2",
      "docsId": "select_panel",
      "name": "SelectPanel",
      "status": "draft",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "drafts-components-selectpanel--default",
          "code": "() => {\n  const initialSelectedLabels = data.issue.labelIds // mock initial state: has selected labels\n  const [selectedLabelIds, setSelectedLabelIds] = React.useState<string[]>(\n    initialSelectedLabels,\n  )\n\n  /* Selection */\n  const onLabelSelect = (labelId: string) => {\n    if (!selectedLabelIds.includes(labelId))\n      setSelectedLabelIds([...selectedLabelIds, labelId])\n    else setSelectedLabelIds(selectedLabelIds.filter((id) => id !== labelId))\n  }\n  const onClearSelection = () => {\n    setSelectedLabelIds([])\n  }\n  const onSubmit = () => {\n    data.issue.labelIds = selectedLabelIds // pretending to persist changes\n  }\n  const onCancel = () => {\n    setSelectedLabelIds(initialSelectedLabels)\n  }\n\n  /* Filtering */\n  const [filteredLabels, setFilteredLabels] = React.useState(data.labels)\n  const [query, setQuery] = React.useState('')\n  const onSearchInputChange: React.ChangeEventHandler<HTMLInputElement> = (\n    event,\n  ) => {\n    const query = event.currentTarget.value\n    setQuery(query)\n    if (query === '') setFilteredLabels(data.labels)\n    else {\n      setFilteredLabels(\n        data.labels\n          .map((label) => {\n            if (label.name.toLowerCase().startsWith(query))\n              return {\n                priority: 1,\n                label,\n              }\n            else if (label.name.toLowerCase().includes(query))\n              return {\n                priority: 2,\n                label,\n              }\n            else if (label.description?.toLowerCase().includes(query))\n              return {\n                priority: 3,\n                label,\n              }\n            else\n              return {\n                priority: -1,\n                label,\n              }\n          })\n          .filter((result) => result.priority > 0)\n          .map((result) => result.label),\n      )\n    }\n  }\n  const sortingFn = (\n    itemA: {\n      id: string\n    },\n    itemB: {\n      id: string\n    },\n  ) => {\n    const initialSelectedIds = data.issue.labelIds\n    if (\n      initialSelectedIds.includes(itemA.id) &&\n      initialSelectedIds.includes(itemB.id)\n    )\n      return 1\n    else if (initialSelectedIds.includes(itemA.id)) return -1\n    else if (initialSelectedIds.includes(itemB.id)) return 1\n    else return 1\n  }\n  const itemsToShow = query ? filteredLabels : data.labels.sort(sortingFn)\n  return (\n    <>\n      <SelectPanel\n        title=\"Select labels\"\n        onSubmit={onSubmit}\n        onCancel={onCancel}\n        onClearSelection={onClearSelection}\n      >\n        <SelectPanel.Button>Assign label</SelectPanel.Button>\n\n        <SelectPanel.Header>\n          <SelectPanel.SearchInput onChange={onSearchInputChange} />\n        </SelectPanel.Header>\n\n        {itemsToShow.length === 0 ? (\n          <SelectPanel.Message\n            variant=\"empty\"\n            title={`No labels found for \"${query}\"`}\n          >\n            Try a different search term\n          </SelectPanel.Message>\n        ) : (\n          <ActionList>\n            {itemsToShow.map((label) => (\n              <ActionList.Item\n                key={label.id}\n                onSelect={() => onLabelSelect(label.id)}\n                selected={selectedLabelIds.includes(label.id)}\n              >\n                <ActionList.LeadingVisual>\n                  <Box\n                    sx={{\n                      width: 14,\n                      height: 14,\n                      borderRadius: '100%',\n                    }}\n                    style={{\n                      backgroundColor: `#${label.color}`,\n                    }}\n                  />\n                </ActionList.LeadingVisual>\n                {label.name}\n                <ActionList.Description variant=\"block\">\n                  {label.description}\n                </ActionList.Description>\n              </ActionList.Item>\n            ))}\n          </ActionList>\n        )}\n\n        <SelectPanel.Footer>\n          <SelectPanel.SecondaryAction variant=\"button\">\n            Edit labels\n          </SelectPanel.SecondaryAction>\n        </SelectPanel.Footer>\n      </SelectPanel>\n    </>\n  )\n}"
        },
        {
          "id": "drafts-components-selectpanel-features--instant-selection-variant",
          "code": "() => {\n  const [selectedTag, setSelectedTag] = React.useState<string>()\n  const onSubmit = () => {\n    if (!selectedTag) return\n    data.ref = selectedTag // pretending to persist changes\n  }\n  const itemsToShow = data.tags\n  return (\n    <>\n      <h1>Instant selection variant</h1>\n\n      <SelectPanel\n        title=\"Choose a tag\"\n        selectionVariant=\"instant\"\n        onSubmit={onSubmit}\n      >\n        <SelectPanel.Button leadingVisual={TagIcon}>\n          {selectedTag || 'Choose a tag'}\n        </SelectPanel.Button>\n\n        <ActionList>\n          {itemsToShow.map((tag) => (\n            <ActionList.Item\n              key={tag.id}\n              onSelect={() => setSelectedTag(tag.id)}\n              selected={selectedTag === tag.id}\n            >\n              {tag.name}\n            </ActionList.Item>\n          ))}\n        </ActionList>\n        <SelectPanel.Footer>\n          <SelectPanel.SecondaryAction variant=\"button\">\n            Edit tags\n          </SelectPanel.SecondaryAction>\n        </SelectPanel.Footer>\n      </SelectPanel>\n    </>\n  )\n}"
        },
        {
          "id": "drafts-components-selectpanel-features--single-selection",
          "code": "() => <h1>TODO</h1>"
        },
        {
          "id": "drafts-components-selectpanel-features--with-warning",
          "code": "() => {\n  /* Selection */\n\n  const initialAssigneeIds = data.issue.assigneeIds // mock initial state\n  const [selectedAssigneeIds, setSelectedAssigneeIds] =\n    React.useState<string[]>(initialAssigneeIds)\n  const MAX_LIMIT = 3\n  const onCollaboratorSelect = (colloratorId: string) => {\n    if (!selectedAssigneeIds.includes(colloratorId))\n      setSelectedAssigneeIds([...selectedAssigneeIds, colloratorId])\n    else\n      setSelectedAssigneeIds(\n        selectedAssigneeIds.filter((id) => id !== colloratorId),\n      )\n  }\n  const onClearSelection = () => setSelectedAssigneeIds([])\n  const onSubmit = () => {\n    data.issue.assigneeIds = selectedAssigneeIds // pretending to persist changes\n  }\n  const onCancel = () => {\n    setSelectedAssigneeIds(initialAssigneeIds)\n  }\n\n  /* Filtering */\n  const [filteredUsers, setFilteredUsers] = React.useState(data.collaborators)\n  const [query, setQuery] = React.useState('')\n  const onSearchInputChange: React.ChangeEventHandler<HTMLInputElement> = (\n    event,\n  ) => {\n    const query = event.currentTarget.value\n    setQuery(query)\n    if (query === '') setFilteredUsers(data.collaborators)\n    else {\n      setFilteredUsers(\n        data.collaborators\n          .map((collaborator) => {\n            if (collaborator.login.toLowerCase().startsWith(query))\n              return {\n                priority: 1,\n                collaborator,\n              }\n            else if (collaborator.name.startsWith(query))\n              return {\n                priority: 2,\n                collaborator,\n              }\n            else if (collaborator.login.toLowerCase().includes(query))\n              return {\n                priority: 3,\n                collaborator,\n              }\n            else if (collaborator.name.toLowerCase().includes(query))\n              return {\n                priority: 4,\n                collaborator,\n              }\n            else\n              return {\n                priority: -1,\n                collaborator,\n              }\n          })\n          .filter((result) => result.priority > 0)\n          .map((result) => result.collaborator),\n      )\n    }\n  }\n  const sortingFn = (\n    itemA: {\n      id: string\n    },\n    itemB: {\n      id: string\n    },\n  ) => {\n    const initialSelectedIds = data.issue.assigneeIds\n    if (\n      initialSelectedIds.includes(itemA.id) &&\n      initialSelectedIds.includes(itemB.id)\n    )\n      return 1\n    else if (initialSelectedIds.includes(itemA.id)) return -1\n    else if (initialSelectedIds.includes(itemB.id)) return 1\n    else return 1\n  }\n  const itemsToShow = query ? filteredUsers : data.collaborators.sort(sortingFn)\n  return (\n    <>\n      <h1>SelectPanel with warning</h1>\n\n      <SelectPanel\n        title=\"Set assignees\"\n        description={`Select up to ${MAX_LIMIT} people`}\n        onSubmit={onSubmit}\n        onCancel={onCancel}\n        onClearSelection={onClearSelection}\n      >\n        <SelectPanel.Button\n          variant=\"invisible\"\n          trailingAction={GearIcon}\n          sx={{\n            width: '200px',\n            '[data-component=buttonContent]': {\n              justifyContent: 'start',\n            },\n          }}\n        >\n          Assignees\n        </SelectPanel.Button>\n        <SelectPanel.Header>\n          <SelectPanel.SearchInput onChange={onSearchInputChange} />\n        </SelectPanel.Header>\n\n        {selectedAssigneeIds.length >= MAX_LIMIT ? (\n          <SelectPanel.Message variant=\"warning\" size=\"inline\">\n            You have reached the limit of {MAX_LIMIT} assignees on your free\n            account. <Link href=\"/upgrade\">Upgrade your account.</Link>\n          </SelectPanel.Message>\n        ) : null}\n\n        {itemsToShow.length === 0 ? (\n          <SelectPanel.Message\n            variant=\"empty\"\n            title={`No labels found for \"${query}\"`}\n          >\n            Try a different search term\n          </SelectPanel.Message>\n        ) : (\n          <ActionList>\n            {itemsToShow.map((collaborator) => (\n              <ActionList.Item\n                key={collaborator.id}\n                onSelect={() => onCollaboratorSelect(collaborator.id)}\n                selected={selectedAssigneeIds.includes(collaborator.id)}\n                disabled={\n                  selectedAssigneeIds.length >= MAX_LIMIT &&\n                  !selectedAssigneeIds.includes(collaborator.id)\n                }\n              >\n                <ActionList.LeadingVisual>\n                  <Avatar\n                    src={`https://github.com/${collaborator.login}.png`}\n                  />\n                </ActionList.LeadingVisual>\n                {collaborator.login}\n                <ActionList.Description>\n                  {collaborator.login}\n                </ActionList.Description>\n              </ActionList.Item>\n            ))}\n          </ActionList>\n        )}\n\n        <SelectPanel.Footer />\n      </SelectPanel>\n    </>\n  )\n}"
        },
        {
          "id": "drafts-components-selectpanel-features--with-errors",
          "code": "() => {\n  const [searchBroken, setSearchBroken] = React.useState(true)\n  const [issuesBroken, setIssuesBroken] = React.useState(false)\n\n  /* Selection */\n  const initialAssigneeIds = data.collaborators.slice(0, 3).map((c) => c.id) // mock initial state\n  const [selectedAssigneeIds, setSelectedAssigneeIds] =\n    React.useState<string[]>(initialAssigneeIds)\n  const onCollaboratorSelect = (colloratorId: string) => {\n    if (!selectedAssigneeIds.includes(colloratorId))\n      setSelectedAssigneeIds([...selectedAssigneeIds, colloratorId])\n    else\n      setSelectedAssigneeIds(\n        selectedAssigneeIds.filter((id) => id !== colloratorId),\n      )\n  }\n  const onClearSelection = () => setSelectedAssigneeIds([])\n  const onSubmit = () => {\n    data.issue.assigneeIds = selectedAssigneeIds // pretending to persist changes\n  }\n  const onCancel = () => {\n    setSelectedAssigneeIds(initialAssigneeIds)\n  }\n\n  /* Filtering */\n  const [filteredUsers, setFilteredUsers] = React.useState(\n    searchBroken\n      ? data.collaborators.filter((c) => initialAssigneeIds.includes(c.id))\n      : data.collaborators,\n  )\n  const [query, setQuery] = React.useState('')\n  const onSearchInputChange: React.ChangeEventHandler<HTMLInputElement> = (\n    event,\n  ) => {\n    const query = event.currentTarget.value\n    setQuery(query)\n    if (query === '') setFilteredUsers(data.collaborators)\n    else {\n      // if search is broken, only show assignees, not all collaborators\n      const allCollaborators = searchBroken\n        ? data.collaborators.filter((c) => initialAssigneeIds.includes(c.id))\n        : data.collaborators\n      setFilteredUsers(\n        allCollaborators\n          .map((collaborator) => {\n            if (collaborator.login.toLowerCase().startsWith(query))\n              return {\n                priority: 1,\n                collaborator,\n              }\n            else if (collaborator.name.startsWith(query))\n              return {\n                priority: 2,\n                collaborator,\n              }\n            else if (collaborator.login.toLowerCase().includes(query))\n              return {\n                priority: 3,\n                collaborator,\n              }\n            else if (collaborator.name.toLowerCase().includes(query))\n              return {\n                priority: 4,\n                collaborator,\n              }\n            else\n              return {\n                priority: -1,\n                collaborator,\n              }\n          })\n          .filter((result) => result.priority > 0)\n          .map((result) => result.collaborator),\n      )\n    }\n  }\n  const sortingFn = (\n    itemA: {\n      id: string\n    },\n    itemB: {\n      id: string\n    },\n  ) => {\n    const initialSelectedIds = data.issue.assigneeIds\n    if (\n      initialSelectedIds.includes(itemA.id) &&\n      initialSelectedIds.includes(itemB.id)\n    )\n      return 1\n    else if (initialSelectedIds.includes(itemA.id)) return -1\n    else if (initialSelectedIds.includes(itemB.id)) return 1\n    else return 1\n  }\n  const itemsToShow = query ? filteredUsers : data.collaborators.sort(sortingFn)\n  return (\n    <>\n      <h1>SelectPanel with Errors</h1>\n\n      <Box\n        sx={{\n          display: 'flex',\n          maxWidth: 600,\n          marginBottom: 2,\n        }}\n      >\n        <Box\n          sx={{\n            flexGrow: 1,\n          }}\n        >\n          <Text\n            sx={{\n              fontSize: 2,\n              fontWeight: 'bold',\n              display: 'block',\n            }}\n            id=\"switch-label\"\n          >\n            Break search API\n          </Text>\n          <Text\n            sx={{\n              fontSize: 1,\n              color: 'fg.subtle',\n            }}\n            id=\"switch-caption\"\n          >\n            Turn on to show error message while searching\n          </Text>\n        </Box>\n        <ToggleSwitch\n          defaultChecked={true}\n          onChange={(enabled) => setSearchBroken(enabled)}\n          aria-labelledby=\"switch-label\"\n          aria-describedby=\"switch-caption\"\n        />\n      </Box>\n      <Box\n        sx={{\n          display: 'flex',\n          marginBottom: 5,\n          maxWidth: 600,\n        }}\n      >\n        <Box\n          sx={{\n            flexGrow: 1,\n          }}\n        >\n          <Text\n            id=\"break-issues-label\"\n            sx={{\n              fontSize: 2,\n              fontWeight: 'bold',\n              display: 'block',\n            }}\n          >\n            Break issues API\n          </Text>\n          <Text\n            id=\"break-issues-caption\"\n            sx={{\n              fontSize: 1,\n              color: 'fg.subtle',\n            }}\n          >\n            Turn on to break everything and show big error in panel\n          </Text>\n        </Box>\n        <ToggleSwitch\n          defaultChecked={false}\n          onChange={(enabled) => setIssuesBroken(enabled)}\n          aria-labelledby=\"break-issues-label\"\n          aria-describedby=\"break-issues-caption\"\n        />\n      </Box>\n\n      <SelectPanel\n        title=\"Set assignees\"\n        onSubmit={onSubmit}\n        onCancel={onCancel}\n        onClearSelection={onClearSelection}\n      >\n        <SelectPanel.Button\n          variant=\"invisible\"\n          trailingAction={GearIcon}\n          sx={{\n            width: '200px',\n            '[data-component=buttonContent]': {\n              justifyContent: 'start',\n            },\n          }}\n        >\n          Assignees\n        </SelectPanel.Button>\n        <SelectPanel.Header>\n          <SelectPanel.SearchInput onChange={onSearchInputChange} />\n        </SelectPanel.Header>\n\n        {issuesBroken ? (\n          <SelectPanel.Message\n            variant=\"error\"\n            size=\"full\"\n            title=\"We couldn't load collaborators\"\n          >\n            Try again or if the problem persists,{' '}\n            <Link href=\"/support\">contact support</Link>\n          </SelectPanel.Message>\n        ) : (\n          <>\n            {query && searchBroken ? (\n              <SelectPanel.Message variant=\"error\" size=\"inline\">\n                We couldn&apos;t load all collaborators. Try again or if the\n                problem persists, <Link href=\"/support\">contact support</Link>\n              </SelectPanel.Message>\n            ) : null}\n            {itemsToShow.length === 0 ? (\n              <SelectPanel.Message\n                variant=\"empty\"\n                title={`No labels found for \"${query}\"`}\n              >\n                Try a different search term\n              </SelectPanel.Message>\n            ) : (\n              <ActionList>\n                {itemsToShow.map((collaborator) => (\n                  <ActionList.Item\n                    key={collaborator.id}\n                    onSelect={() => onCollaboratorSelect(collaborator.id)}\n                    selected={selectedAssigneeIds.includes(collaborator.id)}\n                  >\n                    <ActionList.LeadingVisual>\n                      <Avatar\n                        src={`https://github.com/${collaborator.login}.png`}\n                      />\n                    </ActionList.LeadingVisual>\n                    {collaborator.login}\n                    <ActionList.Description>\n                      {collaborator.login}\n                    </ActionList.Description>\n                  </ActionList.Item>\n                ))}\n              </ActionList>\n            )}\n          </>\n        )}\n\n        <SelectPanel.Footer />\n      </SelectPanel>\n    </>\n  )\n}"
        },
        {
          "id": "drafts-components-selectpanel-features--external-anchor",
          "code": "() => {\n  const initialSelectedLabels = data.issue.labelIds // mock initial state: has selected labels\n  const [selectedLabelIds, setSelectedLabelIds] = React.useState<string[]>(\n    initialSelectedLabels,\n  )\n\n  /* Selection */\n  const onLabelSelect = (labelId: string) => {\n    if (!selectedLabelIds.includes(labelId))\n      setSelectedLabelIds([...selectedLabelIds, labelId])\n    else setSelectedLabelIds(selectedLabelIds.filter((id) => id !== labelId))\n  }\n  const onSubmit = () => {\n    data.issue.labelIds = selectedLabelIds // pretending to persist changes\n\n    // eslint-disable-next-line no-console\n    console.log('form submitted')\n  }\n  const onCancel = () => {\n    setSelectedLabelIds(initialSelectedLabels)\n  }\n  const sortingFn = (\n    itemA: {\n      id: string\n    },\n    itemB: {\n      id: string\n    },\n  ) => {\n    const initialSelectedIds = data.issue.labelIds\n    if (\n      initialSelectedIds.includes(itemA.id) &&\n      initialSelectedIds.includes(itemB.id)\n    )\n      return 1\n    else if (initialSelectedIds.includes(itemA.id)) return -1\n    else if (initialSelectedIds.includes(itemB.id)) return 1\n    else return 1\n  }\n  const itemsToShow = data.labels.sort(sortingFn)\n  const anchorRef = React.useRef<HTMLButtonElement>(null)\n  const [open, setOpen] = React.useState(false)\n  return (\n    <>\n      <h1>With External Anchor</h1>\n      <p>\n        To use an external anchor, pass an `anchorRef` to `SelectPanel`. You\n        would also need to control the `open` state with `onSubmit` and\n        `onCancel`\n      </p>\n\n      <Button\n        ref={anchorRef}\n        variant=\"primary\"\n        onClick={() => setOpen(!open)}\n        aria-haspopup\n        aria-expanded={open ? true : undefined}\n      >\n        Assign label\n      </Button>\n\n      <SelectPanel\n        title=\"Select labels\"\n        anchorRef={anchorRef}\n        open={open} // this needs to be set with the button\n        onSubmit={() => {\n          setOpen(false) // close on submit\n          onSubmit()\n        }}\n        onCancel={() => {\n          onCancel()\n          setOpen(false) // close on cancel\n        }}\n      >\n        <ActionList>\n          {itemsToShow.map((label) => (\n            <ActionList.Item\n              key={label.id}\n              onSelect={() => onLabelSelect(label.id)}\n              selected={selectedLabelIds.includes(label.id)}\n            >\n              <ActionList.LeadingVisual>\n                {getCircle(label.color)}\n              </ActionList.LeadingVisual>\n              {label.name}\n              <ActionList.Description variant=\"block\">\n                {label.description}\n              </ActionList.Description>\n            </ActionList.Item>\n          ))}\n        </ActionList>\n        <SelectPanel.Footer />\n      </SelectPanel>\n    </>\n  )\n}"
        },
        {
          "id": "drafts-components-selectpanel-features--as-modal",
          "code": "() => {\n  const initialSelectedLabels = data.issue.labelIds // mock initial state: has selected labels\n  const [selectedLabelIds, setSelectedLabelIds] = React.useState<string[]>(\n    initialSelectedLabels,\n  )\n\n  /* Selection */\n  const onLabelSelect = (labelId: string) => {\n    if (!selectedLabelIds.includes(labelId))\n      setSelectedLabelIds([...selectedLabelIds, labelId])\n    else setSelectedLabelIds(selectedLabelIds.filter((id) => id !== labelId))\n  }\n  const onSubmit = () => {\n    data.issue.labelIds = selectedLabelIds // pretending to persist changes\n\n    // eslint-disable-next-line no-console\n    console.log('form submitted')\n  }\n  const onCancel = () => {\n    setSelectedLabelIds(initialSelectedLabels)\n  }\n  const sortingFn = (\n    itemA: {\n      id: string\n    },\n    itemB: {\n      id: string\n    },\n  ) => {\n    const initialSelectedIds = data.issue.labelIds\n    if (\n      initialSelectedIds.includes(itemA.id) &&\n      initialSelectedIds.includes(itemB.id)\n    )\n      return 1\n    else if (initialSelectedIds.includes(itemA.id)) return -1\n    else if (initialSelectedIds.includes(itemB.id)) return 1\n    else return 1\n  }\n  const itemsToShow = data.labels.sort(sortingFn)\n  return (\n    <>\n      <h1>SelectPanel as Modal</h1>\n\n      <SelectPanel\n        variant=\"modal\"\n        title=\"Select labels\"\n        onSubmit={onSubmit}\n        onCancel={onCancel}\n      >\n        <SelectPanel.Button>Assign label</SelectPanel.Button>\n\n        <ActionList>\n          {itemsToShow.map((label) => (\n            <ActionList.Item\n              key={label.id}\n              onSelect={() => onLabelSelect(label.id)}\n              selected={selectedLabelIds.includes(label.id)}\n            >\n              <ActionList.LeadingVisual>\n                {getCircle(label.color)}\n              </ActionList.LeadingVisual>\n              {label.name}\n              <ActionList.Description variant=\"block\">\n                {label.description}\n              </ActionList.Description>\n            </ActionList.Item>\n          ))}\n        </ActionList>\n        <SelectPanel.Footer />\n      </SelectPanel>\n    </>\n  )\n}"
        },
        {
          "id": "drafts-components-selectpanel-features--responsive-variants",
          "code": "() => {\n  /* Selection */\n  const initialAssigneeIds = data.issue.assigneeIds // mock initial state\n  const [selectedAssigneeIds, setSelectedAssigneeIds] =\n    React.useState<string[]>(initialAssigneeIds)\n  const onCollaboratorSelect = (colloratorId: string) => {\n    if (!selectedAssigneeIds.includes(colloratorId))\n      setSelectedAssigneeIds([...selectedAssigneeIds, colloratorId])\n    else\n      setSelectedAssigneeIds(\n        selectedAssigneeIds.filter((id) => id !== colloratorId),\n      )\n  }\n  const onClearSelection = () => setSelectedAssigneeIds([])\n  const onSubmit = () => {\n    data.issue.assigneeIds = selectedAssigneeIds // pretending to persist changes\n  }\n\n  /* Filtering */\n  const [filteredUsers, setFilteredUsers] = React.useState(data.collaborators)\n  const [query, setQuery] = React.useState('')\n  const onSearchInputChange: React.ChangeEventHandler<HTMLInputElement> = (\n    event,\n  ) => {\n    const query = event.currentTarget.value\n    setQuery(query)\n    if (query === '') setFilteredUsers(data.collaborators)\n    else {\n      setFilteredUsers(\n        data.collaborators\n          .map((collaborator) => {\n            if (collaborator.login.toLowerCase().startsWith(query))\n              return {\n                priority: 1,\n                collaborator,\n              }\n            else if (collaborator.name.startsWith(query))\n              return {\n                priority: 2,\n                collaborator,\n              }\n            else if (collaborator.login.toLowerCase().includes(query))\n              return {\n                priority: 3,\n                collaborator,\n              }\n            else if (collaborator.name.toLowerCase().includes(query))\n              return {\n                priority: 4,\n                collaborator,\n              }\n            else\n              return {\n                priority: -1,\n                collaborator,\n              }\n          })\n          .filter((result) => result.priority > 0)\n          .map((result) => result.collaborator),\n      )\n    }\n  }\n  const sortingFn = (\n    itemA: {\n      id: string\n    },\n    itemB: {\n      id: string\n    },\n  ) => {\n    const initialSelectedIds = data.issue.assigneeIds\n    if (\n      initialSelectedIds.includes(itemA.id) &&\n      initialSelectedIds.includes(itemB.id)\n    )\n      return 1\n    else if (initialSelectedIds.includes(itemA.id)) return -1\n    else if (initialSelectedIds.includes(itemB.id)) return 1\n    else return 1\n  }\n  const itemsToShow = query ? filteredUsers : data.collaborators.sort(sortingFn)\n\n  /** Controls for story/example */\n  const { variant, Controls } = useResponsiveControlsForStory()\n  return (\n    <>\n      <h1>Responsive SelectPanel</h1>\n\n      {Controls}\n\n      <SelectPanel\n        title=\"Set assignees\"\n        variant={variant}\n        onSubmit={onSubmit}\n        onClearSelection={onClearSelection}\n      >\n        <SelectPanel.Button\n          variant=\"invisible\"\n          trailingAction={GearIcon}\n          sx={{\n            width: '200px',\n            '[data-component=buttonContent]': {\n              justifyContent: 'start',\n            },\n          }}\n        >\n          Assignees\n        </SelectPanel.Button>\n        <SelectPanel.Header>\n          <SelectPanel.SearchInput onChange={onSearchInputChange} />\n        </SelectPanel.Header>\n\n        {itemsToShow.length === 0 ? (\n          <SelectPanel.Message\n            variant=\"empty\"\n            title={`No labels found for \"${query}\"`}\n          >\n            Try a different search term\n          </SelectPanel.Message>\n        ) : (\n          <ActionList>\n            {itemsToShow.map((collaborator) => (\n              <ActionList.Item\n                key={collaborator.id}\n                onSelect={() => onCollaboratorSelect(collaborator.id)}\n                selected={selectedAssigneeIds.includes(collaborator.id)}\n              >\n                <ActionList.LeadingVisual>\n                  <Avatar\n                    src={`https://github.com/${collaborator.login}.png`}\n                  />\n                </ActionList.LeadingVisual>\n                {collaborator.login}\n                <ActionList.Description>\n                  {collaborator.login}\n                </ActionList.Description>\n              </ActionList.Item>\n            ))}\n          </ActionList>\n        )}\n\n        <SelectPanel.Footer />\n      </SelectPanel>\n    </>\n  )\n}"
        }
      ],
      "importPath": "@primer/react/drafts",
      "props": [
        {
          "name": "title",
          "type": "string",
          "required": true,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "anchorRef",
          "type": "RefObject<HTMLButtonElement>",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "children",
          "type": "ReactNode",
          "required": false,
          "description": "",
          "defaultValue": "Fetching items..."
        },
        {
          "name": "defaultOpen",
          "type": "boolean",
          "required": false,
          "description": "",
          "defaultValue": false
        },
        {
          "name": "description",
          "type": "string",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "height",
          "type": "\"fit-content\"",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "id",
          "type": "string",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "maxHeight",
          "type": "\"small\" | \"large\" | \"medium\" | \"fit-content\" | \"xlarge\"",
          "required": false,
          "description": "",
          "defaultValue": "large"
        },
        {
          "name": "onCancel",
          "type": "() => void",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "onClearSelection",
          "type": "() => void",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "onSubmit",
          "type": "(event?: FormEvent<HTMLFormElement> | undefined) => void",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "open",
          "type": "boolean",
          "required": false,
          "description": "",
          "defaultValue": ""
        },
        {
          "name": "selectionVariant",
          "type": "\"multiple\" | \"single\" | \"instant\"",
          "required": false,
          "description": "",
          "defaultValue": "multiple"
        },
        {
          "name": "variant",
          "type": "\"anchored\" | \"modal\" | ResponsiveValue<\"anchored\" | \"modal\", \"full-screen\" | \"bottom-sheet\">",
          "required": false,
          "description": "",
          "defaultValue": "warning"
        },
        {
          "name": "width",
          "type": "\"small\" | \"large\" | \"medium\" | \"auto\" | \"xlarge\" | \"xxlarge\"",
          "required": false,
          "description": "",
          "defaultValue": "medium"
        }
      ],
      "subcomponents": [
        {
          "name": "SelectPanel.Button",
          "props": [
            {
              "name": "alignContent",
              "type": "\"center\" | \"start\"",
              "required": false,
              "description": "Content alignment for when visuals are present",
              "defaultValue": ""
            },
            {
              "name": "block",
              "type": "boolean",
              "required": false,
              "description": "Allow button width to fill its container.",
              "defaultValue": ""
            },
            {
              "name": "children",
              "type": "ReactNode",
              "required": false,
              "description": "",
              "defaultValue": "Fetching items..."
            },
            {
              "name": "count",
              "type": "number",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "disabled",
              "type": "boolean",
              "required": false,
              "description": "Items that are disabled can not be clicked, selected, or navigated through.",
              "defaultValue": ""
            },
            {
              "name": "icon",
              "type": "null | \"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
              "required": false,
              "description": "The icon for the IconButton",
              "defaultValue": ""
            },
            {
              "name": "inactive",
              "type": "boolean",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "labelWrap",
              "type": "boolean",
              "required": false,
              "description": "Whether the button label should wrap to multiple lines of it is longer than the button width.",
              "defaultValue": ""
            },
            {
              "name": "leadingVisual",
              "type": "null | \"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
              "required": false,
              "description": "The leading visual which comes before the button content",
              "defaultValue": ""
            },
            {
              "name": "loading",
              "type": "boolean",
              "required": false,
              "description": "When true, the button is in a loading state.",
              "defaultValue": ""
            },
            {
              "name": "loadingAnnouncement",
              "type": "string",
              "required": false,
              "description": "The content to announce to screen readers when loading.",
              "defaultValue": ""
            },
            {
              "name": "size",
              "type": "\"small\" | \"large\" | \"medium\"",
              "required": false,
              "description": "Size of button and fontSize of text in button",
              "defaultValue": "variant === 'empty' ? 'full' : 'inline'"
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            },
            {
              "name": "trailingAction",
              "type": "null | \"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
              "required": false,
              "description": "Trailing action appears to the right of the trailing visual and is always locked to the end",
              "defaultValue": ""
            },
            {
              "name": "trailingVisual",
              "type": "null | \"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
              "required": false,
              "description": "The trailing visual which comes after the button content",
              "defaultValue": ""
            },
            {
              "name": "variant",
              "type": "\"link\" | \"default\" | \"danger\" | \"primary\" | \"invisible\"",
              "required": false,
              "description": "Determine's the styles on a button one of 'default' | 'primary' | 'invisible' | 'danger'",
              "defaultValue": "warning"
            }
          ]
        },
        {
          "name": "SelectPanel.Footer",
          "props": []
        },
        {
          "name": "SelectPanel.Header",
          "props": [
            {
              "name": "onBack",
              "type": "() => void",
              "required": false,
              "description": "",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "SelectPanel.Loading",
          "props": []
        },
        {
          "name": "SelectPanel.Message",
          "props": [
            {
              "name": "children",
              "type": "ReactNode",
              "required": false,
              "description": "",
              "defaultValue": "Fetching items..."
            },
            {
              "name": "size",
              "type": "\"inline\" | \"full\"",
              "required": false,
              "description": "",
              "defaultValue": "variant === 'empty' ? 'full' : 'inline'"
            },
            {
              "name": "title",
              "type": "string",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "variant",
              "type": "\"error\" | \"warning\" | \"empty\"",
              "required": false,
              "description": "",
              "defaultValue": "warning"
            }
          ]
        },
        {
          "name": "SelectPanel.SearchInput",
          "props": [
            {
              "name": "block",
              "type": "boolean",
              "required": false,
              "description": "Whether the input takes up the full width of its parent",
              "defaultValue": ""
            },
            {
              "name": "contrast",
              "type": "boolean",
              "required": false,
              "description": "Whether the background color of the input has contrast against the default background color.",
              "defaultValue": ""
            },
            {
              "name": "disabled",
              "type": "boolean",
              "required": false,
              "description": "Whether the input is styled to look disabled.",
              "defaultValue": ""
            },
            {
              "name": "icon",
              "type": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
              "required": false,
              "description": "@deprecated Use `leadingVisual` or `trailingVisual` prop instead",
              "defaultValue": ""
            },
            {
              "name": "leadingVisual",
              "type": "null | string | number | false | true | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | ComponentClass<any, any> | FunctionComponent<any>",
              "required": false,
              "description": "A visual that renders inside the input before the typing area",
              "defaultValue": ""
            },
            {
              "name": "loaderPosition",
              "type": "\"auto\" | \"leading\" | \"trailing\"",
              "required": false,
              "description": "Which position to render the loading indicator\n'auto' (default): at the end of the input, unless a `leadingVisual` is passed. Then, it will render at the beginning\n'leading': at the beginning of the input\n'trailing': at the end of the input",
              "defaultValue": ""
            },
            {
              "name": "loading",
              "type": "boolean",
              "required": false,
              "description": "Whether the to show a loading indicator in the input",
              "defaultValue": ""
            },
            {
              "name": "monospace",
              "type": "boolean",
              "required": false,
              "description": "Whether the text rendered in the input is in a monospace font.",
              "defaultValue": ""
            },
            {
              "name": "size",
              "type": "\"small\" | \"large\" | \"medium\"",
              "required": false,
              "description": "The size of the input.",
              "defaultValue": "variant === 'empty' ? 'full' : 'inline'"
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            },
            {
              "name": "trailingAction",
              "type": "ReactElement<HTMLProps<HTMLButtonElement>, string | JSXElementConstructor<any>>",
              "required": false,
              "description": "A visual that renders inside the input after the typing area",
              "defaultValue": ""
            },
            {
              "name": "trailingVisual",
              "type": "null | string | number | false | true | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | ComponentClass<any, any> | FunctionComponent<any>",
              "required": false,
              "description": "A visual that renders inside the input after the typing area",
              "defaultValue": ""
            },
            {
              "name": "validationStatus",
              "type": "\"success\" | \"error\"",
              "required": false,
              "description": "The result of validation on the input.",
              "defaultValue": ""
            },
            {
              "name": "variant",
              "type": "\"small\" | \"large\" | \"medium\"",
              "required": false,
              "description": "@deprecated Use `size` prop instead",
              "defaultValue": "warning"
            }
          ]
        },
        {
          "name": "SelectPanel.SecondaryAction",
          "props": [
            {
              "name": "alignContent",
              "type": "\"center\" | \"start\"",
              "required": false,
              "description": "Content alignment for when visuals are present",
              "defaultValue": ""
            },
            {
              "name": "as",
              "type": "\"a\"",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "block",
              "type": "boolean",
              "required": false,
              "description": "Allow button width to fill its container.",
              "defaultValue": ""
            },
            {
              "name": "children",
              "type": "ReactNode",
              "required": false,
              "description": "",
              "defaultValue": "Fetching items..."
            },
            {
              "name": "count",
              "type": "number",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "disabled",
              "type": "boolean",
              "required": false,
              "description": "Items that are disabled can not be clicked, selected, or navigated through.\nApply inactive visual appearance to the checkbox",
              "defaultValue": ""
            },
            {
              "name": "hoverColor",
              "type": "string",
              "required": false,
              "description": "Color used when hovering over the link.",
              "defaultValue": ""
            },
            {
              "name": "icon",
              "type": "null | \"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
              "required": false,
              "description": "The icon for the IconButton",
              "defaultValue": ""
            },
            {
              "name": "id",
              "type": "string",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "inactive",
              "type": "boolean",
              "required": false,
              "description": "",
              "defaultValue": ""
            },
            {
              "name": "indeterminate",
              "type": "boolean",
              "required": false,
              "description": "Apply indeterminate visual appearance to the checkbox",
              "defaultValue": ""
            },
            {
              "name": "inline",
              "type": "boolean",
              "required": false,
              "description": "Set to true for links adjacent to text, underlining them for clear visibility and improved accessibility.",
              "defaultValue": ""
            },
            {
              "name": "labelWrap",
              "type": "boolean",
              "required": false,
              "description": "Whether the button label should wrap to multiple lines of it is longer than the button width.",
              "defaultValue": ""
            },
            {
              "name": "leadingVisual",
              "type": "null | \"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
              "required": false,
              "description": "The leading visual which comes before the button content",
              "defaultValue": ""
            },
            {
              "name": "loading",
              "type": "boolean",
              "required": false,
              "description": "When true, the button is in a loading state.",
              "defaultValue": ""
            },
            {
              "name": "loadingAnnouncement",
              "type": "string",
              "required": false,
              "description": "The content to announce to screen readers when loading.",
              "defaultValue": ""
            },
            {
              "name": "muted",
              "type": "boolean",
              "required": false,
              "description": "Uses a less prominent shade for Link color, and the default link shade on hover.",
              "defaultValue": ""
            },
            {
              "name": "ref",
              "type": "null | (instance: HTMLAnchorElement | null) => void | RefObject<HTMLAnchorElement> | RefObject<HTMLInputElement>",
              "required": false,
              "description": "Forward a ref to the underlying input element",
              "defaultValue": ""
            },
            {
              "name": "required",
              "type": "boolean",
              "required": false,
              "description": "Indicates whether the checkbox must be checked",
              "defaultValue": ""
            },
            {
              "name": "size",
              "type": "number | \"small\" | \"large\" | \"medium\"",
              "required": false,
              "description": "Size of button and fontSize of text in button",
              "defaultValue": "variant === 'empty' ? 'full' : 'inline'"
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            },
            {
              "name": "trailingAction",
              "type": "null | \"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
              "required": false,
              "description": "Trailing action appears to the right of the trailing visual and is always locked to the end",
              "defaultValue": ""
            },
            {
              "name": "trailingVisual",
              "type": "null | \"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | \"caption\" | \"center\" | \"cite\" | \"code\" | \"col\" | \"colgroup\" | \"data\" | \"datalist\" | \"dd\" | \"del\" | \"details\" | \"dfn\" | \"dialog\" | \"div\" | \"dl\" | \"dt\" | \"em\" | \"embed\" | \"fieldset\" | \"figcaption\" | \"figure\" | \"footer\" | \"form\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"head\" | \"header\" | \"hgroup\" | \"hr\" | \"html\" | \"i\" | \"iframe\" | \"img\" | \"input\" | \"ins\" | \"kbd\" | \"keygen\" | \"label\" | \"legend\" | \"li\" | \"link\" | \"main\" | \"map\" | \"mark\" | \"menu\" | \"menuitem\" | \"meta\" | \"meter\" | \"nav\" | \"noindex\" | \"noscript\" | \"ol\" | \"optgroup\" | \"option\" | \"output\" | \"p\" | \"param\" | \"picture\" | \"pre\" | \"progress\" | \"q\" | \"rp\" | \"rt\" | \"ruby\" | \"s\" | \"samp\" | \"search\" | \"slot\" | \"script\" | \"section\" | \"select\" | \"small\" | \"source\" | \"span\" | \"strong\" | \"style\" | \"sub\" | \"summary\" | \"sup\" | \"table\" | \"template\" | \"tbody\" | \"td\" | \"textarea\" | \"tfoot\" | \"th\" | \"thead\" | \"time\" | \"title\" | \"tr\" | \"track\" | \"u\" | \"ul\" | \"var\" | \"video\" | \"wbr\" | \"webview\" | \"svg\" | \"animate\" | \"animateMotion\" | \"animateTransform\" | \"circle\" | \"clipPath\" | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"filter\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"marker\" | \"mask\" | \"metadata\" | \"mpath\" | \"path\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"set\" | \"stop\" | \"switch\" | \"text\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" | \"relative-time\" | \"tab-container\" | ComponentClass<any, any> | FunctionComponent<any>",
              "required": false,
              "description": "The trailing visual which comes after the button content",
              "defaultValue": ""
            },
            {
              "name": "underline",
              "type": "boolean",
              "required": false,
              "description": "@deprecated use `inline` to specify the type of link instead",
              "defaultValue": ""
            },
            {
              "name": "validationStatus",
              "type": "\"success\" | \"error\"",
              "required": false,
              "description": "Only used to inform ARIA attributes. Individual checkboxes do not have validation styles.",
              "defaultValue": ""
            },
            {
              "name": "value",
              "type": "string | number | readonly string[] | string & readonly string[]",
              "required": false,
              "description": "A unique value that is never shown to the user.\nUsed during form submission and to identify which checkbox inputs are selected",
              "defaultValue": ""
            },
            {
              "name": "variant",
              "type": "\"button\" | \"link\" | \"checkbox\"",
              "required": false,
              "description": "",
              "defaultValue": "warning"
            }
          ]
        }
      ]
    },
    "skeleton_avatar": {
      "id": "skeleton_avatar",
      "name": "SkeletonAvatar",
      "status": "draft",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "drafts-components-skeletonavatar--default",
          "code": "() => <SkeletonAvatar />"
        },
        {
          "id": "drafts-components-skeletonavatar-features--square",
          "code": "() => <SkeletonAvatar square />"
        },
        {
          "id": "drafts-components-skeletonavatar-features--size",
          "code": "() => (\n  <div>\n    <SkeletonAvatar size={4} />\n    <SkeletonAvatar size={8} />\n    <SkeletonAvatar size={12} />\n    <SkeletonAvatar size={16} />\n    <SkeletonAvatar size={20} />\n    <SkeletonAvatar size={24} />\n    <SkeletonAvatar size={28} />\n    <SkeletonAvatar size={32} />\n    <SkeletonAvatar size={40} />\n    <SkeletonAvatar size={48} />\n    <SkeletonAvatar size={56} />\n    <SkeletonAvatar size={64} />\n  </div>\n)"
        },
        {
          "id": "drafts-components-skeletonavatar-features--size-responsive",
          "code": "() => (\n  <div>\n    <SkeletonAvatar\n      size={{\n        narrow: 4,\n        regular: 8,\n        wide: 12,\n      }}\n    />\n    <SkeletonAvatar\n      size={{\n        narrow: 8,\n        regular: 12,\n        wide: 16,\n      }}\n    />\n    <SkeletonAvatar\n      size={{\n        narrow: 12,\n        regular: 16,\n        wide: 20,\n      }}\n    />\n    <SkeletonAvatar\n      size={{\n        narrow: 16,\n        regular: 20,\n        wide: 24,\n      }}\n    />\n    <SkeletonAvatar\n      size={{\n        narrow: 20,\n        regular: 24,\n        wide: 28,\n      }}\n    />\n    <SkeletonAvatar\n      size={{\n        narrow: 24,\n        regular: 28,\n        wide: 32,\n      }}\n    />\n    <SkeletonAvatar\n      size={{\n        narrow: 28,\n        regular: 32,\n        wide: 40,\n      }}\n    />\n    <SkeletonAvatar\n      size={{\n        narrow: 32,\n        regular: 40,\n        wide: 48,\n      }}\n    />\n    <SkeletonAvatar\n      size={{\n        narrow: 40,\n        regular: 48,\n        wide: 56,\n      }}\n    />\n    <SkeletonAvatar\n      size={{\n        narrow: 48,\n        regular: 56,\n        wide: 64,\n      }}\n    />\n  </div>\n)"
        },
        {
          "id": "drafts-components-skeletonavatar-features--in-a-stack",
          "code": "() => (\n  <AvatarStack>\n    <SkeletonAvatar />\n    <SkeletonAvatar />\n    <SkeletonAvatar />\n    <SkeletonAvatar />\n  </AvatarStack>\n)"
        },
        {
          "id": "drafts-components-skeletonavatar-features--in-an-avatar-pair",
          "code": "() => (\n  <AvatarPair>\n    <SkeletonAvatar />\n    <SkeletonAvatar />\n  </AvatarPair>\n)"
        }
      ],
      "importPath": "@primer/react/drafts",
      "props": [
        {
          "name": "className",
          "type": "string",
          "required": false,
          "description": "Class name for custom styling",
          "defaultValue": ""
        },
        {
          "name": "size",
          "type": "number | ResponsiveValue<number>",
          "required": false,
          "description": "Sets the width and height of the avatar.",
          "defaultValue": 20
        },
        {
          "name": "square",
          "type": "boolean",
          "required": false,
          "description": "Sets the shape of the avatar to a square if true. If false, the avatar will be circular.",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "skeleton_box": {
      "id": "skeleton_box",
      "name": "SkeletonBox",
      "status": "draft",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "drafts-components-skeletonbox--default",
          "code": "() => <SkeletonBox />"
        },
        {
          "id": "drafts-components-skeletonbox-features--custom-height",
          "code": "() => <SkeletonBox height=\"4rem\" />"
        },
        {
          "id": "drafts-components-skeletonbox-features--custom-width",
          "code": "() => <SkeletonBox width=\"300px\" />"
        }
      ],
      "importPath": "@primer/react/drafts",
      "props": [
        {
          "name": "height",
          "type": "string | number | string & {}",
          "required": false,
          "description": "Height of the skeleton \"box\". Accepts any valid CSS `height` value.",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        },
        {
          "name": "width",
          "type": "string | number | string & {}",
          "required": false,
          "description": "Width of the skeleton \"box\". Accepts any valid CSS `width` value.",
          "defaultValue": ""
        }
      ],
      "subcomponents": []
    },
    "skeleton_text": {
      "id": "skeleton_text",
      "name": "SkeletonText",
      "status": "draft",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "drafts-components-skeletontext--default",
          "code": "() => <SkeletonText />"
        },
        {
          "id": "drafts-components-skeletontext-features--with-max-width",
          "code": "() => <SkeletonText maxWidth={200} />"
        },
        {
          "id": "drafts-components-skeletontext-features--with-multiple-lines",
          "code": "() => <SkeletonText lines={3} />"
        },
        {
          "id": "drafts-components-skeletontext-features--display",
          "code": "() => <SkeletonText size=\"display\" />"
        },
        {
          "id": "drafts-components-skeletontext-features--subtitle",
          "code": "() => <SkeletonText size=\"subtitle\" />"
        },
        {
          "id": "drafts-components-skeletontext-features--title-large",
          "code": "() => <SkeletonText size=\"titleLarge\" />"
        },
        {
          "id": "drafts-components-skeletontext-features--title-medium",
          "code": "() => <SkeletonText size=\"titleMedium\" />"
        },
        {
          "id": "drafts-components-skeletontext-features--title-small",
          "code": "() => <SkeletonText size=\"titleSmall\" />"
        },
        {
          "id": "drafts-components-skeletontext-features--body-large",
          "code": "() => <SkeletonText size=\"bodyLarge\" />"
        },
        {
          "id": "drafts-components-skeletontext-features--body-medium",
          "code": "() => <SkeletonText size=\"bodyMedium\" />"
        },
        {
          "id": "drafts-components-skeletontext-features--body-small",
          "code": "() => <SkeletonText size=\"bodySmall\" />"
        }
      ],
      "importPath": "@primer/react/drafts",
      "props": [
        {
          "name": "className",
          "type": "string",
          "required": false,
          "description": "Class name for custom styling",
          "defaultValue": ""
        },
        {
          "name": "lines",
          "type": "number",
          "required": false,
          "description": "Number of lines of skeleton text to render.",
          "defaultValue": 1
        },
        {
          "name": "maxWidth",
          "type": "string | number | string & {}",
          "required": false,
          "description": "Maximum width that the line(s) of skeleton text can take up.  Accepts any valid CSS `max-width` value.",
          "defaultValue": ""
        },
        {
          "name": "size",
          "type": "\"display\" | \"subtitle\" | \"titleLarge\" | \"titleMedium\" | \"titleSmall\" | \"bodyLarge\" | \"bodyMedium\" | \"bodySmall\"",
          "required": false,
          "description": "Size of the text that the skeleton is replacing.",
          "defaultValue": "bodyMedium"
        }
      ],
      "subcomponents": []
    },
    "underline_panels": {
      "id": "underline_panels",
      "name": "UnderlinePanels",
      "status": "draft",
      "a11yReviewed": false,
      "stories": [
        {
          "id": "drafts-components-underlinepanels--default",
          "code": "() => (\n  <UnderlinePanels aria-label=\"Select a tab\">\n    <UnderlinePanels.Tab>Tab 1</UnderlinePanels.Tab>\n    <UnderlinePanels.Tab>Tab 2</UnderlinePanels.Tab>\n    <UnderlinePanels.Tab>Tab 3</UnderlinePanels.Tab>\n    <UnderlinePanels.Panel>Panel 1</UnderlinePanels.Panel>\n    <UnderlinePanels.Panel>Panel 2</UnderlinePanels.Panel>\n    <UnderlinePanels.Panel>Panel 3</UnderlinePanels.Panel>\n  </UnderlinePanels>\n)"
        },
        {
          "id": "drafts-components-underlinepanels-features--selected-tab",
          "code": "() => (\n  <UnderlinePanels aria-label=\"Select a tab\" id=\"tab-panels\">\n    <UnderlinePanels.Tab>Tab 1</UnderlinePanels.Tab>\n    <UnderlinePanels.Tab aria-selected={true}>Tab 2</UnderlinePanels.Tab>\n    <UnderlinePanels.Tab>Tab 3</UnderlinePanels.Tab>\n    <UnderlinePanels.Panel>Panel 1</UnderlinePanels.Panel>\n    <UnderlinePanels.Panel>Panel 2</UnderlinePanels.Panel>\n    <UnderlinePanels.Panel>Panel 3</UnderlinePanels.Panel>\n  </UnderlinePanels>\n)"
        },
        {
          "id": "drafts-components-underlinepanels-features--labelled-by-external-element",
          "code": "() => (\n  <>\n    <h2 id=\"my-heading\">UnderlinePanels example</h2>\n    <UnderlinePanels aria-labelledby=\"my-heading\">\n      <UnderlinePanels.Tab>Tab 1</UnderlinePanels.Tab>\n      <UnderlinePanels.Tab>Tab 2</UnderlinePanels.Tab>\n      <UnderlinePanels.Tab>Tab 3</UnderlinePanels.Tab>\n      <UnderlinePanels.Panel>Panel 1</UnderlinePanels.Panel>\n      <UnderlinePanels.Panel>Panel 2</UnderlinePanels.Panel>\n      <UnderlinePanels.Panel>Panel 3</UnderlinePanels.Panel>\n    </UnderlinePanels>\n  </>\n)"
        },
        {
          "id": "drafts-components-underlinepanels-features--with-icons",
          "code": "() => (\n  <UnderlinePanels aria-label=\"Tabs with icons\">\n    <UnderlinePanels.Tab icon={CodeIcon}>Tab 1</UnderlinePanels.Tab>\n    <UnderlinePanels.Tab icon={EyeIcon}>Tab 2</UnderlinePanels.Tab>\n    <UnderlinePanels.Tab icon={GitPullRequestIcon}>Tab 3</UnderlinePanels.Tab>\n    <UnderlinePanels.Panel>Panel 1</UnderlinePanels.Panel>\n    <UnderlinePanels.Panel>Panel 2</UnderlinePanels.Panel>\n    <UnderlinePanels.Panel>Panel 3</UnderlinePanels.Panel>\n  </UnderlinePanels>\n)"
        },
        {
          "id": "drafts-components-underlinepanels-features--with-icons-hidden-on-narrow-screen",
          "code": "() => (\n  <UnderlinePanels aria-label=\"Tabs with icons\">\n    <UnderlinePanels.Tab icon={CodeIcon}>Tab 1</UnderlinePanels.Tab>\n    <UnderlinePanels.Tab icon={EyeIcon}>Tab 2</UnderlinePanels.Tab>\n    <UnderlinePanels.Tab icon={GitPullRequestIcon}>Tab 3</UnderlinePanels.Tab>\n    <UnderlinePanels.Tab icon={CommentDiscussionIcon}>\n      Tab 4\n    </UnderlinePanels.Tab>\n    <UnderlinePanels.Tab icon={PlayIcon}>Tab 5</UnderlinePanels.Tab>\n    <UnderlinePanels.Tab icon={ProjectIcon}>Tab 6</UnderlinePanels.Tab>\n    <UnderlinePanels.Tab icon={GraphIcon}>Tab 7</UnderlinePanels.Tab>\n    <UnderlinePanels.Tab icon={GearIcon}>Tab 8</UnderlinePanels.Tab>\n    <UnderlinePanels.Tab icon={ShieldLockIcon}>Tab 9</UnderlinePanels.Tab>\n    <UnderlinePanels.Panel>Panel 1</UnderlinePanels.Panel>\n    <UnderlinePanels.Panel>Panel 2</UnderlinePanels.Panel>\n    <UnderlinePanels.Panel>Panel 3</UnderlinePanels.Panel>\n    <UnderlinePanels.Panel>Panel 4</UnderlinePanels.Panel>\n    <UnderlinePanels.Panel>Panel 5</UnderlinePanels.Panel>\n    <UnderlinePanels.Panel>Panel 6</UnderlinePanels.Panel>\n    <UnderlinePanels.Panel>Panel 7</UnderlinePanels.Panel>\n    <UnderlinePanels.Panel>Panel 8</UnderlinePanels.Panel>\n    <UnderlinePanels.Panel>Panel 9</UnderlinePanels.Panel>\n  </UnderlinePanels>\n)"
        },
        {
          "id": "drafts-components-underlinepanels-features--with-counters",
          "code": "() => {\n  return (\n    <UnderlinePanels aria-label=\"Tabs with counters\">\n      <UnderlinePanels.Tab counter=\"11K\">Tab 1</UnderlinePanels.Tab>\n      <UnderlinePanels.Tab counter={12}>Tab 2</UnderlinePanels.Tab>\n      <UnderlinePanels.Panel>Panel 1</UnderlinePanels.Panel>\n      <UnderlinePanels.Panel>Panel 2</UnderlinePanels.Panel>\n    </UnderlinePanels>\n  )\n}"
        },
        {
          "id": "drafts-components-underlinepanels-features--with-counters-in-loading-state",
          "code": "() => {\n  return (\n    <UnderlinePanels aria-label=\"Tabs with counters\" loadingCounters>\n      <UnderlinePanels.Tab counter=\"11K\">Tab 1</UnderlinePanels.Tab>\n      <UnderlinePanels.Tab counter={12}>Tab 2</UnderlinePanels.Tab>\n      <UnderlinePanels.Panel>Panel 1</UnderlinePanels.Panel>\n      <UnderlinePanels.Panel>Panel 2</UnderlinePanels.Panel>\n    </UnderlinePanels>\n  )\n}"
        }
      ],
      "importPath": "@primer/react/drafts",
      "props": [
        {
          "name": "children",
          "type": "ReactNode",
          "required": true,
          "description": "Tabs (UnderlinePanels.Tab) and panels (UnderlinePanels.Panel) to render",
          "defaultValue": ""
        },
        {
          "name": "aria-label",
          "type": "string",
          "required": false,
          "description": "Accessible name for the tab list",
          "defaultValue": ""
        },
        {
          "name": "aria-labelledby",
          "type": "string",
          "required": false,
          "description": "ID of the element containing the name for the tab list",
          "defaultValue": ""
        },
        {
          "name": "id",
          "type": "string",
          "required": false,
          "description": "Custom string to use when generating the IDs of tabs and `aria-labelledby` for the panels",
          "defaultValue": ""
        },
        {
          "name": "loadingCounters",
          "type": "boolean",
          "required": false,
          "description": "Loading state for all counters. It displays loading animation for individual counters until all are resolved. It is needed to prevent multiple layout shift.",
          "defaultValue": ""
        },
        {
          "name": "sx",
          "type": "BetterSystemStyleObject",
          "required": false,
          "description": "A style object used to override styles using styled-components",
          "defaultValue": ""
        }
      ],
      "subcomponents": [
        {
          "name": "UnderlinePanels.Panel",
          "props": [
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "UnderlinePanels.Tab",
          "props": [
            {
              "name": "aria-selected",
              "type": "boolean",
              "required": false,
              "description": "Whether this is the selected tab",
              "defaultValue": ""
            },
            {
              "name": "counter",
              "type": "string | number",
              "required": false,
              "description": "Content of CounterLabel rendered after tab text label",
              "defaultValue": ""
            },
            {
              "name": "icon",
              "type": "FC<IconProps>",
              "required": false,
              "description": "Icon rendered before the tab text label",
              "defaultValue": ""
            },
            {
              "name": "sx",
              "type": "BetterSystemStyleObject",
              "required": false,
              "description": "A style object used to override styles using styled-components",
              "defaultValue": ""
            }
          ]
        }
      ]
    }
  }
}