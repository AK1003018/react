[
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/BaseStyles.tsx",
    "description": "",
    "displayName": "BaseStyles",
    "methods": [],
    "props": {
      "whiteSpace": {
        "defaultValue": null,
        "description": "",
        "name": "whiteSpace",
        "parent": {
          "fileName": "react/packages/react/src/constants.ts",
          "name": "SystemTypographyProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/constants.ts",
            "name": "SystemTypographyProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"pre\" | \"normal\" | \"nowrap\" | \"pre-wrap\" | \"pre-line\"",
          "value": [
            {
              "value": "\"pre\""
            },
            {
              "value": "\"normal\""
            },
            {
              "value": "\"nowrap\""
            },
            {
              "value": "\"pre-wrap\""
            },
            {
              "value": "\"pre-line\""
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Caret.tsx",
    "description": "",
    "displayName": "Caret",
    "methods": [],
    "props": {
      "bg": {
        "defaultValue": null,
        "description": "",
        "name": "bg",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Caret.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "borderColor": {
        "defaultValue": null,
        "description": "",
        "name": "borderColor",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Caret.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "borderWidth": {
        "defaultValue": null,
        "description": "",
        "name": "borderWidth",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Caret.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string | number",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "number"
            }
          ]
        }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Caret.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "number",
          "value": [
            {
              "value": "number"
            }
          ]
        }
      },
      "location": {
        "defaultValue": null,
        "description": "",
        "name": "location",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Caret.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Location",
          "value": [
            {
              "value": "\"left\""
            },
            {
              "value": "\"right\""
            },
            {
              "value": "\"top\""
            },
            {
              "value": "\"top-left\""
            },
            {
              "value": "\"top-right\""
            },
            {
              "value": "\"right-top\""
            },
            {
              "value": "\"right-bottom\""
            },
            {
              "value": "\"bottom\""
            },
            {
              "value": "\"bottom-left\""
            },
            {
              "value": "\"bottom-right\""
            },
            {
              "value": "\"left-top\""
            },
            {
              "value": "\"left-bottom\""
            }
          ]
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "",
        "name": "theme",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Caret.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Theme",
          "value": [
            {
              "value": "Theme",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Placeholder.tsx",
    "description": "Private component used to render placeholders in storybook and documentation examples",
    "displayName": "Placeholder",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Placeholder.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "width": {
        "defaultValue": null,
        "description": "",
        "name": "width",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Placeholder.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string | number",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "number"
            }
          ]
        }
      },
      "height": {
        "defaultValue": null,
        "description": "",
        "name": "height",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Placeholder.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "string | number",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "number"
            }
          ]
        }
      },
      "label": {
        "defaultValue": null,
        "description": "",
        "name": "label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Placeholder.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "deprecated": "Use [NavList](https://primer.style/react/NavList) instead"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/SideNav.tsx",
    "description": "",
    "displayName": "SideNav.Link",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SideNav.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "",
        "name": "aria-label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SideNav.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "children": {
        "defaultValue": null,
        "description": "",
        "name": "children",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SideNav.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SideNav.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"normal\" | \"lightweight\"",
          "value": [
            {
              "value": "\"normal\""
            },
            {
              "value": "\"lightweight\""
            }
          ]
        }
      },
      "bordered": {
        "defaultValue": null,
        "description": "",
        "name": "bordered",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SideNav.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ThemeProvider.tsx",
    "description": "",
    "displayName": "ThemeProvider",
    "methods": [],
    "props": {
      "theme": {
        "defaultValue": null,
        "description": "",
        "name": "theme",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ThemeProvider.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Theme",
          "value": [
            {
              "value": "Theme",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "colorMode": {
        "defaultValue": null,
        "description": "",
        "name": "colorMode",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ThemeProvider.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ColorModeWithAuto",
          "value": [
            {
              "value": "\"day\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"light\""
            },
            {
              "value": "\"dark\""
            },
            {
              "value": "\"night\""
            }
          ]
        }
      },
      "dayScheme": {
        "defaultValue": null,
        "description": "",
        "name": "dayScheme",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ThemeProvider.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "nightScheme": {
        "defaultValue": null,
        "description": "",
        "name": "nightScheme",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ThemeProvider.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "preventSSRMismatch": {
        "defaultValue": null,
        "description": "",
        "name": "preventSSRMismatch",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ThemeProvider.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/_VisuallyHidden.tsx",
    "description": "",
    "displayName": "VisuallyHidden",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "isVisible": {
        "defaultValue": null,
        "description": "",
        "name": "isVisible",
        "parent": {
          "fileName": "react/packages/react/src/_VisuallyHidden.tsx",
          "name": "Props"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/_VisuallyHidden.tsx",
            "name": "Props"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "actionbar",
      "primerstatus": "alpha",
      "primera11yreviewed": "true"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ActionBar/ActionBar.tsx",
    "description": "Action bar contains a collection of horizontally aligned buttons.",
    "displayName": "ActionBar",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": null,
        "description": "Size of the action bar",
        "name": "size",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionBar/ActionBar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Size",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            }
          ]
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Buttons in the action bar",
        "name": "children",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionBar/ActionBar.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/ActionBar/ActionBar.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "When provided, a label is added to the action bar",
        "name": "aria-label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionBar/ActionBar.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/ActionBar/ActionBar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "When provided, uses the element with that ID as the accessible name for the ActionBar",
        "name": "aria-labelledby",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionBar/ActionBar.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/ActionBar/ActionBar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "ActionBar.IconButton",
      "primerparentid": "actionbar"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ActionBar/ActionBar.tsx",
    "description": "Icon button to render in the action bar.",
    "displayName": "ActionBar.IconButton",
    "methods": [],
    "props": {
      "aria-label": {
        "defaultValue": null,
        "description": "",
        "name": "aria-label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "",
        "name": "aria-labelledby",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Provide an octicon. It will be placed in the center of the button",
        "name": "icon",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "ElementType<any, keyof IntrinsicElements>",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "unsafeDisableTooltip": {
        "defaultValue": null,
        "description": "Do not use. This is planned to be a temporary prop until the default tooltip on icon buttons are fully rolled out.",
        "name": "unsafeDisableTooltip",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "description": {
        "defaultValue": null,
        "description": "If `description` is provided, we will use a Tooltip to describe the button. Then `aria-label` is used to label the button.",
        "name": "description",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "tooltipDirection": {
        "defaultValue": null,
        "description": "Sets where the tooltip renders in relation to the target.",
        "name": "tooltipDirection",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "TooltipDirection",
          "value": [
            {
              "value": "\"s\""
            },
            {
              "value": "\"nw\""
            },
            {
              "value": "\"n\""
            },
            {
              "value": "\"ne\""
            },
            {
              "value": "\"e\""
            },
            {
              "value": "\"se\""
            },
            {
              "value": "\"sw\""
            },
            {
              "value": "\"w\""
            }
          ]
        }
      },
      "keyshortcuts": {
        "defaultValue": null,
        "description": "",
        "name": "keyshortcuts",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Items that are disabled can not be clicked, selected, or navigated through.",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "ButtonHTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "loading": {
        "defaultValue": null,
        "description": "When true, the button is in a loading state.",
        "name": "loading",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Size of button and fontSize of text in button",
        "name": "size",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Size",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            }
          ]
        }
      },
      "block": {
        "defaultValue": null,
        "description": "Allow button width to fill its container.",
        "name": "block",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Determine's the styles on a button one of 'default' | 'primary' | 'invisible' | 'danger'",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "VariantType",
          "value": [
            {
              "value": "\"link\""
            },
            {
              "value": "\"default\""
            },
            {
              "value": "\"danger\""
            },
            {
              "value": "\"primary\""
            },
            {
              "value": "\"invisible\""
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "loadingAnnouncement": {
        "defaultValue": null,
        "description": "The content to announce to screen readers when loading.",
        "name": "loadingAnnouncement",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "inactive": {
        "defaultValue": null,
        "description": "",
        "name": "inactive",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "labelWrap": {
        "defaultValue": null,
        "description": "Whether the button label should wrap to multiple lines of it is longer than the button width.",
        "name": "labelWrap",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "ActionBar.Divider",
      "primerparentid": "actionbar"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ActionBar/ActionBar.tsx",
    "description": "Divider to render between icon buttons in the action bar.",
    "displayName": "ActionBar.Divider",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "alias": "ActionList.Description",
      "primerparentid": "action_list"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ActionList/Description.tsx",
    "description": "Secondary text which provides additional information about an `Item`",
    "displayName": "ActionList.Description",
    "methods": [],
    "props": {
      "variant": {
        "defaultValue": {
          "value": "inline"
        },
        "description": "Secondary text style variations.\n\n- `\"inline\"` - Secondary text is positioned beside primary text.\n- `\"block\"` - Secondary text is positioned below primary text.",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/Description.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"block\" | \"inline\"",
          "value": [
            {
              "value": "\"block\""
            },
            {
              "value": "\"inline\""
            }
          ]
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/Description.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": {
          "value": "{}"
        },
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "ActionList.Divider",
      "primerparentid": "action_list"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ActionList/Divider.tsx",
    "description": "Visually separates `Item`s or `Group`s in an `ActionList`.",
    "displayName": "ActionList.Divider",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": {
          "value": "{}"
        },
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "ActionList.Group",
      "primerparentid": "action_list"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ActionList/Group.tsx",
    "description": "Collects related `Items` in an `ActionList`.",
    "displayName": "ActionList.Group",
    "methods": [],
    "props": {
      "variant": {
        "defaultValue": {
          "value": "subtle"
        },
        "description": "Style variations. Usage is discretionary.\n\n- `\"filled\"` - Superimposed on a background, offset from nearby content\n- `\"subtle\"` - Relatively less offset from nearby content",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/Group.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"subtle\" | \"filled\"",
          "value": [
            {
              "value": "\"subtle\""
            },
            {
              "value": "\"filled\""
            }
          ]
        }
      },
      "title": {
        "defaultValue": null,
        "description": "@deprecated (Use `ActionList.GroupHeading` instead. i.e. <ActionList.Group title=\"Group title\"> → <ActionList.GroupHeading>Group title</ActionList.GroupHeading>)",
        "name": "title",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/Group.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "auxiliaryText": {
        "defaultValue": null,
        "description": "Secondary text which provides additional information about a `Group`.",
        "name": "auxiliaryText",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/Group.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "role": {
        "defaultValue": null,
        "description": "The ARIA role describing the function of the list inside `Group` component. `listbox` or `menu` are a common values.",
        "name": "role",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/Group.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "AriaRole",
          "value": [
            {
              "value": "\"article\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"list\""
            },
            {
              "value": "\"alert\""
            },
            {
              "value": "\"alertdialog\""
            },
            {
              "value": "\"application\""
            },
            {
              "value": "\"banner\""
            },
            {
              "value": "\"cell\""
            },
            {
              "value": "\"checkbox\""
            },
            {
              "value": "\"columnheader\""
            },
            {
              "value": "\"combobox\""
            },
            {
              "value": "\"complementary\""
            },
            {
              "value": "\"contentinfo\""
            },
            {
              "value": "\"definition\""
            },
            {
              "value": "\"directory\""
            },
            {
              "value": "\"document\""
            },
            {
              "value": "\"feed\""
            },
            {
              "value": "\"grid\""
            },
            {
              "value": "\"gridcell\""
            },
            {
              "value": "\"group\""
            },
            {
              "value": "\"heading\""
            },
            {
              "value": "\"listbox\""
            },
            {
              "value": "\"listitem\""
            },
            {
              "value": "\"log\""
            },
            {
              "value": "\"marquee\""
            },
            {
              "value": "\"math\""
            },
            {
              "value": "\"menubar\""
            },
            {
              "value": "\"menuitemcheckbox\""
            },
            {
              "value": "\"menuitemradio\""
            },
            {
              "value": "\"navigation\""
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"note\""
            },
            {
              "value": "\"presentation\""
            },
            {
              "value": "\"progressbar\""
            },
            {
              "value": "\"radio\""
            },
            {
              "value": "\"radiogroup\""
            },
            {
              "value": "\"region\""
            },
            {
              "value": "\"row\""
            },
            {
              "value": "\"rowgroup\""
            },
            {
              "value": "\"rowheader\""
            },
            {
              "value": "\"scrollbar\""
            },
            {
              "value": "\"searchbox\""
            },
            {
              "value": "\"separator\""
            },
            {
              "value": "\"slider\""
            },
            {
              "value": "\"spinbutton\""
            },
            {
              "value": "\"status\""
            },
            {
              "value": "\"tab\""
            },
            {
              "value": "\"tablist\""
            },
            {
              "value": "\"tabpanel\""
            },
            {
              "value": "\"term\""
            },
            {
              "value": "\"textbox\""
            },
            {
              "value": "\"timer\""
            },
            {
              "value": "\"toolbar\""
            },
            {
              "value": "\"tooltip\""
            },
            {
              "value": "\"tree\""
            },
            {
              "value": "\"treegrid\""
            },
            {
              "value": "\"treeitem\""
            }
          ]
        }
      },
      "sx": {
        "defaultValue": {
          "value": "__DEV__\n  ? Object.freeze<BetterSystemStyleObject>({})\n  : {}"
        },
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "selectionVariant": {
        "defaultValue": null,
        "description": "Whether multiple Items or a single Item can be selected in the Group. Overrides value on ActionList root.",
        "name": "selectionVariant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/Group.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "false | \"multiple\" | \"single\"",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "\"multiple\""
            },
            {
              "value": "\"single\""
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "ActionList.GroupHeading",
      "primerparentid": "action_list"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ActionList/Group.tsx",
    "description": "Heading of  a `Group`.\n\nAs default, the role of ActionList is \"list\" and therefore group heading is rendered as a proper heading tag.\nIf the role is \"listbox\" or \"menu\" (ActionMenu), the group heading is rendered as a div with presentation role and it is\nhidden from the accessibility tree due to the limitation of listbox children. https://w3c.github.io/aria/#listbox\ngroups under menu or listbox are labelled by `aria-label`",
    "displayName": "ActionList.GroupHeading",
    "methods": [],
    "props": {
      "variant": {
        "defaultValue": {
          "value": "subtle"
        },
        "description": "Style variations. Usage is discretionary.\n\n- `\"filled\"` - Superimposed on a background, offset from nearby content\n- `\"subtle\"` - Relatively less offset from nearby content",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/Group.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"subtle\" | \"filled\"",
          "value": [
            {
              "value": "\"subtle\""
            },
            {
              "value": "\"filled\""
            }
          ]
        }
      },
      "auxiliaryText": {
        "defaultValue": null,
        "description": "Secondary text which provides additional information about a `Group`.",
        "name": "auxiliaryText",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/Group.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": {
          "value": "__DEV__\n  ? Object.freeze<BetterSystemStyleObject>({})\n  : {}"
        },
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          },
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "visuallyHidden": {
        "defaultValue": null,
        "description": "",
        "name": "visuallyHidden",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/Heading.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/Group.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\"",
          "value": [
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            }
          ]
        }
      },
      "_internalBackwardCompatibleTitle": {
        "defaultValue": null,
        "description": "",
        "name": "_internalBackwardCompatibleTitle",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/Group.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "ActionList.Heading",
      "primerparentid": "action_list",
      "primersubcomponentorder": "2"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ActionList/Heading.tsx",
    "description": "Heading for an `ActionList`",
    "displayName": "ActionList.Heading",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/ActionList/Heading.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/ActionList/Heading.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/ActionList/Heading.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | (\"h1\" & (ComponentClass<unknown, any> | FunctionComponent<unknown>)) | (\"h2\" & (ComponentClass<unknown, any> | FunctionComponent<...>)) | (\"h3\" & (ComponentClass<...> | FunctionComponent<...>)) | (\"h4\" & (ComponentClass<...> | FunctionComponent<...>)) | (\"h5\" & (ComponentCla...",
          "value": [
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"h1\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"h1\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"h2\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"h2\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"h3\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"h3\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"h4\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"h4\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"h5\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"h5\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"h6\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"h6\" & FunctionComponent<unknown>"
            }
          ]
        }
      },
      "visuallyHidden": {
        "defaultValue": null,
        "description": "",
        "name": "visuallyHidden",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/Heading.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "ActionList.Item",
      "primerparentid": "action_list",
      "primersubcomponentorder": "0"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ActionList/Item.tsx",
    "description": "An actionable or selectable `Item`",
    "displayName": "ActionList.Item",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | ... 162 more ... | FunctionComponent<...>",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<unknown, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<unknown>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Primary content for an Item",
        "name": "children",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/shared.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "onSelect": {
        "defaultValue": null,
        "description": "Callback that will trigger both on click selection and keyboard selection.\nThis is not called for disabled or inactive items.",
        "name": "onSelect",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/shared.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "((event: KeyboardEvent<HTMLElement> | MouseEvent<HTMLElement, MouseEvent>) => void)",
          "value": [
            {
              "value": "(event: KeyboardEvent<HTMLElement> | MouseEvent<HTMLElement, MouseEvent>) => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "selected": {
        "defaultValue": null,
        "description": "Is the `Item` is currently selected?",
        "name": "selected",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/shared.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "active": {
        "defaultValue": null,
        "description": "Indicate whether the item is active. There should never be more than one active item.",
        "name": "active",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/shared.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Style variations associated with various `Item` types.\n\n- `\"default\"` - An action `Item`.\n- `\"danger\"` - A destructive action `Item`.",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/shared.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"default\" | \"danger\"",
          "value": [
            {
              "value": "\"default\""
            },
            {
              "value": "\"danger\""
            }
          ]
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Items that are disabled can not be clicked, selected, or navigated through.",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/shared.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "role": {
        "defaultValue": null,
        "description": "The ARIA role describing the function of `Item` component. `option` is a common value.",
        "name": "role",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/shared.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "AriaRole",
          "value": [
            {
              "value": "\"article\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"list\""
            },
            {
              "value": "\"alert\""
            },
            {
              "value": "\"alertdialog\""
            },
            {
              "value": "\"application\""
            },
            {
              "value": "\"banner\""
            },
            {
              "value": "\"cell\""
            },
            {
              "value": "\"checkbox\""
            },
            {
              "value": "\"columnheader\""
            },
            {
              "value": "\"combobox\""
            },
            {
              "value": "\"complementary\""
            },
            {
              "value": "\"contentinfo\""
            },
            {
              "value": "\"definition\""
            },
            {
              "value": "\"directory\""
            },
            {
              "value": "\"document\""
            },
            {
              "value": "\"feed\""
            },
            {
              "value": "\"grid\""
            },
            {
              "value": "\"gridcell\""
            },
            {
              "value": "\"group\""
            },
            {
              "value": "\"heading\""
            },
            {
              "value": "\"listbox\""
            },
            {
              "value": "\"listitem\""
            },
            {
              "value": "\"log\""
            },
            {
              "value": "\"marquee\""
            },
            {
              "value": "\"math\""
            },
            {
              "value": "\"menubar\""
            },
            {
              "value": "\"menuitemcheckbox\""
            },
            {
              "value": "\"menuitemradio\""
            },
            {
              "value": "\"navigation\""
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"note\""
            },
            {
              "value": "\"presentation\""
            },
            {
              "value": "\"progressbar\""
            },
            {
              "value": "\"radio\""
            },
            {
              "value": "\"radiogroup\""
            },
            {
              "value": "\"region\""
            },
            {
              "value": "\"row\""
            },
            {
              "value": "\"rowgroup\""
            },
            {
              "value": "\"rowheader\""
            },
            {
              "value": "\"scrollbar\""
            },
            {
              "value": "\"searchbox\""
            },
            {
              "value": "\"separator\""
            },
            {
              "value": "\"slider\""
            },
            {
              "value": "\"spinbutton\""
            },
            {
              "value": "\"status\""
            },
            {
              "value": "\"tab\""
            },
            {
              "value": "\"tablist\""
            },
            {
              "value": "\"tabpanel\""
            },
            {
              "value": "\"term\""
            },
            {
              "value": "\"textbox\""
            },
            {
              "value": "\"timer\""
            },
            {
              "value": "\"toolbar\""
            },
            {
              "value": "\"tooltip\""
            },
            {
              "value": "\"tree\""
            },
            {
              "value": "\"treegrid\""
            },
            {
              "value": "\"treeitem\""
            }
          ]
        }
      },
      "id": {
        "defaultValue": null,
        "description": "id to attach to the root element of the Item",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/shared.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "inactiveText": {
        "defaultValue": null,
        "description": "Text describing why the item is inactive. This may be used when an item's usual functionality\nis unavailable due to a system error such as a database outage.",
        "name": "inactiveText",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/shared.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "loading": {
        "defaultValue": null,
        "description": "Whether the item is loading",
        "name": "loading",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/shared.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "_PrivateItemWrapper": {
        "defaultValue": null,
        "description": "Private API for use internally only. Used by LinkItem to wrap contents in an anchor",
        "name": "_PrivateItemWrapper",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/shared.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "FC<PropsWithChildren<MenuItemProps>>",
          "value": [
            {
              "value": "FC<PropsWithChildren<MenuItemProps>>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "ActionList.LinkItem",
      "primerparentid": "action_list",
      "primersubcomponentorder": "1"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ActionList/LinkItem.tsx",
    "description": "A `Item` that renders a full-size anchor inside ListItem",
    "displayName": "ActionList.LinkItem",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | ... 162 more ... | FunctionComponent<...>",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<unknown, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<unknown>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Primary content for an Item",
        "name": "children",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/shared.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "active": {
        "defaultValue": null,
        "description": "Indicate whether the item is active. There should never be more than one active item.",
        "name": "active",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/shared.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "inactiveText": {
        "defaultValue": null,
        "description": "Text describing why the item is inactive. This may be used when an item's usual functionality\nis unavailable due to a system error such as a database outage.",
        "name": "inactiveText",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/shared.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "download": {
        "defaultValue": null,
        "description": "",
        "name": "download",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/LinkItem.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "href": {
        "defaultValue": null,
        "description": "",
        "name": "href",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/LinkItem.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "hrefLang": {
        "defaultValue": null,
        "description": "",
        "name": "hrefLang",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/LinkItem.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "media": {
        "defaultValue": null,
        "description": "",
        "name": "media",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/LinkItem.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "ping": {
        "defaultValue": null,
        "description": "",
        "name": "ping",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/LinkItem.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "rel": {
        "defaultValue": null,
        "description": "",
        "name": "rel",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/LinkItem.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "target": {
        "defaultValue": null,
        "description": "",
        "name": "target",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/LinkItem.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "type": {
        "defaultValue": null,
        "description": "",
        "name": "type",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/LinkItem.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "referrerPolicy": {
        "defaultValue": null,
        "description": "",
        "name": "referrerPolicy",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/LinkItem.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "HTMLAttributeReferrerPolicy",
          "value": [
            {
              "value": "\"\""
            },
            {
              "value": "\"origin\""
            },
            {
              "value": "\"no-referrer\""
            },
            {
              "value": "\"no-referrer-when-downgrade\""
            },
            {
              "value": "\"origin-when-cross-origin\""
            },
            {
              "value": "\"same-origin\""
            },
            {
              "value": "\"strict-origin\""
            },
            {
              "value": "\"strict-origin-when-cross-origin\""
            },
            {
              "value": "\"unsafe-url\""
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "action_list",
      "primerstatus": "beta",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ActionList/List.tsx",
    "description": "Action list is a vertical list of interactive actions or options. It's composed of items presented in a consistent, single-column format, with room for icons, descriptions, side information, and other rich visuals.",
    "displayName": "ActionList",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | ... 162 more ... | FunctionComponent<...>",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<unknown, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<unknown>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "`inset` children are offset (vertically and horizontally) from `List`’s edges, `full` children are flush (vertically and horizontally) with `List` edges",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/shared.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"inset\" | \"full\"",
          "value": [
            {
              "value": "\"inset\""
            },
            {
              "value": "\"full\""
            }
          ]
        }
      },
      "selectionVariant": {
        "defaultValue": null,
        "description": "Whether multiple Items or a single Item can be selected.",
        "name": "selectionVariant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/shared.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"multiple\" | \"single\"",
          "value": [
            {
              "value": "\"multiple\""
            },
            {
              "value": "\"single\""
            }
          ]
        }
      },
      "showDividers": {
        "defaultValue": null,
        "description": "Display a divider above each `Item` in this `List` when it does not follow a `Header` or `Divider`.",
        "name": "showDividers",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/shared.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "role": {
        "defaultValue": null,
        "description": "The ARIA role describing the function of `List` component. `listbox` or `menu` are a common values.",
        "name": "role",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/shared.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "AriaRole",
          "value": [
            {
              "value": "\"article\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"list\""
            },
            {
              "value": "\"alert\""
            },
            {
              "value": "\"alertdialog\""
            },
            {
              "value": "\"application\""
            },
            {
              "value": "\"banner\""
            },
            {
              "value": "\"cell\""
            },
            {
              "value": "\"checkbox\""
            },
            {
              "value": "\"columnheader\""
            },
            {
              "value": "\"combobox\""
            },
            {
              "value": "\"complementary\""
            },
            {
              "value": "\"contentinfo\""
            },
            {
              "value": "\"definition\""
            },
            {
              "value": "\"directory\""
            },
            {
              "value": "\"document\""
            },
            {
              "value": "\"feed\""
            },
            {
              "value": "\"grid\""
            },
            {
              "value": "\"gridcell\""
            },
            {
              "value": "\"group\""
            },
            {
              "value": "\"heading\""
            },
            {
              "value": "\"listbox\""
            },
            {
              "value": "\"listitem\""
            },
            {
              "value": "\"log\""
            },
            {
              "value": "\"marquee\""
            },
            {
              "value": "\"math\""
            },
            {
              "value": "\"menubar\""
            },
            {
              "value": "\"menuitemcheckbox\""
            },
            {
              "value": "\"menuitemradio\""
            },
            {
              "value": "\"navigation\""
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"note\""
            },
            {
              "value": "\"presentation\""
            },
            {
              "value": "\"progressbar\""
            },
            {
              "value": "\"radio\""
            },
            {
              "value": "\"radiogroup\""
            },
            {
              "value": "\"region\""
            },
            {
              "value": "\"row\""
            },
            {
              "value": "\"rowgroup\""
            },
            {
              "value": "\"rowheader\""
            },
            {
              "value": "\"scrollbar\""
            },
            {
              "value": "\"searchbox\""
            },
            {
              "value": "\"separator\""
            },
            {
              "value": "\"slider\""
            },
            {
              "value": "\"spinbutton\""
            },
            {
              "value": "\"status\""
            },
            {
              "value": "\"tab\""
            },
            {
              "value": "\"tablist\""
            },
            {
              "value": "\"tabpanel\""
            },
            {
              "value": "\"term\""
            },
            {
              "value": "\"textbox\""
            },
            {
              "value": "\"timer\""
            },
            {
              "value": "\"toolbar\""
            },
            {
              "value": "\"tooltip\""
            },
            {
              "value": "\"tree\""
            },
            {
              "value": "\"treegrid\""
            },
            {
              "value": "\"treeitem\""
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ActionList/Selection.tsx",
    "description": "",
    "displayName": "Selection",
    "methods": [],
    "props": {
      "selected": {
        "defaultValue": null,
        "description": "Is the `Item` is currently selected?",
        "name": "selected",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/shared.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "ActionList.TrailingAction",
      "primerparentid": "action_list"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ActionList/TrailingAction.tsx",
    "description": "A `TrailingAction` is a button or link that appears at the end of an `ActionList` item.",
    "displayName": "ActionList.TrailingAction",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/ActionList/TrailingAction.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/ActionList/TrailingAction.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/ActionList/TrailingAction.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/ActionList/TrailingAction.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/ActionList/TrailingAction.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/ActionList/TrailingAction.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"a\" | \"button\" | (\"button\" & (ComponentClass<unknown, any> | FunctionComponent<unknown>)) | (\"a\" & (ComponentClass<unknown, any> | FunctionComponent<unknown>))",
          "value": [
            {
              "value": "\"a\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"button\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"button\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"a\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"a\" & FunctionComponent<unknown>"
            }
          ]
        }
      },
      "href": {
        "defaultValue": null,
        "description": "",
        "name": "href",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/TrailingAction.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/ActionList/TrailingAction.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "",
        "name": "icon",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/TrailingAction.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ElementType<any, keyof IntrinsicElements>",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "label": {
        "defaultValue": null,
        "description": "",
        "name": "label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/TrailingAction.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ActionList/Visuals.tsx",
    "description": "",
    "displayName": "LeadingVisualContainer",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": {
          "value": "{}"
        },
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "ActionList.LeadingVisual",
      "primerparentid": "action_list"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ActionList/Visuals.tsx",
    "description": "Icon (or similar) positioned before `Item` text",
    "displayName": "ActionList.LeadingVisual",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": {
          "value": "{}"
        },
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "ActionList.TrailingVisual",
      "primerparentid": "action_list"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ActionList/Visuals.tsx",
    "description": "Icon (or similar) positioned after `Item` text",
    "displayName": "ActionList.TrailingVisual",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": {
          "value": "{}"
        },
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ActionList/Visuals.tsx",
    "description": "",
    "displayName": "VisualOrIndicator",
    "methods": [],
    "props": {
      "inactiveText": {
        "defaultValue": null,
        "description": "",
        "name": "inactiveText",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/Visuals.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "itemHasLeadingVisual": {
        "defaultValue": null,
        "description": "",
        "name": "itemHasLeadingVisual",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/Visuals.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "labelId": {
        "defaultValue": null,
        "description": "",
        "name": "labelId",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/Visuals.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "loading": {
        "defaultValue": null,
        "description": "",
        "name": "loading",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/Visuals.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "position": {
        "defaultValue": null,
        "description": "",
        "name": "position",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/Visuals.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "\"leading\" | \"trailing\"",
          "value": [
            {
              "value": "\"leading\""
            },
            {
              "value": "\"trailing\""
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "ActionMenu",
      "primerid": "action_menu",
      "primerstatus": "beta",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ActionMenu/ActionMenu.tsx",
    "description": "Action menu is composed of action list and overlay patterns used for quick actions and selections.\nDefaults to a the \"default\" Button variant with a trailing down triangle icon.",
    "displayName": "ActionMenu",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Recommended: `ActionMenu.Button` or `ActionMenu.Anchor` with `ActionMenu.Overlay`",
        "name": "children",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionMenu/ActionMenu.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "(ReactElement<any, string | JSXElementConstructor<any>> | ReactElement<any, string | JSXElementConstructor<any>>[]) & ReactNode",
          "value": [
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>> & string"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>> & number"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>> & false"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>> & true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>> & ReactElement<any, string | JSXElementConstructor<any>>"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>> & Iterable<ReactNode>"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>> & ReactPortal"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>[] & string"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>[] & number"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>[] & false"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>[] & true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>[] & ReactElement<any, string | JSXElementConstructor<any>>"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>[] & Iterable<ReactNode>"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>[] & ReactPortal"
            }
          ]
        }
      },
      "open": {
        "defaultValue": null,
        "description": "If defined, will control the open/closed state of the overlay. Must be used in conjunction with `onOpenChange`.",
        "name": "open",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionMenu/ActionMenu.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "onOpenChange": {
        "defaultValue": null,
        "description": "If defined, will control the open/closed state of the overlay. Must be used in conjunction with `open`.",
        "name": "onOpenChange",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionMenu/ActionMenu.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "((s: boolean) => void)",
          "value": [
            {
              "value": "(s: boolean) => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "anchorRef": {
        "defaultValue": null,
        "description": "An override to the internal ref that will be spread on to the renderAnchor\nAn override to the internal renderAnchor ref that will be used to position the overlay.\nWhen renderAnchor is null this can be used to make an anchor that is detached from ActionMenu.",
        "name": "anchorRef",
        "parent": {
          "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
          "name": "AnchoredOverlayPropsWithAnchor"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayPropsWithAnchor"
          },
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayPropsWithoutAnchor"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "RefObject<HTMLElement>",
          "value": [
            {
              "value": "RefObject<HTMLElement>",
              "description": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.",
              "fullComment": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.\n@template T The type of the ref's value.\n@example ```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```",
              "tags": {
                "template": "T The type of the ref's value.",
                "example": "```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```"
              }
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "ActionMenu.Anchor",
      "primerparentid": "action_menu"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ActionMenu/ActionMenu.tsx",
    "description": "Container for a custom anchor element that triggers the ActionMenu. Commonly used to wrap an IconButton.",
    "displayName": "ActionMenu.Anchor",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "",
        "name": "children",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionMenu/ActionMenu.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactElement<any, string | JSXElementConstructor<any>> & ReactNode",
          "value": [
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>> & string"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>> & number"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>> & false"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>> & true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>> & ReactElement<any, string | JSXElementConstructor<any>>"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>> & Iterable<ReactNode>"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>> & ReactPortal"
            }
          ]
        }
      },
      "id": {
        "defaultValue": null,
        "description": "",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionMenu/ActionMenu.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "ActionMenu.Button",
      "primerparentid": "action_menu"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ActionMenu/ActionMenu.tsx",
    "description": "The button that toggles the ActionMenu",
    "displayName": "ActionMenu.Button",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | ... 162 more ... | FunctionComponent<...>",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<unknown, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<unknown>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Items that are disabled can not be clicked, selected, or navigated through.",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "ButtonHTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "loading": {
        "defaultValue": null,
        "description": "When true, the button is in a loading state.",
        "name": "loading",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Size of button and fontSize of text in button",
        "name": "size",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Size",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            }
          ]
        }
      },
      "block": {
        "defaultValue": null,
        "description": "Allow button width to fill its container.",
        "name": "block",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Determine's the styles on a button one of 'default' | 'primary' | 'invisible' | 'danger'",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "VariantType",
          "value": [
            {
              "value": "\"link\""
            },
            {
              "value": "\"default\""
            },
            {
              "value": "\"danger\""
            },
            {
              "value": "\"primary\""
            },
            {
              "value": "\"invisible\""
            }
          ]
        }
      },
      "alignContent": {
        "defaultValue": null,
        "description": "Content alignment for when visuals are present",
        "name": "alignContent",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "AlignContent",
          "value": [
            {
              "value": "\"center\""
            },
            {
              "value": "\"start\""
            }
          ]
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "The icon for the IconButton",
        "name": "icon",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactElement<any, string | JSXElementConstructor<any>> | ElementType<any, keyof IntrinsicElements> | FunctionComponent<...> | null",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "FunctionComponent<IconProps>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "loadingAnnouncement": {
        "defaultValue": null,
        "description": "The content to announce to screen readers when loading.",
        "name": "loadingAnnouncement",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "inactive": {
        "defaultValue": null,
        "description": "",
        "name": "inactive",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "labelWrap": {
        "defaultValue": null,
        "description": "Whether the button label should wrap to multiple lines of it is longer than the button width.",
        "name": "labelWrap",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "leadingVisual": {
        "defaultValue": null,
        "description": "The leading visual which comes before the button content",
        "name": "leadingVisual",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactElement<any, string | JSXElementConstructor<any>> | ElementType<any, keyof IntrinsicElements> | null",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            }
          ]
        }
      },
      "trailingVisual": {
        "defaultValue": null,
        "description": "The trailing visual which comes after the button content",
        "name": "trailingVisual",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactElement<any, string | JSXElementConstructor<any>> | ElementType<any, keyof IntrinsicElements> | null",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            }
          ]
        }
      },
      "trailingAction": {
        "defaultValue": null,
        "description": "Trailing action appears to the right of the trailing visual and is always locked to the end",
        "name": "trailingAction",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ElementType<any, keyof IntrinsicElements> | null",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "count": {
        "defaultValue": null,
        "description": "",
        "name": "count",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "number",
          "value": [
            {
              "value": "number"
            }
          ]
        }
      },
      "children": {
        "defaultValue": null,
        "description": "The button that triggers the action menu",
        "name": "children",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionMenu/ActionMenu.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "ActionMenu.Overlay",
      "primerparentid": "action_menu"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ActionMenu/ActionMenu.tsx",
    "description": "The non-modal dialog that overlays the UI",
    "displayName": "ActionMenu.Overlay",
    "methods": [],
    "props": {
      "style": {
        "defaultValue": null,
        "description": "",
        "name": "style",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "CSSProperties",
          "value": [
            {
              "value": "CSSProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "height": {
        "defaultValue": null,
        "description": "",
        "name": "height",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"small\" | \"initial\" | \"large\" | \"medium\" | \"auto\" | \"fit-content\" | \"xsmall\" | \"xlarge\"",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fit-content\""
            },
            {
              "value": "\"xsmall\""
            },
            {
              "value": "\"xlarge\""
            }
          ]
        }
      },
      "width": {
        "defaultValue": null,
        "description": "",
        "name": "width",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"small\" | \"large\" | \"medium\" | \"auto\" | \"xlarge\" | \"xxlarge\"",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"xlarge\""
            },
            {
              "value": "\"xxlarge\""
            }
          ]
        }
      },
      "overflow": {
        "defaultValue": null,
        "description": "",
        "name": "overflow",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"hidden\" | \"scroll\" | \"auto\" | \"visible\"",
          "value": [
            {
              "value": "\"hidden\""
            },
            {
              "value": "\"scroll\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"visible\""
            }
          ]
        }
      },
      "maxHeight": {
        "defaultValue": null,
        "description": "",
        "name": "maxHeight",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"small\" | \"large\" | \"medium\" | \"fit-content\" | \"xsmall\" | \"xlarge\"",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            },
            {
              "value": "\"fit-content\""
            },
            {
              "value": "\"xsmall\""
            },
            {
              "value": "\"xlarge\""
            }
          ]
        }
      },
      "maxWidth": {
        "defaultValue": null,
        "description": "",
        "name": "maxWidth",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"small\" | \"large\" | \"medium\" | \"xlarge\" | \"xxlarge\"",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            },
            {
              "value": "\"xlarge\""
            },
            {
              "value": "\"xxlarge\""
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "anchorSide": {
        "defaultValue": null,
        "description": "",
        "name": "anchorSide",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "AnchorSide",
          "value": [
            {
              "value": "\"inside-top\""
            },
            {
              "value": "\"inside-bottom\""
            },
            {
              "value": "\"inside-left\""
            },
            {
              "value": "\"inside-right\""
            },
            {
              "value": "\"inside-center\""
            },
            {
              "value": "\"outside-top\""
            },
            {
              "value": "\"outside-bottom\""
            },
            {
              "value": "\"outside-left\""
            },
            {
              "value": "\"outside-right\""
            }
          ]
        }
      },
      "ignoreClickRefs": {
        "defaultValue": null,
        "description": "",
        "name": "ignoreClickRefs",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "RefObject<HTMLElement>[]",
          "value": [
            {
              "value": "RefObject<HTMLElement>[]",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "initialFocusRef": {
        "defaultValue": null,
        "description": "",
        "name": "initialFocusRef",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "RefObject<HTMLElement>",
          "value": [
            {
              "value": "RefObject<HTMLElement>",
              "description": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.",
              "fullComment": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.\n@template T The type of the ref's value.\n@example ```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```",
              "tags": {
                "template": "T The type of the ref's value.",
                "example": "```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```"
              }
            }
          ]
        }
      },
      "returnFocusRef": {
        "defaultValue": null,
        "description": "",
        "name": "returnFocusRef",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "RefObject<HTMLElement>",
          "value": [
            {
              "value": "RefObject<HTMLElement>",
              "description": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.",
              "fullComment": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.\n@template T The type of the ref's value.\n@example ```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```",
              "tags": {
                "template": "T The type of the ref's value.",
                "example": "```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```"
              }
            }
          ]
        }
      },
      "onClickOutside": {
        "defaultValue": null,
        "description": "",
        "name": "onClickOutside",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "((e: TouchOrMouseEvent) => void)",
          "value": [
            {
              "value": "(e: TouchOrMouseEvent) => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "onEscape": {
        "defaultValue": null,
        "description": "",
        "name": "onEscape",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "((e: KeyboardEvent) => void)",
          "value": [
            {
              "value": "(e: KeyboardEvent) => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "visibility": {
        "defaultValue": null,
        "description": "",
        "name": "visibility",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"hidden\" | \"visible\"",
          "value": [
            {
              "value": "\"hidden\""
            },
            {
              "value": "\"visible\""
            }
          ]
        }
      },
      "data-test-id": {
        "defaultValue": null,
        "description": "",
        "name": "data-test-id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "unknown"
        }
      },
      "position": {
        "defaultValue": null,
        "description": "",
        "name": "position",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Position",
          "value": [
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"fixed\""
            },
            {
              "value": "\"-webkit-sticky\""
            },
            {
              "value": "\"absolute\""
            },
            {
              "value": "\"relative\""
            },
            {
              "value": "\"static\""
            },
            {
              "value": "\"sticky\""
            }
          ]
        }
      },
      "top": {
        "defaultValue": null,
        "description": "",
        "name": "top",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Top<string | number>",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "string & {}"
            }
          ]
        }
      },
      "left": {
        "defaultValue": null,
        "description": "",
        "name": "left",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Left<string | number>",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "string & {}"
            }
          ]
        }
      },
      "right": {
        "defaultValue": null,
        "description": "",
        "name": "right",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Right<string | number>",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "string & {}"
            }
          ]
        }
      },
      "bottom": {
        "defaultValue": null,
        "description": "",
        "name": "bottom",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Bottom<string | number>",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "string & {}"
            }
          ]
        }
      },
      "portalContainerName": {
        "defaultValue": null,
        "description": "",
        "name": "portalContainerName",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "preventFocusOnOpen": {
        "defaultValue": null,
        "description": "",
        "name": "preventFocusOnOpen",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "role": {
        "defaultValue": null,
        "description": "",
        "name": "role",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "AriaRole",
          "value": [
            {
              "value": "\"article\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"list\""
            },
            {
              "value": "\"alert\""
            },
            {
              "value": "\"alertdialog\""
            },
            {
              "value": "\"application\""
            },
            {
              "value": "\"banner\""
            },
            {
              "value": "\"cell\""
            },
            {
              "value": "\"checkbox\""
            },
            {
              "value": "\"columnheader\""
            },
            {
              "value": "\"combobox\""
            },
            {
              "value": "\"complementary\""
            },
            {
              "value": "\"contentinfo\""
            },
            {
              "value": "\"definition\""
            },
            {
              "value": "\"directory\""
            },
            {
              "value": "\"document\""
            },
            {
              "value": "\"feed\""
            },
            {
              "value": "\"grid\""
            },
            {
              "value": "\"gridcell\""
            },
            {
              "value": "\"group\""
            },
            {
              "value": "\"heading\""
            },
            {
              "value": "\"listbox\""
            },
            {
              "value": "\"listitem\""
            },
            {
              "value": "\"log\""
            },
            {
              "value": "\"marquee\""
            },
            {
              "value": "\"math\""
            },
            {
              "value": "\"menubar\""
            },
            {
              "value": "\"menuitemcheckbox\""
            },
            {
              "value": "\"menuitemradio\""
            },
            {
              "value": "\"navigation\""
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"note\""
            },
            {
              "value": "\"presentation\""
            },
            {
              "value": "\"progressbar\""
            },
            {
              "value": "\"radio\""
            },
            {
              "value": "\"radiogroup\""
            },
            {
              "value": "\"region\""
            },
            {
              "value": "\"row\""
            },
            {
              "value": "\"rowgroup\""
            },
            {
              "value": "\"rowheader\""
            },
            {
              "value": "\"scrollbar\""
            },
            {
              "value": "\"searchbox\""
            },
            {
              "value": "\"separator\""
            },
            {
              "value": "\"slider\""
            },
            {
              "value": "\"spinbutton\""
            },
            {
              "value": "\"status\""
            },
            {
              "value": "\"tab\""
            },
            {
              "value": "\"tablist\""
            },
            {
              "value": "\"tabpanel\""
            },
            {
              "value": "\"term\""
            },
            {
              "value": "\"textbox\""
            },
            {
              "value": "\"timer\""
            },
            {
              "value": "\"toolbar\""
            },
            {
              "value": "\"tooltip\""
            },
            {
              "value": "\"tree\""
            },
            {
              "value": "\"treegrid\""
            },
            {
              "value": "\"treeitem\""
            }
          ]
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Recommended: `ActionList`",
        "name": "children",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/ActionMenu/ActionMenu.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "preventOverflow": {
        "defaultValue": null,
        "description": "",
        "name": "preventOverflow",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"div\"",
          "value": [
            {
              "value": "\"div\""
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "anchored_overlay",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
    "description": "An `AnchoredOverlay` provides an anchor that will open a floating overlay positioned relative to the anchor.\nThe overlay can be opened and navigated using keyboard or mouse.",
    "displayName": "AnchoredOverlay",
    "methods": [],
    "props": {
      "open": {
        "defaultValue": null,
        "description": "Determines whether the overlay portion of the component should be shown or not",
        "name": "open",
        "parent": {
          "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
          "name": "AnchoredOverlayBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayBaseProps"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "onOpen": {
        "defaultValue": null,
        "description": "A callback which is called whenever the overlay is currently closed and an \"open gesture\" is detected.",
        "name": "onOpen",
        "parent": {
          "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
          "name": "AnchoredOverlayBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "((gesture: \"anchor-click\" | \"anchor-key-press\", event?: KeyboardEvent<HTMLElement>) => unknown) | undefined",
          "value": [
            {
              "value": "(gesture: \"anchor-click\" | \"anchor-key-press\", event?: KeyboardEvent<HTMLElement> | undefined) => unknown",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "A callback which is called whenever the overlay is currently open and a \"close gesture\" is detected.",
        "name": "onClose",
        "parent": {
          "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
          "name": "AnchoredOverlayBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "((gesture: \"anchor-click\" | \"click-outside\" | \"escape\") => unknown)",
          "value": [
            {
              "value": "(gesture: \"anchor-click\" | \"click-outside\" | \"escape\") => unknown",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "overlayProps": {
        "defaultValue": null,
        "description": "Props to be spread on the internal `Overlay` component.",
        "name": "overlayProps",
        "parent": {
          "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
          "name": "AnchoredOverlayBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Partial<Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"ref\"> & { ...; }, \"style\" | ... 8 more ... | keyof BaseOverlayProps> & Omit<...> & BaseOverlayProps & { ...; }>",
          "value": [
            {
              "value": "Partial<Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"ref\"> & { ...; }, \"style\" | ... 8 more ... | keyof BaseOverlayProps> & Omit<...> & BaseOverlayProps & { ...; }>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "focusTrapSettings": {
        "defaultValue": null,
        "description": "Settings to apply to the Focus Zone on the internal `Overlay` component.",
        "name": "focusTrapSettings",
        "parent": {
          "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
          "name": "AnchoredOverlayBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Partial<FocusTrapHookSettings>",
          "value": [
            {
              "value": "Partial<FocusTrapHookSettings>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "focusZoneSettings": {
        "defaultValue": null,
        "description": "Settings to apply to the Focus Zone on the internal `Overlay` component.",
        "name": "focusZoneSettings",
        "parent": {
          "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
          "name": "AnchoredOverlayBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Partial<FocusZoneHookSettings>",
          "value": [
            {
              "value": "Partial<FocusZoneHookSettings>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Optional className to be added to the overlay component.",
        "name": "className",
        "parent": {
          "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
          "name": "AnchoredOverlayBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "preventOverflow": {
        "defaultValue": {
          "value": true
        },
        "description": "preventOverflow Optional. The Overlay width will be adjusted responsively if there is not enough space to display the Overlay.\nIf `preventOverflow` is `true`, the width of the `Overlay` will not be adjusted.",
        "name": "preventOverflow",
        "parent": {
          "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
          "name": "AnchoredOverlayBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "height": {
        "defaultValue": null,
        "description": "",
        "name": "height",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"small\" | \"initial\" | \"large\" | \"medium\" | \"auto\" | \"fit-content\" | \"xsmall\" | \"xlarge\"",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fit-content\""
            },
            {
              "value": "\"xsmall\""
            },
            {
              "value": "\"xlarge\""
            }
          ]
        }
      },
      "width": {
        "defaultValue": null,
        "description": "",
        "name": "width",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"small\" | \"large\" | \"medium\" | \"auto\" | \"xlarge\" | \"xxlarge\"",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"xlarge\""
            },
            {
              "value": "\"xxlarge\""
            }
          ]
        }
      },
      "renderAnchor": {
        "defaultValue": null,
        "description": "A custom function component used to render the anchor element.\nWill receive the selected text as `children` prop when an item is activated.\nA custom function component used to render the anchor element.\nWhen renderAnchor is null, an anchorRef is required.",
        "name": "renderAnchor",
        "parent": {
          "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
          "name": "AnchoredOverlayPropsWithAnchor"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayPropsWithAnchor"
          },
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayPropsWithoutAnchor"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "(<T extends React.HTMLAttributes<HTMLElement>>(props: T) => Element) | null",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "<T extends React.HTMLAttributes<HTMLElement>>(props: T) => Element",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "anchorRef": {
        "defaultValue": null,
        "description": "An override to the internal ref that will be spread on to the renderAnchor\nAn override to the internal renderAnchor ref that will be used to position the overlay.\nWhen renderAnchor is null this can be used to make an anchor that is detached from ActionMenu.",
        "name": "anchorRef",
        "parent": {
          "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
          "name": "AnchoredOverlayPropsWithAnchor"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayPropsWithAnchor"
          },
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayPropsWithoutAnchor"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "RefObject<HTMLElement>",
          "value": [
            {
              "value": "RefObject<HTMLElement>",
              "description": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.",
              "fullComment": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.\n@template T The type of the ref's value.\n@example ```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```",
              "tags": {
                "template": "T The type of the ref's value.",
                "example": "```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```"
              }
            }
          ]
        }
      },
      "anchorId": {
        "defaultValue": null,
        "description": "An override to the internal id that will be spread on to the renderAnchor",
        "name": "anchorId",
        "parent": {
          "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
          "name": "AnchoredOverlayPropsWithAnchor"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayPropsWithAnchor"
          },
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayPropsWithoutAnchor"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "autocomplete",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Autocomplete/Autocomplete.tsx",
    "description": "Autocomplete allows users to quickly filter through a list of options and pick one or more values for a field.",
    "displayName": "Autocomplete",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "May be used to customize how the ID is set on the text input to be used by ARIA attributes on related elements.",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Autocomplete/Autocomplete.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Autocomplete.Input",
      "primerparentid": "autocomplete"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Autocomplete/AutocompleteInput.tsx",
    "description": "The text input field for an Autocomplete component. Defaults to using a `TextInput` component, but is polymorphic to allow for custom components.",
    "displayName": "Autocomplete.Input",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/Autocomplete/AutocompleteInput.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/Autocomplete/AutocompleteInput.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/Autocomplete/AutocompleteInput.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "(\"symbol\" & ComponentClass<any, any>) | (\"symbol\" & FunctionComponent<any>) | (\"object\" & ComponentClass<any, any>) | ... 360 more ... | (FunctionComponent<...> & (\"symbol\" | ... 178 more ... | \"tab-container\"))",
          "value": [
            {
              "value": "\"symbol\" & ComponentClass<any, any>"
            },
            {
              "value": "\"symbol\" & FunctionComponent<any>"
            },
            {
              "value": "\"object\" & ComponentClass<any, any>"
            },
            {
              "value": "\"object\" & FunctionComponent<any>"
            },
            {
              "value": "\"a\" & ComponentClass<any, any>"
            },
            {
              "value": "\"a\" & FunctionComponent<any>"
            },
            {
              "value": "\"abbr\" & ComponentClass<any, any>"
            },
            {
              "value": "\"abbr\" & FunctionComponent<any>"
            },
            {
              "value": "\"address\" & ComponentClass<any, any>"
            },
            {
              "value": "\"address\" & FunctionComponent<any>"
            },
            {
              "value": "\"area\" & ComponentClass<any, any>"
            },
            {
              "value": "\"area\" & FunctionComponent<any>"
            },
            {
              "value": "\"article\" & ComponentClass<any, any>"
            },
            {
              "value": "\"article\" & FunctionComponent<any>"
            },
            {
              "value": "\"aside\" & ComponentClass<any, any>"
            },
            {
              "value": "\"aside\" & FunctionComponent<any>"
            },
            {
              "value": "\"audio\" & ComponentClass<any, any>"
            },
            {
              "value": "\"audio\" & FunctionComponent<any>"
            },
            {
              "value": "\"b\" & ComponentClass<any, any>"
            },
            {
              "value": "\"b\" & FunctionComponent<any>"
            },
            {
              "value": "\"base\" & ComponentClass<any, any>"
            },
            {
              "value": "\"base\" & FunctionComponent<any>"
            },
            {
              "value": "\"bdi\" & ComponentClass<any, any>"
            },
            {
              "value": "\"bdi\" & FunctionComponent<any>"
            },
            {
              "value": "\"bdo\" & ComponentClass<any, any>"
            },
            {
              "value": "\"bdo\" & FunctionComponent<any>"
            },
            {
              "value": "\"big\" & ComponentClass<any, any>"
            },
            {
              "value": "\"big\" & FunctionComponent<any>"
            },
            {
              "value": "\"blockquote\" & ComponentClass<any, any>"
            },
            {
              "value": "\"blockquote\" & FunctionComponent<any>"
            },
            {
              "value": "\"body\" & ComponentClass<any, any>"
            },
            {
              "value": "\"body\" & FunctionComponent<any>"
            },
            {
              "value": "\"br\" & ComponentClass<any, any>"
            },
            {
              "value": "\"br\" & FunctionComponent<any>"
            },
            {
              "value": "\"button\" & ComponentClass<any, any>"
            },
            {
              "value": "\"button\" & FunctionComponent<any>"
            },
            {
              "value": "\"canvas\" & ComponentClass<any, any>"
            },
            {
              "value": "\"canvas\" & FunctionComponent<any>"
            },
            {
              "value": "\"caption\" & ComponentClass<any, any>"
            },
            {
              "value": "\"caption\" & FunctionComponent<any>"
            },
            {
              "value": "\"center\" & ComponentClass<any, any>"
            },
            {
              "value": "\"center\" & FunctionComponent<any>"
            },
            {
              "value": "\"cite\" & ComponentClass<any, any>"
            },
            {
              "value": "\"cite\" & FunctionComponent<any>"
            },
            {
              "value": "\"code\" & ComponentClass<any, any>"
            },
            {
              "value": "\"code\" & FunctionComponent<any>"
            },
            {
              "value": "\"col\" & ComponentClass<any, any>"
            },
            {
              "value": "\"col\" & FunctionComponent<any>"
            },
            {
              "value": "\"colgroup\" & ComponentClass<any, any>"
            },
            {
              "value": "\"colgroup\" & FunctionComponent<any>"
            },
            {
              "value": "\"data\" & ComponentClass<any, any>"
            },
            {
              "value": "\"data\" & FunctionComponent<any>"
            },
            {
              "value": "\"datalist\" & ComponentClass<any, any>"
            },
            {
              "value": "\"datalist\" & FunctionComponent<any>"
            },
            {
              "value": "\"dd\" & ComponentClass<any, any>"
            },
            {
              "value": "\"dd\" & FunctionComponent<any>"
            },
            {
              "value": "\"del\" & ComponentClass<any, any>"
            },
            {
              "value": "\"del\" & FunctionComponent<any>"
            },
            {
              "value": "\"details\" & ComponentClass<any, any>"
            },
            {
              "value": "\"details\" & FunctionComponent<any>"
            },
            {
              "value": "\"dfn\" & ComponentClass<any, any>"
            },
            {
              "value": "\"dfn\" & FunctionComponent<any>"
            },
            {
              "value": "\"dialog\" & ComponentClass<any, any>"
            },
            {
              "value": "\"dialog\" & FunctionComponent<any>"
            },
            {
              "value": "\"div\" & ComponentClass<any, any>"
            },
            {
              "value": "\"div\" & FunctionComponent<any>"
            },
            {
              "value": "\"dl\" & ComponentClass<any, any>"
            },
            {
              "value": "\"dl\" & FunctionComponent<any>"
            },
            {
              "value": "\"dt\" & ComponentClass<any, any>"
            },
            {
              "value": "\"dt\" & FunctionComponent<any>"
            },
            {
              "value": "\"em\" & ComponentClass<any, any>"
            },
            {
              "value": "\"em\" & FunctionComponent<any>"
            },
            {
              "value": "\"embed\" & ComponentClass<any, any>"
            },
            {
              "value": "\"embed\" & FunctionComponent<any>"
            },
            {
              "value": "\"fieldset\" & ComponentClass<any, any>"
            },
            {
              "value": "\"fieldset\" & FunctionComponent<any>"
            },
            {
              "value": "\"figcaption\" & ComponentClass<any, any>"
            },
            {
              "value": "\"figcaption\" & FunctionComponent<any>"
            },
            {
              "value": "\"figure\" & ComponentClass<any, any>"
            },
            {
              "value": "\"figure\" & FunctionComponent<any>"
            },
            {
              "value": "\"footer\" & ComponentClass<any, any>"
            },
            {
              "value": "\"footer\" & FunctionComponent<any>"
            },
            {
              "value": "\"form\" & ComponentClass<any, any>"
            },
            {
              "value": "\"form\" & FunctionComponent<any>"
            },
            {
              "value": "\"h1\" & ComponentClass<any, any>"
            },
            {
              "value": "\"h1\" & FunctionComponent<any>"
            },
            {
              "value": "\"h2\" & ComponentClass<any, any>"
            },
            {
              "value": "\"h2\" & FunctionComponent<any>"
            },
            {
              "value": "\"h3\" & ComponentClass<any, any>"
            },
            {
              "value": "\"h3\" & FunctionComponent<any>"
            },
            {
              "value": "\"h4\" & ComponentClass<any, any>"
            },
            {
              "value": "\"h4\" & FunctionComponent<any>"
            },
            {
              "value": "\"h5\" & ComponentClass<any, any>"
            },
            {
              "value": "\"h5\" & FunctionComponent<any>"
            },
            {
              "value": "\"h6\" & ComponentClass<any, any>"
            },
            {
              "value": "\"h6\" & FunctionComponent<any>"
            },
            {
              "value": "\"head\" & ComponentClass<any, any>"
            },
            {
              "value": "\"head\" & FunctionComponent<any>"
            },
            {
              "value": "\"header\" & ComponentClass<any, any>"
            },
            {
              "value": "\"header\" & FunctionComponent<any>"
            },
            {
              "value": "\"hgroup\" & ComponentClass<any, any>"
            },
            {
              "value": "\"hgroup\" & FunctionComponent<any>"
            },
            {
              "value": "\"hr\" & ComponentClass<any, any>"
            },
            {
              "value": "\"hr\" & FunctionComponent<any>"
            },
            {
              "value": "\"html\" & ComponentClass<any, any>"
            },
            {
              "value": "\"html\" & FunctionComponent<any>"
            },
            {
              "value": "\"i\" & ComponentClass<any, any>"
            },
            {
              "value": "\"i\" & FunctionComponent<any>"
            },
            {
              "value": "\"iframe\" & ComponentClass<any, any>"
            },
            {
              "value": "\"iframe\" & FunctionComponent<any>"
            },
            {
              "value": "\"img\" & ComponentClass<any, any>"
            },
            {
              "value": "\"img\" & FunctionComponent<any>"
            },
            {
              "value": "\"input\" & ComponentClass<any, any>"
            },
            {
              "value": "\"input\" & FunctionComponent<any>"
            },
            {
              "value": "\"ins\" & ComponentClass<any, any>"
            },
            {
              "value": "\"ins\" & FunctionComponent<any>"
            },
            {
              "value": "\"kbd\" & ComponentClass<any, any>"
            },
            {
              "value": "\"kbd\" & FunctionComponent<any>"
            },
            {
              "value": "\"keygen\" & ComponentClass<any, any>"
            },
            {
              "value": "\"keygen\" & FunctionComponent<any>"
            },
            {
              "value": "\"label\" & ComponentClass<any, any>"
            },
            {
              "value": "\"label\" & FunctionComponent<any>"
            },
            {
              "value": "\"legend\" & ComponentClass<any, any>"
            },
            {
              "value": "\"legend\" & FunctionComponent<any>"
            },
            {
              "value": "\"li\" & ComponentClass<any, any>"
            },
            {
              "value": "\"li\" & FunctionComponent<any>"
            },
            {
              "value": "\"link\" & ComponentClass<any, any>"
            },
            {
              "value": "\"link\" & FunctionComponent<any>"
            },
            {
              "value": "\"main\" & ComponentClass<any, any>"
            },
            {
              "value": "\"main\" & FunctionComponent<any>"
            },
            {
              "value": "\"map\" & ComponentClass<any, any>"
            },
            {
              "value": "\"map\" & FunctionComponent<any>"
            },
            {
              "value": "\"mark\" & ComponentClass<any, any>"
            },
            {
              "value": "\"mark\" & FunctionComponent<any>"
            },
            {
              "value": "\"menu\" & ComponentClass<any, any>"
            },
            {
              "value": "\"menu\" & FunctionComponent<any>"
            },
            {
              "value": "\"menuitem\" & ComponentClass<any, any>"
            },
            {
              "value": "\"menuitem\" & FunctionComponent<any>"
            },
            {
              "value": "\"meta\" & ComponentClass<any, any>"
            },
            {
              "value": "\"meta\" & FunctionComponent<any>"
            },
            {
              "value": "\"meter\" & ComponentClass<any, any>"
            },
            {
              "value": "\"meter\" & FunctionComponent<any>"
            },
            {
              "value": "\"nav\" & ComponentClass<any, any>"
            },
            {
              "value": "\"nav\" & FunctionComponent<any>"
            },
            {
              "value": "\"noindex\" & ComponentClass<any, any>"
            },
            {
              "value": "\"noindex\" & FunctionComponent<any>"
            },
            {
              "value": "\"noscript\" & ComponentClass<any, any>"
            },
            {
              "value": "\"noscript\" & FunctionComponent<any>"
            },
            {
              "value": "\"ol\" & ComponentClass<any, any>"
            },
            {
              "value": "\"ol\" & FunctionComponent<any>"
            },
            {
              "value": "\"optgroup\" & ComponentClass<any, any>"
            },
            {
              "value": "\"optgroup\" & FunctionComponent<any>"
            },
            {
              "value": "\"option\" & ComponentClass<any, any>"
            },
            {
              "value": "\"option\" & FunctionComponent<any>"
            },
            {
              "value": "\"output\" & ComponentClass<any, any>"
            },
            {
              "value": "\"output\" & FunctionComponent<any>"
            },
            {
              "value": "\"p\" & ComponentClass<any, any>"
            },
            {
              "value": "\"p\" & FunctionComponent<any>"
            },
            {
              "value": "\"param\" & ComponentClass<any, any>"
            },
            {
              "value": "\"param\" & FunctionComponent<any>"
            },
            {
              "value": "\"picture\" & ComponentClass<any, any>"
            },
            {
              "value": "\"picture\" & FunctionComponent<any>"
            },
            {
              "value": "\"pre\" & ComponentClass<any, any>"
            },
            {
              "value": "\"pre\" & FunctionComponent<any>"
            },
            {
              "value": "\"progress\" & ComponentClass<any, any>"
            },
            {
              "value": "\"progress\" & FunctionComponent<any>"
            },
            {
              "value": "\"q\" & ComponentClass<any, any>"
            },
            {
              "value": "\"q\" & FunctionComponent<any>"
            },
            {
              "value": "\"rp\" & ComponentClass<any, any>"
            },
            {
              "value": "\"rp\" & FunctionComponent<any>"
            },
            {
              "value": "\"rt\" & ComponentClass<any, any>"
            },
            {
              "value": "\"rt\" & FunctionComponent<any>"
            },
            {
              "value": "\"ruby\" & ComponentClass<any, any>"
            },
            {
              "value": "\"ruby\" & FunctionComponent<any>"
            },
            {
              "value": "\"s\" & ComponentClass<any, any>"
            },
            {
              "value": "\"s\" & FunctionComponent<any>"
            },
            {
              "value": "\"samp\" & ComponentClass<any, any>"
            },
            {
              "value": "\"samp\" & FunctionComponent<any>"
            },
            {
              "value": "\"search\" & ComponentClass<any, any>"
            },
            {
              "value": "\"search\" & FunctionComponent<any>"
            },
            {
              "value": "\"slot\" & ComponentClass<any, any>"
            },
            {
              "value": "\"slot\" & FunctionComponent<any>"
            },
            {
              "value": "\"script\" & ComponentClass<any, any>"
            },
            {
              "value": "\"script\" & FunctionComponent<any>"
            },
            {
              "value": "\"section\" & ComponentClass<any, any>"
            },
            {
              "value": "\"section\" & FunctionComponent<any>"
            },
            {
              "value": "\"select\" & ComponentClass<any, any>"
            },
            {
              "value": "\"select\" & FunctionComponent<any>"
            },
            {
              "value": "\"small\" & ComponentClass<any, any>"
            },
            {
              "value": "\"small\" & FunctionComponent<any>"
            },
            {
              "value": "\"source\" & ComponentClass<any, any>"
            },
            {
              "value": "\"source\" & FunctionComponent<any>"
            },
            {
              "value": "\"span\" & ComponentClass<any, any>"
            },
            {
              "value": "\"span\" & FunctionComponent<any>"
            },
            {
              "value": "\"strong\" & ComponentClass<any, any>"
            },
            {
              "value": "\"strong\" & FunctionComponent<any>"
            },
            {
              "value": "\"style\" & ComponentClass<any, any>"
            },
            {
              "value": "\"style\" & FunctionComponent<any>"
            },
            {
              "value": "\"sub\" & ComponentClass<any, any>"
            },
            {
              "value": "\"sub\" & FunctionComponent<any>"
            },
            {
              "value": "\"summary\" & ComponentClass<any, any>"
            },
            {
              "value": "\"summary\" & FunctionComponent<any>"
            },
            {
              "value": "\"sup\" & ComponentClass<any, any>"
            },
            {
              "value": "\"sup\" & FunctionComponent<any>"
            },
            {
              "value": "\"table\" & ComponentClass<any, any>"
            },
            {
              "value": "\"table\" & FunctionComponent<any>"
            },
            {
              "value": "\"template\" & ComponentClass<any, any>"
            },
            {
              "value": "\"template\" & FunctionComponent<any>"
            },
            {
              "value": "\"tbody\" & ComponentClass<any, any>"
            },
            {
              "value": "\"tbody\" & FunctionComponent<any>"
            },
            {
              "value": "\"td\" & ComponentClass<any, any>"
            },
            {
              "value": "\"td\" & FunctionComponent<any>"
            },
            {
              "value": "\"textarea\" & ComponentClass<any, any>"
            },
            {
              "value": "\"textarea\" & FunctionComponent<any>"
            },
            {
              "value": "\"tfoot\" & ComponentClass<any, any>"
            },
            {
              "value": "\"tfoot\" & FunctionComponent<any>"
            },
            {
              "value": "\"th\" & ComponentClass<any, any>"
            },
            {
              "value": "\"th\" & FunctionComponent<any>"
            },
            {
              "value": "\"thead\" & ComponentClass<any, any>"
            },
            {
              "value": "\"thead\" & FunctionComponent<any>"
            },
            {
              "value": "\"time\" & ComponentClass<any, any>"
            },
            {
              "value": "\"time\" & FunctionComponent<any>"
            },
            {
              "value": "\"title\" & ComponentClass<any, any>"
            },
            {
              "value": "\"title\" & FunctionComponent<any>"
            },
            {
              "value": "\"tr\" & ComponentClass<any, any>"
            },
            {
              "value": "\"tr\" & FunctionComponent<any>"
            },
            {
              "value": "\"track\" & ComponentClass<any, any>"
            },
            {
              "value": "\"track\" & FunctionComponent<any>"
            },
            {
              "value": "\"u\" & ComponentClass<any, any>"
            },
            {
              "value": "\"u\" & FunctionComponent<any>"
            },
            {
              "value": "\"ul\" & ComponentClass<any, any>"
            },
            {
              "value": "\"ul\" & FunctionComponent<any>"
            },
            {
              "value": "\"var\" & ComponentClass<any, any>"
            },
            {
              "value": "\"var\" & FunctionComponent<any>"
            },
            {
              "value": "\"video\" & ComponentClass<any, any>"
            },
            {
              "value": "\"video\" & FunctionComponent<any>"
            },
            {
              "value": "\"wbr\" & ComponentClass<any, any>"
            },
            {
              "value": "\"wbr\" & FunctionComponent<any>"
            },
            {
              "value": "\"webview\" & ComponentClass<any, any>"
            },
            {
              "value": "\"webview\" & FunctionComponent<any>"
            },
            {
              "value": "\"svg\" & ComponentClass<any, any>"
            },
            {
              "value": "\"svg\" & FunctionComponent<any>"
            },
            {
              "value": "\"animate\" & ComponentClass<any, any>"
            },
            {
              "value": "\"animate\" & FunctionComponent<any>"
            },
            {
              "value": "\"animateMotion\" & ComponentClass<any, any>"
            },
            {
              "value": "\"animateMotion\" & FunctionComponent<any>"
            },
            {
              "value": "\"animateTransform\" & ComponentClass<any, any>"
            },
            {
              "value": "\"animateTransform\" & FunctionComponent<any>"
            },
            {
              "value": "\"circle\" & ComponentClass<any, any>"
            },
            {
              "value": "\"circle\" & FunctionComponent<any>"
            },
            {
              "value": "\"clipPath\" & ComponentClass<any, any>"
            },
            {
              "value": "\"clipPath\" & FunctionComponent<any>"
            },
            {
              "value": "\"defs\" & ComponentClass<any, any>"
            },
            {
              "value": "\"defs\" & FunctionComponent<any>"
            },
            {
              "value": "\"desc\" & ComponentClass<any, any>"
            },
            {
              "value": "\"desc\" & FunctionComponent<any>"
            },
            {
              "value": "\"ellipse\" & ComponentClass<any, any>"
            },
            {
              "value": "\"ellipse\" & FunctionComponent<any>"
            },
            {
              "value": "\"feBlend\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feBlend\" & FunctionComponent<any>"
            },
            {
              "value": "\"feColorMatrix\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feColorMatrix\" & FunctionComponent<any>"
            },
            {
              "value": "\"feComponentTransfer\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feComponentTransfer\" & FunctionComponent<any>"
            },
            {
              "value": "\"feComposite\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feComposite\" & FunctionComponent<any>"
            },
            {
              "value": "\"feConvolveMatrix\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feConvolveMatrix\" & FunctionComponent<any>"
            },
            {
              "value": "\"feDiffuseLighting\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feDiffuseLighting\" & FunctionComponent<any>"
            },
            {
              "value": "\"feDisplacementMap\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feDisplacementMap\" & FunctionComponent<any>"
            },
            {
              "value": "\"feDistantLight\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feDistantLight\" & FunctionComponent<any>"
            },
            {
              "value": "\"feDropShadow\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feDropShadow\" & FunctionComponent<any>"
            },
            {
              "value": "\"feFlood\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feFlood\" & FunctionComponent<any>"
            },
            {
              "value": "\"feFuncA\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feFuncA\" & FunctionComponent<any>"
            },
            {
              "value": "\"feFuncB\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feFuncB\" & FunctionComponent<any>"
            },
            {
              "value": "\"feFuncG\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feFuncG\" & FunctionComponent<any>"
            },
            {
              "value": "\"feFuncR\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feFuncR\" & FunctionComponent<any>"
            },
            {
              "value": "\"feGaussianBlur\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feGaussianBlur\" & FunctionComponent<any>"
            },
            {
              "value": "\"feImage\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feImage\" & FunctionComponent<any>"
            },
            {
              "value": "\"feMerge\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feMerge\" & FunctionComponent<any>"
            },
            {
              "value": "\"feMergeNode\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feMergeNode\" & FunctionComponent<any>"
            },
            {
              "value": "\"feMorphology\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feMorphology\" & FunctionComponent<any>"
            },
            {
              "value": "\"feOffset\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feOffset\" & FunctionComponent<any>"
            },
            {
              "value": "\"fePointLight\" & ComponentClass<any, any>"
            },
            {
              "value": "\"fePointLight\" & FunctionComponent<any>"
            },
            {
              "value": "\"feSpecularLighting\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feSpecularLighting\" & FunctionComponent<any>"
            },
            {
              "value": "\"feSpotLight\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feSpotLight\" & FunctionComponent<any>"
            },
            {
              "value": "\"feTile\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feTile\" & FunctionComponent<any>"
            },
            {
              "value": "\"feTurbulence\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feTurbulence\" & FunctionComponent<any>"
            },
            {
              "value": "\"filter\" & ComponentClass<any, any>"
            },
            {
              "value": "\"filter\" & FunctionComponent<any>"
            },
            {
              "value": "\"foreignObject\" & ComponentClass<any, any>"
            },
            {
              "value": "\"foreignObject\" & FunctionComponent<any>"
            },
            {
              "value": "\"g\" & ComponentClass<any, any>"
            },
            {
              "value": "\"g\" & FunctionComponent<any>"
            },
            {
              "value": "\"image\" & ComponentClass<any, any>"
            },
            {
              "value": "\"image\" & FunctionComponent<any>"
            },
            {
              "value": "\"line\" & ComponentClass<any, any>"
            },
            {
              "value": "\"line\" & FunctionComponent<any>"
            },
            {
              "value": "\"linearGradient\" & ComponentClass<any, any>"
            },
            {
              "value": "\"linearGradient\" & FunctionComponent<any>"
            },
            {
              "value": "\"marker\" & ComponentClass<any, any>"
            },
            {
              "value": "\"marker\" & FunctionComponent<any>"
            },
            {
              "value": "\"mask\" & ComponentClass<any, any>"
            },
            {
              "value": "\"mask\" & FunctionComponent<any>"
            },
            {
              "value": "\"metadata\" & ComponentClass<any, any>"
            },
            {
              "value": "\"metadata\" & FunctionComponent<any>"
            },
            {
              "value": "\"mpath\" & ComponentClass<any, any>"
            },
            {
              "value": "\"mpath\" & FunctionComponent<any>"
            },
            {
              "value": "\"path\" & ComponentClass<any, any>"
            },
            {
              "value": "\"path\" & FunctionComponent<any>"
            },
            {
              "value": "\"pattern\" & ComponentClass<any, any>"
            },
            {
              "value": "\"pattern\" & FunctionComponent<any>"
            },
            {
              "value": "\"polygon\" & ComponentClass<any, any>"
            },
            {
              "value": "\"polygon\" & FunctionComponent<any>"
            },
            {
              "value": "\"polyline\" & ComponentClass<any, any>"
            },
            {
              "value": "\"polyline\" & FunctionComponent<any>"
            },
            {
              "value": "\"radialGradient\" & ComponentClass<any, any>"
            },
            {
              "value": "\"radialGradient\" & FunctionComponent<any>"
            },
            {
              "value": "\"rect\" & ComponentClass<any, any>"
            },
            {
              "value": "\"rect\" & FunctionComponent<any>"
            },
            {
              "value": "\"set\" & ComponentClass<any, any>"
            },
            {
              "value": "\"set\" & FunctionComponent<any>"
            },
            {
              "value": "\"stop\" & ComponentClass<any, any>"
            },
            {
              "value": "\"stop\" & FunctionComponent<any>"
            },
            {
              "value": "\"switch\" & ComponentClass<any, any>"
            },
            {
              "value": "\"switch\" & FunctionComponent<any>"
            },
            {
              "value": "\"text\" & ComponentClass<any, any>"
            },
            {
              "value": "\"text\" & FunctionComponent<any>"
            },
            {
              "value": "\"textPath\" & ComponentClass<any, any>"
            },
            {
              "value": "\"textPath\" & FunctionComponent<any>"
            },
            {
              "value": "\"tspan\" & ComponentClass<any, any>"
            },
            {
              "value": "\"tspan\" & FunctionComponent<any>"
            },
            {
              "value": "\"use\" & ComponentClass<any, any>"
            },
            {
              "value": "\"use\" & FunctionComponent<any>"
            },
            {
              "value": "\"view\" & ComponentClass<any, any>"
            },
            {
              "value": "\"view\" & FunctionComponent<any>"
            },
            {
              "value": "\"relative-time\" & ComponentClass<any, any>"
            },
            {
              "value": "\"relative-time\" & FunctionComponent<any>"
            },
            {
              "value": "\"tab-container\" & ComponentClass<any, any>"
            },
            {
              "value": "\"tab-container\" & FunctionComponent<any>"
            },
            {
              "value": "ComponentClass<any, any> & ComponentClass<unknown, any>"
            },
            {
              "value": "ComponentClass<any, any> & FunctionComponent<unknown>"
            },
            {
              "value": "FunctionComponent<any> & ComponentClass<unknown, any>"
            },
            {
              "value": "FunctionComponent<any> & FunctionComponent<unknown>"
            },
            {
              "value": "ComponentClass<any, any> & \"symbol\""
            },
            {
              "value": "ComponentClass<any, any> & \"object\""
            },
            {
              "value": "ComponentClass<any, any> & \"a\""
            },
            {
              "value": "ComponentClass<any, any> & \"abbr\""
            },
            {
              "value": "ComponentClass<any, any> & \"address\""
            },
            {
              "value": "ComponentClass<any, any> & \"area\""
            },
            {
              "value": "ComponentClass<any, any> & \"article\""
            },
            {
              "value": "ComponentClass<any, any> & \"aside\""
            },
            {
              "value": "ComponentClass<any, any> & \"audio\""
            },
            {
              "value": "ComponentClass<any, any> & \"b\""
            },
            {
              "value": "ComponentClass<any, any> & \"base\""
            },
            {
              "value": "ComponentClass<any, any> & \"bdi\""
            },
            {
              "value": "ComponentClass<any, any> & \"bdo\""
            },
            {
              "value": "ComponentClass<any, any> & \"big\""
            },
            {
              "value": "ComponentClass<any, any> & \"blockquote\""
            },
            {
              "value": "ComponentClass<any, any> & \"body\""
            },
            {
              "value": "ComponentClass<any, any> & \"br\""
            },
            {
              "value": "ComponentClass<any, any> & \"button\""
            },
            {
              "value": "ComponentClass<any, any> & \"canvas\""
            },
            {
              "value": "ComponentClass<any, any> & \"caption\""
            },
            {
              "value": "ComponentClass<any, any> & \"center\""
            },
            {
              "value": "ComponentClass<any, any> & \"cite\""
            },
            {
              "value": "ComponentClass<any, any> & \"code\""
            },
            {
              "value": "ComponentClass<any, any> & \"col\""
            },
            {
              "value": "ComponentClass<any, any> & \"colgroup\""
            },
            {
              "value": "ComponentClass<any, any> & \"data\""
            },
            {
              "value": "ComponentClass<any, any> & \"datalist\""
            },
            {
              "value": "ComponentClass<any, any> & \"dd\""
            },
            {
              "value": "ComponentClass<any, any> & \"del\""
            },
            {
              "value": "ComponentClass<any, any> & \"details\""
            },
            {
              "value": "ComponentClass<any, any> & \"dfn\""
            },
            {
              "value": "ComponentClass<any, any> & \"dialog\""
            },
            {
              "value": "ComponentClass<any, any> & \"div\""
            },
            {
              "value": "ComponentClass<any, any> & \"dl\""
            },
            {
              "value": "ComponentClass<any, any> & \"dt\""
            },
            {
              "value": "ComponentClass<any, any> & \"em\""
            },
            {
              "value": "ComponentClass<any, any> & \"embed\""
            },
            {
              "value": "ComponentClass<any, any> & \"fieldset\""
            },
            {
              "value": "ComponentClass<any, any> & \"figcaption\""
            },
            {
              "value": "ComponentClass<any, any> & \"figure\""
            },
            {
              "value": "ComponentClass<any, any> & \"footer\""
            },
            {
              "value": "ComponentClass<any, any> & \"form\""
            },
            {
              "value": "ComponentClass<any, any> & \"h1\""
            },
            {
              "value": "ComponentClass<any, any> & \"h2\""
            },
            {
              "value": "ComponentClass<any, any> & \"h3\""
            },
            {
              "value": "ComponentClass<any, any> & \"h4\""
            },
            {
              "value": "ComponentClass<any, any> & \"h5\""
            },
            {
              "value": "ComponentClass<any, any> & \"h6\""
            },
            {
              "value": "ComponentClass<any, any> & \"head\""
            },
            {
              "value": "ComponentClass<any, any> & \"header\""
            },
            {
              "value": "ComponentClass<any, any> & \"hgroup\""
            },
            {
              "value": "ComponentClass<any, any> & \"hr\""
            },
            {
              "value": "ComponentClass<any, any> & \"html\""
            },
            {
              "value": "ComponentClass<any, any> & \"i\""
            },
            {
              "value": "ComponentClass<any, any> & \"iframe\""
            },
            {
              "value": "ComponentClass<any, any> & \"img\""
            },
            {
              "value": "ComponentClass<any, any> & \"input\""
            },
            {
              "value": "ComponentClass<any, any> & \"ins\""
            },
            {
              "value": "ComponentClass<any, any> & \"kbd\""
            },
            {
              "value": "ComponentClass<any, any> & \"keygen\""
            },
            {
              "value": "ComponentClass<any, any> & \"label\""
            },
            {
              "value": "ComponentClass<any, any> & \"legend\""
            },
            {
              "value": "ComponentClass<any, any> & \"li\""
            },
            {
              "value": "ComponentClass<any, any> & \"link\""
            },
            {
              "value": "ComponentClass<any, any> & \"main\""
            },
            {
              "value": "ComponentClass<any, any> & \"map\""
            },
            {
              "value": "ComponentClass<any, any> & \"mark\""
            },
            {
              "value": "ComponentClass<any, any> & \"menu\""
            },
            {
              "value": "ComponentClass<any, any> & \"menuitem\""
            },
            {
              "value": "ComponentClass<any, any> & \"meta\""
            },
            {
              "value": "ComponentClass<any, any> & \"meter\""
            },
            {
              "value": "ComponentClass<any, any> & \"nav\""
            },
            {
              "value": "ComponentClass<any, any> & \"noindex\""
            },
            {
              "value": "ComponentClass<any, any> & \"noscript\""
            },
            {
              "value": "ComponentClass<any, any> & \"ol\""
            },
            {
              "value": "ComponentClass<any, any> & \"optgroup\""
            },
            {
              "value": "ComponentClass<any, any> & \"option\""
            },
            {
              "value": "ComponentClass<any, any> & \"output\""
            },
            {
              "value": "ComponentClass<any, any> & \"p\""
            },
            {
              "value": "ComponentClass<any, any> & \"param\""
            },
            {
              "value": "ComponentClass<any, any> & \"picture\""
            },
            {
              "value": "ComponentClass<any, any> & \"pre\""
            },
            {
              "value": "ComponentClass<any, any> & \"progress\""
            },
            {
              "value": "ComponentClass<any, any> & \"q\""
            },
            {
              "value": "ComponentClass<any, any> & \"rp\""
            },
            {
              "value": "ComponentClass<any, any> & \"rt\""
            },
            {
              "value": "ComponentClass<any, any> & \"ruby\""
            },
            {
              "value": "ComponentClass<any, any> & \"s\""
            },
            {
              "value": "ComponentClass<any, any> & \"samp\""
            },
            {
              "value": "ComponentClass<any, any> & \"search\""
            },
            {
              "value": "ComponentClass<any, any> & \"slot\""
            },
            {
              "value": "ComponentClass<any, any> & \"script\""
            },
            {
              "value": "ComponentClass<any, any> & \"section\""
            },
            {
              "value": "ComponentClass<any, any> & \"select\""
            },
            {
              "value": "ComponentClass<any, any> & \"small\""
            },
            {
              "value": "ComponentClass<any, any> & \"source\""
            },
            {
              "value": "ComponentClass<any, any> & \"span\""
            },
            {
              "value": "ComponentClass<any, any> & \"strong\""
            },
            {
              "value": "ComponentClass<any, any> & \"style\""
            },
            {
              "value": "ComponentClass<any, any> & \"sub\""
            },
            {
              "value": "ComponentClass<any, any> & \"summary\""
            },
            {
              "value": "ComponentClass<any, any> & \"sup\""
            },
            {
              "value": "ComponentClass<any, any> & \"table\""
            },
            {
              "value": "ComponentClass<any, any> & \"template\""
            },
            {
              "value": "ComponentClass<any, any> & \"tbody\""
            },
            {
              "value": "ComponentClass<any, any> & \"td\""
            },
            {
              "value": "ComponentClass<any, any> & \"textarea\""
            },
            {
              "value": "ComponentClass<any, any> & \"tfoot\""
            },
            {
              "value": "ComponentClass<any, any> & \"th\""
            },
            {
              "value": "ComponentClass<any, any> & \"thead\""
            },
            {
              "value": "ComponentClass<any, any> & \"time\""
            },
            {
              "value": "ComponentClass<any, any> & \"title\""
            },
            {
              "value": "ComponentClass<any, any> & \"tr\""
            },
            {
              "value": "ComponentClass<any, any> & \"track\""
            },
            {
              "value": "ComponentClass<any, any> & \"u\""
            },
            {
              "value": "ComponentClass<any, any> & \"ul\""
            },
            {
              "value": "ComponentClass<any, any> & \"var\""
            },
            {
              "value": "ComponentClass<any, any> & \"video\""
            },
            {
              "value": "ComponentClass<any, any> & \"wbr\""
            },
            {
              "value": "ComponentClass<any, any> & \"webview\""
            },
            {
              "value": "ComponentClass<any, any> & \"svg\""
            },
            {
              "value": "ComponentClass<any, any> & \"animate\""
            },
            {
              "value": "ComponentClass<any, any> & \"animateMotion\""
            },
            {
              "value": "ComponentClass<any, any> & \"animateTransform\""
            },
            {
              "value": "ComponentClass<any, any> & \"circle\""
            },
            {
              "value": "ComponentClass<any, any> & \"clipPath\""
            },
            {
              "value": "ComponentClass<any, any> & \"defs\""
            },
            {
              "value": "ComponentClass<any, any> & \"desc\""
            },
            {
              "value": "ComponentClass<any, any> & \"ellipse\""
            },
            {
              "value": "ComponentClass<any, any> & \"feBlend\""
            },
            {
              "value": "ComponentClass<any, any> & \"feColorMatrix\""
            },
            {
              "value": "ComponentClass<any, any> & \"feComponentTransfer\""
            },
            {
              "value": "ComponentClass<any, any> & \"feComposite\""
            },
            {
              "value": "ComponentClass<any, any> & \"feConvolveMatrix\""
            },
            {
              "value": "ComponentClass<any, any> & \"feDiffuseLighting\""
            },
            {
              "value": "ComponentClass<any, any> & \"feDisplacementMap\""
            },
            {
              "value": "ComponentClass<any, any> & \"feDistantLight\""
            },
            {
              "value": "ComponentClass<any, any> & \"feDropShadow\""
            },
            {
              "value": "ComponentClass<any, any> & \"feFlood\""
            },
            {
              "value": "ComponentClass<any, any> & \"feFuncA\""
            },
            {
              "value": "ComponentClass<any, any> & \"feFuncB\""
            },
            {
              "value": "ComponentClass<any, any> & \"feFuncG\""
            },
            {
              "value": "ComponentClass<any, any> & \"feFuncR\""
            },
            {
              "value": "ComponentClass<any, any> & \"feGaussianBlur\""
            },
            {
              "value": "ComponentClass<any, any> & \"feImage\""
            },
            {
              "value": "ComponentClass<any, any> & \"feMerge\""
            },
            {
              "value": "ComponentClass<any, any> & \"feMergeNode\""
            },
            {
              "value": "ComponentClass<any, any> & \"feMorphology\""
            },
            {
              "value": "ComponentClass<any, any> & \"feOffset\""
            },
            {
              "value": "ComponentClass<any, any> & \"fePointLight\""
            },
            {
              "value": "ComponentClass<any, any> & \"feSpecularLighting\""
            },
            {
              "value": "ComponentClass<any, any> & \"feSpotLight\""
            },
            {
              "value": "ComponentClass<any, any> & \"feTile\""
            },
            {
              "value": "ComponentClass<any, any> & \"feTurbulence\""
            },
            {
              "value": "ComponentClass<any, any> & \"filter\""
            },
            {
              "value": "ComponentClass<any, any> & \"foreignObject\""
            },
            {
              "value": "ComponentClass<any, any> & \"g\""
            },
            {
              "value": "ComponentClass<any, any> & \"image\""
            },
            {
              "value": "ComponentClass<any, any> & \"line\""
            },
            {
              "value": "ComponentClass<any, any> & \"linearGradient\""
            },
            {
              "value": "ComponentClass<any, any> & \"marker\""
            },
            {
              "value": "ComponentClass<any, any> & \"mask\""
            },
            {
              "value": "ComponentClass<any, any> & \"metadata\""
            },
            {
              "value": "ComponentClass<any, any> & \"mpath\""
            },
            {
              "value": "ComponentClass<any, any> & \"path\""
            },
            {
              "value": "ComponentClass<any, any> & \"pattern\""
            },
            {
              "value": "ComponentClass<any, any> & \"polygon\""
            },
            {
              "value": "ComponentClass<any, any> & \"polyline\""
            },
            {
              "value": "ComponentClass<any, any> & \"radialGradient\""
            },
            {
              "value": "ComponentClass<any, any> & \"rect\""
            },
            {
              "value": "ComponentClass<any, any> & \"set\""
            },
            {
              "value": "ComponentClass<any, any> & \"stop\""
            },
            {
              "value": "ComponentClass<any, any> & \"switch\""
            },
            {
              "value": "ComponentClass<any, any> & \"text\""
            },
            {
              "value": "ComponentClass<any, any> & \"textPath\""
            },
            {
              "value": "ComponentClass<any, any> & \"tspan\""
            },
            {
              "value": "ComponentClass<any, any> & \"use\""
            },
            {
              "value": "ComponentClass<any, any> & \"view\""
            },
            {
              "value": "ComponentClass<any, any> & \"relative-time\""
            },
            {
              "value": "ComponentClass<any, any> & \"tab-container\""
            },
            {
              "value": "FunctionComponent<any> & \"symbol\""
            },
            {
              "value": "FunctionComponent<any> & \"object\""
            },
            {
              "value": "FunctionComponent<any> & \"a\""
            },
            {
              "value": "FunctionComponent<any> & \"abbr\""
            },
            {
              "value": "FunctionComponent<any> & \"address\""
            },
            {
              "value": "FunctionComponent<any> & \"area\""
            },
            {
              "value": "FunctionComponent<any> & \"article\""
            },
            {
              "value": "FunctionComponent<any> & \"aside\""
            },
            {
              "value": "FunctionComponent<any> & \"audio\""
            },
            {
              "value": "FunctionComponent<any> & \"b\""
            },
            {
              "value": "FunctionComponent<any> & \"base\""
            },
            {
              "value": "FunctionComponent<any> & \"bdi\""
            },
            {
              "value": "FunctionComponent<any> & \"bdo\""
            },
            {
              "value": "FunctionComponent<any> & \"big\""
            },
            {
              "value": "FunctionComponent<any> & \"blockquote\""
            },
            {
              "value": "FunctionComponent<any> & \"body\""
            },
            {
              "value": "FunctionComponent<any> & \"br\""
            },
            {
              "value": "FunctionComponent<any> & \"button\""
            },
            {
              "value": "FunctionComponent<any> & \"canvas\""
            },
            {
              "value": "FunctionComponent<any> & \"caption\""
            },
            {
              "value": "FunctionComponent<any> & \"center\""
            },
            {
              "value": "FunctionComponent<any> & \"cite\""
            },
            {
              "value": "FunctionComponent<any> & \"code\""
            },
            {
              "value": "FunctionComponent<any> & \"col\""
            },
            {
              "value": "FunctionComponent<any> & \"colgroup\""
            },
            {
              "value": "FunctionComponent<any> & \"data\""
            },
            {
              "value": "FunctionComponent<any> & \"datalist\""
            },
            {
              "value": "FunctionComponent<any> & \"dd\""
            },
            {
              "value": "FunctionComponent<any> & \"del\""
            },
            {
              "value": "FunctionComponent<any> & \"details\""
            },
            {
              "value": "FunctionComponent<any> & \"dfn\""
            },
            {
              "value": "FunctionComponent<any> & \"dialog\""
            },
            {
              "value": "FunctionComponent<any> & \"div\""
            },
            {
              "value": "FunctionComponent<any> & \"dl\""
            },
            {
              "value": "FunctionComponent<any> & \"dt\""
            },
            {
              "value": "FunctionComponent<any> & \"em\""
            },
            {
              "value": "FunctionComponent<any> & \"embed\""
            },
            {
              "value": "FunctionComponent<any> & \"fieldset\""
            },
            {
              "value": "FunctionComponent<any> & \"figcaption\""
            },
            {
              "value": "FunctionComponent<any> & \"figure\""
            },
            {
              "value": "FunctionComponent<any> & \"footer\""
            },
            {
              "value": "FunctionComponent<any> & \"form\""
            },
            {
              "value": "FunctionComponent<any> & \"h1\""
            },
            {
              "value": "FunctionComponent<any> & \"h2\""
            },
            {
              "value": "FunctionComponent<any> & \"h3\""
            },
            {
              "value": "FunctionComponent<any> & \"h4\""
            },
            {
              "value": "FunctionComponent<any> & \"h5\""
            },
            {
              "value": "FunctionComponent<any> & \"h6\""
            },
            {
              "value": "FunctionComponent<any> & \"head\""
            },
            {
              "value": "FunctionComponent<any> & \"header\""
            },
            {
              "value": "FunctionComponent<any> & \"hgroup\""
            },
            {
              "value": "FunctionComponent<any> & \"hr\""
            },
            {
              "value": "FunctionComponent<any> & \"html\""
            },
            {
              "value": "FunctionComponent<any> & \"i\""
            },
            {
              "value": "FunctionComponent<any> & \"iframe\""
            },
            {
              "value": "FunctionComponent<any> & \"img\""
            },
            {
              "value": "FunctionComponent<any> & \"input\""
            },
            {
              "value": "FunctionComponent<any> & \"ins\""
            },
            {
              "value": "FunctionComponent<any> & \"kbd\""
            },
            {
              "value": "FunctionComponent<any> & \"keygen\""
            },
            {
              "value": "FunctionComponent<any> & \"label\""
            },
            {
              "value": "FunctionComponent<any> & \"legend\""
            },
            {
              "value": "FunctionComponent<any> & \"li\""
            },
            {
              "value": "FunctionComponent<any> & \"link\""
            },
            {
              "value": "FunctionComponent<any> & \"main\""
            },
            {
              "value": "FunctionComponent<any> & \"map\""
            },
            {
              "value": "FunctionComponent<any> & \"mark\""
            },
            {
              "value": "FunctionComponent<any> & \"menu\""
            },
            {
              "value": "FunctionComponent<any> & \"menuitem\""
            },
            {
              "value": "FunctionComponent<any> & \"meta\""
            },
            {
              "value": "FunctionComponent<any> & \"meter\""
            },
            {
              "value": "FunctionComponent<any> & \"nav\""
            },
            {
              "value": "FunctionComponent<any> & \"noindex\""
            },
            {
              "value": "FunctionComponent<any> & \"noscript\""
            },
            {
              "value": "FunctionComponent<any> & \"ol\""
            },
            {
              "value": "FunctionComponent<any> & \"optgroup\""
            },
            {
              "value": "FunctionComponent<any> & \"option\""
            },
            {
              "value": "FunctionComponent<any> & \"output\""
            },
            {
              "value": "FunctionComponent<any> & \"p\""
            },
            {
              "value": "FunctionComponent<any> & \"param\""
            },
            {
              "value": "FunctionComponent<any> & \"picture\""
            },
            {
              "value": "FunctionComponent<any> & \"pre\""
            },
            {
              "value": "FunctionComponent<any> & \"progress\""
            },
            {
              "value": "FunctionComponent<any> & \"q\""
            },
            {
              "value": "FunctionComponent<any> & \"rp\""
            },
            {
              "value": "FunctionComponent<any> & \"rt\""
            },
            {
              "value": "FunctionComponent<any> & \"ruby\""
            },
            {
              "value": "FunctionComponent<any> & \"s\""
            },
            {
              "value": "FunctionComponent<any> & \"samp\""
            },
            {
              "value": "FunctionComponent<any> & \"search\""
            },
            {
              "value": "FunctionComponent<any> & \"slot\""
            },
            {
              "value": "FunctionComponent<any> & \"script\""
            },
            {
              "value": "FunctionComponent<any> & \"section\""
            },
            {
              "value": "FunctionComponent<any> & \"select\""
            },
            {
              "value": "FunctionComponent<any> & \"small\""
            },
            {
              "value": "FunctionComponent<any> & \"source\""
            },
            {
              "value": "FunctionComponent<any> & \"span\""
            },
            {
              "value": "FunctionComponent<any> & \"strong\""
            },
            {
              "value": "FunctionComponent<any> & \"style\""
            },
            {
              "value": "FunctionComponent<any> & \"sub\""
            },
            {
              "value": "FunctionComponent<any> & \"summary\""
            },
            {
              "value": "FunctionComponent<any> & \"sup\""
            },
            {
              "value": "FunctionComponent<any> & \"table\""
            },
            {
              "value": "FunctionComponent<any> & \"template\""
            },
            {
              "value": "FunctionComponent<any> & \"tbody\""
            },
            {
              "value": "FunctionComponent<any> & \"td\""
            },
            {
              "value": "FunctionComponent<any> & \"textarea\""
            },
            {
              "value": "FunctionComponent<any> & \"tfoot\""
            },
            {
              "value": "FunctionComponent<any> & \"th\""
            },
            {
              "value": "FunctionComponent<any> & \"thead\""
            },
            {
              "value": "FunctionComponent<any> & \"time\""
            },
            {
              "value": "FunctionComponent<any> & \"title\""
            },
            {
              "value": "FunctionComponent<any> & \"tr\""
            },
            {
              "value": "FunctionComponent<any> & \"track\""
            },
            {
              "value": "FunctionComponent<any> & \"u\""
            },
            {
              "value": "FunctionComponent<any> & \"ul\""
            },
            {
              "value": "FunctionComponent<any> & \"var\""
            },
            {
              "value": "FunctionComponent<any> & \"video\""
            },
            {
              "value": "FunctionComponent<any> & \"wbr\""
            },
            {
              "value": "FunctionComponent<any> & \"webview\""
            },
            {
              "value": "FunctionComponent<any> & \"svg\""
            },
            {
              "value": "FunctionComponent<any> & \"animate\""
            },
            {
              "value": "FunctionComponent<any> & \"animateMotion\""
            },
            {
              "value": "FunctionComponent<any> & \"animateTransform\""
            },
            {
              "value": "FunctionComponent<any> & \"circle\""
            },
            {
              "value": "FunctionComponent<any> & \"clipPath\""
            },
            {
              "value": "FunctionComponent<any> & \"defs\""
            },
            {
              "value": "FunctionComponent<any> & \"desc\""
            },
            {
              "value": "FunctionComponent<any> & \"ellipse\""
            },
            {
              "value": "FunctionComponent<any> & \"feBlend\""
            },
            {
              "value": "FunctionComponent<any> & \"feColorMatrix\""
            },
            {
              "value": "FunctionComponent<any> & \"feComponentTransfer\""
            },
            {
              "value": "FunctionComponent<any> & \"feComposite\""
            },
            {
              "value": "FunctionComponent<any> & \"feConvolveMatrix\""
            },
            {
              "value": "FunctionComponent<any> & \"feDiffuseLighting\""
            },
            {
              "value": "FunctionComponent<any> & \"feDisplacementMap\""
            },
            {
              "value": "FunctionComponent<any> & \"feDistantLight\""
            },
            {
              "value": "FunctionComponent<any> & \"feDropShadow\""
            },
            {
              "value": "FunctionComponent<any> & \"feFlood\""
            },
            {
              "value": "FunctionComponent<any> & \"feFuncA\""
            },
            {
              "value": "FunctionComponent<any> & \"feFuncB\""
            },
            {
              "value": "FunctionComponent<any> & \"feFuncG\""
            },
            {
              "value": "FunctionComponent<any> & \"feFuncR\""
            },
            {
              "value": "FunctionComponent<any> & \"feGaussianBlur\""
            },
            {
              "value": "FunctionComponent<any> & \"feImage\""
            },
            {
              "value": "FunctionComponent<any> & \"feMerge\""
            },
            {
              "value": "FunctionComponent<any> & \"feMergeNode\""
            },
            {
              "value": "FunctionComponent<any> & \"feMorphology\""
            },
            {
              "value": "FunctionComponent<any> & \"feOffset\""
            },
            {
              "value": "FunctionComponent<any> & \"fePointLight\""
            },
            {
              "value": "FunctionComponent<any> & \"feSpecularLighting\""
            },
            {
              "value": "FunctionComponent<any> & \"feSpotLight\""
            },
            {
              "value": "FunctionComponent<any> & \"feTile\""
            },
            {
              "value": "FunctionComponent<any> & \"feTurbulence\""
            },
            {
              "value": "FunctionComponent<any> & \"filter\""
            },
            {
              "value": "FunctionComponent<any> & \"foreignObject\""
            },
            {
              "value": "FunctionComponent<any> & \"g\""
            },
            {
              "value": "FunctionComponent<any> & \"image\""
            },
            {
              "value": "FunctionComponent<any> & \"line\""
            },
            {
              "value": "FunctionComponent<any> & \"linearGradient\""
            },
            {
              "value": "FunctionComponent<any> & \"marker\""
            },
            {
              "value": "FunctionComponent<any> & \"mask\""
            },
            {
              "value": "FunctionComponent<any> & \"metadata\""
            },
            {
              "value": "FunctionComponent<any> & \"mpath\""
            },
            {
              "value": "FunctionComponent<any> & \"path\""
            },
            {
              "value": "FunctionComponent<any> & \"pattern\""
            },
            {
              "value": "FunctionComponent<any> & \"polygon\""
            },
            {
              "value": "FunctionComponent<any> & \"polyline\""
            },
            {
              "value": "FunctionComponent<any> & \"radialGradient\""
            },
            {
              "value": "FunctionComponent<any> & \"rect\""
            },
            {
              "value": "FunctionComponent<any> & \"set\""
            },
            {
              "value": "FunctionComponent<any> & \"stop\""
            },
            {
              "value": "FunctionComponent<any> & \"switch\""
            },
            {
              "value": "FunctionComponent<any> & \"text\""
            },
            {
              "value": "FunctionComponent<any> & \"textPath\""
            },
            {
              "value": "FunctionComponent<any> & \"tspan\""
            },
            {
              "value": "FunctionComponent<any> & \"use\""
            },
            {
              "value": "FunctionComponent<any> & \"view\""
            },
            {
              "value": "FunctionComponent<any> & \"relative-time\""
            },
            {
              "value": "FunctionComponent<any> & \"tab-container\""
            }
          ]
        }
      },
      "openOnFocus": {
        "defaultValue": null,
        "description": "@deprecated `openOnFocus` is deprecated and will be removed in v38.\nWhen `true`, autocomplete menu will show on focus or click.",
        "name": "openOnFocus",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Autocomplete/AutocompleteInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Autocomplete.Menu",
      "primerparentid": "autocomplete"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Autocomplete/AutocompleteMenu.tsx",
    "description": "The dropdown menu with suggestions for an Autocomplete component.",
    "displayName": "Autocomplete.Menu",
    "methods": [],
    "props": {
      "addNewItem": {
        "defaultValue": null,
        "description": "A menu item that is used to allow users make a selection that is not available in the array passed to the `items` prop.\nThis menu item gets appended to the end of the list of options.",
        "name": "addNewItem",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Autocomplete/AutocompleteMenu.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "(Omit<ActionListItemProps, \"id\"> & { id: string; } & { leadingVisual?: ReactElement<any, string | JSXElementConstructor<any>> | FunctionComponent<...>; text?: string | undefined; trailingVisual?: ReactElement<...> | ... 1 more ... | undefined; } & { ...; } & { ...; }) | undefined",
          "value": [
            {
              "value": "Omit<ActionListItemProps, \"id\"> & { id: string; } & { leadingVisual?: ReactElement<any, string | JSXElementConstructor<any>> | FunctionComponent<...> | undefined; text?: string | undefined; trailingVisual?: ReactElement<...> | ... 1 more ... | undefined; } & { ...; } & { ...; }"
            }
          ]
        }
      },
      "emptyStateText": {
        "defaultValue": null,
        "description": "The text that appears in the menu when there are no options in the array passed to the `items` prop.",
        "name": "emptyStateText",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Autocomplete/AutocompleteMenu.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "filterFn": {
        "defaultValue": null,
        "description": "A custom function used to filter the options in the array passed to the `items` prop.\nBy default, we filter out items that don't match the value of the autocomplete text input. The default filter is not case-sensitive.",
        "name": "filterFn",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Autocomplete/AutocompleteMenu.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "((item: T, i: number) => boolean)",
          "value": [
            {
              "value": "(item: T, i: number) => boolean",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "items": {
        "defaultValue": null,
        "description": "The options for field values that are displayed in the dropdown menu.\nOne or more may be selected depending on the value of the `selectionVariant` prop.",
        "name": "items",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Autocomplete/AutocompleteMenu.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "T[]"
        }
      },
      "loading": {
        "defaultValue": null,
        "description": "Whether the data is loaded for the menu items",
        "name": "loading",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Autocomplete/AutocompleteMenu.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "selectedItemIds": {
        "defaultValue": null,
        "description": "The IDs of the selected items",
        "name": "selectedItemIds",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Autocomplete/AutocompleteMenu.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "string[]"
        }
      },
      "sortOnCloseFn": {
        "defaultValue": null,
        "description": "The sort function that is applied to the options in the array passed to the `items` prop after the user closes the menu.\nBy default, selected items are sorted to the top after the user closes the menu.",
        "name": "sortOnCloseFn",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Autocomplete/AutocompleteMenu.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "((itemIdA: string, itemIdB: string) => number)",
          "value": [
            {
              "value": "(itemIdA: string, itemIdB: string) => number",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "selectionVariant": {
        "defaultValue": null,
        "description": "Whether there can be one item selected from the menu or multiple items selected from the menu",
        "name": "selectionVariant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Autocomplete/AutocompleteMenu.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"multiple\" | \"single\"",
          "value": [
            {
              "value": "\"multiple\""
            },
            {
              "value": "\"single\""
            }
          ]
        }
      },
      "onOpenChange": {
        "defaultValue": null,
        "description": "Function that gets called when the menu is opened or closed",
        "name": "onOpenChange",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Autocomplete/AutocompleteMenu.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "((open: boolean) => void)",
          "value": [
            {
              "value": "(open: boolean) => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "onSelectedChange": {
        "defaultValue": null,
        "description": "The function that is called when an item in the list is selected or deselected",
        "name": "onSelectedChange",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Autocomplete/AutocompleteMenu.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "OnSelectedChange<T>",
          "value": [
            {
              "value": "OnSelectedChange<T>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "customScrollContainerRef": {
        "defaultValue": null,
        "description": "If the menu is rendered in a scrolling element other than the `Autocomplete.Overlay` component,\npass the ref of that element to `customScrollContainerRef` to ensure the container automatically\nscrolls when the user highlights an item in the menu that is outside the scroll container",
        "name": "customScrollContainerRef",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Autocomplete/AutocompleteMenu.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "MutableRefObject<HTMLElement | null>",
          "value": [
            {
              "value": "MutableRefObject<HTMLElement | null>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "",
        "name": "aria-labelledby",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Autocomplete/AutocompleteMenu.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Autocomplete.Overlay",
      "primerparentid": "autocomplete"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Autocomplete/AutocompleteOverlay.tsx",
    "description": "A non-modal dialog container for the the dropdown menu with suggestions for an Autocomplete component.\nCan be excluded if you want the the Autocomplete suggestions to appear in the DOM flow.",
    "displayName": "Autocomplete.Overlay",
    "methods": [],
    "props": {
      "menuAnchorRef": {
        "defaultValue": null,
        "description": "The ref of the element that the position of the menu is based on. By default, the menu is positioned based on the text input",
        "name": "menuAnchorRef",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Autocomplete/AutocompleteOverlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "RefObject<HTMLElement>",
          "value": [
            {
              "value": "RefObject<HTMLElement>",
              "description": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.",
              "fullComment": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.\n@template T The type of the ref's value.\n@example ```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```",
              "tags": {
                "template": "T The type of the ref's value.",
                "example": "```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```"
              }
            }
          ]
        }
      },
      "overlayProps": {
        "defaultValue": null,
        "description": "Props to be spread on the internal `Overlay` component.",
        "name": "overlayProps",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Autocomplete/AutocompleteOverlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Partial<Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"ref\"> & { ...; }, \"style\" | ... 8 more ... | keyof BaseOverlayProps> & Omit<...> & BaseOverlayProps & { ...; }>",
          "value": [
            {
              "value": "Partial<Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"ref\"> & { ...; }, \"style\" | ... 8 more ... | keyof BaseOverlayProps> & Omit<...> & BaseOverlayProps & { ...; }>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "children": {
        "defaultValue": null,
        "description": "",
        "name": "children",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Autocomplete/AutocompleteOverlay.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "style": {
        "defaultValue": null,
        "description": "",
        "name": "style",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "CSSProperties",
          "value": [
            {
              "value": "CSSProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "height": {
        "defaultValue": null,
        "description": "",
        "name": "height",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"small\" | \"initial\" | \"large\" | \"medium\" | \"auto\" | \"fit-content\" | \"xsmall\" | \"xlarge\"",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fit-content\""
            },
            {
              "value": "\"xsmall\""
            },
            {
              "value": "\"xlarge\""
            }
          ]
        }
      },
      "width": {
        "defaultValue": null,
        "description": "",
        "name": "width",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"small\" | \"large\" | \"medium\" | \"auto\" | \"xlarge\" | \"xxlarge\"",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"xlarge\""
            },
            {
              "value": "\"xxlarge\""
            }
          ]
        }
      },
      "overflow": {
        "defaultValue": null,
        "description": "",
        "name": "overflow",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"hidden\" | \"scroll\" | \"auto\" | \"visible\"",
          "value": [
            {
              "value": "\"hidden\""
            },
            {
              "value": "\"scroll\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"visible\""
            }
          ]
        }
      },
      "maxHeight": {
        "defaultValue": null,
        "description": "",
        "name": "maxHeight",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"small\" | \"large\" | \"medium\" | \"fit-content\" | \"xsmall\" | \"xlarge\"",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            },
            {
              "value": "\"fit-content\""
            },
            {
              "value": "\"xsmall\""
            },
            {
              "value": "\"xlarge\""
            }
          ]
        }
      },
      "maxWidth": {
        "defaultValue": null,
        "description": "",
        "name": "maxWidth",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"small\" | \"large\" | \"medium\" | \"xlarge\" | \"xxlarge\"",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            },
            {
              "value": "\"xlarge\""
            },
            {
              "value": "\"xxlarge\""
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "anchorSide": {
        "defaultValue": null,
        "description": "",
        "name": "anchorSide",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "AnchorSide",
          "value": [
            {
              "value": "\"inside-top\""
            },
            {
              "value": "\"inside-bottom\""
            },
            {
              "value": "\"inside-left\""
            },
            {
              "value": "\"inside-right\""
            },
            {
              "value": "\"inside-center\""
            },
            {
              "value": "\"outside-top\""
            },
            {
              "value": "\"outside-bottom\""
            },
            {
              "value": "\"outside-left\""
            },
            {
              "value": "\"outside-right\""
            }
          ]
        }
      },
      "ignoreClickRefs": {
        "defaultValue": null,
        "description": "",
        "name": "ignoreClickRefs",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "RefObject<HTMLElement>[]",
          "value": [
            {
              "value": "RefObject<HTMLElement>[]",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "initialFocusRef": {
        "defaultValue": null,
        "description": "",
        "name": "initialFocusRef",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "RefObject<HTMLElement>",
          "value": [
            {
              "value": "RefObject<HTMLElement>",
              "description": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.",
              "fullComment": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.\n@template T The type of the ref's value.\n@example ```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```",
              "tags": {
                "template": "T The type of the ref's value.",
                "example": "```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```"
              }
            }
          ]
        }
      },
      "returnFocusRef": {
        "defaultValue": null,
        "description": "",
        "name": "returnFocusRef",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "RefObject<HTMLElement>",
          "value": [
            {
              "value": "RefObject<HTMLElement>",
              "description": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.",
              "fullComment": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.\n@template T The type of the ref's value.\n@example ```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```",
              "tags": {
                "template": "T The type of the ref's value.",
                "example": "```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```"
              }
            }
          ]
        }
      },
      "onClickOutside": {
        "defaultValue": null,
        "description": "",
        "name": "onClickOutside",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "((e: TouchOrMouseEvent) => void)",
          "value": [
            {
              "value": "(e: TouchOrMouseEvent) => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "onEscape": {
        "defaultValue": null,
        "description": "",
        "name": "onEscape",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "((e: KeyboardEvent) => void)",
          "value": [
            {
              "value": "(e: KeyboardEvent) => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "visibility": {
        "defaultValue": null,
        "description": "",
        "name": "visibility",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"hidden\" | \"visible\"",
          "value": [
            {
              "value": "\"hidden\""
            },
            {
              "value": "\"visible\""
            }
          ]
        }
      },
      "data-test-id": {
        "defaultValue": null,
        "description": "",
        "name": "data-test-id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "unknown"
        }
      },
      "position": {
        "defaultValue": null,
        "description": "",
        "name": "position",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Position",
          "value": [
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"fixed\""
            },
            {
              "value": "\"-webkit-sticky\""
            },
            {
              "value": "\"absolute\""
            },
            {
              "value": "\"relative\""
            },
            {
              "value": "\"static\""
            },
            {
              "value": "\"sticky\""
            }
          ]
        }
      },
      "top": {
        "defaultValue": null,
        "description": "",
        "name": "top",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Top<string | number>",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "string & {}"
            }
          ]
        }
      },
      "left": {
        "defaultValue": null,
        "description": "",
        "name": "left",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Left<string | number>",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "string & {}"
            }
          ]
        }
      },
      "right": {
        "defaultValue": null,
        "description": "",
        "name": "right",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Right<string | number>",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "string & {}"
            }
          ]
        }
      },
      "bottom": {
        "defaultValue": null,
        "description": "",
        "name": "bottom",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Bottom<string | number>",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "string & {}"
            }
          ]
        }
      },
      "portalContainerName": {
        "defaultValue": null,
        "description": "",
        "name": "portalContainerName",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "preventFocusOnOpen": {
        "defaultValue": null,
        "description": "",
        "name": "preventFocusOnOpen",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "role": {
        "defaultValue": null,
        "description": "",
        "name": "role",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "AriaRole",
          "value": [
            {
              "value": "\"article\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"list\""
            },
            {
              "value": "\"alert\""
            },
            {
              "value": "\"alertdialog\""
            },
            {
              "value": "\"application\""
            },
            {
              "value": "\"banner\""
            },
            {
              "value": "\"cell\""
            },
            {
              "value": "\"checkbox\""
            },
            {
              "value": "\"columnheader\""
            },
            {
              "value": "\"combobox\""
            },
            {
              "value": "\"complementary\""
            },
            {
              "value": "\"contentinfo\""
            },
            {
              "value": "\"definition\""
            },
            {
              "value": "\"directory\""
            },
            {
              "value": "\"document\""
            },
            {
              "value": "\"feed\""
            },
            {
              "value": "\"grid\""
            },
            {
              "value": "\"gridcell\""
            },
            {
              "value": "\"group\""
            },
            {
              "value": "\"heading\""
            },
            {
              "value": "\"listbox\""
            },
            {
              "value": "\"listitem\""
            },
            {
              "value": "\"log\""
            },
            {
              "value": "\"marquee\""
            },
            {
              "value": "\"math\""
            },
            {
              "value": "\"menubar\""
            },
            {
              "value": "\"menuitemcheckbox\""
            },
            {
              "value": "\"menuitemradio\""
            },
            {
              "value": "\"navigation\""
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"note\""
            },
            {
              "value": "\"presentation\""
            },
            {
              "value": "\"progressbar\""
            },
            {
              "value": "\"radio\""
            },
            {
              "value": "\"radiogroup\""
            },
            {
              "value": "\"region\""
            },
            {
              "value": "\"row\""
            },
            {
              "value": "\"rowgroup\""
            },
            {
              "value": "\"rowheader\""
            },
            {
              "value": "\"scrollbar\""
            },
            {
              "value": "\"searchbox\""
            },
            {
              "value": "\"separator\""
            },
            {
              "value": "\"slider\""
            },
            {
              "value": "\"spinbutton\""
            },
            {
              "value": "\"status\""
            },
            {
              "value": "\"tab\""
            },
            {
              "value": "\"tablist\""
            },
            {
              "value": "\"tabpanel\""
            },
            {
              "value": "\"term\""
            },
            {
              "value": "\"textbox\""
            },
            {
              "value": "\"timer\""
            },
            {
              "value": "\"toolbar\""
            },
            {
              "value": "\"tooltip\""
            },
            {
              "value": "\"tree\""
            },
            {
              "value": "\"treegrid\""
            },
            {
              "value": "\"treeitem\""
            }
          ]
        }
      },
      "preventOverflow": {
        "defaultValue": null,
        "description": "",
        "name": "preventOverflow",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"div\"",
          "value": [
            {
              "value": "\"div\""
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "avatar",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Avatar/Avatar.tsx",
    "description": "Avatar is an image that represents a user or organization.",
    "displayName": "Avatar",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": {
          "value": 20
        },
        "description": "Sets the width and height of the avatar.",
        "name": "size",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Avatar/Avatar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "number | ResponsiveValue<number>",
          "value": [
            {
              "value": "number"
            },
            {
              "value": "ResponsiveValue<number>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "square": {
        "defaultValue": {
          "value": false
        },
        "description": "Sets the shape of the avatar to a square if true. If false, the avatar will be circular.",
        "name": "square",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Avatar/Avatar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "src": {
        "defaultValue": null,
        "description": "URL of the avatar image.",
        "name": "src",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Avatar/Avatar.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "ImgHTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "alt": {
        "defaultValue": {
          "value": ""
        },
        "description": "Provide alt text when the Avatar is used without the user's name next to it.",
        "name": "alt",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Avatar/Avatar.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "ImgHTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional class name.",
        "name": "className",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Avatar/Avatar.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "avatar_pair",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/AvatarPair/AvatarPair.tsx",
    "description": "AvatarPair is composed of two avatars, one larger one and a smaller one, overlaid slightly.",
    "displayName": "AvatarPair",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "primerid": "avatar_stack",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/AvatarStack/AvatarStack.tsx",
    "description": "Avatar stack displays two or more avatars in an inline stack.",
    "displayName": "AvatarStack",
    "methods": [],
    "props": {
      "alignRight": {
        "defaultValue": null,
        "description": "Align the avatars to the right",
        "name": "alignRight",
        "declarations": [
          {
            "fileName": "react/packages/react/src/AvatarStack/AvatarStack.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "disableExpand": {
        "defaultValue": null,
        "description": "Do not spread the avatars on hover",
        "name": "disableExpand",
        "declarations": [
          {
            "fileName": "react/packages/react/src/AvatarStack/AvatarStack.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "size": {
        "defaultValue": null,
        "description": "The size of the avatar children in pixels",
        "name": "size",
        "declarations": [
          {
            "fileName": "react/packages/react/src/AvatarStack/AvatarStack.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "number | ResponsiveValue<number>",
          "value": [
            {
              "value": "number"
            },
            {
              "value": "ResponsiveValue<number>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "children": {
        "defaultValue": null,
        "description": "A set of Avatar components to stack",
        "name": "children",
        "declarations": [
          {
            "fileName": "react/packages/react/src/AvatarStack/AvatarStack.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "declarations": [
          {
            "fileName": "react/packages/react/src/AvatarStack/AvatarStack.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Banner.Title",
      "primerparentid": "banner"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Banner/Banner.tsx",
    "description": "The title (heading) of the Banner. May be used instead of the `title` prop on Banner.",
    "displayName": "Banner.Title",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Banner/Banner.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "HeadingElement",
          "value": [
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            }
          ]
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Banner/Banner.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Banner.Description",
      "primerparentid": "banner"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Banner/Banner.tsx",
    "description": "An optional description for the Banner when the title needs supplemental information. May be used instead of the `description` prop on Banner.",
    "displayName": "Banner.Description",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Class name(s) used for custom styling",
        "name": "className",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Banner/Banner.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Banner/Banner.tsx",
    "description": "",
    "displayName": "BannerActions",
    "methods": [],
    "props": {
      "primaryAction": {
        "defaultValue": null,
        "description": "",
        "name": "primaryAction",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Banner/Banner.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "secondaryAction": {
        "defaultValue": null,
        "description": "",
        "name": "secondaryAction",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Banner/Banner.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "banner",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Banner/Banner.tsx",
    "description": "Banner is used to highlight important information.",
    "displayName": "Banner",
    "methods": [],
    "props": {
      "title": {
        "defaultValue": null,
        "description": "The title for the Banner. This will be used as the accessible name and is\nrequired unless `Banner.Title` is used as a child.",
        "name": "title",
        "parent": {
          "fileName": "react/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          },
          {
            "fileName": "react/packages/react/src/Banner/Banner.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string | (string & ReactElement<any, string | JSXElementConstructor<any>>) | (string & Iterable<ReactNode>) | (string & ReactPortal)",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "string & ReactElement<any, string | JSXElementConstructor<any>>"
            },
            {
              "value": "string & Iterable<ReactNode>"
            },
            {
              "value": "string & ReactPortal"
            }
          ]
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Provide an optional className to add to the outermost element rendered by\nthe Banner",
        "name": "className",
        "parent": {
          "fileName": "react/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          },
          {
            "fileName": "react/packages/react/src/Banner/Banner.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "Defines a string value that labels the current element.\nProvide an optional label to override the default name for the Banner\nlandmark region\n@see aria-labelledby.",
        "name": "aria-label",
        "parent": {
          "fileName": "react/node_modules/@types/react/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "AriaAttributes"
          },
          {
            "fileName": "react/packages/react/src/Banner/Banner.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Provide an optional description for the Banner. This should provide\nsupplemental information about the Banner",
        "name": "description",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Banner/Banner.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "hideTitle": {
        "defaultValue": null,
        "description": "Specify whether the title of the Banner should be visible or not.",
        "name": "hideTitle",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Banner/Banner.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Provide a custom icon for the Banner. This is only available when `variant` is `info` or `upsell`",
        "name": "icon",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Banner/Banner.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "onDismiss": {
        "defaultValue": null,
        "description": "Optionally provide a handler to be called when the banner is dismissed.\nProviding this prop will show a dismiss button.\n\nNote: This is not available for critical banners.",
        "name": "onDismiss",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Banner/Banner.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "(() => void)",
          "value": [
            {
              "value": "() => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "primaryAction": {
        "defaultValue": null,
        "description": "Provide an optional primary action for the Banner.",
        "name": "primaryAction",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Banner/Banner.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "secondaryAction": {
        "defaultValue": null,
        "description": "Provide an optional secondary action for the Banner",
        "name": "secondaryAction",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Banner/Banner.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "variant": {
        "defaultValue": {
          "value": "info"
        },
        "description": "Specify the type of the Banner",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Banner/Banner.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BannerVariant",
          "value": [
            {
              "value": "\"success\""
            },
            {
              "value": "\"critical\""
            },
            {
              "value": "\"info\""
            },
            {
              "value": "\"upsell\""
            },
            {
              "value": "\"warning\""
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Banner.PrimaryAction",
      "primerparentid": "banner"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Banner/Banner.tsx",
    "description": "The primary action to take in response to the messaging in Banner. May be used instead of the `primaryAction` prop on Banner.",
    "displayName": "Banner.PrimaryAction",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | ... 162 more ... | FunctionComponent<...>",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<unknown, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<unknown>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "children": {
        "defaultValue": null,
        "description": "",
        "name": "children",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Items that are disabled can not be clicked, selected, or navigated through.",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "ButtonHTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "loading": {
        "defaultValue": null,
        "description": "When true, the button is in a loading state.",
        "name": "loading",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Size of button and fontSize of text in button",
        "name": "size",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Size",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            }
          ]
        }
      },
      "block": {
        "defaultValue": null,
        "description": "Allow button width to fill its container.",
        "name": "block",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "alignContent": {
        "defaultValue": null,
        "description": "Content alignment for when visuals are present",
        "name": "alignContent",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "AlignContent",
          "value": [
            {
              "value": "\"center\""
            },
            {
              "value": "\"start\""
            }
          ]
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "The icon for the IconButton",
        "name": "icon",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactElement<any, string | JSXElementConstructor<any>> | ElementType<any, keyof IntrinsicElements> | FunctionComponent<...> | null",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "FunctionComponent<IconProps>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "loadingAnnouncement": {
        "defaultValue": null,
        "description": "The content to announce to screen readers when loading.",
        "name": "loadingAnnouncement",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "inactive": {
        "defaultValue": null,
        "description": "",
        "name": "inactive",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "labelWrap": {
        "defaultValue": null,
        "description": "Whether the button label should wrap to multiple lines of it is longer than the button width.",
        "name": "labelWrap",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "leadingVisual": {
        "defaultValue": null,
        "description": "The leading visual which comes before the button content",
        "name": "leadingVisual",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactElement<any, string | JSXElementConstructor<any>> | ElementType<any, keyof IntrinsicElements> | null",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            }
          ]
        }
      },
      "trailingVisual": {
        "defaultValue": null,
        "description": "The trailing visual which comes after the button content",
        "name": "trailingVisual",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactElement<any, string | JSXElementConstructor<any>> | ElementType<any, keyof IntrinsicElements> | null",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            }
          ]
        }
      },
      "trailingAction": {
        "defaultValue": null,
        "description": "Trailing action appears to the right of the trailing visual and is always locked to the end",
        "name": "trailingAction",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ElementType<any, keyof IntrinsicElements> | null",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "count": {
        "defaultValue": null,
        "description": "",
        "name": "count",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "number",
          "value": [
            {
              "value": "number"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Banner.SecondaryAction",
      "primerparentid": "banner"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Banner/Banner.tsx",
    "description": "The secondary action to take in response to the messaging in Banner. May be used instead of the `secondaryAction` prop on Banner.",
    "displayName": "Banner.SecondaryAction",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | ... 162 more ... | FunctionComponent<...>",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<unknown, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<unknown>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "children": {
        "defaultValue": null,
        "description": "",
        "name": "children",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Items that are disabled can not be clicked, selected, or navigated through.",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "ButtonHTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "loading": {
        "defaultValue": null,
        "description": "When true, the button is in a loading state.",
        "name": "loading",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Size of button and fontSize of text in button",
        "name": "size",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Size",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            }
          ]
        }
      },
      "block": {
        "defaultValue": null,
        "description": "Allow button width to fill its container.",
        "name": "block",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "alignContent": {
        "defaultValue": null,
        "description": "Content alignment for when visuals are present",
        "name": "alignContent",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "AlignContent",
          "value": [
            {
              "value": "\"center\""
            },
            {
              "value": "\"start\""
            }
          ]
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "The icon for the IconButton",
        "name": "icon",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactElement<any, string | JSXElementConstructor<any>> | ElementType<any, keyof IntrinsicElements> | FunctionComponent<...> | null",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "FunctionComponent<IconProps>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "loadingAnnouncement": {
        "defaultValue": null,
        "description": "The content to announce to screen readers when loading.",
        "name": "loadingAnnouncement",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "inactive": {
        "defaultValue": null,
        "description": "",
        "name": "inactive",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "labelWrap": {
        "defaultValue": null,
        "description": "Whether the button label should wrap to multiple lines of it is longer than the button width.",
        "name": "labelWrap",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "leadingVisual": {
        "defaultValue": null,
        "description": "The leading visual which comes before the button content",
        "name": "leadingVisual",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactElement<any, string | JSXElementConstructor<any>> | ElementType<any, keyof IntrinsicElements> | null",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            }
          ]
        }
      },
      "trailingVisual": {
        "defaultValue": null,
        "description": "The trailing visual which comes after the button content",
        "name": "trailingVisual",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactElement<any, string | JSXElementConstructor<any>> | ElementType<any, keyof IntrinsicElements> | null",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            }
          ]
        }
      },
      "trailingAction": {
        "defaultValue": null,
        "description": "Trailing action appears to the right of the trailing visual and is always locked to the end",
        "name": "trailingAction",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ElementType<any, keyof IntrinsicElements> | null",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "count": {
        "defaultValue": null,
        "description": "",
        "name": "count",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "number",
          "value": [
            {
              "value": "number"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "blankslate",
      "primerstatus": "draft",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Blankslate/Blankslate.tsx",
    "description": "Blankslate is used as placeholder to tell users why content is missing.",
    "displayName": "Blankslate",
    "methods": [],
    "props": {
      "border": {
        "defaultValue": null,
        "description": "Add a border around this component",
        "name": "border",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Blankslate/Blankslate.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "narrow": {
        "defaultValue": null,
        "description": "Constrain the maximum width of this component",
        "name": "narrow",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Blankslate/Blankslate.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "spacious": {
        "defaultValue": null,
        "description": "Increase the padding of this component",
        "name": "spacious",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Blankslate/Blankslate.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Blankslate/Blankslate.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Blankslate.Visual",
      "primerparentid": "blankslate"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Blankslate/Blankslate.tsx",
    "description": "Used to display an icon or image at the top of a Blankslate.",
    "displayName": "Blankslate.Visual",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "alias": "Blankslate.Heading",
      "primerparentid": "blankslate"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Blankslate/Blankslate.tsx",
    "description": "The title (heading) of the Blankslate.",
    "displayName": "Blankslate.Heading",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Blankslate/Blankslate.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\"",
          "value": [
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Blankslate.Description",
      "primerparentid": "blankslate"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Blankslate/Blankslate.tsx",
    "description": "An optional description for the Blankslate when the title needs supplemental information.",
    "displayName": "Blankslate.Description",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "alias": "Blankslate.PrimaryAction",
      "primerparentid": "blankslate"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Blankslate/Blankslate.tsx",
    "description": "The primary action to take in response to the messaging in Blankslate.",
    "displayName": "Blankslate.PrimaryAction",
    "methods": [],
    "props": {
      "href": {
        "defaultValue": null,
        "description": "Link to complete primary action",
        "name": "href",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Blankslate/Blankslate.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Blankslate.SecondaryAction",
      "primerparentid": "blankslate"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Blankslate/Blankslate.tsx",
    "description": "The secondary action to take in response to the messaging in Blankslate.",
    "displayName": "Blankslate.SecondaryAction",
    "methods": [],
    "props": {
      "href": {
        "defaultValue": null,
        "description": "Link to complete secondary action",
        "name": "href",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Blankslate/Blankslate.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "box",
      "primerstatus": "beta",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Box/Box.tsx",
    "description": "Box is a basic wrapper component for most layout related needs.",
    "displayName": "Box",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "branch_name",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/BranchName/BranchName.tsx",
    "description": "Branch name is a label-type component rendered as an <a> tag by default that displays the name of a branch.",
    "displayName": "BranchName",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/BranchName/BranchName.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ElementType<any, keyof IntrinsicElements>",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "breadcrumbs",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Breadcrumbs/Breadcrumbs.tsx",
    "description": "Breadcrumbs display the current page or context within the site, allowing them to navigate different levels of the hierarchy.",
    "displayName": "Breadcrumbs",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "react/packages/react/src/Breadcrumbs/Breadcrumbs.tsx",
          "name": "BreadcrumbsProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Breadcrumbs/Breadcrumbs.tsx",
            "name": "BreadcrumbsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Breadcrumbs.Item",
      "primerparentid": "breadcrumbs"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Breadcrumbs/Breadcrumbs.tsx",
    "description": "Breadcrumbs.Item is used to represent each link in the Breadcrumbs component. The last item is not a link, it shows the current page.",
    "displayName": "Breadcrumbs.Item",
    "methods": [],
    "props": {
      "to": {
        "defaultValue": null,
        "description": "Used when the item is rendered using a component like React Router's `Link`. The path to navigate to.",
        "name": "to",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Breadcrumbs/Breadcrumbs.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "To",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "Partial<Path>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "selected": {
        "defaultValue": null,
        "description": "Whether this item represents the current page",
        "name": "selected",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Breadcrumbs/Breadcrumbs.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "button",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Button/Button.tsx",
    "description": "Button is used to initiate actions on a page or form.",
    "displayName": "Button",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | ... 162 more ... | FunctionComponent<...>",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<unknown, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<unknown>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "alignContent": {
        "defaultValue": null,
        "description": "Content alignment for when visuals are present",
        "name": "alignContent",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "AlignContent",
          "value": [
            {
              "value": "\"center\""
            },
            {
              "value": "\"start\""
            }
          ]
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "The icon for the IconButton",
        "name": "icon",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactElement<any, string | JSXElementConstructor<any>> | ElementType<any, keyof IntrinsicElements> | FunctionComponent<...> | null",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "FunctionComponent<IconProps>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "leadingVisual": {
        "defaultValue": null,
        "description": "The leading visual which comes before the button content",
        "name": "leadingVisual",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactElement<any, string | JSXElementConstructor<any>> | ElementType<any, keyof IntrinsicElements> | null",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            }
          ]
        }
      },
      "trailingVisual": {
        "defaultValue": null,
        "description": "The trailing visual which comes after the button content",
        "name": "trailingVisual",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactElement<any, string | JSXElementConstructor<any>> | ElementType<any, keyof IntrinsicElements> | null",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            }
          ]
        }
      },
      "trailingAction": {
        "defaultValue": null,
        "description": "Trailing action appears to the right of the trailing visual and is always locked to the end",
        "name": "trailingAction",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ElementType<any, keyof IntrinsicElements> | null",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "children": {
        "defaultValue": null,
        "description": "",
        "name": "children",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "DOMAttributes"
          },
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "DOMAttributes"
          },
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "count": {
        "defaultValue": null,
        "description": "",
        "name": "count",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "number",
          "value": [
            {
              "value": "number"
            }
          ]
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Determine's the styles on a button one of 'default' | 'primary' | 'invisible' | 'danger'",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "VariantType",
          "value": [
            {
              "value": "\"link\""
            },
            {
              "value": "\"default\""
            },
            {
              "value": "\"danger\""
            },
            {
              "value": "\"primary\""
            },
            {
              "value": "\"invisible\""
            }
          ]
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Size of button and fontSize of text in button",
        "name": "size",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Size",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            }
          ]
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Items that are disabled can not be clicked, selected, or navigated through.",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "ButtonHTMLAttributes"
          },
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "ButtonHTMLAttributes"
          },
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "ButtonHTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "block": {
        "defaultValue": null,
        "description": "Allow button width to fill its container.",
        "name": "block",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "loading": {
        "defaultValue": null,
        "description": "When true, the button is in a loading state.",
        "name": "loading",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "loadingAnnouncement": {
        "defaultValue": null,
        "description": "The content to announce to screen readers when loading.",
        "name": "loadingAnnouncement",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "inactive": {
        "defaultValue": null,
        "description": "",
        "name": "inactive",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "labelWrap": {
        "defaultValue": null,
        "description": "Whether the button label should wrap to multiple lines of it is longer than the button width.",
        "name": "labelWrap",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "icon_button",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Button/IconButton.tsx",
    "description": "Icon button is used for buttons that show an icon in place of a text label.",
    "displayName": "IconButton",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | ... 162 more ... | FunctionComponent<...>",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<unknown, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<unknown>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "",
        "name": "aria-label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "",
        "name": "aria-labelledby",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Provide an octicon. It will be placed in the center of the button",
        "name": "icon",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "ElementType<any, keyof IntrinsicElements>",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "unsafeDisableTooltip": {
        "defaultValue": null,
        "description": "Do not use. This is planned to be a temporary prop until the default tooltip on icon buttons are fully rolled out.",
        "name": "unsafeDisableTooltip",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "description": {
        "defaultValue": null,
        "description": "If `description` is provided, we will use a Tooltip to describe the button. Then `aria-label` is used to label the button.",
        "name": "description",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "tooltipDirection": {
        "defaultValue": null,
        "description": "Sets where the tooltip renders in relation to the target.",
        "name": "tooltipDirection",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "TooltipDirection",
          "value": [
            {
              "value": "\"s\""
            },
            {
              "value": "\"nw\""
            },
            {
              "value": "\"n\""
            },
            {
              "value": "\"ne\""
            },
            {
              "value": "\"e\""
            },
            {
              "value": "\"se\""
            },
            {
              "value": "\"sw\""
            },
            {
              "value": "\"w\""
            }
          ]
        }
      },
      "keyshortcuts": {
        "defaultValue": null,
        "description": "",
        "name": "keyshortcuts",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Items that are disabled can not be clicked, selected, or navigated through.",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "ButtonHTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "loading": {
        "defaultValue": null,
        "description": "When true, the button is in a loading state.",
        "name": "loading",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Size of button and fontSize of text in button",
        "name": "size",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Size",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            }
          ]
        }
      },
      "block": {
        "defaultValue": null,
        "description": "Allow button width to fill its container.",
        "name": "block",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Determine's the styles on a button one of 'default' | 'primary' | 'invisible' | 'danger'",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "VariantType",
          "value": [
            {
              "value": "\"link\""
            },
            {
              "value": "\"default\""
            },
            {
              "value": "\"danger\""
            },
            {
              "value": "\"primary\""
            },
            {
              "value": "\"invisible\""
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "loadingAnnouncement": {
        "defaultValue": null,
        "description": "The content to announce to screen readers when loading.",
        "name": "loadingAnnouncement",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "inactive": {
        "defaultValue": null,
        "description": "",
        "name": "inactive",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "labelWrap": {
        "defaultValue": null,
        "description": "Whether the button label should wrap to multiple lines of it is longer than the button width.",
        "name": "labelWrap",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "link_button",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Button/LinkButton.tsx",
    "description": "",
    "displayName": "LinkButton",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"a\" | \"button\" | (\"button\" & (ComponentClass<unknown, any> | FunctionComponent<unknown>)) | (\"a\" & (ComponentClass<unknown, any> | FunctionComponent<unknown>))",
          "value": [
            {
              "value": "\"a\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"button\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"button\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"a\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"a\" & FunctionComponent<unknown>"
            }
          ]
        }
      },
      "underline": {
        "defaultValue": null,
        "description": "",
        "name": "underline",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "download": {
        "defaultValue": null,
        "description": "",
        "name": "download",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "href": {
        "defaultValue": null,
        "description": "",
        "name": "href",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "hrefLang": {
        "defaultValue": null,
        "description": "",
        "name": "hrefLang",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "media": {
        "defaultValue": null,
        "description": "",
        "name": "media",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "ping": {
        "defaultValue": null,
        "description": "",
        "name": "ping",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "rel": {
        "defaultValue": null,
        "description": "",
        "name": "rel",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          },
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          },
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "target": {
        "defaultValue": null,
        "description": "",
        "name": "target",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "type": {
        "defaultValue": null,
        "description": "",
        "name": "type",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "ButtonHTMLAttributes"
          },
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "ButtonHTMLAttributes"
          },
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "ButtonHTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"button\" | \"reset\" | \"submit\"",
          "value": [
            {
              "value": "\"button\""
            },
            {
              "value": "\"reset\""
            },
            {
              "value": "\"submit\""
            }
          ]
        }
      },
      "referrerPolicy": {
        "defaultValue": null,
        "description": "",
        "name": "referrerPolicy",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "HTMLAttributeReferrerPolicy",
          "value": [
            {
              "value": "\"\""
            },
            {
              "value": "\"origin\""
            },
            {
              "value": "\"no-referrer\""
            },
            {
              "value": "\"no-referrer-when-downgrade\""
            },
            {
              "value": "\"origin-when-cross-origin\""
            },
            {
              "value": "\"same-origin\""
            },
            {
              "value": "\"strict-origin\""
            },
            {
              "value": "\"strict-origin-when-cross-origin\""
            },
            {
              "value": "\"unsafe-url\""
            }
          ]
        }
      },
      "alignContent": {
        "defaultValue": null,
        "description": "Content alignment for when visuals are present",
        "name": "alignContent",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "AlignContent",
          "value": [
            {
              "value": "\"center\""
            },
            {
              "value": "\"start\""
            }
          ]
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "The icon for the IconButton",
        "name": "icon",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactElement<any, string | JSXElementConstructor<any>> | ElementType<any, keyof IntrinsicElements> | FunctionComponent<...> | null",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "FunctionComponent<IconProps>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "leadingVisual": {
        "defaultValue": null,
        "description": "The leading visual which comes before the button content",
        "name": "leadingVisual",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactElement<any, string | JSXElementConstructor<any>> | ElementType<any, keyof IntrinsicElements> | null",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            }
          ]
        }
      },
      "trailingVisual": {
        "defaultValue": null,
        "description": "The trailing visual which comes after the button content",
        "name": "trailingVisual",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactElement<any, string | JSXElementConstructor<any>> | ElementType<any, keyof IntrinsicElements> | null",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            }
          ]
        }
      },
      "trailingAction": {
        "defaultValue": null,
        "description": "Trailing action appears to the right of the trailing visual and is always locked to the end",
        "name": "trailingAction",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ElementType<any, keyof IntrinsicElements> | null",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "children": {
        "defaultValue": null,
        "description": "",
        "name": "children",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "DOMAttributes"
          },
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "DOMAttributes"
          },
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "count": {
        "defaultValue": null,
        "description": "",
        "name": "count",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "number",
          "value": [
            {
              "value": "number"
            }
          ]
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Determine's the styles on a button one of 'default' | 'primary' | 'invisible' | 'danger'",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "VariantType",
          "value": [
            {
              "value": "\"link\""
            },
            {
              "value": "\"default\""
            },
            {
              "value": "\"danger\""
            },
            {
              "value": "\"primary\""
            },
            {
              "value": "\"invisible\""
            }
          ]
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Size of button and fontSize of text in button",
        "name": "size",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Size",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            }
          ]
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Items that are disabled can not be clicked, selected, or navigated through.",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "ButtonHTMLAttributes"
          },
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "ButtonHTMLAttributes"
          },
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "ButtonHTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "block": {
        "defaultValue": null,
        "description": "Allow button width to fill its container.",
        "name": "block",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "loading": {
        "defaultValue": null,
        "description": "When true, the button is in a loading state.",
        "name": "loading",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "loadingAnnouncement": {
        "defaultValue": null,
        "description": "The content to announce to screen readers when loading.",
        "name": "loadingAnnouncement",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "inactive": {
        "defaultValue": null,
        "description": "",
        "name": "inactive",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "labelWrap": {
        "defaultValue": null,
        "description": "Whether the button label should wrap to multiple lines of it is longer than the button width.",
        "name": "labelWrap",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "button_group",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ButtonGroup/ButtonGroup.tsx",
    "description": "Button group renders a series of buttons.",
    "displayName": "ButtonGroup",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | ... 162 more ... | FunctionComponent<...>",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<unknown, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<unknown>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "checkbox",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Checkbox/Checkbox.tsx",
    "description": "An accessible, native checkbox component",
    "displayName": "Checkbox",
    "methods": [],
    "props": {
      "disabled": {
        "defaultValue": null,
        "description": "Apply inactive visual appearance to the checkbox",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Checkbox/Checkbox.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "InputHTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "value": {
        "defaultValue": null,
        "description": "A unique value that is never shown to the user.\nUsed during form submission and to identify which checkbox inputs are selected",
        "name": "value",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Checkbox/Checkbox.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "InputHTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string | (string & readonly string[])",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "string & readonly string[]"
            }
          ]
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Indicates whether the checkbox must be checked",
        "name": "required",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Checkbox/Checkbox.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "InputHTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "validationStatus": {
        "defaultValue": null,
        "description": "Only used to inform ARIA attributes. Individual checkboxes do not have validation styles.",
        "name": "validationStatus",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Checkbox/Checkbox.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "FormValidationStatus",
          "value": [
            {
              "value": "\"success\""
            },
            {
              "value": "\"error\""
            }
          ]
        }
      },
      "indeterminate": {
        "defaultValue": null,
        "description": "Apply indeterminate visual appearance to the checkbox",
        "name": "indeterminate",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Checkbox/Checkbox.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "checkbox_group",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/CheckboxGroup/CheckboxGroup.tsx",
    "description": "Checkbox group renders a set of checkboxes.",
    "displayName": "CheckboxGroup",
    "methods": [],
    "props": {
      "onChange": {
        "defaultValue": null,
        "description": "An onChange handler that gets called when any of the checkboxes change",
        "name": "onChange",
        "declarations": [
          {
            "fileName": "react/packages/react/src/CheckboxGroup/CheckboxGroup.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "((selected: string[], e?: ChangeEvent<HTMLInputElement>) => void) | undefined",
          "value": [
            {
              "value": "(selected: string[], e?: ChangeEvent<HTMLInputElement> | undefined) => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "Used when associating the input group with a label other than `CheckboxOrRadioGroup.Label`",
        "name": "aria-labelledby",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroup.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the input group allows user input",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroup.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "id": {
        "defaultValue": null,
        "description": "The unique identifier for this input group. Used to associate the label, validation text, and caption text.\nYou may want a custom ID to make it easier to select elements in integration tests.",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroup.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "required": {
        "defaultValue": null,
        "description": "If true, the user must make a selection before the owning form can be submitted",
        "name": "required",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroup.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "CheckboxGroup.Caption",
      "primerparentid": "checkbox_group"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/CheckboxGroup/CheckboxGroup.tsx",
    "description": "The caption with contextual information about the set of related checkboxes.",
    "displayName": "CheckboxGroup.Caption",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "CheckboxGroup.Label",
      "primerparentid": "checkbox_group"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/CheckboxGroup/CheckboxGroup.tsx",
    "description": "The name for the set of related checkboxes.",
    "displayName": "CheckboxGroup.Label",
    "methods": [],
    "props": {
      "visuallyHidden": {
        "defaultValue": null,
        "description": "Whether to visually hide the fieldset legend",
        "name": "visuallyHidden",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroupLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "CheckboxGroup.Validation",
      "primerparentid": "checkbox_group"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/CheckboxGroup/CheckboxGroup.tsx",
    "description": "The message about the validation status of the set of related checkboxes.",
    "displayName": "CheckboxGroup.Validation",
    "methods": [],
    "props": {
      "variant": {
        "defaultValue": null,
        "description": "Changes the visual style to match the validation status",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroupValidation.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "FormValidationStatus",
          "value": [
            {
              "value": "\"success\""
            },
            {
              "value": "\"error\""
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "circle_badge",
      "primerstatus": "alpha",
      "prmera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/CircleBadge/CircleBadge.tsx",
    "description": "Circle badge visually connects logos of third-party services, eg. in the marketplace.",
    "displayName": "CircleBadge",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": null,
        "description": "Sets the size of the badge in pixels. Overrides the `variant` prop when set",
        "name": "size",
        "declarations": [
          {
            "fileName": "react/packages/react/src/CircleBadge/CircleBadge.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "number",
          "value": [
            {
              "value": "number"
            }
          ]
        }
      },
      "inline": {
        "defaultValue": null,
        "description": "Styles the badge to `display: inline`",
        "name": "inline",
        "declarations": [
          {
            "fileName": "react/packages/react/src/CircleBadge/CircleBadge.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "variant": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "Creates a smaller or larger badge. Has no effect if the `size` prop is set",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/CircleBadge/CircleBadge.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"small\" | \"large\" | \"medium\"",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "CircleBadge.Icon",
      "primerparentid": "circle_badge"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/CircleBadge/CircleBadge.tsx",
    "description": "The icon that appears inside of CircleBadge",
    "displayName": "CircleBadge.Icon",
    "methods": [],
    "props": {
      "color": {
        "defaultValue": null,
        "description": "Sets an override color for the Octicon. Compatible with colors from the [Primer color system](https://primer.style/primitives/colors).",
        "name": "color",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Octicon/Octicon.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Checks the input by default in uncontrolled modeName of the [Octicon component](https://primer.style/octicons/) used in the",
        "name": "icon",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Octicon/Octicon.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "ElementType<any, keyof IntrinsicElements>",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "circle_octicon",
      "primerstatus": "alpha",
      "prmera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/CircleOcticon/CircleOcticon.tsx",
    "description": "Use circle octicon to render any Octicon with a circle background. CircleOcticons are most commonly used to represent the status of a pull request in the comment timeline.",
    "displayName": "CircleOcticon",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/CircleOcticon/CircleOcticon.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ElementType<any, keyof IntrinsicElements>",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Set the width and height of the icon in pixels",
        "name": "size",
        "declarations": [
          {
            "fileName": "react/packages/react/src/CircleOcticon/CircleOcticon.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/styled-system/index.d.ts",
            "name": "SizeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "(number & ResponsiveValue<Height<TLengthStyledSystem>, Required<Theme<TLengthStyledSystem>>>)",
          "value": [
            {
              "value": "number"
            },
            {
              "value": "number & (Height<TLengthStyledSystem> | null)[]"
            },
            {
              "value": "number & { [x: string]: Height<TLengthStyledSystem> | undefined; [x: number]: Height<TLengthStyledSystem> | undefined; }"
            }
          ]
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "The Octicon to render in the circle",
        "name": "icon",
        "declarations": [
          {
            "fileName": "react/packages/react/src/CircleOcticon/CircleOcticon.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "ComponentType<PropsWithChildren<{ size?: number | Size | undefined; }>>",
          "value": [
            {
              "value": "ComponentClass<PropsWithChildren<{ size?: number | Size | undefined; }>, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<PropsWithChildren<{ size?: number | Size | undefined; }>>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ConfirmationDialog/ConfirmationDialog.tsx",
    "description": "This hook takes no parameters and returns an `async` function, `confirm`. When `confirm`\nis called, it shows the confirmation dialog. When the dialog is dismissed, a promise is\nresolved with `true` or `false` depending on whether or not the confirm button was used.",
    "displayName": "useConfirm",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ConfirmationDialog/ConfirmationDialog.tsx",
    "description": "A ConfirmationDialog is a special kind of dialog with more rigid behavior. It\nis used to confirm a user action. ConfirmationDialogs always have exactly\ntwo buttons: one to cancel the action and one to confirm it. No custom\nrendering capabilities are provided for ConfirmationDialog.",
    "displayName": "ConfirmationDialog",
    "methods": [],
    "props": {
      "onClose": {
        "defaultValue": null,
        "description": "Required. This callback is invoked when a gesture to close the dialog\nis performed. The first argument indicates the gesture.",
        "name": "onClose",
        "parent": {
          "fileName": "react/packages/react/src/ConfirmationDialog/ConfirmationDialog.tsx",
          "name": "ConfirmationDialogProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/ConfirmationDialog/ConfirmationDialog.tsx",
            "name": "ConfirmationDialogProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(gesture: \"escape\" | \"confirm\" | \"close-button\" | \"cancel\") => void"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "Required. The title of the ConfirmationDialog. This is usually a brief\nquestion.",
        "name": "title",
        "parent": {
          "fileName": "react/packages/react/src/ConfirmationDialog/ConfirmationDialog.tsx",
          "name": "ConfirmationDialogProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/ConfirmationDialog/ConfirmationDialog.tsx",
            "name": "ConfirmationDialogProps"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "cancelButtonContent": {
        "defaultValue": null,
        "description": "The text to use for the cancel button. Default: \"Cancel\".",
        "name": "cancelButtonContent",
        "parent": {
          "fileName": "react/packages/react/src/ConfirmationDialog/ConfirmationDialog.tsx",
          "name": "ConfirmationDialogProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/ConfirmationDialog/ConfirmationDialog.tsx",
            "name": "ConfirmationDialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "confirmButtonContent": {
        "defaultValue": null,
        "description": "The text to use for the confirm button. Default: \"OK\".",
        "name": "confirmButtonContent",
        "parent": {
          "fileName": "react/packages/react/src/ConfirmationDialog/ConfirmationDialog.tsx",
          "name": "ConfirmationDialogProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/ConfirmationDialog/ConfirmationDialog.tsx",
            "name": "ConfirmationDialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "confirmButtonType": {
        "defaultValue": null,
        "description": "The type of button to use for the confirm button. Default: Button.",
        "name": "confirmButtonType",
        "parent": {
          "fileName": "react/packages/react/src/ConfirmationDialog/ConfirmationDialog.tsx",
          "name": "ConfirmationDialogProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/ConfirmationDialog/ConfirmationDialog.tsx",
            "name": "ConfirmationDialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"normal\" | \"danger\" | \"primary\"",
          "value": [
            {
              "value": "\"normal\""
            },
            {
              "value": "\"danger\""
            },
            {
              "value": "\"primary\""
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "counter_label",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/CounterLabel/CounterLabel.tsx",
    "description": "Counter label is a numbered label accompanied by text. It's typically used in a button to indicate some count associated with the action.",
    "displayName": "CounterLabel",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "react/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          },
          {
            "fileName": "react/packages/react/src/CounterLabel/CounterLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "scheme": {
        "defaultValue": {
          "value": "secondary"
        },
        "description": "Pass in 'primary' for a darker background and inverse text, or 'secondary' for a lighter background and primary text. Omitting the scheme prop renders the default counter scheme",
        "name": "scheme",
        "declarations": [
          {
            "fileName": "react/packages/react/src/CounterLabel/CounterLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"primary\" | \"secondary\"",
          "value": [
            {
              "value": "\"primary\""
            },
            {
              "value": "\"secondary\""
            }
          ]
        }
      },
      "sx": {
        "defaultValue": {
          "value": "__DEV__\n  ? Object.freeze<BetterSystemStyleObject>({})\n  : {}"
        },
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "data_table",
      "primerstatus": "draft",
      "primera11yreviewed": "false",
      "primerstories": "drafts-components-datatable-features--with-title drafts-components-datatable-features--with-title-and-subtitle drafts-components-datatable-features--with-sorting drafts-components-datatable-features--with-actions drafts-components-datatable-features--with-action drafts-components-datatable-features--with-row-action drafts-components-datatable-features--with-row-actions drafts-components-datatable-features--with-row-action-menu drafts-components-datatable-features--with-custom-heading drafts-components-datatable-features--with-no-content drafts-components-datatable-features--with-loading drafts-components-datatable-features--with-pagination"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/DataTable/DataTable.tsx",
    "description": "The `table` element where all columns and rows are rendered.",
    "displayName": "DataTable",
    "methods": [],
    "props": {
      "aria-describedby": {
        "defaultValue": null,
        "description": "Provide an id to an element which uniquely describes this table",
        "name": "aria-describedby",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/DataTable.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "Provide an id to an element which uniquely labels this table",
        "name": "aria-labelledby",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/DataTable.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "cellPadding": {
        "defaultValue": null,
        "description": "Specify the amount of space that should be available around the contents of\na cell",
        "name": "cellPadding",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/DataTable.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"normal\" | \"condensed\" | \"spacious\"",
          "value": [
            {
              "value": "\"normal\""
            },
            {
              "value": "\"condensed\""
            },
            {
              "value": "\"spacious\""
            }
          ]
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Provide a collection of the rows which will be rendered inside of the table",
        "name": "data",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/DataTable.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "Data[]"
        }
      },
      "columns": {
        "defaultValue": null,
        "description": "Provide the columns for the table and the fields in `data` to which they\ncorrespond",
        "name": "columns",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/DataTable.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "Column<Data>[]"
        }
      },
      "initialSortColumn": {
        "defaultValue": null,
        "description": "Provide the id or field of the column by which the table is sorted. When\nusing this `prop`, the input data must be sorted by this column in\nascending order",
        "name": "initialSortColumn",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/DataTable.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string | number",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "number"
            }
          ]
        }
      },
      "initialSortDirection": {
        "defaultValue": null,
        "description": "Provide the sort direction that the table should be sorted by on the\ncurrently sorted column",
        "name": "initialSortDirection",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/DataTable.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"ASC\" | \"DESC\"",
          "value": [
            {
              "value": "\"ASC\""
            },
            {
              "value": "\"DESC\""
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Table.ErrorDialog",
      "primerparentid": "data_table"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/DataTable/ErrorDialog.tsx",
    "description": "A dialog for showing an error when rendering a DataTable",
    "displayName": "Table.ErrorDialog",
    "methods": [],
    "props": {
      "title": {
        "defaultValue": {
          "value": "Error"
        },
        "description": "Provide an optional title for the dialog",
        "name": "title",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/ErrorDialog.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "onRetry": {
        "defaultValue": null,
        "description": "Provide an optional handler to be called when the user confirms to retry",
        "name": "onRetry",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/ErrorDialog.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "(() => void)",
          "value": [
            {
              "value": "() => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "onDismiss": {
        "defaultValue": null,
        "description": "Provide an optional handler to be called when the user dismisses the dialog",
        "name": "onDismiss",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/ErrorDialog.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "(() => void)",
          "value": [
            {
              "value": "() => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Table.Pagination",
      "primerparentid": "data_table"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/DataTable/Pagination.tsx",
    "description": "A pagination component specific to the `DataTable` component.",
    "displayName": "Table.Pagination",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "Optionally provide an `id` that is placed on the navigation landmark\nrendered by this component",
        "name": "id",
        "parent": {
          "fileName": "react/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          },
          {
            "fileName": "react/packages/react/src/DataTable/Pagination.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "Defines a string value that labels the current element.\nProvide a label for the navigation landmark rendered by this component\n@see aria-labelledby.",
        "name": "aria-label",
        "parent": {
          "fileName": "react/node_modules/@types/react/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "AriaAttributes"
          },
          {
            "fileName": "react/packages/react/src/DataTable/Pagination.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "defaultPageIndex": {
        "defaultValue": null,
        "description": "Provide an optional index to specify the default selected page",
        "name": "defaultPageIndex",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/Pagination.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "number",
          "value": [
            {
              "value": "number"
            }
          ]
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Optionally provide a handler that is called whenever the pagination state\nis updated",
        "name": "onChange",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/Pagination.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "((state: PaginationState) => void)",
          "value": [
            {
              "value": "(state: PaginationState) => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "pageSize": {
        "defaultValue": {
          "value": 25
        },
        "description": "Optionally specify the number of items within a page",
        "name": "pageSize",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/Pagination.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "number",
          "value": [
            {
              "value": "number"
            }
          ]
        }
      },
      "showPages": {
        "defaultValue": {
          "value": "{narrow: false}"
        },
        "description": "Whether to show the page numbers",
        "name": "showPages",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/Pagination.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean | ResponsiveValue<boolean>",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ResponsiveValue<boolean>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "totalCount": {
        "defaultValue": null,
        "description": "Specify the total number of items within the collection",
        "name": "totalCount",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/Pagination.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Table.Container",
      "primerparentid": "data_table"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/DataTable/Table.tsx",
    "description": "",
    "displayName": "Table.Container",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Table.Title",
      "primerparentid": "data_table"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/DataTable/Table.tsx",
    "description": "",
    "displayName": "Table.Title",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": {
          "value": "h2"
        },
        "description": "Provide an alternate element or component to use as the container for\n`TableSubtitle`. This is useful when specifying markup that is more\nsemantic for your use-case, such as a heading tag.",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/Table.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "keyof IntrinsicElements | ComponentType<{}>",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<{}, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<{}>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Provide a unique id for the table subtitle. This should be used along with\n`aria-labelledby` on `DataTable`",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/Table.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Table.Subtitle",
      "primerparentid": "data_table"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/DataTable/Table.tsx",
    "description": "",
    "displayName": "Table.Subtitle",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": {
          "value": "h2"
        },
        "description": "Provide an alternate element or component to use as the container for\n`TableSubtitle`. This is useful when specifying markup that is more\nsemantic for your use-case",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/Table.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "keyof IntrinsicElements | ComponentType<{}>",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<{}, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<{}>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Provide a unique id for the table subtitle. This should be used along with\n`aria-describedby` on `DataTable`",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/Table.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Table.Actions",
      "primerparentid": "data_table"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/DataTable/Table.tsx",
    "description": "The container for a table component.",
    "displayName": "Table.Actions",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "alias": "Table.Divider",
      "primerparentid": "data_table"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/DataTable/Table.tsx",
    "description": "An optional divider to separate the area that contains Table.Title and Table.Actions from Table.Subtitle.",
    "displayName": "Table.Divider",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "alias": "Table",
      "primerparentid": "data_table"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/DataTable/Table.tsx",
    "description": "The `table` element for a table component. Not intended to be used directly unless you are building your own table component.",
    "displayName": "Table",
    "methods": [],
    "props": {
      "aria-describedby": {
        "defaultValue": null,
        "description": "Identifies the element (or elements) that describes the object.\nProvide an id to an element which uniquely describes this table\n@see aria-labelledby",
        "name": "aria-describedby",
        "parent": {
          "fileName": "react/node_modules/@types/react/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "AriaAttributes"
          },
          {
            "fileName": "react/packages/react/src/DataTable/Table.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "Identifies the element (or elements) that labels the current element.\nProvide an id to an element which uniquely labels this table\n@see aria-describedby.",
        "name": "aria-labelledby",
        "parent": {
          "fileName": "react/node_modules/@types/react/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "AriaAttributes"
          },
          {
            "fileName": "react/packages/react/src/DataTable/Table.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "cellPadding": {
        "defaultValue": {
          "value": "normal"
        },
        "description": "Specify the amount of space that should be available around the contents of\na cell",
        "name": "cellPadding",
        "parent": {
          "fileName": "react/node_modules/@types/react/index.d.ts",
          "name": "TableHTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "TableHTMLAttributes"
          },
          {
            "fileName": "react/packages/react/src/DataTable/Table.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"normal\" | \"condensed\" | \"spacious\"",
          "value": [
            {
              "value": "\"normal\""
            },
            {
              "value": "\"condensed\""
            },
            {
              "value": "\"spacious\""
            }
          ]
        }
      },
      "gridTemplateColumns": {
        "defaultValue": null,
        "description": "Column width definitions",
        "name": "gridTemplateColumns",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/Table.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "GridTemplateColumns<string | number>",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "string & {}"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Table.Head",
      "primerparentid": "data_table"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/DataTable/Table.tsx",
    "description": "The `thead` element for a table component. Not intended to be used directly unless you are building your own table component.",
    "displayName": "Table.Head",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "alias": "Table.Body",
      "primerparentid": "data_table"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/DataTable/Table.tsx",
    "description": "The `tbody` element for a table component. Not intended to be used directly unless you are building your own table component.",
    "displayName": "Table.Body",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "alias": "Table.Row",
      "primerparentid": "data_table"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/DataTable/Table.tsx",
    "description": "The `tr` element for a table component. Not intended to be used directly unless you are building your own table component.",
    "displayName": "Table.Row",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "alias": "Table.Header",
      "primerparentid": "data_table"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/DataTable/Table.tsx",
    "description": "The `th` element for a table component. Not intended to be used directly unless you are building your own table component.",
    "displayName": "Table.Header",
    "methods": [],
    "props": {
      "align": {
        "defaultValue": null,
        "description": "The horizontal alignment of the cell's content",
        "name": "align",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/Table.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "CellAlignment",
          "value": [
            {
              "value": "\"end\""
            },
            {
              "value": "\"start\""
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Table.SortHeader",
      "primerparentid": "data_table"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/DataTable/Table.tsx",
    "description": "Same as `Table.Header`, but each `th` contains a button that performs a sort. Not intended to be used directly unless you are building your own table component.",
    "displayName": "Table.SortHeader",
    "methods": [],
    "props": {
      "align": {
        "defaultValue": null,
        "description": "The horizontal alignment of the cell's content",
        "name": "align",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/Table.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "CellAlignment",
          "value": [
            {
              "value": "\"end\""
            },
            {
              "value": "\"start\""
            }
          ]
        }
      },
      "direction": {
        "defaultValue": null,
        "description": "Specify the sort direction for the TableHeader",
        "name": "direction",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/Table.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "SortDirection",
          "value": [
            {
              "value": "\"ASC\""
            },
            {
              "value": "\"DESC\""
            },
            {
              "value": "\"NONE\""
            }
          ]
        }
      },
      "onToggleSort": {
        "defaultValue": null,
        "description": "Provide a handler that is called when the sortable TableHeader is\ninteracted with via a click or keyboard interaction",
        "name": "onToggleSort",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/Table.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "() => void"
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Table.Cell",
      "primerparentid": "data_table"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/DataTable/Table.tsx",
    "description": "The `td` or `tr` element for a table component. Not intended to be used directly unless you are building your own table component.",
    "displayName": "Table.Cell",
    "methods": [],
    "props": {
      "scope": {
        "defaultValue": null,
        "description": "Provide the scope for a table cell, useful for defining a row header using\n`scope=\"row\"`",
        "name": "scope",
        "parent": {
          "fileName": "react/node_modules/@types/react/index.d.ts",
          "name": "TdHTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "TdHTMLAttributes"
          },
          {
            "fileName": "react/packages/react/src/DataTable/Table.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"row\"",
          "value": [
            {
              "value": "\"row\""
            }
          ]
        }
      },
      "align": {
        "defaultValue": null,
        "description": "The horizontal alignment of the cell's content",
        "name": "align",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/Table.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "CellAlignment",
          "value": [
            {
              "value": "\"end\""
            },
            {
              "value": "\"start\""
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Table.CellPlaceholder",
      "primerparentid": "data_table"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/DataTable/Table.tsx",
    "description": "Placeholder content to be used inside of a TableCell.",
    "displayName": "Table.CellPlaceholder",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "alias": "Table.Skeleton",
      "primerparentid": "data_table"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/DataTable/Table.tsx",
    "description": "A placeholder \"skeleton\" to use when table content is loading. Not intended to be used directly unless you are building your own table component.",
    "displayName": "Table.Skeleton",
    "methods": [],
    "props": {
      "cellPadding": {
        "defaultValue": {
          "value": "normal"
        },
        "description": "Specify the amount of space that should be available around the contents of\na cell",
        "name": "cellPadding",
        "parent": {
          "fileName": "react/node_modules/@types/react/index.d.ts",
          "name": "TableHTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "TableHTMLAttributes"
          },
          {
            "fileName": "react/packages/react/src/DataTable/Table.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"normal\" | \"condensed\" | \"spacious\"",
          "value": [
            {
              "value": "\"normal\""
            },
            {
              "value": "\"condensed\""
            },
            {
              "value": "\"spacious\""
            }
          ]
        }
      },
      "columns": {
        "defaultValue": null,
        "description": "Provide an array of columns for the table. Columns will render as the headers\nof the table.",
        "name": "columns",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/Table.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "Column<Data>[]"
        }
      },
      "rows": {
        "defaultValue": {
          "value": 10
        },
        "description": "Optionally specify the number of rows which should be included in the\nskeleton state of the component",
        "name": "rows",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/Table.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "number",
          "value": [
            {
              "value": "number"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Details/Details.tsx",
    "description": "",
    "displayName": "Summary",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "HTML element to render summary as.",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Details/Details.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ElementType<any, keyof IntrinsicElements>",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "children": {
        "defaultValue": null,
        "description": "",
        "name": "children",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Details/Details.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/Details/Details.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "details",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Details/Details.tsx",
    "description": "Details is a styled component to enhance the native behaviors of the <details> element.",
    "displayName": "Details",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "dialog_v2",
      "primerdocsid": "dialog",
      "primerstatus": "draft",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Dialog/Dialog.tsx",
    "description": "A dialog is a type of overlay that can be used for confirming actions, asking\nfor disambiguation, and presenting small forms. They generally allow the user\nto focus on a quick task without having to navigate to a different page.\n\nDialogs appear in the page after a direct user interaction. Don't show dialogs\non page load or as system alerts.\n\nDialogs appear centered in the page, with a visible backdrop that dims the rest\nof the window for focus.\n\nAll dialogs have a title and a close button.\n\nDialogs are modal. Dialogs can be dismissed by clicking on the close button,\npressing the escape key, or by interacting with another button in the dialog.\nTo avoid losing information and missing important messages, clicking outside\nof the dialog will not close it.\n\nThe sub components provided (e.g. Header, Title, etc.) are available for custom\nrenderers only. They are not intended to be used otherwise.",
    "displayName": "Dialog",
    "methods": [],
    "props": {
      "title": {
        "defaultValue": null,
        "description": "Title of the Dialog. Also serves as the aria-label for this Dialog.",
        "name": "title",
        "parent": {
          "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "subtitle": {
        "defaultValue": null,
        "description": "The Dialog's subtitle. Optional. Rendered below the title in smaller\ntype with less contrast. Also serves as the aria-describedby for this\nDialog.",
        "name": "subtitle",
        "parent": {
          "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "renderHeader": {
        "defaultValue": null,
        "description": "Provide a custom renderer for the dialog header. This content is\nrendered directly into the dialog body area, full bleed from edge\nto edge, top to the start of the body element.\n\nWarning: using a custom renderer may violate Primer UX principles.",
        "name": "renderHeader",
        "parent": {
          "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "FunctionComponent<PropsWithChildren<DialogHeaderProps>>",
          "value": [
            {
              "value": "FunctionComponent<PropsWithChildren<DialogHeaderProps>>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "renderBody": {
        "defaultValue": null,
        "description": "Provide a custom render function for the dialog body. This content is\nrendered directly into the dialog body area, full bleed from edge to\nedge, header to footer.\n\nWarning: using a custom renderer may violate Primer UX principles.",
        "name": "renderBody",
        "parent": {
          "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "FunctionComponent<PropsWithChildren<DialogProps>>",
          "value": [
            {
              "value": "FunctionComponent<PropsWithChildren<DialogProps>>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "renderFooter": {
        "defaultValue": null,
        "description": "Provide a custom render function for the dialog footer. This content is\nrendered directly into the dialog footer area, full bleed from edge to\nedge, end of the body element to bottom.\n\nWarning: using a custom renderer may violate Primer UX principles.",
        "name": "renderFooter",
        "parent": {
          "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "FunctionComponent<PropsWithChildren<DialogProps>>",
          "value": [
            {
              "value": "FunctionComponent<PropsWithChildren<DialogProps>>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "footerButtons": {
        "defaultValue": null,
        "description": "Specifies the buttons to be rendered in the Dialog footer.",
        "name": "footerButtons",
        "parent": {
          "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "DialogButtonProps[]",
          "value": [
            {
              "value": "DialogButtonProps[]",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "This method is invoked when a gesture to close the dialog is used (either\nan Escape key press, clicking the backdrop, or clicking the \"X\" in the top-right corner). The\ngesture argument indicates the gesture that was used to close the dialog\n('close-button' or 'escape').",
        "name": "onClose",
        "parent": {
          "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(gesture: \"escape\" | \"close-button\") => void"
        }
      },
      "role": {
        "defaultValue": null,
        "description": "Default: \"dialog\". The ARIA role to assign to this dialog.\n@see https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal\n@see https://www.w3.org/TR/wai-aria-practices-1.1/#alertdialog",
        "name": "role",
        "parent": {
          "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"dialog\" | \"alertdialog\"",
          "value": [
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"alertdialog\""
            }
          ]
        }
      },
      "width": {
        "defaultValue": null,
        "description": "The width of the dialog.\nsmall: 296px\nmedium: 320px\nlarge: 480px\nxlarge: 640px",
        "name": "width",
        "parent": {
          "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"small\" | \"large\" | \"medium\" | \"xlarge\"",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            },
            {
              "value": "\"xlarge\""
            }
          ]
        }
      },
      "height": {
        "defaultValue": null,
        "description": "The height of the dialog.\nsmall: 296x480\nlarge: 480x640\nauto: variable based on contents",
        "name": "height",
        "parent": {
          "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"small\" | \"large\" | \"auto\"",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"auto\""
            }
          ]
        }
      },
      "position": {
        "defaultValue": null,
        "description": "The position of the dialog",
        "name": "position",
        "parent": {
          "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"center\" | \"left\" | \"right\" | ResponsiveValue<\"center\" | \"left\" | \"right\" | \"bottom\" | \"fullscreen\">",
          "value": [
            {
              "value": "\"center\""
            },
            {
              "value": "\"left\""
            },
            {
              "value": "\"right\""
            },
            {
              "value": "ResponsiveValue<\"center\" | \"left\" | \"right\" | \"bottom\" | \"fullscreen\">",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "returnFocusRef": {
        "defaultValue": null,
        "description": "Return focus to this element when the Dialog closes,\ninstead of the element that had focus immediately before the Dialog opened",
        "name": "returnFocusRef",
        "parent": {
          "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "RefObject<HTMLElement>",
          "value": [
            {
              "value": "RefObject<HTMLElement>",
              "description": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.",
              "fullComment": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.\n@template T The type of the ref's value.\n@example ```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```",
              "tags": {
                "template": "T The type of the ref's value.",
                "example": "```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```"
              }
            }
          ]
        }
      },
      "initialFocusRef": {
        "defaultValue": null,
        "description": "The element to focus when the Dialog opens",
        "name": "initialFocusRef",
        "parent": {
          "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "RefObject<HTMLElement>",
          "value": [
            {
              "value": "RefObject<HTMLElement>",
              "description": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.",
              "fullComment": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.\n@template T The type of the ref's value.\n@example ```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```",
              "tags": {
                "template": "T The type of the ref's value.",
                "example": "```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```"
              }
            }
          ]
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional class names to apply to the dialog",
        "name": "className",
        "parent": {
          "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Dialog.Header",
      "primerparentid": "dialog_v2"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Dialog/Dialog.tsx",
    "description": "The header area of a Dialog.",
    "displayName": "Dialog.Header",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Dialog.Title",
      "primerparentid": "dialog_v2"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Dialog/Dialog.tsx",
    "description": "The title rendered in the header of the Dialog.",
    "displayName": "Dialog.Title",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Dialog.Subtitle",
      "primerparentid": "dialog_v2"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Dialog/Dialog.tsx",
    "description": "The subtitle rendered in the header of the Dialog.",
    "displayName": "Dialog.Subtitle",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Dialog.Body",
      "primerparentid": "dialog_v2"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Dialog/Dialog.tsx",
    "description": "The main content of a Dialog.",
    "displayName": "Dialog.Body",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Dialog.Footer",
      "primerparentid": "dialog_v2"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Dialog/Dialog.tsx",
    "description": "The footer area of a Dialog.",
    "displayName": "Dialog.Footer",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Dialog.Buttons",
      "primerparentid": "dialog_v2"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Dialog/Dialog.tsx",
    "description": "The buttons rendered in the footer area of a Dialog.",
    "displayName": "Dialog.Buttons",
    "methods": [],
    "props": {
      "buttons": {
        "defaultValue": null,
        "description": "",
        "name": "buttons",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "DialogButtonProps[]"
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Dialog.CloseButton",
      "primerparentid": "dialog_v2"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Dialog/Dialog.tsx",
    "description": "The close button rendered in the header area of a Dialog.",
    "displayName": "Dialog.CloseButton",
    "methods": [],
    "props": {
      "onClose": {
        "defaultValue": null,
        "description": "Callback for closing the Dialog",
        "name": "onClose",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "() => void"
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "dialog",
      "primerdocsid": "dialog",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/DialogV1/Dialog.tsx",
    "description": "Dialog is a floating surface used to display transient content such as confirmation actions, selection options, and more.",
    "displayName": "Dialog",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "initialFocusRef": {
        "defaultValue": null,
        "description": "",
        "name": "initialFocusRef",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DialogV1/Dialog.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "RefObject<HTMLElement>",
          "value": [
            {
              "value": "RefObject<HTMLElement>",
              "description": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.",
              "fullComment": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.\n@template T The type of the ref's value.\n@example ```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```",
              "tags": {
                "template": "T The type of the ref's value.",
                "example": "```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```"
              }
            }
          ]
        }
      },
      "returnFocusRef": {
        "defaultValue": null,
        "description": "",
        "name": "returnFocusRef",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DialogV1/Dialog.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "RefObject<HTMLElement>",
          "value": [
            {
              "value": "RefObject<HTMLElement>",
              "description": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.",
              "fullComment": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.\n@template T The type of the ref's value.\n@example ```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```",
              "tags": {
                "template": "T The type of the ref's value.",
                "example": "```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```"
              }
            }
          ]
        }
      },
      "onDismiss": {
        "defaultValue": {
          "value": "() => null"
        },
        "description": "",
        "name": "onDismiss",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DialogV1/Dialog.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "(() => void)",
          "value": [
            {
              "value": "() => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "narrow": {
        "defaultValue": null,
        "description": "",
        "name": "narrow",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DialogV1/Dialog.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "wide": {
        "defaultValue": null,
        "description": "",
        "name": "wide",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DialogV1/Dialog.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "isOpen": {
        "defaultValue": null,
        "description": "",
        "name": "isOpen",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DialogV1/Dialog.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "feature_flags",
      "primerstatus": "experimental",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/FeatureFlags/FeatureFlags.tsx",
    "description": "A helper component that uses context to let consumers check if a feature flag is enabled.",
    "displayName": "FeatureFlags",
    "methods": [],
    "props": {
      "flags": {
        "defaultValue": null,
        "description": "Object where keys are feature flag names and values are boolean",
        "name": "flags",
        "declarations": [
          {
            "fileName": "react/packages/react/src/FeatureFlags/FeatureFlags.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "FeatureFlags"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/FilteredActionList/FilteredActionListEntry.tsx",
    "description": "",
    "displayName": "FilteredActionList",
    "methods": [],
    "props": {
      "loading": {
        "defaultValue": null,
        "description": "Whether the items are loading",
        "name": "loading",
        "parent": {
          "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithDeprecatedActionList.tsx",
          "name": "FilteredActionListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithDeprecatedActionList.tsx",
            "name": "FilteredActionListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "placeholderText": {
        "defaultValue": null,
        "description": "Text used as placeholder for search input",
        "name": "placeholderText",
        "parent": {
          "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithDeprecatedActionList.tsx",
          "name": "FilteredActionListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithDeprecatedActionList.tsx",
            "name": "FilteredActionListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "filterValue": {
        "defaultValue": null,
        "description": "The current value of the search input",
        "name": "filterValue",
        "parent": {
          "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithDeprecatedActionList.tsx",
          "name": "FilteredActionListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithDeprecatedActionList.tsx",
            "name": "FilteredActionListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "onFilterChange": {
        "defaultValue": null,
        "description": "Callback when the search input changes",
        "name": "onFilterChange",
        "parent": {
          "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithDeprecatedActionList.tsx",
          "name": "FilteredActionListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithDeprecatedActionList.tsx",
            "name": "FilteredActionListProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(value: string, e: ChangeEvent<HTMLInputElement>) => void"
        }
      },
      "textInputProps": {
        "defaultValue": null,
        "description": "Props to pass through to the search input",
        "name": "textInputProps",
        "parent": {
          "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithDeprecatedActionList.tsx",
          "name": "FilteredActionListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithDeprecatedActionList.tsx",
            "name": "FilteredActionListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Partial<Omit<TextInputProps, \"onChange\">>",
          "value": [
            {
              "value": "Partial<Omit<TextInputProps, \"onChange\">>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "inputRef": {
        "defaultValue": null,
        "description": "Ref to pass through to the search input",
        "name": "inputRef",
        "parent": {
          "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithDeprecatedActionList.tsx",
          "name": "FilteredActionListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithDeprecatedActionList.tsx",
            "name": "FilteredActionListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "RefObject<HTMLInputElement>",
          "value": [
            {
              "value": "RefObject<HTMLInputElement>",
              "description": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.",
              "fullComment": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.\n@template T The type of the ref's value.\n@example ```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```",
              "tags": {
                "template": "T The type of the ref's value.",
                "example": "```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```"
              }
            }
          ]
        }
      },
      "groupMetadata": {
        "defaultValue": null,
        "description": "A collection of `Group` props (except `items`), plus a unique group identifier\nand `Group`-level custom `Item` or `Group` renderers.",
        "name": "groupMetadata",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "GroupedListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "GroupedListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "((Omit<GroupProps, \"items\"> | Omit<Partial<GroupProps> & { renderItem?: RenderItemFn; renderGroup?: (({ header, items, ...props }: GroupProps) => Element) | undefined; }, \"items\">) & { ...; })[] | undefined",
          "value": [
            {
              "value": "((Omit<GroupProps, \"items\"> | Omit<Partial<GroupProps> & { renderItem?: RenderItemFn | undefined; renderGroup?: (({ header, items, ...props }: GroupProps) => Element) | undefined; }, \"items\">) & { ...; })[]",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "items": {
        "defaultValue": null,
        "description": "A collection of `Item` props and `Item`-level custom `Item` renderers.",
        "name": "items",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": true,
        "type": {
          "name": "ItemInput[]"
        }
      },
      "role": {
        "defaultValue": null,
        "description": "The ARIA role describing the function of `List` component. `listbox` is a common value.",
        "name": "role",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "AriaRole",
          "value": [
            {
              "value": "\"article\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"list\""
            },
            {
              "value": "\"alert\""
            },
            {
              "value": "\"alertdialog\""
            },
            {
              "value": "\"application\""
            },
            {
              "value": "\"banner\""
            },
            {
              "value": "\"cell\""
            },
            {
              "value": "\"checkbox\""
            },
            {
              "value": "\"columnheader\""
            },
            {
              "value": "\"combobox\""
            },
            {
              "value": "\"complementary\""
            },
            {
              "value": "\"contentinfo\""
            },
            {
              "value": "\"definition\""
            },
            {
              "value": "\"directory\""
            },
            {
              "value": "\"document\""
            },
            {
              "value": "\"feed\""
            },
            {
              "value": "\"grid\""
            },
            {
              "value": "\"gridcell\""
            },
            {
              "value": "\"group\""
            },
            {
              "value": "\"heading\""
            },
            {
              "value": "\"listbox\""
            },
            {
              "value": "\"listitem\""
            },
            {
              "value": "\"log\""
            },
            {
              "value": "\"marquee\""
            },
            {
              "value": "\"math\""
            },
            {
              "value": "\"menubar\""
            },
            {
              "value": "\"menuitemcheckbox\""
            },
            {
              "value": "\"menuitemradio\""
            },
            {
              "value": "\"navigation\""
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"note\""
            },
            {
              "value": "\"presentation\""
            },
            {
              "value": "\"progressbar\""
            },
            {
              "value": "\"radio\""
            },
            {
              "value": "\"radiogroup\""
            },
            {
              "value": "\"region\""
            },
            {
              "value": "\"row\""
            },
            {
              "value": "\"rowgroup\""
            },
            {
              "value": "\"rowheader\""
            },
            {
              "value": "\"scrollbar\""
            },
            {
              "value": "\"searchbox\""
            },
            {
              "value": "\"separator\""
            },
            {
              "value": "\"slider\""
            },
            {
              "value": "\"spinbutton\""
            },
            {
              "value": "\"status\""
            },
            {
              "value": "\"tab\""
            },
            {
              "value": "\"tablist\""
            },
            {
              "value": "\"tabpanel\""
            },
            {
              "value": "\"term\""
            },
            {
              "value": "\"textbox\""
            },
            {
              "value": "\"timer\""
            },
            {
              "value": "\"toolbar\""
            },
            {
              "value": "\"tooltip\""
            },
            {
              "value": "\"tree\""
            },
            {
              "value": "\"treegrid\""
            },
            {
              "value": "\"treeitem\""
            }
          ]
        }
      },
      "id": {
        "defaultValue": null,
        "description": "id to attach to the base DOM node of the list",
        "name": "id",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "aria-label to attach to the base DOM node of the list",
        "name": "aria-label",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "renderItem": {
        "defaultValue": null,
        "description": "A `List`-level custom `Item` renderer. Every `Item` within this `List`\nwithout a `Group`-level or `Item`-level custom `Item` renderer will be\nrendered using this function component.",
        "name": "renderItem",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "RenderItemFn",
          "value": [
            {
              "value": "RenderItemFn",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "renderGroup": {
        "defaultValue": null,
        "description": "A `List`-level custom `Group` renderer. Every `Group` within this `List`\nwithout a `Group`-level custom `Item` renderer will be rendered using\nthis function component.",
        "name": "renderGroup",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "(({ header, items, ...props }: GroupProps) => Element)",
          "value": [
            {
              "value": "({ header, items, ...props }: GroupProps) => Element",
              "description": "Collects related `Items` in an `ActionList`.",
              "fullComment": "Collects related `Items` in an `ActionList`.",
              "tags": {}
            }
          ]
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Style variations. Usage is discretionary.\n\n- `\"inset\"` - `List` children are offset (vertically and horizontally) from `List`’s edges\n- `\"full\"` - `List` children are flush (vertically and horizontally) with `List` edges",
        "name": "variant",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"inset\" | \"full\"",
          "value": [
            {
              "value": "\"inset\""
            },
            {
              "value": "\"full\""
            }
          ]
        }
      },
      "selectionVariant": {
        "defaultValue": null,
        "description": "For `Item`s which can be selected, whether `multiple` `Item`s or a `single` `Item` can be selected",
        "name": "selectionVariant",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"multiple\" | \"single\"",
          "value": [
            {
              "value": "\"multiple\""
            },
            {
              "value": "\"single\""
            }
          ]
        }
      },
      "showItemDividers": {
        "defaultValue": null,
        "description": "Whether to display a divider above each `Item` in this `List` when it does not follow a `Header` or `Divider`.",
        "name": "showItemDividers",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/FilteredActionList/FilteredActionListWithDeprecatedActionList.tsx",
    "description": "",
    "displayName": "FilteredActionList",
    "methods": [],
    "props": {
      "loading": {
        "defaultValue": {
          "value": false
        },
        "description": "Whether the items are loading",
        "name": "loading",
        "parent": {
          "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithDeprecatedActionList.tsx",
          "name": "FilteredActionListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithDeprecatedActionList.tsx",
            "name": "FilteredActionListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "placeholderText": {
        "defaultValue": null,
        "description": "Text used as placeholder for search input",
        "name": "placeholderText",
        "parent": {
          "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithDeprecatedActionList.tsx",
          "name": "FilteredActionListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithDeprecatedActionList.tsx",
            "name": "FilteredActionListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "filterValue": {
        "defaultValue": null,
        "description": "The current value of the search input",
        "name": "filterValue",
        "parent": {
          "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithDeprecatedActionList.tsx",
          "name": "FilteredActionListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithDeprecatedActionList.tsx",
            "name": "FilteredActionListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "onFilterChange": {
        "defaultValue": null,
        "description": "Callback when the search input changes",
        "name": "onFilterChange",
        "parent": {
          "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithDeprecatedActionList.tsx",
          "name": "FilteredActionListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithDeprecatedActionList.tsx",
            "name": "FilteredActionListProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(value: string, e: ChangeEvent<HTMLInputElement>) => void"
        }
      },
      "textInputProps": {
        "defaultValue": null,
        "description": "Props to pass through to the search input",
        "name": "textInputProps",
        "parent": {
          "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithDeprecatedActionList.tsx",
          "name": "FilteredActionListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithDeprecatedActionList.tsx",
            "name": "FilteredActionListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Partial<Omit<TextInputProps, \"onChange\">>",
          "value": [
            {
              "value": "Partial<Omit<TextInputProps, \"onChange\">>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "inputRef": {
        "defaultValue": null,
        "description": "Ref to pass through to the search input",
        "name": "inputRef",
        "parent": {
          "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithDeprecatedActionList.tsx",
          "name": "FilteredActionListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithDeprecatedActionList.tsx",
            "name": "FilteredActionListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "RefObject<HTMLInputElement>",
          "value": [
            {
              "value": "RefObject<HTMLInputElement>",
              "description": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.",
              "fullComment": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.\n@template T The type of the ref's value.\n@example ```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```",
              "tags": {
                "template": "T The type of the ref's value.",
                "example": "```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```"
              }
            }
          ]
        }
      },
      "groupMetadata": {
        "defaultValue": null,
        "description": "A collection of `Group` props (except `items`), plus a unique group identifier\nand `Group`-level custom `Item` or `Group` renderers.",
        "name": "groupMetadata",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "GroupedListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "GroupedListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "((Omit<GroupProps, \"items\"> | Omit<Partial<GroupProps> & { renderItem?: RenderItemFn; renderGroup?: (({ header, items, ...props }: GroupProps) => Element) | undefined; }, \"items\">) & { ...; })[] | undefined",
          "value": [
            {
              "value": "((Omit<GroupProps, \"items\"> | Omit<Partial<GroupProps> & { renderItem?: RenderItemFn | undefined; renderGroup?: (({ header, items, ...props }: GroupProps) => Element) | undefined; }, \"items\">) & { ...; })[]",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "items": {
        "defaultValue": null,
        "description": "A collection of `Item` props and `Item`-level custom `Item` renderers.",
        "name": "items",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": true,
        "type": {
          "name": "ItemInput[]"
        }
      },
      "role": {
        "defaultValue": null,
        "description": "The ARIA role describing the function of `List` component. `listbox` is a common value.",
        "name": "role",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "AriaRole",
          "value": [
            {
              "value": "\"article\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"list\""
            },
            {
              "value": "\"alert\""
            },
            {
              "value": "\"alertdialog\""
            },
            {
              "value": "\"application\""
            },
            {
              "value": "\"banner\""
            },
            {
              "value": "\"cell\""
            },
            {
              "value": "\"checkbox\""
            },
            {
              "value": "\"columnheader\""
            },
            {
              "value": "\"combobox\""
            },
            {
              "value": "\"complementary\""
            },
            {
              "value": "\"contentinfo\""
            },
            {
              "value": "\"definition\""
            },
            {
              "value": "\"directory\""
            },
            {
              "value": "\"document\""
            },
            {
              "value": "\"feed\""
            },
            {
              "value": "\"grid\""
            },
            {
              "value": "\"gridcell\""
            },
            {
              "value": "\"group\""
            },
            {
              "value": "\"heading\""
            },
            {
              "value": "\"listbox\""
            },
            {
              "value": "\"listitem\""
            },
            {
              "value": "\"log\""
            },
            {
              "value": "\"marquee\""
            },
            {
              "value": "\"math\""
            },
            {
              "value": "\"menubar\""
            },
            {
              "value": "\"menuitemcheckbox\""
            },
            {
              "value": "\"menuitemradio\""
            },
            {
              "value": "\"navigation\""
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"note\""
            },
            {
              "value": "\"presentation\""
            },
            {
              "value": "\"progressbar\""
            },
            {
              "value": "\"radio\""
            },
            {
              "value": "\"radiogroup\""
            },
            {
              "value": "\"region\""
            },
            {
              "value": "\"row\""
            },
            {
              "value": "\"rowgroup\""
            },
            {
              "value": "\"rowheader\""
            },
            {
              "value": "\"scrollbar\""
            },
            {
              "value": "\"searchbox\""
            },
            {
              "value": "\"separator\""
            },
            {
              "value": "\"slider\""
            },
            {
              "value": "\"spinbutton\""
            },
            {
              "value": "\"status\""
            },
            {
              "value": "\"tab\""
            },
            {
              "value": "\"tablist\""
            },
            {
              "value": "\"tabpanel\""
            },
            {
              "value": "\"term\""
            },
            {
              "value": "\"textbox\""
            },
            {
              "value": "\"timer\""
            },
            {
              "value": "\"toolbar\""
            },
            {
              "value": "\"tooltip\""
            },
            {
              "value": "\"tree\""
            },
            {
              "value": "\"treegrid\""
            },
            {
              "value": "\"treeitem\""
            }
          ]
        }
      },
      "id": {
        "defaultValue": null,
        "description": "id to attach to the base DOM node of the list",
        "name": "id",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "aria-label to attach to the base DOM node of the list",
        "name": "aria-label",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "renderItem": {
        "defaultValue": null,
        "description": "A `List`-level custom `Item` renderer. Every `Item` within this `List`\nwithout a `Group`-level or `Item`-level custom `Item` renderer will be\nrendered using this function component.",
        "name": "renderItem",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "RenderItemFn",
          "value": [
            {
              "value": "RenderItemFn",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "renderGroup": {
        "defaultValue": null,
        "description": "A `List`-level custom `Group` renderer. Every `Group` within this `List`\nwithout a `Group`-level custom `Item` renderer will be rendered using\nthis function component.",
        "name": "renderGroup",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "(({ header, items, ...props }: GroupProps) => Element)",
          "value": [
            {
              "value": "({ header, items, ...props }: GroupProps) => Element",
              "description": "Collects related `Items` in an `ActionList`.",
              "fullComment": "Collects related `Items` in an `ActionList`.",
              "tags": {}
            }
          ]
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Style variations. Usage is discretionary.\n\n- `\"inset\"` - `List` children are offset (vertically and horizontally) from `List`’s edges\n- `\"full\"` - `List` children are flush (vertically and horizontally) with `List` edges",
        "name": "variant",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"inset\" | \"full\"",
          "value": [
            {
              "value": "\"inset\""
            },
            {
              "value": "\"full\""
            }
          ]
        }
      },
      "selectionVariant": {
        "defaultValue": null,
        "description": "For `Item`s which can be selected, whether `multiple` `Item`s or a `single` `Item` can be selected",
        "name": "selectionVariant",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"multiple\" | \"single\"",
          "value": [
            {
              "value": "\"multiple\""
            },
            {
              "value": "\"single\""
            }
          ]
        }
      },
      "showItemDividers": {
        "defaultValue": null,
        "description": "Whether to display a divider above each `Item` in this `List` when it does not follow a `Header` or `Divider`.",
        "name": "showItemDividers",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/FilteredActionList/FilteredActionListWithModernActionList.tsx",
    "description": "",
    "displayName": "FilteredActionList",
    "methods": [],
    "props": {
      "loading": {
        "defaultValue": {
          "value": false
        },
        "description": "",
        "name": "loading",
        "parent": {
          "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithModernActionList.tsx",
          "name": "FilteredActionListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithModernActionList.tsx",
            "name": "FilteredActionListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "placeholderText": {
        "defaultValue": null,
        "description": "",
        "name": "placeholderText",
        "parent": {
          "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithModernActionList.tsx",
          "name": "FilteredActionListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithModernActionList.tsx",
            "name": "FilteredActionListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "filterValue": {
        "defaultValue": null,
        "description": "",
        "name": "filterValue",
        "parent": {
          "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithModernActionList.tsx",
          "name": "FilteredActionListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithModernActionList.tsx",
            "name": "FilteredActionListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "onFilterChange": {
        "defaultValue": null,
        "description": "",
        "name": "onFilterChange",
        "parent": {
          "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithModernActionList.tsx",
          "name": "FilteredActionListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithModernActionList.tsx",
            "name": "FilteredActionListProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(value: string, e: ChangeEvent<HTMLInputElement>) => void"
        }
      },
      "textInputProps": {
        "defaultValue": null,
        "description": "",
        "name": "textInputProps",
        "parent": {
          "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithModernActionList.tsx",
          "name": "FilteredActionListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithModernActionList.tsx",
            "name": "FilteredActionListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Partial<Omit<TextInputProps, \"onChange\">>",
          "value": [
            {
              "value": "Partial<Omit<TextInputProps, \"onChange\">>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "inputRef": {
        "defaultValue": null,
        "description": "",
        "name": "inputRef",
        "parent": {
          "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithModernActionList.tsx",
          "name": "FilteredActionListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithModernActionList.tsx",
            "name": "FilteredActionListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "RefObject<HTMLInputElement>",
          "value": [
            {
              "value": "RefObject<HTMLInputElement>",
              "description": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.",
              "fullComment": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.\n@template T The type of the ref's value.\n@example ```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```",
              "tags": {
                "template": "T The type of the ref's value.",
                "example": "```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```"
              }
            }
          ]
        }
      },
      "groupMetadata": {
        "defaultValue": null,
        "description": "A collection of `Group` props (except `items`), plus a unique group identifier\nand `Group`-level custom `Item` or `Group` renderers.",
        "name": "groupMetadata",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "GroupedListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "GroupedListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "((Omit<GroupProps, \"items\"> | Omit<Partial<GroupProps> & { renderItem?: RenderItemFn; renderGroup?: (({ header, items, ...props }: GroupProps) => Element) | undefined; }, \"items\">) & { ...; })[] | undefined",
          "value": [
            {
              "value": "((Omit<GroupProps, \"items\"> | Omit<Partial<GroupProps> & { renderItem?: RenderItemFn | undefined; renderGroup?: (({ header, items, ...props }: GroupProps) => Element) | undefined; }, \"items\">) & { ...; })[]",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "items": {
        "defaultValue": null,
        "description": "A collection of `Item` props and `Item`-level custom `Item` renderers.",
        "name": "items",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": true,
        "type": {
          "name": "ItemInput[]"
        }
      },
      "role": {
        "defaultValue": null,
        "description": "The ARIA role describing the function of `List` component. `listbox` is a common value.",
        "name": "role",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "AriaRole",
          "value": [
            {
              "value": "\"article\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"list\""
            },
            {
              "value": "\"alert\""
            },
            {
              "value": "\"alertdialog\""
            },
            {
              "value": "\"application\""
            },
            {
              "value": "\"banner\""
            },
            {
              "value": "\"cell\""
            },
            {
              "value": "\"checkbox\""
            },
            {
              "value": "\"columnheader\""
            },
            {
              "value": "\"combobox\""
            },
            {
              "value": "\"complementary\""
            },
            {
              "value": "\"contentinfo\""
            },
            {
              "value": "\"definition\""
            },
            {
              "value": "\"directory\""
            },
            {
              "value": "\"document\""
            },
            {
              "value": "\"feed\""
            },
            {
              "value": "\"grid\""
            },
            {
              "value": "\"gridcell\""
            },
            {
              "value": "\"group\""
            },
            {
              "value": "\"heading\""
            },
            {
              "value": "\"listbox\""
            },
            {
              "value": "\"listitem\""
            },
            {
              "value": "\"log\""
            },
            {
              "value": "\"marquee\""
            },
            {
              "value": "\"math\""
            },
            {
              "value": "\"menubar\""
            },
            {
              "value": "\"menuitemcheckbox\""
            },
            {
              "value": "\"menuitemradio\""
            },
            {
              "value": "\"navigation\""
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"note\""
            },
            {
              "value": "\"presentation\""
            },
            {
              "value": "\"progressbar\""
            },
            {
              "value": "\"radio\""
            },
            {
              "value": "\"radiogroup\""
            },
            {
              "value": "\"region\""
            },
            {
              "value": "\"row\""
            },
            {
              "value": "\"rowgroup\""
            },
            {
              "value": "\"rowheader\""
            },
            {
              "value": "\"scrollbar\""
            },
            {
              "value": "\"searchbox\""
            },
            {
              "value": "\"separator\""
            },
            {
              "value": "\"slider\""
            },
            {
              "value": "\"spinbutton\""
            },
            {
              "value": "\"status\""
            },
            {
              "value": "\"tab\""
            },
            {
              "value": "\"tablist\""
            },
            {
              "value": "\"tabpanel\""
            },
            {
              "value": "\"term\""
            },
            {
              "value": "\"textbox\""
            },
            {
              "value": "\"timer\""
            },
            {
              "value": "\"toolbar\""
            },
            {
              "value": "\"tooltip\""
            },
            {
              "value": "\"tree\""
            },
            {
              "value": "\"treegrid\""
            },
            {
              "value": "\"treeitem\""
            }
          ]
        }
      },
      "id": {
        "defaultValue": null,
        "description": "id to attach to the base DOM node of the list",
        "name": "id",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "aria-label to attach to the base DOM node of the list",
        "name": "aria-label",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "renderItem": {
        "defaultValue": null,
        "description": "A `List`-level custom `Item` renderer. Every `Item` within this `List`\nwithout a `Group`-level or `Item`-level custom `Item` renderer will be\nrendered using this function component.",
        "name": "renderItem",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "RenderItemFn",
          "value": [
            {
              "value": "RenderItemFn",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "renderGroup": {
        "defaultValue": null,
        "description": "A `List`-level custom `Group` renderer. Every `Group` within this `List`\nwithout a `Group`-level custom `Item` renderer will be rendered using\nthis function component.",
        "name": "renderGroup",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "(({ header, items, ...props }: GroupProps) => Element)",
          "value": [
            {
              "value": "({ header, items, ...props }: GroupProps) => Element",
              "description": "Collects related `Items` in an `ActionList`.",
              "fullComment": "Collects related `Items` in an `ActionList`.",
              "tags": {}
            }
          ]
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Style variations. Usage is discretionary.\n\n- `\"inset\"` - `List` children are offset (vertically and horizontally) from `List`’s edges\n- `\"full\"` - `List` children are flush (vertically and horizontally) with `List` edges",
        "name": "variant",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"inset\" | \"full\"",
          "value": [
            {
              "value": "\"inset\""
            },
            {
              "value": "\"full\""
            }
          ]
        }
      },
      "selectionVariant": {
        "defaultValue": null,
        "description": "For `Item`s which can be selected, whether `multiple` `Item`s or a `single` `Item` can be selected",
        "name": "selectionVariant",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"multiple\" | \"single\"",
          "value": [
            {
              "value": "\"multiple\""
            },
            {
              "value": "\"single\""
            }
          ]
        }
      },
      "showItemDividers": {
        "defaultValue": null,
        "description": "Whether to display a divider above each `Item` in this `List` when it does not follow a `Header` or `Divider`.",
        "name": "showItemDividers",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "flash",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Flash/Flash.tsx",
    "description": "Flash alert informs users of successful or pending actions.",
    "displayName": "Flash",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | ... 162 more ... | FunctionComponent<...>",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<unknown, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<unknown>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Sets the background color and border",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Flash/Flash.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"default\" | \"success\" | \"danger\" | \"warning\"",
          "value": [
            {
              "value": "\"default\""
            },
            {
              "value": "\"success\""
            },
            {
              "value": "\"danger\""
            },
            {
              "value": "\"warning\""
            }
          ]
        }
      },
      "full": {
        "defaultValue": null,
        "description": "Creates a full width Flash component",
        "name": "full",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Flash/Flash.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "form_control",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/FormControl/FormControl.tsx",
    "description": "Form control displays a labelled input and, optionally, associated validation text and/or hint text.",
    "displayName": "FormControl",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "",
        "name": "children",
        "declarations": [
          {
            "fileName": "react/packages/react/src/FormControl/FormControl.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the control allows user input",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "react/packages/react/src/FormControl/FormControl.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "id": {
        "defaultValue": null,
        "description": "The unique identifier for this control. Used to associate the label, validation text, and caption text",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/FormControl/FormControl.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "required": {
        "defaultValue": null,
        "description": "If true, the user must specify a value for the input before the owning form can be submitted",
        "name": "required",
        "declarations": [
          {
            "fileName": "react/packages/react/src/FormControl/FormControl.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "layout": {
        "defaultValue": {
          "value": "vertical"
        },
        "description": "The direction the content flows.\nVertical layout is used by default, and horizontal layout is used for checkbox and radio inputs.",
        "name": "layout",
        "declarations": [
          {
            "fileName": "react/packages/react/src/FormControl/FormControl.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"vertical\" | \"horizontal\"",
          "value": [
            {
              "value": "\"vertical\""
            },
            {
              "value": "\"horizontal\""
            }
          ]
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "declarations": [
          {
            "fileName": "react/packages/react/src/FormControl/FormControl.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "FormControl.Caption",
      "primerparentid": "form_control"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/FormControl/_FormControlCaption.tsx",
    "description": "The caption with contextual information about the field.",
    "displayName": "FormControlCaption",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "Custom ID to override the ID set by FormControl's React Context",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlCaption.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/FormControl/_FormControlContext.tsx",
    "description": "This is the private/internal interface for subcomponents of `FormControl`.",
    "displayName": "useFormControlContext",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "param": "externalProps The external props passed to this component. If provided, these props will be merged with the\n`FormControl` props, with external props taking priority."
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/FormControl/_FormControlContext.tsx",
    "description": "Make any component compatible with `FormControl`'s automatic wiring up of accessibility attributes & validation by\nreading the props from this hook and merging them with the passed-in props. If used outside of `FormControl`, this\nhook has no effect.\nMake any component compatible with `FormControl`'s automatic wiring up of accessibility attributes & validation by\nreading the props from this hook and handling them / assigning them to the underlying form control. If used outside\nof `FormControl`, this hook has no effect.",
    "displayName": "useFormControlForwardedProps",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/FormControl/_FormControlContext.tsx",
    "description": "",
    "displayName": "FormControlContextProvider",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "alias": "FormControl.Label",
      "primerparentid": "form_control"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/FormControl/_FormControlLabel.tsx",
    "description": "The label for the input in the field.",
    "displayName": "FormControlLabel",
    "methods": [],
    "props": {
      "htmlFor": {
        "defaultValue": null,
        "description": "This prop may be used to override the `htmlFor` set from FormControl's React Context.\nThe unique identifier for the associated input",
        "name": "htmlFor",
        "declarations": [
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "required": {
        "defaultValue": null,
        "description": "",
        "name": "required",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "requiredText": {
        "defaultValue": {
          "value": "*"
        },
        "description": "The text to display when the field is required",
        "name": "requiredText",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "requiredIndicator": {
        "defaultValue": {
          "value": true
        },
        "description": "Whether to show or hide the required text in the accessibility tree, the required text is still shown visually.",
        "name": "requiredIndicator",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "visuallyHidden": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Whether the label should be visually hidden",
        "name": "visuallyHidden",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "id": {
        "defaultValue": null,
        "description": "When `as` prop is 'label', it may be used to override the `htmlFor` given to the <label> element by FormControl's React Context.\nWhen 'as' prop is 'legend' or 'span', it is used as the `id` for the element.",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "as": {
        "defaultValue": {
          "value": "label"
        },
        "description": "The label element can be changed to a 'legend' when it's being used to label a fieldset, or a 'span' when it's being used to label an element that is not a form input. For example: when using a FormControl to render a labeled SegementedControl, the label should be a 'span'",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"label\" | \"legend\" | \"span\"",
          "value": [
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"span\""
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "FormControl.LeadingVisual",
      "primerparentid": "form_control"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/FormControl/_FormControlLeadingVisual.tsx",
    "description": "The visual element that appears before the input in a form control.",
    "displayName": "FormControlLeadingVisual",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "FormControl.Validation",
      "primerparentid": "form_control"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/FormControl/_FormControlValidation.tsx",
    "description": "A message that provides feedback on the validation status of the field.",
    "displayName": "FormControlValidation",
    "methods": [],
    "props": {
      "variant": {
        "defaultValue": null,
        "description": "Changes the visual style to match the validation status",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlValidation.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "FormValidationStatus",
          "value": [
            {
              "value": "\"success\""
            },
            {
              "value": "\"error\""
            }
          ]
        }
      },
      "id": {
        "defaultValue": null,
        "description": "May be used to override the ID assigned by FormControl's React Context",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlValidation.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Header/Header.tsx",
    "description": "",
    "displayName": "Header",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | ... 162 more ... | FunctionComponent<...>",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<unknown, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<unknown>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "heading",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Heading/Heading.tsx",
    "description": "",
    "displayName": "Heading",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/Heading/Heading.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/Heading/Heading.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/Heading/Heading.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | (\"h1\" & (ComponentClass<unknown, any> | FunctionComponent<unknown>)) | (\"h2\" & (ComponentClass<unknown, any> | FunctionComponent<...>)) | (\"h3\" & (ComponentClass<...> | FunctionComponent<...>)) | (\"h4\" & (ComponentClass<...> | FunctionComponent<...>)) | (\"h5\" & (ComponentCla...",
          "value": [
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"h1\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"h1\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"h2\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"h2\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"h3\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"h3\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"h4\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"h4\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"h5\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"h5\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"h6\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"h6\" & FunctionComponent<unknown>"
            }
          ]
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Heading/Heading.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"small\" | \"large\" | \"medium\"",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "drafts_hidden",
      "primerstatus": "draft",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Hidden/Hidden.tsx",
    "description": "Prevents children from rendered on specified viewport widths.",
    "displayName": "Hidden",
    "methods": [],
    "props": {
      "when": {
        "defaultValue": null,
        "description": "",
        "name": "when",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Hidden/Hidden.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "Viewport | Viewport[]",
          "value": [
            {
              "value": "\"narrow\""
            },
            {
              "value": "\"wide\""
            },
            {
              "value": "\"regular\""
            },
            {
              "value": "Viewport[]",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "children": {
        "defaultValue": null,
        "description": "",
        "name": "children",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Hidden/Hidden.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "inline_message",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/InlineMessage/InlineMessage.tsx",
    "description": "Inline message is used to inform the user about the result of an action within the content.",
    "displayName": "InlineMessage",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "Specify the size of the InlineMessage",
        "name": "size",
        "declarations": [
          {
            "fileName": "react/packages/react/src/InlineMessage/InlineMessage.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"small\" | \"medium\"",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"medium\""
            }
          ]
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Specify the type of the InlineMessage",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/InlineMessage/InlineMessage.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "MessageVariant",
          "value": [
            {
              "value": "\"success\""
            },
            {
              "value": "\"critical\""
            },
            {
              "value": "\"warning\""
            },
            {
              "value": "\"unavailable\""
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "keybinding_hint",
      "primerstatus": "draft",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/KeybindingHint/KeybindingHint.tsx",
    "description": "Indicates the presence of an available keybinding.",
    "displayName": "KeybindingHint",
    "methods": [],
    "props": {
      "keys": {
        "defaultValue": null,
        "description": "The keys involved in this keybinding. These should be the full names of the keys as would\nbe returned by `KeyboardEvent.key` (e.g. \"Control\", \"Shift\", \"ArrowUp\", \"a\", etc.).\n\nCombine keys with the \"+\" character to form chords. To represent the \"+\" key, use \"Plus\".\n\nCombine chords/keys with \" \" to form sequences that should be pressed one after the other. For example, \"a b\"\nrepresents \"a then b\". To represent the \" \" key, use \"Space\".\n\nThe fake key name \"Mod\" can be used to represent \"Command\" on macOS and \"Control\" on other platforms.\n\nSee https://github.com/github/hotkey for format details.",
        "name": "keys",
        "parent": {
          "fileName": "react/packages/react/src/KeybindingHint/props.ts",
          "name": "KeybindingHintProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/KeybindingHint/props.ts",
            "name": "KeybindingHintProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "format": {
        "defaultValue": {
          "value": "\"condensed\""
        },
        "description": "Control the display format. Condensed is most useful in menus and tooltips, while\nthe full form is better for prose.",
        "name": "format",
        "parent": {
          "fileName": "react/packages/react/src/KeybindingHint/props.ts",
          "name": "KeybindingHintProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/KeybindingHint/props.ts",
            "name": "KeybindingHintProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "KeybindingHintFormat",
          "value": [
            {
              "value": "\"condensed\""
            },
            {
              "value": "\"full\""
            }
          ]
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Set to `onEmphasis` for display on emphasis colors.",
        "name": "variant",
        "parent": {
          "fileName": "react/packages/react/src/KeybindingHint/props.ts",
          "name": "KeybindingHintProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/KeybindingHint/props.ts",
            "name": "KeybindingHintProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "KeybindingHintVariant",
          "value": [
            {
              "value": "\"normal\""
            },
            {
              "value": "\"onEmphasis\""
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "label",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Label/Label.tsx",
    "description": "Use the label component to add contextual metadata to a design.",
    "displayName": "Label",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | ... 162 more ... | FunctionComponent<...>",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<unknown, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<unknown>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "The color of the label",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Label/Label.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "LabelColorOptions",
          "value": [
            {
              "value": "\"default\""
            },
            {
              "value": "\"done\""
            },
            {
              "value": "\"accent\""
            },
            {
              "value": "\"success\""
            },
            {
              "value": "\"attention\""
            },
            {
              "value": "\"severe\""
            },
            {
              "value": "\"danger\""
            },
            {
              "value": "\"sponsors\""
            },
            {
              "value": "\"primary\""
            },
            {
              "value": "\"secondary\""
            }
          ]
        }
      },
      "size": {
        "defaultValue": null,
        "description": "How large the label is rendered",
        "name": "size",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Label/Label.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "LabelSizeKeys",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "label_group",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/LabelGroup/LabelGroup.tsx",
    "description": "Use label group to add commonly used margins and other layout constraints to groups of Labels",
    "displayName": "LabelGroup",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": {
          "value": "ul"
        },
        "description": "Customize the element type of the rendered container",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/LabelGroup/LabelGroup.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ElementType<any, keyof IntrinsicElements>",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "overflowStyle": {
        "defaultValue": {
          "value": "overlay"
        },
        "description": "How hidden tokens should be shown. `'inline'` shows the hidden tokens after the visible tokens. `'overlay'` shows all tokens in an overlay that appears on top of the visible tokens.",
        "name": "overflowStyle",
        "declarations": [
          {
            "fileName": "react/packages/react/src/LabelGroup/LabelGroup.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"inline\" | \"overlay\"",
          "value": [
            {
              "value": "\"inline\""
            },
            {
              "value": "\"overlay\""
            }
          ]
        }
      },
      "visibleChildCount": {
        "defaultValue": null,
        "description": "How many tokens to show. `'auto'` truncates the tokens to fit in the parent container. Passing a number will truncate after that number tokens. If this is undefined, tokens will never be truncated.",
        "name": "visibleChildCount",
        "declarations": [
          {
            "fileName": "react/packages/react/src/LabelGroup/LabelGroup.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "number | \"auto\"",
          "value": [
            {
              "value": "number"
            },
            {
              "value": "\"auto\""
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "link",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Link/Link.tsx",
    "description": "",
    "displayName": "Link",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | ... 162 more ... | FunctionComponent<...>",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<unknown, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<unknown>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "hoverColor": {
        "defaultValue": null,
        "description": "@deprecated use CSS modules to style hover color",
        "name": "hoverColor",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Link/Link.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "muted": {
        "defaultValue": null,
        "description": "Uses a less prominent shade for Link color, and the default link shade on hover.",
        "name": "muted",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Link/Link.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "underline": {
        "defaultValue": null,
        "description": "@deprecated use `inline` to specify the type of link instead",
        "name": "underline",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Link/Link.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "inline": {
        "defaultValue": null,
        "description": "Set to true for links adjacent to text, underlining them for clear visibility and improved accessibility.",
        "name": "inline",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Link/Link.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "nav_list",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/NavList/NavList.tsx",
    "description": "Nav list renders a vertical list of navigation links.",
    "displayName": "NavList",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "NavList items",
        "name": "children",
        "declarations": [
          {
            "fileName": "react/packages/react/src/NavList/NavList.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "NavList.Item",
      "primerparentid": "nav_list"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/NavList/NavList.tsx",
    "description": "A navigation item in the NavList.",
    "displayName": "NavList.Item",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": {
          "value": "h3"
        },
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | ... 162 more ... | FunctionComponent<...>",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<unknown, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<unknown>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "children": {
        "defaultValue": null,
        "description": "",
        "name": "children",
        "declarations": [
          {
            "fileName": "react/packages/react/src/NavList/NavList.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "defaultOpen": {
        "defaultValue": null,
        "description": "Expanded to show children bty default if this is a NavList.Item with nested items.",
        "name": "defaultOpen",
        "declarations": [
          {
            "fileName": "react/packages/react/src/NavList/NavList.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "href": {
        "defaultValue": null,
        "description": "URL that this NavList.Item links to",
        "name": "href",
        "declarations": [
          {
            "fileName": "react/packages/react/src/NavList/NavList.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "aria-current": {
        "defaultValue": null,
        "description": "Indicates that this item is the current item in the NavList. See https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-current for more info.",
        "name": "aria-current",
        "declarations": [
          {
            "fileName": "react/packages/react/src/NavList/NavList.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean | \"time\" | \"step\" | \"date\" | \"true\" | \"false\" | \"page\" | \"location\"",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"step\""
            },
            {
              "value": "\"date\""
            },
            {
              "value": "\"true\""
            },
            {
              "value": "\"false\""
            },
            {
              "value": "\"page\""
            },
            {
              "value": "\"location\""
            }
          ]
        }
      },
      "inactiveText": {
        "defaultValue": null,
        "description": "Text to explain why this item is currently inactive and cannot be activated.",
        "name": "inactiveText",
        "declarations": [
          {
            "fileName": "react/packages/react/src/NavList/NavList.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "NavList.SubNav",
      "primerparentid": "nav_list"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/NavList/NavList.tsx",
    "description": "A nested list of navigation items that appears when a NavList.Item is expanded.\nNavList.SubNav must be a direct child of an Item",
    "displayName": "NavList.SubNav",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "",
        "name": "children",
        "declarations": [
          {
            "fileName": "react/packages/react/src/NavList/NavList.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/NavList/NavList.tsx",
    "description": "",
    "displayName": "NavList.LeadingVisual",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/NavList/NavList.tsx",
    "description": "",
    "displayName": "NavList.TrailingVisual",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "NavList.Divider",
      "primerparentid": "nav_list"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/NavList/NavList.tsx",
    "description": "Used to visually separate group of related NavList.Items",
    "displayName": "NavList.Divider",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "NavList.TrailingAction",
      "primerparentid": "nav_list"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/NavList/NavList.tsx",
    "description": "An action that appears after the text in a NavList.Item",
    "displayName": "NavList.TrailingAction",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": {
          "value": "h3"
        },
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/ActionList/TrailingAction.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/ActionList/TrailingAction.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/ActionList/TrailingAction.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/ActionList/TrailingAction.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/ActionList/TrailingAction.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/ActionList/TrailingAction.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"a\" | \"button\" | (\"button\" & (ComponentClass<unknown, any> | FunctionComponent<unknown>)) | (\"a\" & (ComponentClass<unknown, any> | FunctionComponent<unknown>))",
          "value": [
            {
              "value": "\"a\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"button\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"button\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"a\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"a\" & FunctionComponent<unknown>"
            }
          ]
        }
      },
      "href": {
        "defaultValue": null,
        "description": "",
        "name": "href",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/TrailingAction.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/ActionList/TrailingAction.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "",
        "name": "icon",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/TrailingAction.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ElementType<any, keyof IntrinsicElements>",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "label": {
        "defaultValue": null,
        "description": "",
        "name": "label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/TrailingAction.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {
      "alias": "NavList.Group",
      "primerparentid": "nav_list"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/NavList/NavList.tsx",
    "description": "Used to group of related NavList.Items",
    "displayName": "NavList.Group",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "A related set of NavList.Items",
        "name": "children",
        "declarations": [
          {
            "fileName": "react/packages/react/src/NavList/NavList.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "title": {
        "defaultValue": null,
        "description": "Title of the group",
        "name": "title",
        "declarations": [
          {
            "fileName": "react/packages/react/src/NavList/NavList.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "NavList.GroupHeading",
      "primerparentid": "nav_list"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/NavList/NavList.tsx",
    "description": "This is an alternative to the `title` prop on `NavList.Group`.\nIt was primarily added to allow links in group headings.",
    "displayName": "NavList.GroupHeading",
    "methods": [],
    "props": {
      "variant": {
        "defaultValue": null,
        "description": "Style variations. Usage is discretionary.\n\n- `\"filled\"` - Superimposed on a background, offset from nearby content\n- `\"subtle\"` - Relatively less offset from nearby content",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/Group.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"subtle\" | \"filled\"",
          "value": [
            {
              "value": "\"subtle\""
            },
            {
              "value": "\"filled\""
            }
          ]
        }
      },
      "auxiliaryText": {
        "defaultValue": null,
        "description": "Secondary text which provides additional information about a `Group`.",
        "name": "auxiliaryText",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/Group.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          },
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "visuallyHidden": {
        "defaultValue": null,
        "description": "",
        "name": "visuallyHidden",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/Heading.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "as": {
        "defaultValue": {
          "value": "h3"
        },
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/Group.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\"",
          "value": [
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            }
          ]
        }
      },
      "_internalBackwardCompatibleTitle": {
        "defaultValue": null,
        "description": "",
        "name": "_internalBackwardCompatibleTitle",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/Group.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "octicon",
      "primerstatus": "deprecated",
      "primera11yreviewed": "false",
      "deprecated": "Use the icon component directly from `@primer/octicons-react` instead"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Octicon/Octicon.tsx",
    "description": "Renders an icon from the [Primer Octicons](https://primer.style/octicons/) library.",
    "displayName": "Octicon",
    "methods": [],
    "props": {
      "color": {
        "defaultValue": null,
        "description": "Sets an override color for the Octicon. Compatible with colors from the [Primer color system](https://primer.style/primitives/colors).",
        "name": "color",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Octicon/Octicon.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Checks the input by default in uncontrolled modeName of the [Octicon component](https://primer.style/octicons/) used in the",
        "name": "icon",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Octicon/Octicon.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "ElementType<any, keyof IntrinsicElements>",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Overlay/Overlay.tsx",
    "description": "",
    "displayName": "StyledOverlay",
    "methods": [],
    "props": {
      "style": {
        "defaultValue": null,
        "description": "",
        "name": "style",
        "parent": {
          "fileName": "react/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          },
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "CSSProperties",
          "value": [
            {
              "value": "CSSProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "height": {
        "defaultValue": null,
        "description": "",
        "name": "height",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"small\" | \"initial\" | \"large\" | \"medium\" | \"auto\" | \"fit-content\" | \"xsmall\" | \"xlarge\"",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fit-content\""
            },
            {
              "value": "\"xsmall\""
            },
            {
              "value": "\"xlarge\""
            }
          ]
        }
      },
      "width": {
        "defaultValue": null,
        "description": "",
        "name": "width",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"small\" | \"large\" | \"medium\" | \"auto\" | \"xlarge\" | \"xxlarge\"",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"xlarge\""
            },
            {
              "value": "\"xxlarge\""
            }
          ]
        }
      },
      "overflow": {
        "defaultValue": null,
        "description": "",
        "name": "overflow",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"hidden\" | \"scroll\" | \"auto\" | \"visible\"",
          "value": [
            {
              "value": "\"hidden\""
            },
            {
              "value": "\"scroll\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"visible\""
            }
          ]
        }
      },
      "visibility": {
        "defaultValue": null,
        "description": "",
        "name": "visibility",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"hidden\" | \"visible\"",
          "value": [
            {
              "value": "\"hidden\""
            },
            {
              "value": "\"visible\""
            }
          ]
        }
      },
      "maxHeight": {
        "defaultValue": null,
        "description": "",
        "name": "maxHeight",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"small\" | \"large\" | \"medium\" | \"fit-content\" | \"xsmall\" | \"xlarge\"",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            },
            {
              "value": "\"fit-content\""
            },
            {
              "value": "\"xsmall\""
            },
            {
              "value": "\"xlarge\""
            }
          ]
        }
      },
      "maxWidth": {
        "defaultValue": null,
        "description": "",
        "name": "maxWidth",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"small\" | \"large\" | \"medium\" | \"xlarge\" | \"xxlarge\"",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            },
            {
              "value": "\"xlarge\""
            },
            {
              "value": "\"xxlarge\""
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "anchorSide": {
        "defaultValue": null,
        "description": "",
        "name": "anchorSide",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "AnchorSide",
          "value": [
            {
              "value": "\"inside-top\""
            },
            {
              "value": "\"inside-bottom\""
            },
            {
              "value": "\"inside-left\""
            },
            {
              "value": "\"inside-right\""
            },
            {
              "value": "\"inside-center\""
            },
            {
              "value": "\"outside-top\""
            },
            {
              "value": "\"outside-bottom\""
            },
            {
              "value": "\"outside-left\""
            },
            {
              "value": "\"outside-right\""
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "overlay",
      "primerstatus": "alpha",
      "primera11yreviewed": "false",
      "param": "ignoreClickRefs Optional. An array of ref objects to ignore clicks on in the `onOutsideClick` behavior. This is often used to ignore clicking on the element that toggles the open/closed state for the `Overlay` to prevent the `Overlay` from being toggled twice.\ninitialFocusRef Optional. Ref for the element to focus when the `Overlay` is opened. If nothing is provided, the first focusable element in the `Overlay` body is focused.\nreturnFocusRef Required. Ref for the element to focus when the `Overlay` is closed.\nonClickOutside Required. Function to call when clicking outside of the `Overlay`. Typically this function removes the Overlay.\nonEscape Required. Function to call when user presses `Escape`. Typically this function removes the Overlay.\nwidth Sets the width of the `Overlay`, pick from our set list of widths, or pass `auto` to automatically set the width based on the content of the `Overlay`. `small` corresponds to `256px`, `medium` corresponds to `320px`, `large` corresponds to `480px`, `xlarge` corresponds to `640px`, `xxlarge` corresponds to `960px`.\nheight Sets the height of the `Overlay`, pick from our set list of heights, or pass `auto` to automatically set the height based on the content of the `Overlay`, or pass `initial` to set the height based on the initial content of the `Overlay` (i.e. ignoring content changes). `xsmall` corresponds to `192px`, `small` corresponds to `256px`, `medium` corresponds to `320px`, `large` corresponds to `432px`, `xlarge` corresponds to `600px`.\nmaxHeight Sets the maximum height of the `Overlay`, pick from our set list of heights. `xsmall` corresponds to `192px`, `small` corresponds to `256px`, `medium` corresponds to `320px`, `large` corresponds to `432px`, `xlarge` corresponds to `600px`.\nanchorSide If provided, the Overlay will slide into position from the side of the anchor with a brief animation\ntop Optional. Vertical top position of the overlay, relative to its closest positioned ancestor (often its `Portal`).\nleft Optional. Horizontal left position of the overlay, relative to its closest positioned ancestor (often its `Portal`).\nright Optional. Horizontal right position of the overlay, relative to its closest positioned ancestor (often its `Portal`).\nbottom Optional. Vertical bottom position of the overlay, relative to its closest positioned ancestor (often its `Portal`).\nposition Optional. Sets how an element is positioned in a document. Defaults to `absolute` positioning.\nportalContainerName Optional. The name of the portal container to render the Overlay into.\npreventOverflow Optional. The Overlay width will be adjusted responsively if there is not enough space to display the Overlay. If `preventOverflow` is `true`, the width of the `Overlay` will not be adjusted."
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Overlay/Overlay.tsx",
    "description": "An `Overlay` is a flexible floating surface, used to display transient content such as menus,\nselection options, dialogs, and more. Overlays use shadows to express elevation. The `Overlay`\ncomponent handles all behaviors needed by overlay UIs as well as the common styles that all overlays * should have.",
    "displayName": "Overlay",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | ... 162 more ... | FunctionComponent<...>",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<unknown, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<unknown>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "style": {
        "defaultValue": null,
        "description": "",
        "name": "style",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "CSSProperties",
          "value": [
            {
              "value": "CSSProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "height": {
        "defaultValue": null,
        "description": "",
        "name": "height",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"small\" | \"initial\" | \"large\" | \"medium\" | \"auto\" | \"fit-content\" | \"xsmall\" | \"xlarge\"",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"fit-content\""
            },
            {
              "value": "\"xsmall\""
            },
            {
              "value": "\"xlarge\""
            }
          ]
        }
      },
      "width": {
        "defaultValue": null,
        "description": "",
        "name": "width",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"small\" | \"large\" | \"medium\" | \"auto\" | \"xlarge\" | \"xxlarge\"",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"xlarge\""
            },
            {
              "value": "\"xxlarge\""
            }
          ]
        }
      },
      "overflow": {
        "defaultValue": null,
        "description": "",
        "name": "overflow",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"hidden\" | \"scroll\" | \"auto\" | \"visible\"",
          "value": [
            {
              "value": "\"hidden\""
            },
            {
              "value": "\"scroll\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"visible\""
            }
          ]
        }
      },
      "maxHeight": {
        "defaultValue": null,
        "description": "",
        "name": "maxHeight",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"small\" | \"large\" | \"medium\" | \"fit-content\" | \"xsmall\" | \"xlarge\"",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            },
            {
              "value": "\"fit-content\""
            },
            {
              "value": "\"xsmall\""
            },
            {
              "value": "\"xlarge\""
            }
          ]
        }
      },
      "maxWidth": {
        "defaultValue": null,
        "description": "",
        "name": "maxWidth",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"small\" | \"large\" | \"medium\" | \"xlarge\" | \"xxlarge\"",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            },
            {
              "value": "\"xlarge\""
            },
            {
              "value": "\"xxlarge\""
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "anchorSide": {
        "defaultValue": null,
        "description": "",
        "name": "anchorSide",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "AnchorSide",
          "value": [
            {
              "value": "\"inside-top\""
            },
            {
              "value": "\"inside-bottom\""
            },
            {
              "value": "\"inside-left\""
            },
            {
              "value": "\"inside-right\""
            },
            {
              "value": "\"inside-center\""
            },
            {
              "value": "\"outside-top\""
            },
            {
              "value": "\"outside-bottom\""
            },
            {
              "value": "\"outside-left\""
            },
            {
              "value": "\"outside-right\""
            }
          ]
        }
      },
      "ignoreClickRefs": {
        "defaultValue": null,
        "description": "",
        "name": "ignoreClickRefs",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "RefObject<HTMLElement>[]",
          "value": [
            {
              "value": "RefObject<HTMLElement>[]",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "initialFocusRef": {
        "defaultValue": null,
        "description": "",
        "name": "initialFocusRef",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "RefObject<HTMLElement>",
          "value": [
            {
              "value": "RefObject<HTMLElement>",
              "description": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.",
              "fullComment": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.\n@template T The type of the ref's value.\n@example ```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```",
              "tags": {
                "template": "T The type of the ref's value.",
                "example": "```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```"
              }
            }
          ]
        }
      },
      "returnFocusRef": {
        "defaultValue": null,
        "description": "",
        "name": "returnFocusRef",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "RefObject<HTMLElement>"
        }
      },
      "onClickOutside": {
        "defaultValue": null,
        "description": "",
        "name": "onClickOutside",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "(e: TouchOrMouseEvent) => void"
        }
      },
      "onEscape": {
        "defaultValue": null,
        "description": "",
        "name": "onEscape",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "(e: KeyboardEvent) => void"
        }
      },
      "visibility": {
        "defaultValue": null,
        "description": "",
        "name": "visibility",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"hidden\" | \"visible\"",
          "value": [
            {
              "value": "\"hidden\""
            },
            {
              "value": "\"visible\""
            }
          ]
        }
      },
      "data-test-id": {
        "defaultValue": null,
        "description": "",
        "name": "data-test-id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "unknown"
        }
      },
      "position": {
        "defaultValue": null,
        "description": "",
        "name": "position",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Position",
          "value": [
            {
              "value": "\"-moz-initial\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"revert\""
            },
            {
              "value": "\"revert-layer\""
            },
            {
              "value": "\"unset\""
            },
            {
              "value": "\"fixed\""
            },
            {
              "value": "\"-webkit-sticky\""
            },
            {
              "value": "\"absolute\""
            },
            {
              "value": "\"relative\""
            },
            {
              "value": "\"static\""
            },
            {
              "value": "\"sticky\""
            }
          ]
        }
      },
      "top": {
        "defaultValue": null,
        "description": "",
        "name": "top",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Top<string | number>",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "string & {}"
            }
          ]
        }
      },
      "left": {
        "defaultValue": null,
        "description": "",
        "name": "left",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Left<string | number>",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "string & {}"
            }
          ]
        }
      },
      "right": {
        "defaultValue": null,
        "description": "",
        "name": "right",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Right<string | number>",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "string & {}"
            }
          ]
        }
      },
      "bottom": {
        "defaultValue": null,
        "description": "",
        "name": "bottom",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Bottom<string | number>",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "string & {}"
            }
          ]
        }
      },
      "portalContainerName": {
        "defaultValue": null,
        "description": "",
        "name": "portalContainerName",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "preventFocusOnOpen": {
        "defaultValue": null,
        "description": "",
        "name": "preventFocusOnOpen",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "role": {
        "defaultValue": null,
        "description": "",
        "name": "role",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "AriaRole",
          "value": [
            {
              "value": "\"article\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"list\""
            },
            {
              "value": "\"alert\""
            },
            {
              "value": "\"alertdialog\""
            },
            {
              "value": "\"application\""
            },
            {
              "value": "\"banner\""
            },
            {
              "value": "\"cell\""
            },
            {
              "value": "\"checkbox\""
            },
            {
              "value": "\"columnheader\""
            },
            {
              "value": "\"combobox\""
            },
            {
              "value": "\"complementary\""
            },
            {
              "value": "\"contentinfo\""
            },
            {
              "value": "\"definition\""
            },
            {
              "value": "\"directory\""
            },
            {
              "value": "\"document\""
            },
            {
              "value": "\"feed\""
            },
            {
              "value": "\"grid\""
            },
            {
              "value": "\"gridcell\""
            },
            {
              "value": "\"group\""
            },
            {
              "value": "\"heading\""
            },
            {
              "value": "\"listbox\""
            },
            {
              "value": "\"listitem\""
            },
            {
              "value": "\"log\""
            },
            {
              "value": "\"marquee\""
            },
            {
              "value": "\"math\""
            },
            {
              "value": "\"menubar\""
            },
            {
              "value": "\"menuitemcheckbox\""
            },
            {
              "value": "\"menuitemradio\""
            },
            {
              "value": "\"navigation\""
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"note\""
            },
            {
              "value": "\"presentation\""
            },
            {
              "value": "\"progressbar\""
            },
            {
              "value": "\"radio\""
            },
            {
              "value": "\"radiogroup\""
            },
            {
              "value": "\"region\""
            },
            {
              "value": "\"row\""
            },
            {
              "value": "\"rowgroup\""
            },
            {
              "value": "\"rowheader\""
            },
            {
              "value": "\"scrollbar\""
            },
            {
              "value": "\"searchbox\""
            },
            {
              "value": "\"separator\""
            },
            {
              "value": "\"slider\""
            },
            {
              "value": "\"spinbutton\""
            },
            {
              "value": "\"status\""
            },
            {
              "value": "\"tab\""
            },
            {
              "value": "\"tablist\""
            },
            {
              "value": "\"tabpanel\""
            },
            {
              "value": "\"term\""
            },
            {
              "value": "\"textbox\""
            },
            {
              "value": "\"timer\""
            },
            {
              "value": "\"toolbar\""
            },
            {
              "value": "\"tooltip\""
            },
            {
              "value": "\"tree\""
            },
            {
              "value": "\"treegrid\""
            },
            {
              "value": "\"treeitem\""
            }
          ]
        }
      },
      "children": {
        "defaultValue": null,
        "description": "",
        "name": "children",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "preventOverflow": {
        "defaultValue": null,
        "description": "",
        "name": "preventOverflow",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "PageHeader",
      "primerid": "drafts_page_header",
      "primerstatus": "draft",
      "primera11yreviewed": "true"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/PageHeader/PageHeader.tsx",
    "description": "Page header determines the top-level headings of a UI.",
    "displayName": "PageHeader",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": {
          "value": "h2"
        },
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/PageHeader/PageHeader.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/PageHeader/PageHeader.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/PageHeader/PageHeader.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | ... 704 more ... | (\"tab-container\" & (ComponentClass<...> | FunctionComponent<...>))",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "\"h1\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"h1\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"h2\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"h2\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"h3\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"h3\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"h4\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"h4\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"h5\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"h5\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"h6\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"h6\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"button\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"button\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"a\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"a\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"symbol\" & ComponentClass<any, any>"
            },
            {
              "value": "\"symbol\" & FunctionComponent<any>"
            },
            {
              "value": "\"object\" & ComponentClass<any, any>"
            },
            {
              "value": "\"object\" & FunctionComponent<any>"
            },
            {
              "value": "\"a\" & ComponentClass<any, any>"
            },
            {
              "value": "\"a\" & FunctionComponent<any>"
            },
            {
              "value": "\"abbr\" & ComponentClass<any, any>"
            },
            {
              "value": "\"abbr\" & FunctionComponent<any>"
            },
            {
              "value": "\"address\" & ComponentClass<any, any>"
            },
            {
              "value": "\"address\" & FunctionComponent<any>"
            },
            {
              "value": "\"area\" & ComponentClass<any, any>"
            },
            {
              "value": "\"area\" & FunctionComponent<any>"
            },
            {
              "value": "\"article\" & ComponentClass<any, any>"
            },
            {
              "value": "\"article\" & FunctionComponent<any>"
            },
            {
              "value": "\"aside\" & ComponentClass<any, any>"
            },
            {
              "value": "\"aside\" & FunctionComponent<any>"
            },
            {
              "value": "\"audio\" & ComponentClass<any, any>"
            },
            {
              "value": "\"audio\" & FunctionComponent<any>"
            },
            {
              "value": "\"b\" & ComponentClass<any, any>"
            },
            {
              "value": "\"b\" & FunctionComponent<any>"
            },
            {
              "value": "\"base\" & ComponentClass<any, any>"
            },
            {
              "value": "\"base\" & FunctionComponent<any>"
            },
            {
              "value": "\"bdi\" & ComponentClass<any, any>"
            },
            {
              "value": "\"bdi\" & FunctionComponent<any>"
            },
            {
              "value": "\"bdo\" & ComponentClass<any, any>"
            },
            {
              "value": "\"bdo\" & FunctionComponent<any>"
            },
            {
              "value": "\"big\" & ComponentClass<any, any>"
            },
            {
              "value": "\"big\" & FunctionComponent<any>"
            },
            {
              "value": "\"blockquote\" & ComponentClass<any, any>"
            },
            {
              "value": "\"blockquote\" & FunctionComponent<any>"
            },
            {
              "value": "\"body\" & ComponentClass<any, any>"
            },
            {
              "value": "\"body\" & FunctionComponent<any>"
            },
            {
              "value": "\"br\" & ComponentClass<any, any>"
            },
            {
              "value": "\"br\" & FunctionComponent<any>"
            },
            {
              "value": "\"button\" & ComponentClass<any, any>"
            },
            {
              "value": "\"button\" & FunctionComponent<any>"
            },
            {
              "value": "\"canvas\" & ComponentClass<any, any>"
            },
            {
              "value": "\"canvas\" & FunctionComponent<any>"
            },
            {
              "value": "\"caption\" & ComponentClass<any, any>"
            },
            {
              "value": "\"caption\" & FunctionComponent<any>"
            },
            {
              "value": "\"center\" & ComponentClass<any, any>"
            },
            {
              "value": "\"center\" & FunctionComponent<any>"
            },
            {
              "value": "\"cite\" & ComponentClass<any, any>"
            },
            {
              "value": "\"cite\" & FunctionComponent<any>"
            },
            {
              "value": "\"code\" & ComponentClass<any, any>"
            },
            {
              "value": "\"code\" & FunctionComponent<any>"
            },
            {
              "value": "\"col\" & ComponentClass<any, any>"
            },
            {
              "value": "\"col\" & FunctionComponent<any>"
            },
            {
              "value": "\"colgroup\" & ComponentClass<any, any>"
            },
            {
              "value": "\"colgroup\" & FunctionComponent<any>"
            },
            {
              "value": "\"data\" & ComponentClass<any, any>"
            },
            {
              "value": "\"data\" & FunctionComponent<any>"
            },
            {
              "value": "\"datalist\" & ComponentClass<any, any>"
            },
            {
              "value": "\"datalist\" & FunctionComponent<any>"
            },
            {
              "value": "\"dd\" & ComponentClass<any, any>"
            },
            {
              "value": "\"dd\" & FunctionComponent<any>"
            },
            {
              "value": "\"del\" & ComponentClass<any, any>"
            },
            {
              "value": "\"del\" & FunctionComponent<any>"
            },
            {
              "value": "\"details\" & ComponentClass<any, any>"
            },
            {
              "value": "\"details\" & FunctionComponent<any>"
            },
            {
              "value": "\"dfn\" & ComponentClass<any, any>"
            },
            {
              "value": "\"dfn\" & FunctionComponent<any>"
            },
            {
              "value": "\"dialog\" & ComponentClass<any, any>"
            },
            {
              "value": "\"dialog\" & FunctionComponent<any>"
            },
            {
              "value": "\"div\" & ComponentClass<any, any>"
            },
            {
              "value": "\"div\" & FunctionComponent<any>"
            },
            {
              "value": "\"dl\" & ComponentClass<any, any>"
            },
            {
              "value": "\"dl\" & FunctionComponent<any>"
            },
            {
              "value": "\"dt\" & ComponentClass<any, any>"
            },
            {
              "value": "\"dt\" & FunctionComponent<any>"
            },
            {
              "value": "\"em\" & ComponentClass<any, any>"
            },
            {
              "value": "\"em\" & FunctionComponent<any>"
            },
            {
              "value": "\"embed\" & ComponentClass<any, any>"
            },
            {
              "value": "\"embed\" & FunctionComponent<any>"
            },
            {
              "value": "\"fieldset\" & ComponentClass<any, any>"
            },
            {
              "value": "\"fieldset\" & FunctionComponent<any>"
            },
            {
              "value": "\"figcaption\" & ComponentClass<any, any>"
            },
            {
              "value": "\"figcaption\" & FunctionComponent<any>"
            },
            {
              "value": "\"figure\" & ComponentClass<any, any>"
            },
            {
              "value": "\"figure\" & FunctionComponent<any>"
            },
            {
              "value": "\"footer\" & ComponentClass<any, any>"
            },
            {
              "value": "\"footer\" & FunctionComponent<any>"
            },
            {
              "value": "\"form\" & ComponentClass<any, any>"
            },
            {
              "value": "\"form\" & FunctionComponent<any>"
            },
            {
              "value": "\"h1\" & ComponentClass<any, any>"
            },
            {
              "value": "\"h1\" & FunctionComponent<any>"
            },
            {
              "value": "\"h2\" & ComponentClass<any, any>"
            },
            {
              "value": "\"h2\" & FunctionComponent<any>"
            },
            {
              "value": "\"h3\" & ComponentClass<any, any>"
            },
            {
              "value": "\"h3\" & FunctionComponent<any>"
            },
            {
              "value": "\"h4\" & ComponentClass<any, any>"
            },
            {
              "value": "\"h4\" & FunctionComponent<any>"
            },
            {
              "value": "\"h5\" & ComponentClass<any, any>"
            },
            {
              "value": "\"h5\" & FunctionComponent<any>"
            },
            {
              "value": "\"h6\" & ComponentClass<any, any>"
            },
            {
              "value": "\"h6\" & FunctionComponent<any>"
            },
            {
              "value": "\"head\" & ComponentClass<any, any>"
            },
            {
              "value": "\"head\" & FunctionComponent<any>"
            },
            {
              "value": "\"header\" & ComponentClass<any, any>"
            },
            {
              "value": "\"header\" & FunctionComponent<any>"
            },
            {
              "value": "\"hgroup\" & ComponentClass<any, any>"
            },
            {
              "value": "\"hgroup\" & FunctionComponent<any>"
            },
            {
              "value": "\"hr\" & ComponentClass<any, any>"
            },
            {
              "value": "\"hr\" & FunctionComponent<any>"
            },
            {
              "value": "\"html\" & ComponentClass<any, any>"
            },
            {
              "value": "\"html\" & FunctionComponent<any>"
            },
            {
              "value": "\"i\" & ComponentClass<any, any>"
            },
            {
              "value": "\"i\" & FunctionComponent<any>"
            },
            {
              "value": "\"iframe\" & ComponentClass<any, any>"
            },
            {
              "value": "\"iframe\" & FunctionComponent<any>"
            },
            {
              "value": "\"img\" & ComponentClass<any, any>"
            },
            {
              "value": "\"img\" & FunctionComponent<any>"
            },
            {
              "value": "\"input\" & ComponentClass<any, any>"
            },
            {
              "value": "\"input\" & FunctionComponent<any>"
            },
            {
              "value": "\"ins\" & ComponentClass<any, any>"
            },
            {
              "value": "\"ins\" & FunctionComponent<any>"
            },
            {
              "value": "\"kbd\" & ComponentClass<any, any>"
            },
            {
              "value": "\"kbd\" & FunctionComponent<any>"
            },
            {
              "value": "\"keygen\" & ComponentClass<any, any>"
            },
            {
              "value": "\"keygen\" & FunctionComponent<any>"
            },
            {
              "value": "\"label\" & ComponentClass<any, any>"
            },
            {
              "value": "\"label\" & FunctionComponent<any>"
            },
            {
              "value": "\"legend\" & ComponentClass<any, any>"
            },
            {
              "value": "\"legend\" & FunctionComponent<any>"
            },
            {
              "value": "\"li\" & ComponentClass<any, any>"
            },
            {
              "value": "\"li\" & FunctionComponent<any>"
            },
            {
              "value": "\"link\" & ComponentClass<any, any>"
            },
            {
              "value": "\"link\" & FunctionComponent<any>"
            },
            {
              "value": "\"main\" & ComponentClass<any, any>"
            },
            {
              "value": "\"main\" & FunctionComponent<any>"
            },
            {
              "value": "\"map\" & ComponentClass<any, any>"
            },
            {
              "value": "\"map\" & FunctionComponent<any>"
            },
            {
              "value": "\"mark\" & ComponentClass<any, any>"
            },
            {
              "value": "\"mark\" & FunctionComponent<any>"
            },
            {
              "value": "\"menu\" & ComponentClass<any, any>"
            },
            {
              "value": "\"menu\" & FunctionComponent<any>"
            },
            {
              "value": "\"menuitem\" & ComponentClass<any, any>"
            },
            {
              "value": "\"menuitem\" & FunctionComponent<any>"
            },
            {
              "value": "\"meta\" & ComponentClass<any, any>"
            },
            {
              "value": "\"meta\" & FunctionComponent<any>"
            },
            {
              "value": "\"meter\" & ComponentClass<any, any>"
            },
            {
              "value": "\"meter\" & FunctionComponent<any>"
            },
            {
              "value": "\"nav\" & ComponentClass<any, any>"
            },
            {
              "value": "\"nav\" & FunctionComponent<any>"
            },
            {
              "value": "\"noindex\" & ComponentClass<any, any>"
            },
            {
              "value": "\"noindex\" & FunctionComponent<any>"
            },
            {
              "value": "\"noscript\" & ComponentClass<any, any>"
            },
            {
              "value": "\"noscript\" & FunctionComponent<any>"
            },
            {
              "value": "\"ol\" & ComponentClass<any, any>"
            },
            {
              "value": "\"ol\" & FunctionComponent<any>"
            },
            {
              "value": "\"optgroup\" & ComponentClass<any, any>"
            },
            {
              "value": "\"optgroup\" & FunctionComponent<any>"
            },
            {
              "value": "\"option\" & ComponentClass<any, any>"
            },
            {
              "value": "\"option\" & FunctionComponent<any>"
            },
            {
              "value": "\"output\" & ComponentClass<any, any>"
            },
            {
              "value": "\"output\" & FunctionComponent<any>"
            },
            {
              "value": "\"p\" & ComponentClass<any, any>"
            },
            {
              "value": "\"p\" & FunctionComponent<any>"
            },
            {
              "value": "\"param\" & ComponentClass<any, any>"
            },
            {
              "value": "\"param\" & FunctionComponent<any>"
            },
            {
              "value": "\"picture\" & ComponentClass<any, any>"
            },
            {
              "value": "\"picture\" & FunctionComponent<any>"
            },
            {
              "value": "\"pre\" & ComponentClass<any, any>"
            },
            {
              "value": "\"pre\" & FunctionComponent<any>"
            },
            {
              "value": "\"progress\" & ComponentClass<any, any>"
            },
            {
              "value": "\"progress\" & FunctionComponent<any>"
            },
            {
              "value": "\"q\" & ComponentClass<any, any>"
            },
            {
              "value": "\"q\" & FunctionComponent<any>"
            },
            {
              "value": "\"rp\" & ComponentClass<any, any>"
            },
            {
              "value": "\"rp\" & FunctionComponent<any>"
            },
            {
              "value": "\"rt\" & ComponentClass<any, any>"
            },
            {
              "value": "\"rt\" & FunctionComponent<any>"
            },
            {
              "value": "\"ruby\" & ComponentClass<any, any>"
            },
            {
              "value": "\"ruby\" & FunctionComponent<any>"
            },
            {
              "value": "\"s\" & ComponentClass<any, any>"
            },
            {
              "value": "\"s\" & FunctionComponent<any>"
            },
            {
              "value": "\"samp\" & ComponentClass<any, any>"
            },
            {
              "value": "\"samp\" & FunctionComponent<any>"
            },
            {
              "value": "\"search\" & ComponentClass<any, any>"
            },
            {
              "value": "\"search\" & FunctionComponent<any>"
            },
            {
              "value": "\"slot\" & ComponentClass<any, any>"
            },
            {
              "value": "\"slot\" & FunctionComponent<any>"
            },
            {
              "value": "\"script\" & ComponentClass<any, any>"
            },
            {
              "value": "\"script\" & FunctionComponent<any>"
            },
            {
              "value": "\"section\" & ComponentClass<any, any>"
            },
            {
              "value": "\"section\" & FunctionComponent<any>"
            },
            {
              "value": "\"select\" & ComponentClass<any, any>"
            },
            {
              "value": "\"select\" & FunctionComponent<any>"
            },
            {
              "value": "\"small\" & ComponentClass<any, any>"
            },
            {
              "value": "\"small\" & FunctionComponent<any>"
            },
            {
              "value": "\"source\" & ComponentClass<any, any>"
            },
            {
              "value": "\"source\" & FunctionComponent<any>"
            },
            {
              "value": "\"span\" & ComponentClass<any, any>"
            },
            {
              "value": "\"span\" & FunctionComponent<any>"
            },
            {
              "value": "\"strong\" & ComponentClass<any, any>"
            },
            {
              "value": "\"strong\" & FunctionComponent<any>"
            },
            {
              "value": "\"style\" & ComponentClass<any, any>"
            },
            {
              "value": "\"style\" & FunctionComponent<any>"
            },
            {
              "value": "\"sub\" & ComponentClass<any, any>"
            },
            {
              "value": "\"sub\" & FunctionComponent<any>"
            },
            {
              "value": "\"summary\" & ComponentClass<any, any>"
            },
            {
              "value": "\"summary\" & FunctionComponent<any>"
            },
            {
              "value": "\"sup\" & ComponentClass<any, any>"
            },
            {
              "value": "\"sup\" & FunctionComponent<any>"
            },
            {
              "value": "\"table\" & ComponentClass<any, any>"
            },
            {
              "value": "\"table\" & FunctionComponent<any>"
            },
            {
              "value": "\"template\" & ComponentClass<any, any>"
            },
            {
              "value": "\"template\" & FunctionComponent<any>"
            },
            {
              "value": "\"tbody\" & ComponentClass<any, any>"
            },
            {
              "value": "\"tbody\" & FunctionComponent<any>"
            },
            {
              "value": "\"td\" & ComponentClass<any, any>"
            },
            {
              "value": "\"td\" & FunctionComponent<any>"
            },
            {
              "value": "\"textarea\" & ComponentClass<any, any>"
            },
            {
              "value": "\"textarea\" & FunctionComponent<any>"
            },
            {
              "value": "\"tfoot\" & ComponentClass<any, any>"
            },
            {
              "value": "\"tfoot\" & FunctionComponent<any>"
            },
            {
              "value": "\"th\" & ComponentClass<any, any>"
            },
            {
              "value": "\"th\" & FunctionComponent<any>"
            },
            {
              "value": "\"thead\" & ComponentClass<any, any>"
            },
            {
              "value": "\"thead\" & FunctionComponent<any>"
            },
            {
              "value": "\"time\" & ComponentClass<any, any>"
            },
            {
              "value": "\"time\" & FunctionComponent<any>"
            },
            {
              "value": "\"title\" & ComponentClass<any, any>"
            },
            {
              "value": "\"title\" & FunctionComponent<any>"
            },
            {
              "value": "\"tr\" & ComponentClass<any, any>"
            },
            {
              "value": "\"tr\" & FunctionComponent<any>"
            },
            {
              "value": "\"track\" & ComponentClass<any, any>"
            },
            {
              "value": "\"track\" & FunctionComponent<any>"
            },
            {
              "value": "\"u\" & ComponentClass<any, any>"
            },
            {
              "value": "\"u\" & FunctionComponent<any>"
            },
            {
              "value": "\"ul\" & ComponentClass<any, any>"
            },
            {
              "value": "\"ul\" & FunctionComponent<any>"
            },
            {
              "value": "\"var\" & ComponentClass<any, any>"
            },
            {
              "value": "\"var\" & FunctionComponent<any>"
            },
            {
              "value": "\"video\" & ComponentClass<any, any>"
            },
            {
              "value": "\"video\" & FunctionComponent<any>"
            },
            {
              "value": "\"wbr\" & ComponentClass<any, any>"
            },
            {
              "value": "\"wbr\" & FunctionComponent<any>"
            },
            {
              "value": "\"webview\" & ComponentClass<any, any>"
            },
            {
              "value": "\"webview\" & FunctionComponent<any>"
            },
            {
              "value": "\"svg\" & ComponentClass<any, any>"
            },
            {
              "value": "\"svg\" & FunctionComponent<any>"
            },
            {
              "value": "\"animate\" & ComponentClass<any, any>"
            },
            {
              "value": "\"animate\" & FunctionComponent<any>"
            },
            {
              "value": "\"animateMotion\" & ComponentClass<any, any>"
            },
            {
              "value": "\"animateMotion\" & FunctionComponent<any>"
            },
            {
              "value": "\"animateTransform\" & ComponentClass<any, any>"
            },
            {
              "value": "\"animateTransform\" & FunctionComponent<any>"
            },
            {
              "value": "\"circle\" & ComponentClass<any, any>"
            },
            {
              "value": "\"circle\" & FunctionComponent<any>"
            },
            {
              "value": "\"clipPath\" & ComponentClass<any, any>"
            },
            {
              "value": "\"clipPath\" & FunctionComponent<any>"
            },
            {
              "value": "\"defs\" & ComponentClass<any, any>"
            },
            {
              "value": "\"defs\" & FunctionComponent<any>"
            },
            {
              "value": "\"desc\" & ComponentClass<any, any>"
            },
            {
              "value": "\"desc\" & FunctionComponent<any>"
            },
            {
              "value": "\"ellipse\" & ComponentClass<any, any>"
            },
            {
              "value": "\"ellipse\" & FunctionComponent<any>"
            },
            {
              "value": "\"feBlend\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feBlend\" & FunctionComponent<any>"
            },
            {
              "value": "\"feColorMatrix\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feColorMatrix\" & FunctionComponent<any>"
            },
            {
              "value": "\"feComponentTransfer\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feComponentTransfer\" & FunctionComponent<any>"
            },
            {
              "value": "\"feComposite\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feComposite\" & FunctionComponent<any>"
            },
            {
              "value": "\"feConvolveMatrix\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feConvolveMatrix\" & FunctionComponent<any>"
            },
            {
              "value": "\"feDiffuseLighting\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feDiffuseLighting\" & FunctionComponent<any>"
            },
            {
              "value": "\"feDisplacementMap\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feDisplacementMap\" & FunctionComponent<any>"
            },
            {
              "value": "\"feDistantLight\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feDistantLight\" & FunctionComponent<any>"
            },
            {
              "value": "\"feDropShadow\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feDropShadow\" & FunctionComponent<any>"
            },
            {
              "value": "\"feFlood\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feFlood\" & FunctionComponent<any>"
            },
            {
              "value": "\"feFuncA\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feFuncA\" & FunctionComponent<any>"
            },
            {
              "value": "\"feFuncB\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feFuncB\" & FunctionComponent<any>"
            },
            {
              "value": "\"feFuncG\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feFuncG\" & FunctionComponent<any>"
            },
            {
              "value": "\"feFuncR\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feFuncR\" & FunctionComponent<any>"
            },
            {
              "value": "\"feGaussianBlur\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feGaussianBlur\" & FunctionComponent<any>"
            },
            {
              "value": "\"feImage\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feImage\" & FunctionComponent<any>"
            },
            {
              "value": "\"feMerge\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feMerge\" & FunctionComponent<any>"
            },
            {
              "value": "\"feMergeNode\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feMergeNode\" & FunctionComponent<any>"
            },
            {
              "value": "\"feMorphology\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feMorphology\" & FunctionComponent<any>"
            },
            {
              "value": "\"feOffset\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feOffset\" & FunctionComponent<any>"
            },
            {
              "value": "\"fePointLight\" & ComponentClass<any, any>"
            },
            {
              "value": "\"fePointLight\" & FunctionComponent<any>"
            },
            {
              "value": "\"feSpecularLighting\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feSpecularLighting\" & FunctionComponent<any>"
            },
            {
              "value": "\"feSpotLight\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feSpotLight\" & FunctionComponent<any>"
            },
            {
              "value": "\"feTile\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feTile\" & FunctionComponent<any>"
            },
            {
              "value": "\"feTurbulence\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feTurbulence\" & FunctionComponent<any>"
            },
            {
              "value": "\"filter\" & ComponentClass<any, any>"
            },
            {
              "value": "\"filter\" & FunctionComponent<any>"
            },
            {
              "value": "\"foreignObject\" & ComponentClass<any, any>"
            },
            {
              "value": "\"foreignObject\" & FunctionComponent<any>"
            },
            {
              "value": "\"g\" & ComponentClass<any, any>"
            },
            {
              "value": "\"g\" & FunctionComponent<any>"
            },
            {
              "value": "\"image\" & ComponentClass<any, any>"
            },
            {
              "value": "\"image\" & FunctionComponent<any>"
            },
            {
              "value": "\"line\" & ComponentClass<any, any>"
            },
            {
              "value": "\"line\" & FunctionComponent<any>"
            },
            {
              "value": "\"linearGradient\" & ComponentClass<any, any>"
            },
            {
              "value": "\"linearGradient\" & FunctionComponent<any>"
            },
            {
              "value": "\"marker\" & ComponentClass<any, any>"
            },
            {
              "value": "\"marker\" & FunctionComponent<any>"
            },
            {
              "value": "\"mask\" & ComponentClass<any, any>"
            },
            {
              "value": "\"mask\" & FunctionComponent<any>"
            },
            {
              "value": "\"metadata\" & ComponentClass<any, any>"
            },
            {
              "value": "\"metadata\" & FunctionComponent<any>"
            },
            {
              "value": "\"mpath\" & ComponentClass<any, any>"
            },
            {
              "value": "\"mpath\" & FunctionComponent<any>"
            },
            {
              "value": "\"path\" & ComponentClass<any, any>"
            },
            {
              "value": "\"path\" & FunctionComponent<any>"
            },
            {
              "value": "\"pattern\" & ComponentClass<any, any>"
            },
            {
              "value": "\"pattern\" & FunctionComponent<any>"
            },
            {
              "value": "\"polygon\" & ComponentClass<any, any>"
            },
            {
              "value": "\"polygon\" & FunctionComponent<any>"
            },
            {
              "value": "\"polyline\" & ComponentClass<any, any>"
            },
            {
              "value": "\"polyline\" & FunctionComponent<any>"
            },
            {
              "value": "\"radialGradient\" & ComponentClass<any, any>"
            },
            {
              "value": "\"radialGradient\" & FunctionComponent<any>"
            },
            {
              "value": "\"rect\" & ComponentClass<any, any>"
            },
            {
              "value": "\"rect\" & FunctionComponent<any>"
            },
            {
              "value": "\"set\" & ComponentClass<any, any>"
            },
            {
              "value": "\"set\" & FunctionComponent<any>"
            },
            {
              "value": "\"stop\" & ComponentClass<any, any>"
            },
            {
              "value": "\"stop\" & FunctionComponent<any>"
            },
            {
              "value": "\"switch\" & ComponentClass<any, any>"
            },
            {
              "value": "\"switch\" & FunctionComponent<any>"
            },
            {
              "value": "\"text\" & ComponentClass<any, any>"
            },
            {
              "value": "\"text\" & FunctionComponent<any>"
            },
            {
              "value": "\"textPath\" & ComponentClass<any, any>"
            },
            {
              "value": "\"textPath\" & FunctionComponent<any>"
            },
            {
              "value": "\"tspan\" & ComponentClass<any, any>"
            },
            {
              "value": "\"tspan\" & FunctionComponent<any>"
            },
            {
              "value": "\"use\" & ComponentClass<any, any>"
            },
            {
              "value": "\"use\" & FunctionComponent<any>"
            },
            {
              "value": "\"view\" & ComponentClass<any, any>"
            },
            {
              "value": "\"view\" & FunctionComponent<any>"
            },
            {
              "value": "\"relative-time\" & ComponentClass<any, any>"
            },
            {
              "value": "\"relative-time\" & FunctionComponent<any>"
            },
            {
              "value": "\"tab-container\" & ComponentClass<any, any>"
            },
            {
              "value": "\"tab-container\" & FunctionComponent<any>"
            },
            {
              "value": "ComponentClass<any, any> & ComponentClass<unknown, any>"
            },
            {
              "value": "ComponentClass<any, any> & FunctionComponent<unknown>"
            },
            {
              "value": "FunctionComponent<any> & ComponentClass<unknown, any>"
            },
            {
              "value": "FunctionComponent<any> & FunctionComponent<unknown>"
            },
            {
              "value": "ComponentClass<any, any> & \"symbol\""
            },
            {
              "value": "ComponentClass<any, any> & \"object\""
            },
            {
              "value": "ComponentClass<any, any> & \"a\""
            },
            {
              "value": "ComponentClass<any, any> & \"abbr\""
            },
            {
              "value": "ComponentClass<any, any> & \"address\""
            },
            {
              "value": "ComponentClass<any, any> & \"area\""
            },
            {
              "value": "ComponentClass<any, any> & \"article\""
            },
            {
              "value": "ComponentClass<any, any> & \"aside\""
            },
            {
              "value": "ComponentClass<any, any> & \"audio\""
            },
            {
              "value": "ComponentClass<any, any> & \"b\""
            },
            {
              "value": "ComponentClass<any, any> & \"base\""
            },
            {
              "value": "ComponentClass<any, any> & \"bdi\""
            },
            {
              "value": "ComponentClass<any, any> & \"bdo\""
            },
            {
              "value": "ComponentClass<any, any> & \"big\""
            },
            {
              "value": "ComponentClass<any, any> & \"blockquote\""
            },
            {
              "value": "ComponentClass<any, any> & \"body\""
            },
            {
              "value": "ComponentClass<any, any> & \"br\""
            },
            {
              "value": "ComponentClass<any, any> & \"button\""
            },
            {
              "value": "ComponentClass<any, any> & \"canvas\""
            },
            {
              "value": "ComponentClass<any, any> & \"caption\""
            },
            {
              "value": "ComponentClass<any, any> & \"center\""
            },
            {
              "value": "ComponentClass<any, any> & \"cite\""
            },
            {
              "value": "ComponentClass<any, any> & \"code\""
            },
            {
              "value": "ComponentClass<any, any> & \"col\""
            },
            {
              "value": "ComponentClass<any, any> & \"colgroup\""
            },
            {
              "value": "ComponentClass<any, any> & \"data\""
            },
            {
              "value": "ComponentClass<any, any> & \"datalist\""
            },
            {
              "value": "ComponentClass<any, any> & \"dd\""
            },
            {
              "value": "ComponentClass<any, any> & \"del\""
            },
            {
              "value": "ComponentClass<any, any> & \"details\""
            },
            {
              "value": "ComponentClass<any, any> & \"dfn\""
            },
            {
              "value": "ComponentClass<any, any> & \"dialog\""
            },
            {
              "value": "ComponentClass<any, any> & \"div\""
            },
            {
              "value": "ComponentClass<any, any> & \"dl\""
            },
            {
              "value": "ComponentClass<any, any> & \"dt\""
            },
            {
              "value": "ComponentClass<any, any> & \"em\""
            },
            {
              "value": "ComponentClass<any, any> & \"embed\""
            },
            {
              "value": "ComponentClass<any, any> & \"fieldset\""
            },
            {
              "value": "ComponentClass<any, any> & \"figcaption\""
            },
            {
              "value": "ComponentClass<any, any> & \"figure\""
            },
            {
              "value": "ComponentClass<any, any> & \"footer\""
            },
            {
              "value": "ComponentClass<any, any> & \"form\""
            },
            {
              "value": "ComponentClass<any, any> & \"h1\""
            },
            {
              "value": "ComponentClass<any, any> & \"h2\""
            },
            {
              "value": "ComponentClass<any, any> & \"h3\""
            },
            {
              "value": "ComponentClass<any, any> & \"h4\""
            },
            {
              "value": "ComponentClass<any, any> & \"h5\""
            },
            {
              "value": "ComponentClass<any, any> & \"h6\""
            },
            {
              "value": "ComponentClass<any, any> & \"head\""
            },
            {
              "value": "ComponentClass<any, any> & \"header\""
            },
            {
              "value": "ComponentClass<any, any> & \"hgroup\""
            },
            {
              "value": "ComponentClass<any, any> & \"hr\""
            },
            {
              "value": "ComponentClass<any, any> & \"html\""
            },
            {
              "value": "ComponentClass<any, any> & \"i\""
            },
            {
              "value": "ComponentClass<any, any> & \"iframe\""
            },
            {
              "value": "ComponentClass<any, any> & \"img\""
            },
            {
              "value": "ComponentClass<any, any> & \"input\""
            },
            {
              "value": "ComponentClass<any, any> & \"ins\""
            },
            {
              "value": "ComponentClass<any, any> & \"kbd\""
            },
            {
              "value": "ComponentClass<any, any> & \"keygen\""
            },
            {
              "value": "ComponentClass<any, any> & \"label\""
            },
            {
              "value": "ComponentClass<any, any> & \"legend\""
            },
            {
              "value": "ComponentClass<any, any> & \"li\""
            },
            {
              "value": "ComponentClass<any, any> & \"link\""
            },
            {
              "value": "ComponentClass<any, any> & \"main\""
            },
            {
              "value": "ComponentClass<any, any> & \"map\""
            },
            {
              "value": "ComponentClass<any, any> & \"mark\""
            },
            {
              "value": "ComponentClass<any, any> & \"menu\""
            },
            {
              "value": "ComponentClass<any, any> & \"menuitem\""
            },
            {
              "value": "ComponentClass<any, any> & \"meta\""
            },
            {
              "value": "ComponentClass<any, any> & \"meter\""
            },
            {
              "value": "ComponentClass<any, any> & \"nav\""
            },
            {
              "value": "ComponentClass<any, any> & \"noindex\""
            },
            {
              "value": "ComponentClass<any, any> & \"noscript\""
            },
            {
              "value": "ComponentClass<any, any> & \"ol\""
            },
            {
              "value": "ComponentClass<any, any> & \"optgroup\""
            },
            {
              "value": "ComponentClass<any, any> & \"option\""
            },
            {
              "value": "ComponentClass<any, any> & \"output\""
            },
            {
              "value": "ComponentClass<any, any> & \"p\""
            },
            {
              "value": "ComponentClass<any, any> & \"param\""
            },
            {
              "value": "ComponentClass<any, any> & \"picture\""
            },
            {
              "value": "ComponentClass<any, any> & \"pre\""
            },
            {
              "value": "ComponentClass<any, any> & \"progress\""
            },
            {
              "value": "ComponentClass<any, any> & \"q\""
            },
            {
              "value": "ComponentClass<any, any> & \"rp\""
            },
            {
              "value": "ComponentClass<any, any> & \"rt\""
            },
            {
              "value": "ComponentClass<any, any> & \"ruby\""
            },
            {
              "value": "ComponentClass<any, any> & \"s\""
            },
            {
              "value": "ComponentClass<any, any> & \"samp\""
            },
            {
              "value": "ComponentClass<any, any> & \"search\""
            },
            {
              "value": "ComponentClass<any, any> & \"slot\""
            },
            {
              "value": "ComponentClass<any, any> & \"script\""
            },
            {
              "value": "ComponentClass<any, any> & \"section\""
            },
            {
              "value": "ComponentClass<any, any> & \"select\""
            },
            {
              "value": "ComponentClass<any, any> & \"small\""
            },
            {
              "value": "ComponentClass<any, any> & \"source\""
            },
            {
              "value": "ComponentClass<any, any> & \"span\""
            },
            {
              "value": "ComponentClass<any, any> & \"strong\""
            },
            {
              "value": "ComponentClass<any, any> & \"style\""
            },
            {
              "value": "ComponentClass<any, any> & \"sub\""
            },
            {
              "value": "ComponentClass<any, any> & \"summary\""
            },
            {
              "value": "ComponentClass<any, any> & \"sup\""
            },
            {
              "value": "ComponentClass<any, any> & \"table\""
            },
            {
              "value": "ComponentClass<any, any> & \"template\""
            },
            {
              "value": "ComponentClass<any, any> & \"tbody\""
            },
            {
              "value": "ComponentClass<any, any> & \"td\""
            },
            {
              "value": "ComponentClass<any, any> & \"textarea\""
            },
            {
              "value": "ComponentClass<any, any> & \"tfoot\""
            },
            {
              "value": "ComponentClass<any, any> & \"th\""
            },
            {
              "value": "ComponentClass<any, any> & \"thead\""
            },
            {
              "value": "ComponentClass<any, any> & \"time\""
            },
            {
              "value": "ComponentClass<any, any> & \"title\""
            },
            {
              "value": "ComponentClass<any, any> & \"tr\""
            },
            {
              "value": "ComponentClass<any, any> & \"track\""
            },
            {
              "value": "ComponentClass<any, any> & \"u\""
            },
            {
              "value": "ComponentClass<any, any> & \"ul\""
            },
            {
              "value": "ComponentClass<any, any> & \"var\""
            },
            {
              "value": "ComponentClass<any, any> & \"video\""
            },
            {
              "value": "ComponentClass<any, any> & \"wbr\""
            },
            {
              "value": "ComponentClass<any, any> & \"webview\""
            },
            {
              "value": "ComponentClass<any, any> & \"svg\""
            },
            {
              "value": "ComponentClass<any, any> & \"animate\""
            },
            {
              "value": "ComponentClass<any, any> & \"animateMotion\""
            },
            {
              "value": "ComponentClass<any, any> & \"animateTransform\""
            },
            {
              "value": "ComponentClass<any, any> & \"circle\""
            },
            {
              "value": "ComponentClass<any, any> & \"clipPath\""
            },
            {
              "value": "ComponentClass<any, any> & \"defs\""
            },
            {
              "value": "ComponentClass<any, any> & \"desc\""
            },
            {
              "value": "ComponentClass<any, any> & \"ellipse\""
            },
            {
              "value": "ComponentClass<any, any> & \"feBlend\""
            },
            {
              "value": "ComponentClass<any, any> & \"feColorMatrix\""
            },
            {
              "value": "ComponentClass<any, any> & \"feComponentTransfer\""
            },
            {
              "value": "ComponentClass<any, any> & \"feComposite\""
            },
            {
              "value": "ComponentClass<any, any> & \"feConvolveMatrix\""
            },
            {
              "value": "ComponentClass<any, any> & \"feDiffuseLighting\""
            },
            {
              "value": "ComponentClass<any, any> & \"feDisplacementMap\""
            },
            {
              "value": "ComponentClass<any, any> & \"feDistantLight\""
            },
            {
              "value": "ComponentClass<any, any> & \"feDropShadow\""
            },
            {
              "value": "ComponentClass<any, any> & \"feFlood\""
            },
            {
              "value": "ComponentClass<any, any> & \"feFuncA\""
            },
            {
              "value": "ComponentClass<any, any> & \"feFuncB\""
            },
            {
              "value": "ComponentClass<any, any> & \"feFuncG\""
            },
            {
              "value": "ComponentClass<any, any> & \"feFuncR\""
            },
            {
              "value": "ComponentClass<any, any> & \"feGaussianBlur\""
            },
            {
              "value": "ComponentClass<any, any> & \"feImage\""
            },
            {
              "value": "ComponentClass<any, any> & \"feMerge\""
            },
            {
              "value": "ComponentClass<any, any> & \"feMergeNode\""
            },
            {
              "value": "ComponentClass<any, any> & \"feMorphology\""
            },
            {
              "value": "ComponentClass<any, any> & \"feOffset\""
            },
            {
              "value": "ComponentClass<any, any> & \"fePointLight\""
            },
            {
              "value": "ComponentClass<any, any> & \"feSpecularLighting\""
            },
            {
              "value": "ComponentClass<any, any> & \"feSpotLight\""
            },
            {
              "value": "ComponentClass<any, any> & \"feTile\""
            },
            {
              "value": "ComponentClass<any, any> & \"feTurbulence\""
            },
            {
              "value": "ComponentClass<any, any> & \"filter\""
            },
            {
              "value": "ComponentClass<any, any> & \"foreignObject\""
            },
            {
              "value": "ComponentClass<any, any> & \"g\""
            },
            {
              "value": "ComponentClass<any, any> & \"image\""
            },
            {
              "value": "ComponentClass<any, any> & \"line\""
            },
            {
              "value": "ComponentClass<any, any> & \"linearGradient\""
            },
            {
              "value": "ComponentClass<any, any> & \"marker\""
            },
            {
              "value": "ComponentClass<any, any> & \"mask\""
            },
            {
              "value": "ComponentClass<any, any> & \"metadata\""
            },
            {
              "value": "ComponentClass<any, any> & \"mpath\""
            },
            {
              "value": "ComponentClass<any, any> & \"path\""
            },
            {
              "value": "ComponentClass<any, any> & \"pattern\""
            },
            {
              "value": "ComponentClass<any, any> & \"polygon\""
            },
            {
              "value": "ComponentClass<any, any> & \"polyline\""
            },
            {
              "value": "ComponentClass<any, any> & \"radialGradient\""
            },
            {
              "value": "ComponentClass<any, any> & \"rect\""
            },
            {
              "value": "ComponentClass<any, any> & \"set\""
            },
            {
              "value": "ComponentClass<any, any> & \"stop\""
            },
            {
              "value": "ComponentClass<any, any> & \"switch\""
            },
            {
              "value": "ComponentClass<any, any> & \"text\""
            },
            {
              "value": "ComponentClass<any, any> & \"textPath\""
            },
            {
              "value": "ComponentClass<any, any> & \"tspan\""
            },
            {
              "value": "ComponentClass<any, any> & \"use\""
            },
            {
              "value": "ComponentClass<any, any> & \"view\""
            },
            {
              "value": "ComponentClass<any, any> & \"relative-time\""
            },
            {
              "value": "ComponentClass<any, any> & \"tab-container\""
            },
            {
              "value": "FunctionComponent<any> & \"symbol\""
            },
            {
              "value": "FunctionComponent<any> & \"object\""
            },
            {
              "value": "FunctionComponent<any> & \"a\""
            },
            {
              "value": "FunctionComponent<any> & \"abbr\""
            },
            {
              "value": "FunctionComponent<any> & \"address\""
            },
            {
              "value": "FunctionComponent<any> & \"area\""
            },
            {
              "value": "FunctionComponent<any> & \"article\""
            },
            {
              "value": "FunctionComponent<any> & \"aside\""
            },
            {
              "value": "FunctionComponent<any> & \"audio\""
            },
            {
              "value": "FunctionComponent<any> & \"b\""
            },
            {
              "value": "FunctionComponent<any> & \"base\""
            },
            {
              "value": "FunctionComponent<any> & \"bdi\""
            },
            {
              "value": "FunctionComponent<any> & \"bdo\""
            },
            {
              "value": "FunctionComponent<any> & \"big\""
            },
            {
              "value": "FunctionComponent<any> & \"blockquote\""
            },
            {
              "value": "FunctionComponent<any> & \"body\""
            },
            {
              "value": "FunctionComponent<any> & \"br\""
            },
            {
              "value": "FunctionComponent<any> & \"button\""
            },
            {
              "value": "FunctionComponent<any> & \"canvas\""
            },
            {
              "value": "FunctionComponent<any> & \"caption\""
            },
            {
              "value": "FunctionComponent<any> & \"center\""
            },
            {
              "value": "FunctionComponent<any> & \"cite\""
            },
            {
              "value": "FunctionComponent<any> & \"code\""
            },
            {
              "value": "FunctionComponent<any> & \"col\""
            },
            {
              "value": "FunctionComponent<any> & \"colgroup\""
            },
            {
              "value": "FunctionComponent<any> & \"data\""
            },
            {
              "value": "FunctionComponent<any> & \"datalist\""
            },
            {
              "value": "FunctionComponent<any> & \"dd\""
            },
            {
              "value": "FunctionComponent<any> & \"del\""
            },
            {
              "value": "FunctionComponent<any> & \"details\""
            },
            {
              "value": "FunctionComponent<any> & \"dfn\""
            },
            {
              "value": "FunctionComponent<any> & \"dialog\""
            },
            {
              "value": "FunctionComponent<any> & \"div\""
            },
            {
              "value": "FunctionComponent<any> & \"dl\""
            },
            {
              "value": "FunctionComponent<any> & \"dt\""
            },
            {
              "value": "FunctionComponent<any> & \"em\""
            },
            {
              "value": "FunctionComponent<any> & \"embed\""
            },
            {
              "value": "FunctionComponent<any> & \"fieldset\""
            },
            {
              "value": "FunctionComponent<any> & \"figcaption\""
            },
            {
              "value": "FunctionComponent<any> & \"figure\""
            },
            {
              "value": "FunctionComponent<any> & \"footer\""
            },
            {
              "value": "FunctionComponent<any> & \"form\""
            },
            {
              "value": "FunctionComponent<any> & \"h1\""
            },
            {
              "value": "FunctionComponent<any> & \"h2\""
            },
            {
              "value": "FunctionComponent<any> & \"h3\""
            },
            {
              "value": "FunctionComponent<any> & \"h4\""
            },
            {
              "value": "FunctionComponent<any> & \"h5\""
            },
            {
              "value": "FunctionComponent<any> & \"h6\""
            },
            {
              "value": "FunctionComponent<any> & \"head\""
            },
            {
              "value": "FunctionComponent<any> & \"header\""
            },
            {
              "value": "FunctionComponent<any> & \"hgroup\""
            },
            {
              "value": "FunctionComponent<any> & \"hr\""
            },
            {
              "value": "FunctionComponent<any> & \"html\""
            },
            {
              "value": "FunctionComponent<any> & \"i\""
            },
            {
              "value": "FunctionComponent<any> & \"iframe\""
            },
            {
              "value": "FunctionComponent<any> & \"img\""
            },
            {
              "value": "FunctionComponent<any> & \"input\""
            },
            {
              "value": "FunctionComponent<any> & \"ins\""
            },
            {
              "value": "FunctionComponent<any> & \"kbd\""
            },
            {
              "value": "FunctionComponent<any> & \"keygen\""
            },
            {
              "value": "FunctionComponent<any> & \"label\""
            },
            {
              "value": "FunctionComponent<any> & \"legend\""
            },
            {
              "value": "FunctionComponent<any> & \"li\""
            },
            {
              "value": "FunctionComponent<any> & \"link\""
            },
            {
              "value": "FunctionComponent<any> & \"main\""
            },
            {
              "value": "FunctionComponent<any> & \"map\""
            },
            {
              "value": "FunctionComponent<any> & \"mark\""
            },
            {
              "value": "FunctionComponent<any> & \"menu\""
            },
            {
              "value": "FunctionComponent<any> & \"menuitem\""
            },
            {
              "value": "FunctionComponent<any> & \"meta\""
            },
            {
              "value": "FunctionComponent<any> & \"meter\""
            },
            {
              "value": "FunctionComponent<any> & \"nav\""
            },
            {
              "value": "FunctionComponent<any> & \"noindex\""
            },
            {
              "value": "FunctionComponent<any> & \"noscript\""
            },
            {
              "value": "FunctionComponent<any> & \"ol\""
            },
            {
              "value": "FunctionComponent<any> & \"optgroup\""
            },
            {
              "value": "FunctionComponent<any> & \"option\""
            },
            {
              "value": "FunctionComponent<any> & \"output\""
            },
            {
              "value": "FunctionComponent<any> & \"p\""
            },
            {
              "value": "FunctionComponent<any> & \"param\""
            },
            {
              "value": "FunctionComponent<any> & \"picture\""
            },
            {
              "value": "FunctionComponent<any> & \"pre\""
            },
            {
              "value": "FunctionComponent<any> & \"progress\""
            },
            {
              "value": "FunctionComponent<any> & \"q\""
            },
            {
              "value": "FunctionComponent<any> & \"rp\""
            },
            {
              "value": "FunctionComponent<any> & \"rt\""
            },
            {
              "value": "FunctionComponent<any> & \"ruby\""
            },
            {
              "value": "FunctionComponent<any> & \"s\""
            },
            {
              "value": "FunctionComponent<any> & \"samp\""
            },
            {
              "value": "FunctionComponent<any> & \"search\""
            },
            {
              "value": "FunctionComponent<any> & \"slot\""
            },
            {
              "value": "FunctionComponent<any> & \"script\""
            },
            {
              "value": "FunctionComponent<any> & \"section\""
            },
            {
              "value": "FunctionComponent<any> & \"select\""
            },
            {
              "value": "FunctionComponent<any> & \"small\""
            },
            {
              "value": "FunctionComponent<any> & \"source\""
            },
            {
              "value": "FunctionComponent<any> & \"span\""
            },
            {
              "value": "FunctionComponent<any> & \"strong\""
            },
            {
              "value": "FunctionComponent<any> & \"style\""
            },
            {
              "value": "FunctionComponent<any> & \"sub\""
            },
            {
              "value": "FunctionComponent<any> & \"summary\""
            },
            {
              "value": "FunctionComponent<any> & \"sup\""
            },
            {
              "value": "FunctionComponent<any> & \"table\""
            },
            {
              "value": "FunctionComponent<any> & \"template\""
            },
            {
              "value": "FunctionComponent<any> & \"tbody\""
            },
            {
              "value": "FunctionComponent<any> & \"td\""
            },
            {
              "value": "FunctionComponent<any> & \"textarea\""
            },
            {
              "value": "FunctionComponent<any> & \"tfoot\""
            },
            {
              "value": "FunctionComponent<any> & \"th\""
            },
            {
              "value": "FunctionComponent<any> & \"thead\""
            },
            {
              "value": "FunctionComponent<any> & \"time\""
            },
            {
              "value": "FunctionComponent<any> & \"title\""
            },
            {
              "value": "FunctionComponent<any> & \"tr\""
            },
            {
              "value": "FunctionComponent<any> & \"track\""
            },
            {
              "value": "FunctionComponent<any> & \"u\""
            },
            {
              "value": "FunctionComponent<any> & \"ul\""
            },
            {
              "value": "FunctionComponent<any> & \"var\""
            },
            {
              "value": "FunctionComponent<any> & \"video\""
            },
            {
              "value": "FunctionComponent<any> & \"wbr\""
            },
            {
              "value": "FunctionComponent<any> & \"webview\""
            },
            {
              "value": "FunctionComponent<any> & \"svg\""
            },
            {
              "value": "FunctionComponent<any> & \"animate\""
            },
            {
              "value": "FunctionComponent<any> & \"animateMotion\""
            },
            {
              "value": "FunctionComponent<any> & \"animateTransform\""
            },
            {
              "value": "FunctionComponent<any> & \"circle\""
            },
            {
              "value": "FunctionComponent<any> & \"clipPath\""
            },
            {
              "value": "FunctionComponent<any> & \"defs\""
            },
            {
              "value": "FunctionComponent<any> & \"desc\""
            },
            {
              "value": "FunctionComponent<any> & \"ellipse\""
            },
            {
              "value": "FunctionComponent<any> & \"feBlend\""
            },
            {
              "value": "FunctionComponent<any> & \"feColorMatrix\""
            },
            {
              "value": "FunctionComponent<any> & \"feComponentTransfer\""
            },
            {
              "value": "FunctionComponent<any> & \"feComposite\""
            },
            {
              "value": "FunctionComponent<any> & \"feConvolveMatrix\""
            },
            {
              "value": "FunctionComponent<any> & \"feDiffuseLighting\""
            },
            {
              "value": "FunctionComponent<any> & \"feDisplacementMap\""
            },
            {
              "value": "FunctionComponent<any> & \"feDistantLight\""
            },
            {
              "value": "FunctionComponent<any> & \"feDropShadow\""
            },
            {
              "value": "FunctionComponent<any> & \"feFlood\""
            },
            {
              "value": "FunctionComponent<any> & \"feFuncA\""
            },
            {
              "value": "FunctionComponent<any> & \"feFuncB\""
            },
            {
              "value": "FunctionComponent<any> & \"feFuncG\""
            },
            {
              "value": "FunctionComponent<any> & \"feFuncR\""
            },
            {
              "value": "FunctionComponent<any> & \"feGaussianBlur\""
            },
            {
              "value": "FunctionComponent<any> & \"feImage\""
            },
            {
              "value": "FunctionComponent<any> & \"feMerge\""
            },
            {
              "value": "FunctionComponent<any> & \"feMergeNode\""
            },
            {
              "value": "FunctionComponent<any> & \"feMorphology\""
            },
            {
              "value": "FunctionComponent<any> & \"feOffset\""
            },
            {
              "value": "FunctionComponent<any> & \"fePointLight\""
            },
            {
              "value": "FunctionComponent<any> & \"feSpecularLighting\""
            },
            {
              "value": "FunctionComponent<any> & \"feSpotLight\""
            },
            {
              "value": "FunctionComponent<any> & \"feTile\""
            },
            {
              "value": "FunctionComponent<any> & \"feTurbulence\""
            },
            {
              "value": "FunctionComponent<any> & \"filter\""
            },
            {
              "value": "FunctionComponent<any> & \"foreignObject\""
            },
            {
              "value": "FunctionComponent<any> & \"g\""
            },
            {
              "value": "FunctionComponent<any> & \"image\""
            },
            {
              "value": "FunctionComponent<any> & \"line\""
            },
            {
              "value": "FunctionComponent<any> & \"linearGradient\""
            },
            {
              "value": "FunctionComponent<any> & \"marker\""
            },
            {
              "value": "FunctionComponent<any> & \"mask\""
            },
            {
              "value": "FunctionComponent<any> & \"metadata\""
            },
            {
              "value": "FunctionComponent<any> & \"mpath\""
            },
            {
              "value": "FunctionComponent<any> & \"path\""
            },
            {
              "value": "FunctionComponent<any> & \"pattern\""
            },
            {
              "value": "FunctionComponent<any> & \"polygon\""
            },
            {
              "value": "FunctionComponent<any> & \"polyline\""
            },
            {
              "value": "FunctionComponent<any> & \"radialGradient\""
            },
            {
              "value": "FunctionComponent<any> & \"rect\""
            },
            {
              "value": "FunctionComponent<any> & \"set\""
            },
            {
              "value": "FunctionComponent<any> & \"stop\""
            },
            {
              "value": "FunctionComponent<any> & \"switch\""
            },
            {
              "value": "FunctionComponent<any> & \"text\""
            },
            {
              "value": "FunctionComponent<any> & \"textPath\""
            },
            {
              "value": "FunctionComponent<any> & \"tspan\""
            },
            {
              "value": "FunctionComponent<any> & \"use\""
            },
            {
              "value": "FunctionComponent<any> & \"view\""
            },
            {
              "value": "FunctionComponent<any> & \"relative-time\""
            },
            {
              "value": "FunctionComponent<any> & \"tab-container\""
            },
            {
              "value": "\"symbol\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"symbol\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"object\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"object\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"abbr\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"abbr\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"address\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"address\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"area\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"area\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"article\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"article\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"aside\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"aside\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"audio\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"audio\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"b\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"b\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"base\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"base\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"bdi\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"bdi\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"bdo\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"bdo\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"big\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"big\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"blockquote\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"blockquote\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"body\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"body\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"br\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"br\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"canvas\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"canvas\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"caption\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"caption\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"center\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"center\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"cite\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"cite\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"code\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"code\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"col\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"col\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"colgroup\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"colgroup\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"data\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"data\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"datalist\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"datalist\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"dd\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"dd\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"del\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"del\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"details\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"details\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"dfn\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"dfn\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"dialog\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"dialog\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"div\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"div\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"dl\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"dl\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"dt\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"dt\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"em\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"em\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"embed\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"embed\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"fieldset\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"fieldset\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"figcaption\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"figcaption\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"figure\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"figure\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"footer\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"footer\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"form\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"form\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"head\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"head\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"header\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"header\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"hgroup\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"hgroup\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"hr\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"hr\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"html\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"html\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"i\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"i\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"iframe\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"iframe\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"img\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"img\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"input\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"input\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"ins\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"ins\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"kbd\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"kbd\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"keygen\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"keygen\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"label\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"label\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"legend\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"legend\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"li\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"li\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"link\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"link\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"main\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"main\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"map\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"map\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"mark\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"mark\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"menu\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"menu\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"menuitem\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"menuitem\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"meta\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"meta\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"meter\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"meter\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"nav\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"nav\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"noindex\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"noindex\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"noscript\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"noscript\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"ol\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"ol\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"optgroup\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"optgroup\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"option\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"option\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"output\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"output\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"p\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"p\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"param\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"param\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"picture\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"picture\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"pre\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"pre\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"progress\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"progress\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"q\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"q\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"rp\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"rp\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"rt\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"rt\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"ruby\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"ruby\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"s\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"s\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"samp\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"samp\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"search\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"search\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"slot\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"slot\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"script\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"script\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"section\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"section\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"select\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"select\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"small\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"small\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"source\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"source\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"span\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"span\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"strong\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"strong\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"style\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"style\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"sub\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"sub\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"summary\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"summary\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"sup\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"sup\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"table\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"table\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"template\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"template\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"tbody\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"tbody\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"td\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"td\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"textarea\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"textarea\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"tfoot\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"tfoot\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"th\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"th\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"thead\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"thead\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"time\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"time\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"title\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"title\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"tr\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"tr\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"track\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"track\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"u\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"u\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"ul\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"ul\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"var\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"var\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"video\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"video\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"wbr\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"wbr\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"webview\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"webview\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"svg\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"svg\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"animate\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"animate\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"animateMotion\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"animateMotion\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"animateTransform\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"animateTransform\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"circle\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"circle\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"clipPath\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"clipPath\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"defs\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"defs\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"desc\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"desc\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"ellipse\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"ellipse\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feBlend\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feBlend\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feColorMatrix\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feColorMatrix\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feComponentTransfer\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feComponentTransfer\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feComposite\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feComposite\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feConvolveMatrix\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feConvolveMatrix\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feDiffuseLighting\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feDiffuseLighting\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feDisplacementMap\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feDisplacementMap\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feDistantLight\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feDistantLight\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feDropShadow\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feDropShadow\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feFlood\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feFlood\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feFuncA\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feFuncA\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feFuncB\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feFuncB\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feFuncG\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feFuncG\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feFuncR\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feFuncR\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feGaussianBlur\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feGaussianBlur\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feImage\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feImage\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feMerge\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feMerge\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feMergeNode\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feMergeNode\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feMorphology\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feMorphology\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feOffset\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feOffset\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"fePointLight\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"fePointLight\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feSpecularLighting\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feSpecularLighting\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feSpotLight\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feSpotLight\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feTile\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feTile\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feTurbulence\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feTurbulence\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"filter\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"filter\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"foreignObject\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"foreignObject\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"g\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"g\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"image\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"image\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"line\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"line\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"linearGradient\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"linearGradient\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"marker\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"marker\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"mask\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"mask\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"metadata\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"metadata\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"mpath\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"mpath\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"path\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"path\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"pattern\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"pattern\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"polygon\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"polygon\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"polyline\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"polyline\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"radialGradient\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"radialGradient\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"rect\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"rect\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"set\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"set\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"stop\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"stop\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"switch\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"switch\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"text\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"text\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"textPath\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"textPath\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"tspan\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"tspan\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"use\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"use\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"view\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"view\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"relative-time\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"relative-time\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"tab-container\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"tab-container\" & FunctionComponent<unknown>"
            }
          ]
        }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "",
        "name": "aria-label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageHeader/PageHeader.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageHeader/PageHeader.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "role": {
        "defaultValue": null,
        "description": "",
        "name": "role",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageHeader/PageHeader.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "AriaRole",
          "value": [
            {
              "value": "\"article\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"list\""
            },
            {
              "value": "\"alert\""
            },
            {
              "value": "\"alertdialog\""
            },
            {
              "value": "\"application\""
            },
            {
              "value": "\"banner\""
            },
            {
              "value": "\"cell\""
            },
            {
              "value": "\"checkbox\""
            },
            {
              "value": "\"columnheader\""
            },
            {
              "value": "\"combobox\""
            },
            {
              "value": "\"complementary\""
            },
            {
              "value": "\"contentinfo\""
            },
            {
              "value": "\"definition\""
            },
            {
              "value": "\"directory\""
            },
            {
              "value": "\"document\""
            },
            {
              "value": "\"feed\""
            },
            {
              "value": "\"grid\""
            },
            {
              "value": "\"gridcell\""
            },
            {
              "value": "\"group\""
            },
            {
              "value": "\"heading\""
            },
            {
              "value": "\"listbox\""
            },
            {
              "value": "\"listitem\""
            },
            {
              "value": "\"log\""
            },
            {
              "value": "\"marquee\""
            },
            {
              "value": "\"math\""
            },
            {
              "value": "\"menubar\""
            },
            {
              "value": "\"menuitemcheckbox\""
            },
            {
              "value": "\"menuitemradio\""
            },
            {
              "value": "\"navigation\""
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"note\""
            },
            {
              "value": "\"presentation\""
            },
            {
              "value": "\"progressbar\""
            },
            {
              "value": "\"radio\""
            },
            {
              "value": "\"radiogroup\""
            },
            {
              "value": "\"region\""
            },
            {
              "value": "\"row\""
            },
            {
              "value": "\"rowgroup\""
            },
            {
              "value": "\"rowheader\""
            },
            {
              "value": "\"scrollbar\""
            },
            {
              "value": "\"searchbox\""
            },
            {
              "value": "\"separator\""
            },
            {
              "value": "\"slider\""
            },
            {
              "value": "\"spinbutton\""
            },
            {
              "value": "\"status\""
            },
            {
              "value": "\"tab\""
            },
            {
              "value": "\"tablist\""
            },
            {
              "value": "\"tabpanel\""
            },
            {
              "value": "\"term\""
            },
            {
              "value": "\"textbox\""
            },
            {
              "value": "\"timer\""
            },
            {
              "value": "\"toolbar\""
            },
            {
              "value": "\"tooltip\""
            },
            {
              "value": "\"tree\""
            },
            {
              "value": "\"treegrid\""
            },
            {
              "value": "\"treeitem\""
            }
          ]
        }
      },
      "sx": {
        "defaultValue": {
          "value": "{}"
        },
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "PageHeader.ContextArea",
      "primerparentid": "drafts_page_header"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/PageHeader/PageHeader.tsx",
    "description": "Only visible on narrow viewports by default to provide user context of where they are at their journey. `hidden` prop available\nto manage their custom visibility but consumers should be careful if they choose to hide this on narrow viewports.\nPageHeader.ContextArea Sub Components: PageHeader.ParentLink, PageHeader.ContextBar, PageHeader.ContextAreaActions",
    "displayName": "PageHeader.ContextArea",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Class name(s) to override styles",
        "name": "className",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageHeader/PageHeader.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "hidden": {
        "defaultValue": {
          "value": false
        },
        "description": "Whether to hide the component.\nThe component can be hidden for all viewport widths, or specified viewport widths.\nSome children have a default value for this prop:\n- `PageHeader.ContextArea`, `PageHeader.ContextAreaActions`, `PageHeader.ContextBar`, and `PageHeader.ParentLink` are hidden on regular and wide viewports by default.\n- `PageHeader.LeadingAction`, and `PageHeader.TrailingAction` are hidden on narrow viewports by default.",
        "name": "hidden",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageHeader/PageHeader.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean | ResponsiveValue<boolean>",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ResponsiveValue<boolean>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "sx": {
        "defaultValue": {
          "value": "{}"
        },
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "PageHeader.ParentLink",
      "primerparentid": "drafts_page_header",
      "default": "a"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/PageHeader/PageHeader.tsx",
    "description": "Only visible on narrow viewports by default to let users navigate up in the hierarchy.",
    "displayName": "PageHeader.ParentLink",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": {
          "value": "h2"
        },
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"a\" | (\"a\" & (ComponentClass<unknown, any> | FunctionComponent<unknown>))",
          "value": [
            {
              "value": "\"a\""
            },
            {
              "value": "\"a\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"a\" & FunctionComponent<unknown>"
            }
          ]
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Class name(s) to override styles",
        "name": "className",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageHeader/PageHeader.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "hidden": {
        "defaultValue": {
          "value": false
        },
        "description": "Whether to hide the component.\nThe component can be hidden for all viewport widths, or specified viewport widths.\nSome children have a default value for this prop:\n- `PageHeader.ContextArea`, `PageHeader.ContextAreaActions`, `PageHeader.ContextBar`, and `PageHeader.ParentLink` are hidden on regular and wide viewports by default.\n- `PageHeader.LeadingAction`, and `PageHeader.TrailingAction` are hidden on narrow viewports by default.",
        "name": "hidden",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageHeader/PageHeader.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean | ResponsiveValue<boolean>",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ResponsiveValue<boolean>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "sx": {
        "defaultValue": {
          "value": "{}"
        },
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "",
        "name": "aria-label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageHeader/PageHeader.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "PageHeader.ContextBar",
      "primerparentid": "drafts_page_header"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/PageHeader/PageHeader.tsx",
    "description": "Generic slot for any component above the title region. Use it for custom breadcrumbs and other navigation elements instead of ParentLink.",
    "displayName": "PageHeader.ContextBar",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Class name(s) to override styles",
        "name": "className",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageHeader/PageHeader.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "hidden": {
        "defaultValue": {
          "value": false
        },
        "description": "Whether to hide the component.\nThe component can be hidden for all viewport widths, or specified viewport widths.\nSome children have a default value for this prop:\n- `PageHeader.ContextArea`, `PageHeader.ContextAreaActions`, `PageHeader.ContextBar`, and `PageHeader.ParentLink` are hidden on regular and wide viewports by default.\n- `PageHeader.LeadingAction`, and `PageHeader.TrailingAction` are hidden on narrow viewports by default.",
        "name": "hidden",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageHeader/PageHeader.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean | ResponsiveValue<boolean>",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ResponsiveValue<boolean>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "sx": {
        "defaultValue": {
          "value": "{}"
        },
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "PageHeader.ContextAreaActions",
      "primerparentid": "drafts_page_header"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/PageHeader/PageHeader.tsx",
    "description": "",
    "displayName": "PageHeader.ContextAreaActions",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Class name(s) to override styles",
        "name": "className",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageHeader/PageHeader.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "hidden": {
        "defaultValue": {
          "value": false
        },
        "description": "Whether to hide the component.\nThe component can be hidden for all viewport widths, or specified viewport widths.\nSome children have a default value for this prop:\n- `PageHeader.ContextArea`, `PageHeader.ContextAreaActions`, `PageHeader.ContextBar`, and `PageHeader.ParentLink` are hidden on regular and wide viewports by default.\n- `PageHeader.LeadingAction`, and `PageHeader.TrailingAction` are hidden on narrow viewports by default.",
        "name": "hidden",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageHeader/PageHeader.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean | ResponsiveValue<boolean>",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ResponsiveValue<boolean>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "sx": {
        "defaultValue": {
          "value": "{}"
        },
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "PageHeader.TitleArea",
      "primerparentid": "drafts_page_header"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/PageHeader/PageHeader.tsx",
    "description": "The main title area of the page. Visible on all viewports.\nSub Components: PageHeader.LeadingVisual, PageHeader.Title, PageTitle.TrailingVisual",
    "displayName": "PageHeader.TitleArea",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": {
          "value": "h2"
        },
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | ... 162 more ... | FunctionComponent<...>",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<unknown, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<unknown>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageHeader/PageHeader.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"large\" | \"medium\" | \"subtitle\" | ResponsiveValue<\"large\" | \"medium\" | \"subtitle\">",
          "value": [
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            },
            {
              "value": "\"subtitle\""
            },
            {
              "value": "ResponsiveValue<\"large\" | \"medium\" | \"subtitle\">",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Class name(s) to override styles",
        "name": "className",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageHeader/PageHeader.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "hidden": {
        "defaultValue": {
          "value": false
        },
        "description": "Whether to hide the component.\nThe component can be hidden for all viewport widths, or specified viewport widths.\nSome children have a default value for this prop:\n- `PageHeader.ContextArea`, `PageHeader.ContextAreaActions`, `PageHeader.ContextBar`, and `PageHeader.ParentLink` are hidden on regular and wide viewports by default.\n- `PageHeader.LeadingAction`, and `PageHeader.TrailingAction` are hidden on narrow viewports by default.",
        "name": "hidden",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageHeader/PageHeader.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean | ResponsiveValue<boolean>",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ResponsiveValue<boolean>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "sx": {
        "defaultValue": {
          "value": "{}"
        },
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "PageHeader.LeadingAction",
      "primerparentid": "drafts_page_header"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/PageHeader/PageHeader.tsx",
    "description": "",
    "displayName": "PageHeader.LeadingAction",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Class name(s) to override styles",
        "name": "className",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageHeader/PageHeader.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "hidden": {
        "defaultValue": {
          "value": false
        },
        "description": "Whether to hide the component.\nThe component can be hidden for all viewport widths, or specified viewport widths.\nSome children have a default value for this prop:\n- `PageHeader.ContextArea`, `PageHeader.ContextAreaActions`, `PageHeader.ContextBar`, and `PageHeader.ParentLink` are hidden on regular and wide viewports by default.\n- `PageHeader.LeadingAction`, and `PageHeader.TrailingAction` are hidden on narrow viewports by default.",
        "name": "hidden",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageHeader/PageHeader.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean | ResponsiveValue<boolean>",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ResponsiveValue<boolean>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "sx": {
        "defaultValue": {
          "value": "{}"
        },
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "PageHeader.Breadcrumbs",
      "primerparentid": "drafts_page_header"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/PageHeader/PageHeader.tsx",
    "description": "",
    "displayName": "PageHeader.Breadcrumbs",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Class name(s) to override styles",
        "name": "className",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageHeader/PageHeader.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "hidden": {
        "defaultValue": {
          "value": false
        },
        "description": "Whether to hide the component.\nThe component can be hidden for all viewport widths, or specified viewport widths.\nSome children have a default value for this prop:\n- `PageHeader.ContextArea`, `PageHeader.ContextAreaActions`, `PageHeader.ContextBar`, and `PageHeader.ParentLink` are hidden on regular and wide viewports by default.\n- `PageHeader.LeadingAction`, and `PageHeader.TrailingAction` are hidden on narrow viewports by default.",
        "name": "hidden",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageHeader/PageHeader.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean | ResponsiveValue<boolean>",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ResponsiveValue<boolean>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "sx": {
        "defaultValue": {
          "value": "{}"
        },
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "PageHeader.LeadingVisual",
      "primerparentid": "drafts_page_header"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/PageHeader/PageHeader.tsx",
    "description": "",
    "displayName": "PageHeader.LeadingVisual",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Class name(s) to override styles",
        "name": "className",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageHeader/PageHeader.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "hidden": {
        "defaultValue": {
          "value": false
        },
        "description": "Whether to hide the component.\nThe component can be hidden for all viewport widths, or specified viewport widths.\nSome children have a default value for this prop:\n- `PageHeader.ContextArea`, `PageHeader.ContextAreaActions`, `PageHeader.ContextBar`, and `PageHeader.ParentLink` are hidden on regular and wide viewports by default.\n- `PageHeader.LeadingAction`, and `PageHeader.TrailingAction` are hidden on narrow viewports by default.",
        "name": "hidden",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageHeader/PageHeader.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean | ResponsiveValue<boolean>",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ResponsiveValue<boolean>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "sx": {
        "defaultValue": {
          "value": "{}"
        },
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "PageHeader.Title",
      "primerparentid": "drafts_page_header"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/PageHeader/PageHeader.tsx",
    "description": "",
    "displayName": "PageHeader.Title",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": {
          "value": "h2"
        },
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageHeader/PageHeader.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\"",
          "value": [
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            }
          ]
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Class name(s) to override styles",
        "name": "className",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageHeader/PageHeader.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "hidden": {
        "defaultValue": {
          "value": false
        },
        "description": "Whether to hide the component.\nThe component can be hidden for all viewport widths, or specified viewport widths.\nSome children have a default value for this prop:\n- `PageHeader.ContextArea`, `PageHeader.ContextAreaActions`, `PageHeader.ContextBar`, and `PageHeader.ParentLink` are hidden on regular and wide viewports by default.\n- `PageHeader.LeadingAction`, and `PageHeader.TrailingAction` are hidden on narrow viewports by default.",
        "name": "hidden",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageHeader/PageHeader.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean | ResponsiveValue<boolean>",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ResponsiveValue<boolean>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "sx": {
        "defaultValue": {
          "value": "{}"
        },
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "PageHeader.TrailingVisual",
      "primerparentid": "drafts_page_header"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/PageHeader/PageHeader.tsx",
    "description": "",
    "displayName": "PageHeader.TrailingVisual",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Class name(s) to override styles",
        "name": "className",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageHeader/PageHeader.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "hidden": {
        "defaultValue": {
          "value": false
        },
        "description": "Whether to hide the component.\nThe component can be hidden for all viewport widths, or specified viewport widths.\nSome children have a default value for this prop:\n- `PageHeader.ContextArea`, `PageHeader.ContextAreaActions`, `PageHeader.ContextBar`, and `PageHeader.ParentLink` are hidden on regular and wide viewports by default.\n- `PageHeader.LeadingAction`, and `PageHeader.TrailingAction` are hidden on narrow viewports by default.",
        "name": "hidden",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageHeader/PageHeader.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean | ResponsiveValue<boolean>",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ResponsiveValue<boolean>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "sx": {
        "defaultValue": {
          "value": "{}"
        },
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "PageHeader.TrailingAction",
      "primerparentid": "drafts_page_header"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/PageHeader/PageHeader.tsx",
    "description": "",
    "displayName": "PageHeader.TrailingAction",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Class name(s) to override styles",
        "name": "className",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageHeader/PageHeader.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "hidden": {
        "defaultValue": {
          "value": false
        },
        "description": "Whether to hide the component.\nThe component can be hidden for all viewport widths, or specified viewport widths.\nSome children have a default value for this prop:\n- `PageHeader.ContextArea`, `PageHeader.ContextAreaActions`, `PageHeader.ContextBar`, and `PageHeader.ParentLink` are hidden on regular and wide viewports by default.\n- `PageHeader.LeadingAction`, and `PageHeader.TrailingAction` are hidden on narrow viewports by default.",
        "name": "hidden",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageHeader/PageHeader.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean | ResponsiveValue<boolean>",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ResponsiveValue<boolean>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "sx": {
        "defaultValue": {
          "value": "{}"
        },
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "PageHeader.Actions",
      "primerparentid": "drafts_page_header"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/PageHeader/PageHeader.tsx",
    "description": "",
    "displayName": "PageHeader.Actions",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Class name(s) to override styles",
        "name": "className",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageHeader/PageHeader.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "hidden": {
        "defaultValue": {
          "value": false
        },
        "description": "Whether to hide the component.\nThe component can be hidden for all viewport widths, or specified viewport widths.\nSome children have a default value for this prop:\n- `PageHeader.ContextArea`, `PageHeader.ContextAreaActions`, `PageHeader.ContextBar`, and `PageHeader.ParentLink` are hidden on regular and wide viewports by default.\n- `PageHeader.LeadingAction`, and `PageHeader.TrailingAction` are hidden on narrow viewports by default.",
        "name": "hidden",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageHeader/PageHeader.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean | ResponsiveValue<boolean>",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ResponsiveValue<boolean>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "sx": {
        "defaultValue": {
          "value": "{}"
        },
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "PageHeader.Description",
      "primerparentid": "drafts_page_header"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/PageHeader/PageHeader.tsx",
    "description": "The description area of the header. Visible on all viewports",
    "displayName": "PageHeader.Description",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Class name(s) to override styles",
        "name": "className",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageHeader/PageHeader.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "hidden": {
        "defaultValue": {
          "value": false
        },
        "description": "Whether to hide the component.\nThe component can be hidden for all viewport widths, or specified viewport widths.\nSome children have a default value for this prop:\n- `PageHeader.ContextArea`, `PageHeader.ContextAreaActions`, `PageHeader.ContextBar`, and `PageHeader.ParentLink` are hidden on regular and wide viewports by default.\n- `PageHeader.LeadingAction`, and `PageHeader.TrailingAction` are hidden on narrow viewports by default.",
        "name": "hidden",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageHeader/PageHeader.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean | ResponsiveValue<boolean>",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ResponsiveValue<boolean>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "sx": {
        "defaultValue": {
          "value": "{}"
        },
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "PageHeader.Navigation",
      "primerparentid": "drafts_page_header"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/PageHeader/PageHeader.tsx",
    "description": "The local navigation area of the header. Visible on all viewports",
    "displayName": "PageHeader.Navigation",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": {
          "value": "h2"
        },
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageHeader/PageHeader.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"div\" | \"nav\"",
          "value": [
            {
              "value": "\"div\""
            },
            {
              "value": "\"nav\""
            }
          ]
        }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "",
        "name": "aria-label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageHeader/PageHeader.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "",
        "name": "aria-labelledby",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageHeader/PageHeader.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Class name(s) to override styles",
        "name": "className",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageHeader/PageHeader.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "hidden": {
        "defaultValue": {
          "value": false
        },
        "description": "Whether to hide the component.\nThe component can be hidden for all viewport widths, or specified viewport widths.\nSome children have a default value for this prop:\n- `PageHeader.ContextArea`, `PageHeader.ContextAreaActions`, `PageHeader.ContextBar`, and `PageHeader.ParentLink` are hidden on regular and wide viewports by default.\n- `PageHeader.LeadingAction`, and `PageHeader.TrailingAction` are hidden on narrow viewports by default.",
        "name": "hidden",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageHeader/PageHeader.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean | ResponsiveValue<boolean>",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ResponsiveValue<boolean>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "sx": {
        "defaultValue": {
          "value": "{}"
        },
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "PageLayout",
      "primerid": "page_layout",
      "primerstatus": "alpha",
      "primera11yreviewed": "true"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/PageLayout/PageLayout.tsx",
    "description": "Page layout defines the header, main, pane, and footer areas of a page.",
    "displayName": "PageLayout",
    "methods": [],
    "props": {
      "containerWidth": {
        "defaultValue": {
          "value": "xlarge"
        },
        "description": "The maximum width of the page container",
        "name": "containerWidth",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"large\" | \"medium\" | \"full\" | \"xlarge\"",
          "value": [
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            },
            {
              "value": "\"full\""
            },
            {
              "value": "\"xlarge\""
            }
          ]
        }
      },
      "padding": {
        "defaultValue": {
          "value": "none"
        },
        "description": "The spacing between the outer edges of the page container and the viewport",
        "name": "padding",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"normal\" | \"none\" | \"condensed\"",
          "value": [
            {
              "value": "\"normal\""
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"condensed\""
            }
          ]
        }
      },
      "rowGap": {
        "defaultValue": {
          "value": "normal"
        },
        "description": "The spacing between the content, header, and footer areas",
        "name": "rowGap",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"normal\" | \"none\" | \"condensed\"",
          "value": [
            {
              "value": "\"normal\""
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"condensed\""
            }
          ]
        }
      },
      "columnGap": {
        "defaultValue": {
          "value": "normal"
        },
        "description": "The spacing between the content area and pane(s)",
        "name": "columnGap",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"normal\" | \"none\" | \"condensed\"",
          "value": [
            {
              "value": "\"normal\""
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"condensed\""
            }
          ]
        }
      },
      "_slotsConfig": {
        "defaultValue": null,
        "description": "Private prop to allow SplitPageLayout to customize slot components",
        "name": "_slotsConfig",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Record<\"footer\" | \"header\", ElementType<any, keyof IntrinsicElements>>",
          "value": [
            {
              "value": "Record<\"footer\" | \"header\", ElementType<any, keyof IntrinsicElements>>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "sx": {
        "defaultValue": {
          "value": "{}"
        },
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "PageLayout.Header",
      "primerparentid": "page_layout"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/PageLayout/PageLayout.tsx",
    "description": "The header area of the overall page layout.",
    "displayName": "PageLayout.Header",
    "methods": [],
    "props": {
      "aria-label": {
        "defaultValue": null,
        "description": "A unique label for the rendered banner landmark",
        "name": "aria-label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "An id to an element which uniquely labels the rendered banner landmark",
        "name": "aria-labelledby",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "padding": {
        "defaultValue": {
          "value": "none"
        },
        "description": "",
        "name": "padding",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"normal\" | \"none\" | \"condensed\"",
          "value": [
            {
              "value": "\"normal\""
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"condensed\""
            }
          ]
        }
      },
      "divider": {
        "defaultValue": {
          "value": "none"
        },
        "description": "",
        "name": "divider",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"line\" | \"none\" | ResponsiveValue<\"line\" | \"none\", \"line\" | \"none\" | \"filled\">",
          "value": [
            {
              "value": "\"line\""
            },
            {
              "value": "\"none\""
            },
            {
              "value": "ResponsiveValue<\"line\" | \"none\", \"line\" | \"none\" | \"filled\">",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "dividerWhenNarrow": {
        "defaultValue": {
          "value": "inherit"
        },
        "description": "@deprecated Use the `divider` prop with a responsive value instead.\n\nBefore:\n```\ndivider=\"line\"\ndividerWhenNarrow=\"filled\"\n```\n\nAfter:\n```\ndivider={{regular: 'line', narrow: 'filled'}}\n```",
        "name": "dividerWhenNarrow",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"line\" | \"inherit\" | \"none\" | \"filled\"",
          "value": [
            {
              "value": "\"line\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"filled\""
            }
          ]
        }
      },
      "hidden": {
        "defaultValue": {
          "value": false
        },
        "description": "",
        "name": "hidden",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean | ResponsiveValue<boolean>",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ResponsiveValue<boolean>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "sx": {
        "defaultValue": {
          "value": "{}"
        },
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "PageLayout.Content",
      "primerparentid": "page_layout"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/PageLayout/PageLayout.tsx",
    "description": "The main content area.",
    "displayName": "PageLayout.Content",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": {
          "value": "main"
        },
        "description": "Provide an optional element type for the outermost element rendered by the component.",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ElementType<any, keyof IntrinsicElements>",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "A unique label for the rendered main landmark",
        "name": "aria-label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "An id to an element which uniquely labels the rendered main landmark",
        "name": "aria-labelledby",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "width": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "The maximum width of the content region.",
        "name": "width",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"large\" | \"medium\" | \"full\" | \"xlarge\"",
          "value": [
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            },
            {
              "value": "\"full\""
            },
            {
              "value": "\"xlarge\""
            }
          ]
        }
      },
      "padding": {
        "defaultValue": {
          "value": "none"
        },
        "description": "The amount of padding inside the content.",
        "name": "padding",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"normal\" | \"none\" | \"condensed\"",
          "value": [
            {
              "value": "\"normal\""
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"condensed\""
            }
          ]
        }
      },
      "hidden": {
        "defaultValue": {
          "value": false
        },
        "description": "",
        "name": "hidden",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean | ResponsiveValue<boolean>",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ResponsiveValue<boolean>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "sx": {
        "defaultValue": {
          "value": "{}"
        },
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "PageLayout.Pane",
      "primerparentid": "page_layout"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/PageLayout/PageLayout.tsx",
    "description": "Area for supplemental page content. Used like sidebars on wide viewports.",
    "displayName": "PageLayout.Pane",
    "methods": [],
    "props": {
      "position": {
        "defaultValue": null,
        "description": "Which side of the page the pane should be on. Can be changed for different viewport widths.",
        "name": "position",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"end\" | \"start\" | ResponsiveValue<\"end\" | \"start\">",
          "value": [
            {
              "value": "\"end\""
            },
            {
              "value": "\"start\""
            },
            {
              "value": "ResponsiveValue<\"end\" | \"start\">",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "positionWhenNarrow": {
        "defaultValue": {
          "value": "inherit"
        },
        "description": "@deprecated Use the `position` prop with a responsive value instead.\n\nBefore:\n```\nposition=\"start\"\npositionWhenNarrow=\"end\"\n```\n\nAfter:\n```\nposition={{regular: 'start', narrow: 'end'}}\n```",
        "name": "positionWhenNarrow",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"end\" | \"start\" | \"inherit\"",
          "value": [
            {
              "value": "\"end\""
            },
            {
              "value": "\"start\""
            },
            {
              "value": "\"inherit\""
            }
          ]
        }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "Id of an element that acts as a label for the pane. Required if the pane overflows and doesn't have aria-label.",
        "name": "aria-labelledby",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "Label for the pane. Required if the pane overflows and doesn't have aria-labelledby.",
        "name": "aria-label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "width": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "The width of the pane. If using custom widths, provide an object with keys 'min', 'max' and 'default'.",
        "name": "width",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"small\" | \"large\" | \"medium\" | CustomWidthOptions",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            },
            {
              "value": "CustomWidthOptions",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "minWidth": {
        "defaultValue": {
          "value": 256
        },
        "description": "The minimum width of the pane.",
        "name": "minWidth",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "number",
          "value": [
            {
              "value": "number"
            }
          ]
        }
      },
      "resizable": {
        "defaultValue": {
          "value": false
        },
        "description": "When true, the pane may be resized by the user.",
        "name": "resizable",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "widthStorageKey": {
        "defaultValue": {
          "value": "paneWidth"
        },
        "description": "Provide a key used by localStorage to persist the size of the pane on the client.",
        "name": "widthStorageKey",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "padding": {
        "defaultValue": {
          "value": "none"
        },
        "description": "The amount of padding inside the pane.",
        "name": "padding",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"normal\" | \"none\" | \"condensed\"",
          "value": [
            {
              "value": "\"normal\""
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"condensed\""
            }
          ]
        }
      },
      "divider": {
        "defaultValue": {
          "value": "none"
        },
        "description": "The divider style between the pane and the content region.",
        "name": "divider",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"line\" | \"none\" | ResponsiveValue<\"line\" | \"none\", \"line\" | \"none\" | \"filled\">",
          "value": [
            {
              "value": "\"line\""
            },
            {
              "value": "\"none\""
            },
            {
              "value": "ResponsiveValue<\"line\" | \"none\", \"line\" | \"none\" | \"filled\">",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "dividerWhenNarrow": {
        "defaultValue": {
          "value": "inherit"
        },
        "description": "@deprecated Use the `divider` prop with a responsive value instead.\n\nBefore:\n```\ndivider=\"line\"\ndividerWhenNarrow=\"filled\"\n```\n\nAfter:\n```\ndivider={{regular: 'line', narrow: 'filled'}}\n```",
        "name": "dividerWhenNarrow",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"line\" | \"inherit\" | \"none\" | \"filled\"",
          "value": [
            {
              "value": "\"line\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"filled\""
            }
          ]
        }
      },
      "sticky": {
        "defaultValue": {
          "value": false
        },
        "description": "Whether the pane should stick to the top of the screen while the content scrolls.",
        "name": "sticky",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "offsetHeader": {
        "defaultValue": {
          "value": 0
        },
        "description": "Use offsetHeader along with the sticky prop to push the sticky pane down to make room for a sticky header if necessary. Use the type `string` to specify the height with a unit i.e. 5rem; otherwise the type `number` will be taken as px.",
        "name": "offsetHeader",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string | number",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "number"
            }
          ]
        }
      },
      "hidden": {
        "defaultValue": {
          "value": false
        },
        "description": "Whether the pane is hidden. Can be changed for different viewport widths.",
        "name": "hidden",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean | ResponsiveValue<boolean>",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ResponsiveValue<boolean>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "id": {
        "defaultValue": null,
        "description": "May be used to override the default ID passed to the pane element.",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": {
          "value": "{}"
        },
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "PageLayout.Footer",
      "primerparentid": "page_layout"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/PageLayout/PageLayout.tsx",
    "description": "The footer area of the overall page layout.",
    "displayName": "PageLayout.Footer",
    "methods": [],
    "props": {
      "aria-label": {
        "defaultValue": null,
        "description": "A unique label for the rendered contentinfo landmark",
        "name": "aria-label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "An id to an element which uniquely labels the rendered contentinfo landmark",
        "name": "aria-labelledby",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "padding": {
        "defaultValue": {
          "value": "none"
        },
        "description": "The amount of padding inside the footer.",
        "name": "padding",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"normal\" | \"none\" | \"condensed\"",
          "value": [
            {
              "value": "\"normal\""
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"condensed\""
            }
          ]
        }
      },
      "divider": {
        "defaultValue": {
          "value": "none"
        },
        "description": "The divider style between the footer and the content region. Can be changed for different viewport widths.",
        "name": "divider",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"line\" | \"none\" | ResponsiveValue<\"line\" | \"none\", \"line\" | \"none\" | \"filled\">",
          "value": [
            {
              "value": "\"line\""
            },
            {
              "value": "\"none\""
            },
            {
              "value": "ResponsiveValue<\"line\" | \"none\", \"line\" | \"none\" | \"filled\">",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "dividerWhenNarrow": {
        "defaultValue": {
          "value": "inherit"
        },
        "description": "@deprecated Use the `divider` prop with a responsive value instead.\n\nBefore:\n```\ndivider=\"line\"\ndividerWhenNarrow=\"filled\"\n```\n\nAfter:\n```\ndivider={{regular: 'line', narrow: 'filled'}}\n```",
        "name": "dividerWhenNarrow",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"line\" | \"inherit\" | \"none\" | \"filled\"",
          "value": [
            {
              "value": "\"line\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"filled\""
            }
          ]
        }
      },
      "hidden": {
        "defaultValue": {
          "value": false
        },
        "description": "Whether the footer is hidden.  Can be changed for different viewport widths.",
        "name": "hidden",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean | ResponsiveValue<boolean>",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ResponsiveValue<boolean>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "sx": {
        "defaultValue": {
          "value": "{}"
        },
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "pagehead",
      "primerstatus": "deprecated",
      "primera11yreviewed": "false",
      "deprecated": ""
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Pagehead/Pagehead.tsx",
    "description": "Pagehead denotes the title and start of a given section.",
    "displayName": "Pagehead",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "pagination",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Pagination/Pagination.tsx",
    "description": "Pagination is a horizontal set of links to navigate paginated content.",
    "displayName": "Pagination",
    "methods": [],
    "props": {
      "theme": {
        "defaultValue": null,
        "description": "",
        "name": "theme",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Pagination/Pagination.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Record<string, unknown>",
          "value": [
            {
              "value": "Record<string, unknown>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "pageCount": {
        "defaultValue": null,
        "description": "",
        "name": "pageCount",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Pagination/Pagination.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "currentPage": {
        "defaultValue": null,
        "description": "",
        "name": "currentPage",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Pagination/Pagination.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "onPageChange": {
        "defaultValue": null,
        "description": "",
        "name": "onPageChange",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Pagination/Pagination.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "((e: MouseEvent<Element, MouseEvent>, n: number) => void)",
          "value": [
            {
              "value": "(e: MouseEvent<Element, MouseEvent>, n: number) => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "hrefBuilder": {
        "defaultValue": null,
        "description": "",
        "name": "hrefBuilder",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Pagination/Pagination.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "((n: number) => string)",
          "value": [
            {
              "value": "(n: number) => string",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "marginPageCount": {
        "defaultValue": {
          "value": 1
        },
        "description": "",
        "name": "marginPageCount",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Pagination/Pagination.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "number",
          "value": [
            {
              "value": "number"
            }
          ]
        }
      },
      "showPages": {
        "defaultValue": {
          "value": true
        },
        "description": "",
        "name": "showPages",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Pagination/Pagination.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean | ResponsiveValue<boolean>",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ResponsiveValue<boolean>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "surroundingPageCount": {
        "defaultValue": {
          "value": 2
        },
        "description": "",
        "name": "surroundingPageCount",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Pagination/Pagination.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "number",
          "value": [
            {
              "value": "number"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "pointer_box",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/PointerBox/PointerBox.tsx",
    "description": "A customisable bordered box with a caret pointer",
    "displayName": "PointerBox",
    "methods": [],
    "props": {
      "caret": {
        "defaultValue": null,
        "description": "Sets the location of the caret. The format is [edge]-[position on edge]. For example, right-top will position the caret on the top of the right edge of the box.",
        "name": "caret",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PointerBox/PointerBox.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Location",
          "value": [
            {
              "value": "\"left\""
            },
            {
              "value": "\"right\""
            },
            {
              "value": "\"top\""
            },
            {
              "value": "\"top-left\""
            },
            {
              "value": "\"top-right\""
            },
            {
              "value": "\"right-top\""
            },
            {
              "value": "\"right-bottom\""
            },
            {
              "value": "\"bottom\""
            },
            {
              "value": "\"bottom-left\""
            },
            {
              "value": "\"bottom-right\""
            },
            {
              "value": "\"left-top\""
            },
            {
              "value": "\"left-bottom\""
            }
          ]
        }
      },
      "bg": {
        "defaultValue": null,
        "description": "Background color of the box\nThe color utility parses a component's `color` and `bg` props and converts them into CSS declarations.\nBy default the raw value of the prop is returned.\n\nColor palettes can be configured with the ThemeProvider to use keys as prop values, with support for dot notation.\nArray values are converted into responsive values.\n\n[MDN Reference](https://developer.mozilla.org/en-US/docs/Web/CSS/background-color)",
        "name": "bg",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PointerBox/PointerBox.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/styled-system/index.d.ts",
            "name": "BackgroundColorProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "(string & ResponsiveValue<string | number | symbol, Required<Theme<TLengthStyledSystem>>>)",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "string & (string | number | symbol | null)[]"
            },
            {
              "value": "string & { [x: string]: string | number | symbol | undefined; [x: number]: string | number | symbol | undefined; }"
            }
          ]
        }
      },
      "borderColor": {
        "defaultValue": null,
        "description": "Color of the border around the box\nThe border-color shorthand CSS property sets the color of all sides of an element's border.\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-color)",
        "name": "borderColor",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PointerBox/PointerBox.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/styled-system/index.d.ts",
            "name": "BorderColorProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "(string & ResponsiveValue<string | number | symbol, Required<Theme<TLengthStyledSystem>>>)",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "string & (string | number | symbol | null)[]"
            },
            {
              "value": "string & { [x: string]: string | number | symbol | undefined; [x: number]: string | number | symbol | undefined; }"
            }
          ]
        }
      },
      "border": {
        "defaultValue": null,
        "description": "Width of the border around the box\nThe border CSS property sets an element's border. It's a shorthand for border-width, border-style,\nand border-color.\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border)",
        "name": "border",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PointerBox/PointerBox.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/styled-system/index.d.ts",
            "name": "BorderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "((string | number) & ResponsiveValue<Border<TLengthStyledSystem>, Required<Theme<TLengthStyledSystem>>>)",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "string & (Border<TLengthStyledSystem> | null)[]"
            },
            {
              "value": "string & { [x: string]: Border<TLengthStyledSystem> | undefined; [x: number]: Border<TLengthStyledSystem> | undefined; }"
            },
            {
              "value": "number & (Border<TLengthStyledSystem> | null)[]"
            },
            {
              "value": "number & { [x: string]: Border<TLengthStyledSystem> | undefined; [x: number]: Border<TLengthStyledSystem> | undefined; }"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          },
          {
            "fileName": "react/packages/react/src/PointerBox/PointerBox.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "(BetterSystemStyleObject & { bg?: string; backgroundColor?: string | undefined; borderColor?: string | undefined; }) | undefined",
          "value": [
            {
              "value": "SystemCssProperties & { bg?: string | undefined; backgroundColor?: string | undefined; borderColor?: string | undefined; }"
            },
            {
              "value": "CSSPseudoSelectorProps & { bg?: string | undefined; backgroundColor?: string | undefined; borderColor?: string | undefined; }"
            },
            {
              "value": "CSSSelectorObject & { bg?: string | undefined; backgroundColor?: string | undefined; borderColor?: string | undefined; }"
            },
            {
              "value": "VariantProperty & { bg?: string | undefined; backgroundColor?: string | undefined; borderColor?: string | undefined; }"
            },
            {
              "value": "UseThemeFunction & { bg?: string | undefined; backgroundColor?: string | undefined; borderColor?: string | undefined; }"
            },
            {
              "value": "EmotionLabel & { bg?: string | undefined; backgroundColor?: string | undefined; borderColor?: string | undefined; }"
            },
            {
              "value": "BetterCssProperties & { bg?: string | undefined; backgroundColor?: string | undefined; borderColor?: string | undefined; }"
            },
            {
              "value": "CSSCustomProperties & { bg?: string | undefined; backgroundColor?: string | undefined; borderColor?: string | undefined; }"
            },
            {
              "value": "CSSSelectorObject & { bg?: string | undefined; backgroundColor?: string | undefined; borderColor?: string | undefined; }"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "popover",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Popover/Popover.tsx",
    "description": "Popover is used to bring attention to specific user interface elements.",
    "displayName": "Popover",
    "methods": [],
    "props": {
      "open": {
        "defaultValue": null,
        "description": "Controls the visibility of the popover.",
        "name": "open",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Popover/Popover.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "caret": {
        "defaultValue": {
          "value": "top"
        },
        "description": "Controls the position of the caret\n@deprecated `caret` is deprecated and will be removed in v38.",
        "name": "caret",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Popover/Popover.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "CaretPosition",
          "value": [
            {
              "value": "\"left\""
            },
            {
              "value": "\"right\""
            },
            {
              "value": "\"top\""
            },
            {
              "value": "\"top-left\""
            },
            {
              "value": "\"top-right\""
            },
            {
              "value": "\"right-top\""
            },
            {
              "value": "\"right-bottom\""
            },
            {
              "value": "\"bottom\""
            },
            {
              "value": "\"bottom-left\""
            },
            {
              "value": "\"bottom-right\""
            },
            {
              "value": "\"left-top\""
            },
            {
              "value": "\"left-bottom\""
            }
          ]
        }
      },
      "relative": {
        "defaultValue": null,
        "description": "Set to true to render the popover using relative positioning.",
        "name": "relative",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Popover/Popover.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Popover.Content",
      "primerparentid": "popover"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Popover/Popover.tsx",
    "description": "",
    "displayName": "Popover.Content",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "param": "root The element that will be the root for portals created in this container\nname The name of the container, to be used with the `containerName` prop on the Portal Component.\nIf name is not specified, registers the default portal root."
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Portal/Portal.tsx",
    "description": "Register a container to serve as a portal root.",
    "displayName": "registerPortalRoot",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "see": "https://reactjs.org/docs/portals.html",
      "primerid": "portal",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Portal/Portal.tsx",
    "description": "Creates a React Portal, placing all children in a separate physical DOM root node.",
    "displayName": "Portal",
    "methods": [],
    "props": {
      "onMount": {
        "defaultValue": null,
        "description": "Called when this portal is added to the DOM",
        "name": "onMount",
        "parent": {
          "fileName": "react/packages/react/src/Portal/Portal.tsx",
          "name": "PortalProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Portal/Portal.tsx",
            "name": "PortalProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "(() => void)",
          "value": [
            {
              "value": "() => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "containerName": {
        "defaultValue": null,
        "description": "Optional. Mount this portal at the container specified\nby this name. The container must be previously registered\nwith `registerPortal`.",
        "name": "containerName",
        "parent": {
          "fileName": "react/packages/react/src/Portal/Portal.tsx",
          "name": "PortalProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Portal/Portal.tsx",
            "name": "PortalProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "ProgressBar.Item",
      "primerparentid": "progress_bar"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ProgressBar/ProgressBar.tsx",
    "description": "A segment of a ProgressBar with multiple parts.",
    "displayName": "ProgressBar.Item",
    "methods": [],
    "props": {
      "aria-label": {
        "defaultValue": null,
        "description": "Defines a string value that labels the current element.\n@see aria-labelledby.",
        "name": "aria-label",
        "parent": {
          "fileName": "react/node_modules/@types/react/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "AriaAttributes"
          },
          {
            "fileName": "react/packages/react/src/ProgressBar/ProgressBar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "progress": {
        "defaultValue": {
          "value": "0"
        },
        "description": "Used to set the size of the green bar",
        "name": "progress",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ProgressBar/ProgressBar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string | number",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "number"
            }
          ]
        }
      },
      "bg": {
        "defaultValue": {
          "value": "success.emphasis"
        },
        "description": "Set the progress segment color",
        "name": "bg",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ProgressBar/ProgressBar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "progress_bar",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ProgressBar/ProgressBar.tsx",
    "description": "Progress bar visualizes one or more parts of a whole.",
    "displayName": "ProgressBar",
    "methods": [],
    "props": {
      "bg": {
        "defaultValue": {
          "value": "success.emphasis"
        },
        "description": "Set the progress bar color\nSet the progress segment color",
        "name": "bg",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ProgressBar/ProgressBar.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/ProgressBar/ProgressBar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "inline": {
        "defaultValue": null,
        "description": "Styles the progress bar inline",
        "name": "inline",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ProgressBar/ProgressBar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "barSize": {
        "defaultValue": {
          "value": "default"
        },
        "description": "Controls the height of the progress bar. If omitted, height is set to the default height.",
        "name": "barSize",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ProgressBar/ProgressBar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"small\" | \"default\" | \"large\"",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"default\""
            },
            {
              "value": "\"large\""
            }
          ]
        }
      },
      "animated": {
        "defaultValue": null,
        "description": "Whether the filled in area(s) of the progress bar will be animated or not",
        "name": "animated",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ProgressBar/ProgressBar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "progress": {
        "defaultValue": {
          "value": "0"
        },
        "description": "Used to set the size of the green bar",
        "name": "progress",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ProgressBar/ProgressBar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string | number",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "number"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "radio",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Radio/Radio.tsx",
    "description": "An accessible, native radio component for selecting one option from a list.",
    "displayName": "Radio",
    "methods": [],
    "props": {
      "name": {
        "defaultValue": null,
        "description": "Name attribute of the input element. Required for grouping radio inputs",
        "name": "name",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Radio/Radio.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "InputHTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Apply inactive visual appearance to the radio button",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Radio/Radio.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "InputHTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "value": {
        "defaultValue": null,
        "description": "A unique value that is never shown to the user.\nUsed during form submission and to identify which radio button in a group is selected",
        "name": "value",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Radio/Radio.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "InputHTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string | (string & readonly string[])",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "string & readonly string[]"
            }
          ]
        }
      },
      "checked": {
        "defaultValue": null,
        "description": "Indicates whether the radio button is selected",
        "name": "checked",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Radio/Radio.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "InputHTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Indicates whether the radio button must be checked before the form can be submitted",
        "name": "required",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Radio/Radio.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "InputHTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "validationStatus": {
        "defaultValue": null,
        "description": "Only used to inform ARIA attributes. Individual radio inputs do not have validation styles.",
        "name": "validationStatus",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Radio/Radio.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "FormValidationStatus",
          "value": [
            {
              "value": "\"success\""
            },
            {
              "value": "\"error\""
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "radio_group",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/RadioGroup/RadioGroup.tsx",
    "description": "Radio group is used to render a short list of mutually exclusive options.",
    "displayName": "RadioGroup",
    "methods": [],
    "props": {
      "onChange": {
        "defaultValue": null,
        "description": "An onChange handler that gets called when the selection changes",
        "name": "onChange",
        "declarations": [
          {
            "fileName": "react/packages/react/src/RadioGroup/RadioGroup.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "((selected: string | null, e?: ChangeEvent<HTMLInputElement>) => void) | undefined",
          "value": [
            {
              "value": "(selected: string | null, e?: ChangeEvent<HTMLInputElement> | undefined) => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "name": {
        "defaultValue": null,
        "description": "The name used to identify this group of radios",
        "name": "name",
        "declarations": [
          {
            "fileName": "react/packages/react/src/RadioGroup/RadioGroup.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "Used when associating the input group with a label other than `CheckboxOrRadioGroup.Label`",
        "name": "aria-labelledby",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroup.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the input group allows user input",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroup.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "id": {
        "defaultValue": null,
        "description": "The unique identifier for this input group. Used to associate the label, validation text, and caption text.\nYou may want a custom ID to make it easier to select elements in integration tests.",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroup.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "required": {
        "defaultValue": null,
        "description": "If true, the user must make a selection before the owning form can be submitted",
        "name": "required",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroup.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "RadioGroup.Caption",
      "primerparentid": "radio_group"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/RadioGroup/RadioGroup.tsx",
    "description": "The caption with contextual information about the set of related checkboxes.",
    "displayName": "RadioGroup.Caption",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "RadioGroup.Label",
      "primerparentid": "radio_group"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/RadioGroup/RadioGroup.tsx",
    "description": "The name for the set of related checkboxes.",
    "displayName": "RadioGroup.Label",
    "methods": [],
    "props": {
      "visuallyHidden": {
        "defaultValue": null,
        "description": "Whether to visually hide the fieldset legend",
        "name": "visuallyHidden",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroupLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "RadioGroup.Validation",
      "primerparentid": "radio_group"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/RadioGroup/RadioGroup.tsx",
    "description": "The message about the validation status of the set of related checkboxes.",
    "displayName": "RadioGroup.Validation",
    "methods": [],
    "props": {
      "variant": {
        "defaultValue": null,
        "description": "Changes the visual style to match the validation status",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroupValidation.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "FormValidationStatus",
          "value": [
            {
              "value": "\"success\""
            },
            {
              "value": "\"error\""
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "relative_time",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/RelativeTime/RelativeTime.tsx",
    "description": "Relative time displays time in a way that is clear, concise, and accessible.",
    "displayName": "RelativeTime",
    "methods": [],
    "props": {
      "format": {
        "defaultValue": null,
        "description": "",
        "name": "format",
        "declarations": [],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Format",
          "value": [
            {
              "value": "\"datetime\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"relative\""
            },
            {
              "value": "\"micro\""
            },
            {
              "value": "\"elapsed\""
            },
            {
              "value": "\"duration\""
            }
          ]
        }
      },
      "onRelativeTimeUpdated": {
        "defaultValue": null,
        "description": "",
        "name": "onRelativeTimeUpdated",
        "declarations": [],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "((event: RelativeTimeUpdatedEvent) => void) | null",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "(event: RelativeTimeUpdatedEvent) => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "second": {
        "defaultValue": null,
        "description": "",
        "name": "second",
        "declarations": [],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"numeric\" | \"2-digit\"",
          "value": [
            {
              "value": "\"numeric\""
            },
            {
              "value": "\"2-digit\""
            }
          ]
        }
      },
      "minute": {
        "defaultValue": null,
        "description": "",
        "name": "minute",
        "declarations": [],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"numeric\" | \"2-digit\"",
          "value": [
            {
              "value": "\"numeric\""
            },
            {
              "value": "\"2-digit\""
            }
          ]
        }
      },
      "hour": {
        "defaultValue": null,
        "description": "",
        "name": "hour",
        "declarations": [],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"numeric\" | \"2-digit\"",
          "value": [
            {
              "value": "\"numeric\""
            },
            {
              "value": "\"2-digit\""
            }
          ]
        }
      },
      "weekday": {
        "defaultValue": null,
        "description": "",
        "name": "weekday",
        "declarations": [],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"narrow\" | \"short\" | \"long\"",
          "value": [
            {
              "value": "\"narrow\""
            },
            {
              "value": "\"short\""
            },
            {
              "value": "\"long\""
            }
          ]
        }
      },
      "day": {
        "defaultValue": null,
        "description": "",
        "name": "day",
        "declarations": [],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"numeric\" | \"2-digit\"",
          "value": [
            {
              "value": "\"numeric\""
            },
            {
              "value": "\"2-digit\""
            }
          ]
        }
      },
      "month": {
        "defaultValue": null,
        "description": "",
        "name": "month",
        "declarations": [],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"numeric\" | \"narrow\" | \"2-digit\" | \"short\" | \"long\"",
          "value": [
            {
              "value": "\"numeric\""
            },
            {
              "value": "\"narrow\""
            },
            {
              "value": "\"2-digit\""
            },
            {
              "value": "\"short\""
            },
            {
              "value": "\"long\""
            }
          ]
        }
      },
      "year": {
        "defaultValue": null,
        "description": "",
        "name": "year",
        "declarations": [],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"numeric\" | \"2-digit\"",
          "value": [
            {
              "value": "\"numeric\""
            },
            {
              "value": "\"2-digit\""
            }
          ]
        }
      },
      "timeZoneName": {
        "defaultValue": null,
        "description": "",
        "name": "timeZoneName",
        "declarations": [],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"short\" | \"long\" | \"shortOffset\" | \"longOffset\" | \"shortGeneric\" | \"longGeneric\"",
          "value": [
            {
              "value": "\"short\""
            },
            {
              "value": "\"long\""
            },
            {
              "value": "\"shortOffset\""
            },
            {
              "value": "\"longOffset\""
            },
            {
              "value": "\"shortGeneric\""
            },
            {
              "value": "\"longGeneric\""
            }
          ]
        }
      },
      "threshold": {
        "defaultValue": null,
        "description": "",
        "name": "threshold",
        "declarations": [],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "tense": {
        "defaultValue": null,
        "description": "",
        "name": "tense",
        "declarations": [],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Tense",
          "value": [
            {
              "value": "\"auto\""
            },
            {
              "value": "\"past\""
            },
            {
              "value": "\"future\""
            }
          ]
        }
      },
      "precision": {
        "defaultValue": null,
        "description": "",
        "name": "precision",
        "declarations": [],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"second\" | \"minute\" | \"hour\" | \"day\" | \"month\" | \"year\" | \"week\" | \"millisecond\"",
          "value": [
            {
              "value": "\"second\""
            },
            {
              "value": "\"minute\""
            },
            {
              "value": "\"hour\""
            },
            {
              "value": "\"day\""
            },
            {
              "value": "\"month\""
            },
            {
              "value": "\"year\""
            },
            {
              "value": "\"week\""
            },
            {
              "value": "\"millisecond\""
            }
          ]
        }
      },
      "formatStyle": {
        "defaultValue": null,
        "description": "",
        "name": "formatStyle",
        "declarations": [],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "FormatStyle",
          "value": [
            {
              "value": "\"narrow\""
            },
            {
              "value": "\"short\""
            },
            {
              "value": "\"long\""
            }
          ]
        }
      },
      "noTitle": {
        "defaultValue": null,
        "description": "",
        "name": "noTitle",
        "declarations": [],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "datetime": {
        "defaultValue": null,
        "description": "",
        "name": "datetime",
        "declarations": [],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "date": {
        "defaultValue": null,
        "description": "",
        "name": "date",
        "declarations": [],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Date | null",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "Date",
              "description": "Enables basic storage and retrieval of dates and times.",
              "fullComment": "Enables basic storage and retrieval of dates and times.",
              "tags": {}
            }
          ]
        }
      },
      "connectedCallback": {
        "defaultValue": null,
        "description": "",
        "name": "connectedCallback",
        "declarations": [],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "(() => void)",
          "value": [
            {
              "value": "() => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "disconnectedCallback": {
        "defaultValue": null,
        "description": "",
        "name": "disconnectedCallback",
        "declarations": [],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "(() => void)",
          "value": [
            {
              "value": "() => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "attributeChangedCallback": {
        "defaultValue": null,
        "description": "",
        "name": "attributeChangedCallback",
        "declarations": [],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "((attrName: string, oldValue: unknown, newValue: unknown) => void)",
          "value": [
            {
              "value": "(attrName: string, oldValue: unknown, newValue: unknown) => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "update": {
        "defaultValue": null,
        "description": "",
        "name": "update",
        "declarations": [],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "(() => void)",
          "value": [
            {
              "value": "() => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ScrollableRegion/ScrollableRegion.tsx",
    "description": "",
    "displayName": "ScrollableRegion",
    "methods": [],
    "props": {
      "aria-label": {
        "defaultValue": null,
        "description": "Defines a string value that labels the current element.\n@see aria-labelledby.",
        "name": "aria-label",
        "parent": {
          "fileName": "react/node_modules/@types/react/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "AriaAttributes"
          },
          {
            "fileName": "react/packages/react/src/ScrollableRegion/ScrollableRegion.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "AriaAttributes"
          },
          {
            "fileName": "react/packages/react/src/ScrollableRegion/ScrollableRegion.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "Identifies the element (or elements) that labels the current element.\n@see aria-describedby.",
        "name": "aria-labelledby",
        "parent": {
          "fileName": "react/node_modules/@types/react/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "AriaAttributes"
          },
          {
            "fileName": "react/packages/react/src/ScrollableRegion/ScrollableRegion.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "AriaAttributes"
          },
          {
            "fileName": "react/packages/react/src/ScrollableRegion/ScrollableRegion.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "SegmentedControl",
      "primerid": "segmented_control",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/SegmentedControl/SegmentedControl.tsx",
    "description": "Segmented control is used to pick one choice from a linear set of closely related choices, and immediately apply that selection.",
    "displayName": "SegmentedControl",
    "methods": [],
    "props": {
      "aria-label": {
        "defaultValue": null,
        "description": "",
        "name": "aria-label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SegmentedControl/SegmentedControl.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "",
        "name": "aria-labelledby",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SegmentedControl/SegmentedControl.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "aria-describedby": {
        "defaultValue": null,
        "description": "",
        "name": "aria-describedby",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SegmentedControl/SegmentedControl.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "fullWidth": {
        "defaultValue": null,
        "description": "Whether the control fills the width of its parent",
        "name": "fullWidth",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SegmentedControl/SegmentedControl.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean | ResponsiveValue<boolean>",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ResponsiveValue<boolean>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "The handler that gets called when a segment is selected",
        "name": "onChange",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SegmentedControl/SegmentedControl.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "((selectedIndex: number) => void)",
          "value": [
            {
              "value": "(selectedIndex: number) => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "size": {
        "defaultValue": null,
        "description": "The size of the buttons",
        "name": "size",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SegmentedControl/SegmentedControl.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"small\" | \"medium\"",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"medium\""
            }
          ]
        }
      },
      "variant": {
        "defaultValue": {
          "value": "default"
        },
        "description": "Configure alternative ways to render the control when it gets rendered in tight spaces",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SegmentedControl/SegmentedControl.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"default\" | Partial<Record<WidthOnlyViewportRangeKeys, \"default\" | \"hideLabels\" | \"dropdown\">>",
          "value": [
            {
              "value": "\"default\""
            },
            {
              "value": "Partial<Record<WidthOnlyViewportRangeKeys, \"default\" | \"hideLabels\" | \"dropdown\">>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "SegmentedControl.Button",
      "primerparentid": "segmented_control"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/SegmentedControl/SegmentedControlButton.tsx",
    "description": "A button segment in the SegmentedControl",
    "displayName": "SegmentedControlButton",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "The visible label rendered in the button",
        "name": "children",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SegmentedControl/SegmentedControlButton.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "DOMAttributes"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string & ReactNode",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "string & ReactElement<any, string | JSXElementConstructor<any>>"
            },
            {
              "value": "string & Iterable<ReactNode>"
            },
            {
              "value": "string & ReactPortal"
            }
          ]
        }
      },
      "selected": {
        "defaultValue": null,
        "description": "Whether the segment is selected. This is used for controlled `SegmentedControls`, and needs to be updated using the `onChange` handler on `SegmentedControl`.",
        "name": "selected",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SegmentedControl/SegmentedControlButton.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "defaultSelected": {
        "defaultValue": null,
        "description": "Whether the segment is selected. This is used for uncontrolled `SegmentedControls` to pick one `SegmentedControlButton` that is selected on the initial render.",
        "name": "defaultSelected",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SegmentedControl/SegmentedControlButton.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "leadingIcon": {
        "defaultValue": null,
        "description": "The leading icon comes before item label",
        "name": "leadingIcon",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SegmentedControl/SegmentedControlButton.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactElement<any, string | JSXElementConstructor<any>> | FunctionComponent<PropsWithChildren<IconProps>>",
          "value": [
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "FunctionComponent<PropsWithChildren<IconProps>>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "SegmentedControl.IconButton",
      "primerparentid": "segmented_control"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/SegmentedControl/SegmentedControlIconButton.tsx",
    "description": "A button segment in the SegmentedControl",
    "displayName": "SegmentedControlIconButton",
    "methods": [],
    "props": {
      "aria-label": {
        "defaultValue": null,
        "description": "Defines a string value that labels the current element.\n@see aria-labelledby.",
        "name": "aria-label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SegmentedControl/SegmentedControlIconButton.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "The icon that represents the segmented control item",
        "name": "icon",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SegmentedControl/SegmentedControlIconButton.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "ReactElement<any, string | JSXElementConstructor<any>> | FunctionComponent<PropsWithChildren<IconProps>>",
          "value": [
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "FunctionComponent<PropsWithChildren<IconProps>>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "selected": {
        "defaultValue": null,
        "description": "Whether the segment is selected. This is used for controlled SegmentedControls, and needs to be updated using the onChange handler on SegmentedControl.",
        "name": "selected",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SegmentedControl/SegmentedControlIconButton.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "defaultSelected": {
        "defaultValue": null,
        "description": "Whether the segment is selected. This is used for uncontrolled SegmentedControls to pick one SegmentedControlButton that is selected on the initial render.",
        "name": "defaultSelected",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SegmentedControl/SegmentedControlIconButton.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "select",
      "primerstatus": "alpha",
      "primera11yreviewed": "true"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Select/Select.tsx",
    "description": "Select is an input for selecting a single option from a menu.",
    "displayName": "Select",
    "methods": [],
    "props": {
      "disabled": {
        "defaultValue": null,
        "description": "Whether the input is styled to look disabled.",
        "name": "disabled",
        "parent": {
          "fileName": "react/node_modules/@types/react/index.d.ts",
          "name": "SelectHTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "SelectHTMLAttributes"
          },
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "size": {
        "defaultValue": null,
        "description": "The size of the input.",
        "name": "size",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "TextInputSizes",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            }
          ]
        }
      },
      "block": {
        "defaultValue": null,
        "description": "Whether the input takes up the full width of its parent",
        "name": "block",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "monospace": {
        "defaultValue": null,
        "description": "Whether the text rendered in the input is in a monospace font.",
        "name": "monospace",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "contrast": {
        "defaultValue": null,
        "description": "Whether the background color of the input has contrast against the default background color.",
        "name": "contrast",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "validationStatus": {
        "defaultValue": null,
        "description": "The result of validation on the input.",
        "name": "validationStatus",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "FormValidationStatus",
          "value": [
            {
              "value": "\"success\""
            },
            {
              "value": "\"error\""
            }
          ]
        }
      },
      "hasTrailingAction": {
        "defaultValue": null,
        "description": "Whether the input has a trailing action.",
        "name": "hasTrailingAction",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "isInputFocused": {
        "defaultValue": null,
        "description": "Whether the input is focused.",
        "name": "isInputFocused",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "placeholder": {
        "defaultValue": null,
        "description": "Text to show in a Select when no option is selected.",
        "name": "placeholder",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Select/Select.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Select.Option",
      "primerparentid": "select"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Select/Select.tsx",
    "description": "A selectable option in the Select component.",
    "displayName": "Select.Option",
    "methods": [],
    "props": {
      "value": {
        "defaultValue": null,
        "description": "",
        "name": "value",
        "parent": {
          "fileName": "react/node_modules/@types/react/index.d.ts",
          "name": "AllHTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "AllHTMLAttributes"
          },
          {
            "fileName": "react/packages/react/src/Select/Select.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string | (readonly string[] & string)",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "readonly string[] & string"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Select.OptGroup",
      "primerparentid": "select"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Select/Select.tsx",
    "description": "Creates a group of related selectable options in the Select component.",
    "displayName": "Select.OptGroup",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "primerid": "select_panel",
      "primerdocsid": "select_panel",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/SelectPanel/SelectPanel.tsx",
    "description": "Select panel is a semantic dialog that allows for complex selection options within an overlay.",
    "displayName": "SelectPanel",
    "methods": [],
    "props": {
      "title": {
        "defaultValue": {
          "value": "isMultiSelectVariant(selected) ? 'Select items' : 'Select an item'"
        },
        "description": "A descriptive title for the panel",
        "name": "title",
        "parent": {
          "fileName": "react/packages/react/src/SelectPanel/SelectPanel.tsx",
          "name": "SelectPanelBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/SelectPanel/SelectPanel.tsx",
            "name": "SelectPanelBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string | ReactElement<any, string | JSXElementConstructor<any>>",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            }
          ]
        }
      },
      "subtitle": {
        "defaultValue": null,
        "description": "When provided, a subtitle is displayed below the title",
        "name": "subtitle",
        "parent": {
          "fileName": "react/packages/react/src/SelectPanel/SelectPanel.tsx",
          "name": "SelectPanelBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/SelectPanel/SelectPanel.tsx",
            "name": "SelectPanelBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string | ReactElement<any, string | JSXElementConstructor<any>>",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            }
          ]
        }
      },
      "onOpenChange": {
        "defaultValue": null,
        "description": "",
        "name": "onOpenChange",
        "parent": {
          "fileName": "react/packages/react/src/SelectPanel/SelectPanel.tsx",
          "name": "SelectPanelBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/SelectPanel/SelectPanel.tsx",
            "name": "SelectPanelBaseProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(open: boolean, gesture: \"anchor-click\" | \"anchor-key-press\" | \"click-outside\" | \"escape\" | \"selection\") => void"
        }
      },
      "placeholder": {
        "defaultValue": null,
        "description": "Text used in anchor when there are no selected items",
        "name": "placeholder",
        "parent": {
          "fileName": "react/packages/react/src/SelectPanel/SelectPanel.tsx",
          "name": "SelectPanelBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/SelectPanel/SelectPanel.tsx",
            "name": "SelectPanelBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "inputLabel": {
        "defaultValue": {
          "value": "Filter items"
        },
        "description": "The aria-label for the filter input",
        "name": "inputLabel",
        "parent": {
          "fileName": "react/packages/react/src/SelectPanel/SelectPanel.tsx",
          "name": "SelectPanelBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/SelectPanel/SelectPanel.tsx",
            "name": "SelectPanelBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "overlayProps": {
        "defaultValue": null,
        "description": "See [Overlay props](/react/Overlay#props)",
        "name": "overlayProps",
        "parent": {
          "fileName": "react/packages/react/src/SelectPanel/SelectPanel.tsx",
          "name": "SelectPanelBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/SelectPanel/SelectPanel.tsx",
            "name": "SelectPanelBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Partial<Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"ref\"> & { ...; }, \"style\" | ... 8 more ... | keyof BaseOverlayProps> & Omit<...> & BaseOverlayProps & { ...; }>",
          "value": [
            {
              "value": "Partial<Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"ref\"> & { ...; }, \"style\" | ... 8 more ... | keyof BaseOverlayProps> & Omit<...> & BaseOverlayProps & { ...; }>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "footer": {
        "defaultValue": null,
        "description": "Footer rendered at the end of the panel",
        "name": "footer",
        "parent": {
          "fileName": "react/packages/react/src/SelectPanel/SelectPanel.tsx",
          "name": "SelectPanelBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/SelectPanel/SelectPanel.tsx",
            "name": "SelectPanelBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string | ReactElement<any, string | JSXElementConstructor<any>>",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            }
          ]
        }
      },
      "id": {
        "defaultValue": null,
        "description": "id to attach to the base DOM node of the list",
        "name": "id",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "role": {
        "defaultValue": null,
        "description": "The ARIA role describing the function of `List` component. `listbox` is a common value.",
        "name": "role",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "AriaRole",
          "value": [
            {
              "value": "\"article\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"list\""
            },
            {
              "value": "\"alert\""
            },
            {
              "value": "\"alertdialog\""
            },
            {
              "value": "\"application\""
            },
            {
              "value": "\"banner\""
            },
            {
              "value": "\"cell\""
            },
            {
              "value": "\"checkbox\""
            },
            {
              "value": "\"columnheader\""
            },
            {
              "value": "\"combobox\""
            },
            {
              "value": "\"complementary\""
            },
            {
              "value": "\"contentinfo\""
            },
            {
              "value": "\"definition\""
            },
            {
              "value": "\"directory\""
            },
            {
              "value": "\"document\""
            },
            {
              "value": "\"feed\""
            },
            {
              "value": "\"grid\""
            },
            {
              "value": "\"gridcell\""
            },
            {
              "value": "\"group\""
            },
            {
              "value": "\"heading\""
            },
            {
              "value": "\"listbox\""
            },
            {
              "value": "\"listitem\""
            },
            {
              "value": "\"log\""
            },
            {
              "value": "\"marquee\""
            },
            {
              "value": "\"math\""
            },
            {
              "value": "\"menubar\""
            },
            {
              "value": "\"menuitemcheckbox\""
            },
            {
              "value": "\"menuitemradio\""
            },
            {
              "value": "\"navigation\""
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"note\""
            },
            {
              "value": "\"presentation\""
            },
            {
              "value": "\"progressbar\""
            },
            {
              "value": "\"radio\""
            },
            {
              "value": "\"radiogroup\""
            },
            {
              "value": "\"region\""
            },
            {
              "value": "\"row\""
            },
            {
              "value": "\"rowgroup\""
            },
            {
              "value": "\"rowheader\""
            },
            {
              "value": "\"scrollbar\""
            },
            {
              "value": "\"searchbox\""
            },
            {
              "value": "\"separator\""
            },
            {
              "value": "\"slider\""
            },
            {
              "value": "\"spinbutton\""
            },
            {
              "value": "\"status\""
            },
            {
              "value": "\"tab\""
            },
            {
              "value": "\"tablist\""
            },
            {
              "value": "\"tabpanel\""
            },
            {
              "value": "\"term\""
            },
            {
              "value": "\"textbox\""
            },
            {
              "value": "\"timer\""
            },
            {
              "value": "\"toolbar\""
            },
            {
              "value": "\"tooltip\""
            },
            {
              "value": "\"tree\""
            },
            {
              "value": "\"treegrid\""
            },
            {
              "value": "\"treeitem\""
            }
          ]
        }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "aria-label to attach to the base DOM node of the list",
        "name": "aria-label",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "loading": {
        "defaultValue": null,
        "description": "Whether the items are loading",
        "name": "loading",
        "parent": {
          "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithDeprecatedActionList.tsx",
          "name": "FilteredActionListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithDeprecatedActionList.tsx",
            "name": "FilteredActionListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Style variations. Usage is discretionary.\n\n- `\"inset\"` - `List` children are offset (vertically and horizontally) from `List`’s edges\n- `\"full\"` - `List` children are flush (vertically and horizontally) with `List` edges",
        "name": "variant",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"inset\" | \"full\"",
          "value": [
            {
              "value": "\"inset\""
            },
            {
              "value": "\"full\""
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "items": {
        "defaultValue": null,
        "description": "A collection of `Item` props and `Item`-level custom `Item` renderers.",
        "name": "items",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": true,
        "type": {
          "name": "ItemInput[]"
        }
      },
      "renderItem": {
        "defaultValue": null,
        "description": "A `List`-level custom `Item` renderer. Every `Item` within this `List`\nwithout a `Group`-level or `Item`-level custom `Item` renderer will be\nrendered using this function component.",
        "name": "renderItem",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "RenderItemFn",
          "value": [
            {
              "value": "RenderItemFn",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "renderGroup": {
        "defaultValue": null,
        "description": "A `List`-level custom `Group` renderer. Every `Group` within this `List`\nwithout a `Group`-level custom `Item` renderer will be rendered using\nthis function component.",
        "name": "renderGroup",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "(({ header, items, ...props }: GroupProps) => Element)",
          "value": [
            {
              "value": "({ header, items, ...props }: GroupProps) => Element",
              "description": "Collects related `Items` in an `ActionList`.",
              "fullComment": "Collects related `Items` in an `ActionList`.",
              "tags": {}
            }
          ]
        }
      },
      "showItemDividers": {
        "defaultValue": null,
        "description": "Whether to display a divider above each `Item` in this `List` when it does not follow a `Header` or `Divider`.",
        "name": "showItemDividers",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "groupMetadata": {
        "defaultValue": null,
        "description": "A collection of `Group` props (except `items`), plus a unique group identifier\nand `Group`-level custom `Item` or `Group` renderers.",
        "name": "groupMetadata",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "GroupedListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "GroupedListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "((Omit<GroupProps, \"items\"> | Omit<Partial<GroupProps> & { renderItem?: RenderItemFn; renderGroup?: (({ header, items, ...props }: GroupProps) => Element) | undefined; }, \"items\">) & { ...; })[] | undefined",
          "value": [
            {
              "value": "((Omit<GroupProps, \"items\"> | Omit<Partial<GroupProps> & { renderItem?: RenderItemFn | undefined; renderGroup?: (({ header, items, ...props }: GroupProps) => Element) | undefined; }, \"items\">) & { ...; })[]",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "placeholderText": {
        "defaultValue": {
          "value": "Filter items"
        },
        "description": "Text used as placeholder for search input",
        "name": "placeholderText",
        "parent": {
          "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithDeprecatedActionList.tsx",
          "name": "FilteredActionListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithDeprecatedActionList.tsx",
            "name": "FilteredActionListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "filterValue": {
        "defaultValue": null,
        "description": "The current value of the search input",
        "name": "filterValue",
        "parent": {
          "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithDeprecatedActionList.tsx",
          "name": "FilteredActionListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithDeprecatedActionList.tsx",
            "name": "FilteredActionListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "onFilterChange": {
        "defaultValue": null,
        "description": "Callback when the search input changes",
        "name": "onFilterChange",
        "parent": {
          "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithDeprecatedActionList.tsx",
          "name": "FilteredActionListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithDeprecatedActionList.tsx",
            "name": "FilteredActionListProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(value: string, e: ChangeEvent<HTMLInputElement>) => void"
        }
      },
      "textInputProps": {
        "defaultValue": null,
        "description": "Props to pass through to the search input",
        "name": "textInputProps",
        "parent": {
          "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithDeprecatedActionList.tsx",
          "name": "FilteredActionListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithDeprecatedActionList.tsx",
            "name": "FilteredActionListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Partial<Omit<TextInputProps, \"onChange\">>",
          "value": [
            {
              "value": "Partial<Omit<TextInputProps, \"onChange\">>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "inputRef": {
        "defaultValue": null,
        "description": "Ref to pass through to the search input",
        "name": "inputRef",
        "parent": {
          "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithDeprecatedActionList.tsx",
          "name": "FilteredActionListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/FilteredActionList/FilteredActionListWithDeprecatedActionList.tsx",
            "name": "FilteredActionListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "RefObject<HTMLInputElement>",
          "value": [
            {
              "value": "RefObject<HTMLInputElement>",
              "description": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.",
              "fullComment": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.\n@template T The type of the ref's value.\n@example ```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```",
              "tags": {
                "template": "T The type of the ref's value.",
                "example": "```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```"
              }
            }
          ]
        }
      },
      "open": {
        "defaultValue": null,
        "description": "Determines whether the overlay portion of the component should be shown or not",
        "name": "open",
        "parent": {
          "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
          "name": "AnchoredOverlayBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayBaseProps"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "renderAnchor": {
        "defaultValue": {
          "value": "props => {\n    const {children, ...rest} = props\n    return (\n      <Button trailingAction={TriangleDownIcon} {...rest}>\n        {children}\n      </Button>\n    )\n  }"
        },
        "description": "A custom function component used to render the anchor element.\nWhen renderAnchor is null, an anchorRef is required.\nA custom function component used to render the anchor element.\nWill receive the selected text as `children` prop when an item is activated.",
        "name": "renderAnchor",
        "parent": {
          "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
          "name": "AnchoredOverlayPropsWithoutAnchor"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayPropsWithoutAnchor"
          },
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayPropsWithAnchor"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "(<T extends React.HTMLAttributes<HTMLElement>>(props: T) => Element) | null",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "<T extends React.HTMLAttributes<HTMLElement>>(props: T) => Element",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "anchorRef": {
        "defaultValue": null,
        "description": "An override to the internal renderAnchor ref that will be used to position the overlay.\nWhen renderAnchor is null this can be used to make an anchor that is detached from ActionMenu.\nAn override to the internal ref that will be spread on to the renderAnchor",
        "name": "anchorRef",
        "parent": {
          "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
          "name": "AnchoredOverlayPropsWithoutAnchor"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayPropsWithoutAnchor"
          },
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayPropsWithAnchor"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "RefObject<HTMLElement>",
          "value": [
            {
              "value": "RefObject<HTMLElement>",
              "description": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.",
              "fullComment": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.\n@template T The type of the ref's value.\n@example ```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```",
              "tags": {
                "template": "T The type of the ref's value.",
                "example": "```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```"
              }
            }
          ]
        }
      },
      "anchorId": {
        "defaultValue": null,
        "description": "An override to the internal id that will be spread on to the renderAnchor",
        "name": "anchorId",
        "parent": {
          "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
          "name": "AnchoredOverlayPropsWithoutAnchor"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayPropsWithoutAnchor"
          },
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayPropsWithAnchor"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "selected": {
        "defaultValue": null,
        "description": "Specify the selected items\nSpecify the selected item",
        "name": "selected",
        "parent": {
          "fileName": "react/packages/react/src/SelectPanel/SelectPanel.tsx",
          "name": "SelectPanelSingleSelection"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/SelectPanel/SelectPanel.tsx",
            "name": "SelectPanelSingleSelection"
          },
          {
            "fileName": "react/packages/react/src/SelectPanel/SelectPanel.tsx",
            "name": "SelectPanelMultiSelection"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "ItemInput | ItemInput[] | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "Merge<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"ref\">, ItemProps>"
            },
            {
              "value": "Partial<ItemProps> & { renderItem: RenderItemFn; } & { key?: Key | undefined; }"
            },
            {
              "value": "ItemInput[]",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "onSelectedChange": {
        "defaultValue": null,
        "description": "Provide a callback called when the selected item changes\nProvide a callback called when the selected items change",
        "name": "onSelectedChange",
        "parent": {
          "fileName": "react/packages/react/src/SelectPanel/SelectPanel.tsx",
          "name": "SelectPanelSingleSelection"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/SelectPanel/SelectPanel.tsx",
            "name": "SelectPanelSingleSelection"
          },
          {
            "fileName": "react/packages/react/src/SelectPanel/SelectPanel.tsx",
            "name": "SelectPanelMultiSelection"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "((selected: ItemInput | undefined) => void) | ((selected: ItemInput[]) => void)",
          "value": [
            {
              "value": "(selected: ItemInput | undefined) => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "(selected: ItemInput[]) => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Spinner",
      "primerid": "spinner",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Spinner/Spinner.tsx",
    "description": "Use Spinner to show users that an action is in progress.",
    "displayName": "Spinner",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": null,
        "description": "Sets the width and height of the spinner.",
        "name": "size",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Spinner/Spinner.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"small\" | \"large\" | \"medium\"",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            }
          ]
        }
      },
      "srText": {
        "defaultValue": null,
        "description": "Sets the text conveyed by assistive technologies such as screen readers. Set to `null` if the loading state is displayed in a text node somewhere else on the page.",
        "name": "srText",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Spinner/Spinner.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string | null",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            }
          ]
        }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "@deprecated Use `srText` instead.",
        "name": "aria-label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Spinner/Spinner.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Spinner/Spinner.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "style": {
        "defaultValue": null,
        "description": "",
        "name": "style",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Spinner/Spinner.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "CSSProperties",
          "value": [
            {
              "value": "CSSProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "split_page_layout",
      "primerstatus": "alpha",
      "primera11yreviewed": "true"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/SplitPageLayout/SplitPageLayout.tsx",
    "description": "Split page layout is an abstraction for using the PageLayout component to provide structure for a split layout.",
    "displayName": "SplitPageLayout",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "SplitPageLayout.Header",
      "primerparentid": "split_page_layout"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/SplitPageLayout/SplitPageLayout.tsx",
    "description": "The header area of the overall page layout.",
    "displayName": "SplitPageLayout.Header",
    "methods": [],
    "props": {
      "aria-label": {
        "defaultValue": null,
        "description": "A unique label for the rendered banner landmark",
        "name": "aria-label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "An id to an element which uniquely labels the rendered banner landmark",
        "name": "aria-labelledby",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "padding": {
        "defaultValue": {
          "value": "normal"
        },
        "description": "",
        "name": "padding",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"normal\" | \"none\" | \"condensed\"",
          "value": [
            {
              "value": "\"normal\""
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"condensed\""
            }
          ]
        }
      },
      "divider": {
        "defaultValue": {
          "value": "line"
        },
        "description": "",
        "name": "divider",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"line\" | \"none\" | ResponsiveValue<\"line\" | \"none\", \"line\" | \"none\" | \"filled\">",
          "value": [
            {
              "value": "\"line\""
            },
            {
              "value": "\"none\""
            },
            {
              "value": "ResponsiveValue<\"line\" | \"none\", \"line\" | \"none\" | \"filled\">",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "dividerWhenNarrow": {
        "defaultValue": null,
        "description": "@deprecated Use the `divider` prop with a responsive value instead.\n\nBefore:\n```\ndivider=\"line\"\ndividerWhenNarrow=\"filled\"\n```\n\nAfter:\n```\ndivider={{regular: 'line', narrow: 'filled'}}\n```",
        "name": "dividerWhenNarrow",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"line\" | \"inherit\" | \"none\" | \"filled\"",
          "value": [
            {
              "value": "\"line\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"filled\""
            }
          ]
        }
      },
      "hidden": {
        "defaultValue": null,
        "description": "",
        "name": "hidden",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean | ResponsiveValue<boolean>",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ResponsiveValue<boolean>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "SplitPageLayout.Content",
      "primerparentid": "split_page_layout"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/SplitPageLayout/SplitPageLayout.tsx",
    "description": "The main content area.",
    "displayName": "SplitPageLayout.Content",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": {
          "value": "'main'"
        },
        "description": "Provide an optional element type for the outermost element rendered by the component.",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ElementType<any, keyof IntrinsicElements>",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "A unique label for the rendered main landmark",
        "name": "aria-label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "An id to an element which uniquely labels the rendered main landmark",
        "name": "aria-labelledby",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "width": {
        "defaultValue": {
          "value": "large"
        },
        "description": "The maximum width of the content region.",
        "name": "width",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"large\" | \"medium\" | \"full\" | \"xlarge\"",
          "value": [
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            },
            {
              "value": "\"full\""
            },
            {
              "value": "\"xlarge\""
            }
          ]
        }
      },
      "padding": {
        "defaultValue": {
          "value": "normal"
        },
        "description": "The amount of padding inside the content.",
        "name": "padding",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"normal\" | \"none\" | \"condensed\"",
          "value": [
            {
              "value": "\"normal\""
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"condensed\""
            }
          ]
        }
      },
      "hidden": {
        "defaultValue": null,
        "description": "",
        "name": "hidden",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean | ResponsiveValue<boolean>",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ResponsiveValue<boolean>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "SplitPageLayout.Pane",
      "primerparentid": "split_page_layout"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/SplitPageLayout/SplitPageLayout.tsx",
    "description": "By default, it is a sidebar that sticks on the left used for navigating to update the main content area.",
    "displayName": "SplitPageLayout.Pane",
    "methods": [],
    "props": {
      "position": {
        "defaultValue": {
          "value": "start"
        },
        "description": "Which side of the page the pane should be on. Can be changed for different viewport widths.",
        "name": "position",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"end\" | \"start\" | ResponsiveValue<\"end\" | \"start\">",
          "value": [
            {
              "value": "\"end\""
            },
            {
              "value": "\"start\""
            },
            {
              "value": "ResponsiveValue<\"end\" | \"start\">",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "positionWhenNarrow": {
        "defaultValue": null,
        "description": "@deprecated Use the `position` prop with a responsive value instead.\n\nBefore:\n```\nposition=\"start\"\npositionWhenNarrow=\"end\"\n```\n\nAfter:\n```\nposition={{regular: 'start', narrow: 'end'}}\n```",
        "name": "positionWhenNarrow",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"end\" | \"start\" | \"inherit\"",
          "value": [
            {
              "value": "\"end\""
            },
            {
              "value": "\"start\""
            },
            {
              "value": "\"inherit\""
            }
          ]
        }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "Id of an element that acts as a label for the pane. Required if the pane overflows and doesn't have aria-label.",
        "name": "aria-labelledby",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "Label for the pane. Required if the pane overflows and doesn't have aria-labelledby.",
        "name": "aria-label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "width": {
        "defaultValue": {
          "value": "large"
        },
        "description": "The width of the pane. If using custom widths, provide an object with keys 'min', 'max' and 'default'.",
        "name": "width",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"small\" | \"large\" | \"medium\" | CustomWidthOptions",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            },
            {
              "value": "CustomWidthOptions",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "minWidth": {
        "defaultValue": {
          "value": "256"
        },
        "description": "The minimum width of the pane.",
        "name": "minWidth",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "number",
          "value": [
            {
              "value": "number"
            }
          ]
        }
      },
      "resizable": {
        "defaultValue": null,
        "description": "When true, the pane may be resized by the user.",
        "name": "resizable",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "widthStorageKey": {
        "defaultValue": {
          "value": "paneWidth"
        },
        "description": "Provide a key used by localStorage to persist the size of the pane on the client.",
        "name": "widthStorageKey",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "padding": {
        "defaultValue": {
          "value": "normal"
        },
        "description": "The amount of padding inside the pane.",
        "name": "padding",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"normal\" | \"none\" | \"condensed\"",
          "value": [
            {
              "value": "\"normal\""
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"condensed\""
            }
          ]
        }
      },
      "divider": {
        "defaultValue": {
          "value": "line"
        },
        "description": "The divider style between the pane and the content region.",
        "name": "divider",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"line\" | \"none\" | ResponsiveValue<\"line\" | \"none\", \"line\" | \"none\" | \"filled\">",
          "value": [
            {
              "value": "\"line\""
            },
            {
              "value": "\"none\""
            },
            {
              "value": "ResponsiveValue<\"line\" | \"none\", \"line\" | \"none\" | \"filled\">",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "dividerWhenNarrow": {
        "defaultValue": null,
        "description": "@deprecated Use the `divider` prop with a responsive value instead.\n\nBefore:\n```\ndivider=\"line\"\ndividerWhenNarrow=\"filled\"\n```\n\nAfter:\n```\ndivider={{regular: 'line', narrow: 'filled'}}\n```",
        "name": "dividerWhenNarrow",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"line\" | \"inherit\" | \"none\" | \"filled\"",
          "value": [
            {
              "value": "\"line\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"filled\""
            }
          ]
        }
      },
      "sticky": {
        "defaultValue": {
          "value": true
        },
        "description": "Whether the pane should stick to the top of the screen while the content scrolls.",
        "name": "sticky",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "offsetHeader": {
        "defaultValue": {
          "value": "0"
        },
        "description": "Use offsetHeader along with the sticky prop to push the sticky pane down to make room for a sticky header if necessary. Use the type `string` to specify the height with a unit i.e. 5rem; otherwise the type `number` will be taken as px.",
        "name": "offsetHeader",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string | number",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "number"
            }
          ]
        }
      },
      "hidden": {
        "defaultValue": null,
        "description": "Whether the pane is hidden. Can be changed for different viewport widths.",
        "name": "hidden",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean | ResponsiveValue<boolean>",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ResponsiveValue<boolean>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "id": {
        "defaultValue": null,
        "description": "May be used to override the default ID passed to the pane element.",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "SplitPageLayout.Footer",
      "primerparentid": "split_page_layout"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/SplitPageLayout/SplitPageLayout.tsx",
    "description": "The footer area of the overall page layout.",
    "displayName": "SplitPageLayout.Footer",
    "methods": [],
    "props": {
      "aria-label": {
        "defaultValue": null,
        "description": "A unique label for the rendered contentinfo landmark",
        "name": "aria-label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "An id to an element which uniquely labels the rendered contentinfo landmark",
        "name": "aria-labelledby",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "padding": {
        "defaultValue": {
          "value": "normal"
        },
        "description": "The amount of padding inside the footer.",
        "name": "padding",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"normal\" | \"none\" | \"condensed\"",
          "value": [
            {
              "value": "\"normal\""
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"condensed\""
            }
          ]
        }
      },
      "divider": {
        "defaultValue": {
          "value": "line"
        },
        "description": "The divider style between the footer and the content region. Can be changed for different viewport widths.",
        "name": "divider",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"line\" | \"none\" | ResponsiveValue<\"line\" | \"none\", \"line\" | \"none\" | \"filled\">",
          "value": [
            {
              "value": "\"line\""
            },
            {
              "value": "\"none\""
            },
            {
              "value": "ResponsiveValue<\"line\" | \"none\", \"line\" | \"none\" | \"filled\">",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "dividerWhenNarrow": {
        "defaultValue": null,
        "description": "@deprecated Use the `divider` prop with a responsive value instead.\n\nBefore:\n```\ndivider=\"line\"\ndividerWhenNarrow=\"filled\"\n```\n\nAfter:\n```\ndivider={{regular: 'line', narrow: 'filled'}}\n```",
        "name": "dividerWhenNarrow",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"line\" | \"inherit\" | \"none\" | \"filled\"",
          "value": [
            {
              "value": "\"line\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"filled\""
            }
          ]
        }
      },
      "hidden": {
        "defaultValue": null,
        "description": "Whether the footer is hidden.  Can be changed for different viewport widths.",
        "name": "hidden",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean | ResponsiveValue<boolean>",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ResponsiveValue<boolean>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "stack",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Stack/Stack.tsx",
    "description": "Stack is a layout component that creates responsive horizontal and vertical flows.",
    "displayName": "Stack",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "Customize the element type of the rendered container",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Stack/Stack.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ElementType",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "gap": {
        "defaultValue": null,
        "description": "Specify the gap between children elements in the stack",
        "name": "gap",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Stack/Stack.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Gap",
          "value": [
            {
              "value": "\"normal\""
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"condensed\""
            },
            {
              "value": "\"spacious\""
            },
            {
              "value": "ResponsiveValue<GapScale>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "direction": {
        "defaultValue": {
          "value": "vertical"
        },
        "description": "Specify the direction for the stack container",
        "name": "direction",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Stack/Stack.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Direction",
          "value": [
            {
              "value": "\"vertical\""
            },
            {
              "value": "\"horizontal\""
            },
            {
              "value": "ResponsiveValue<DirectionScale>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "align": {
        "defaultValue": {
          "value": "stretch"
        },
        "description": "Specify the alignment between items in the cross-axis of the direction",
        "name": "align",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Stack/Stack.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Align",
          "value": [
            {
              "value": "\"center\""
            },
            {
              "value": "\"end\""
            },
            {
              "value": "\"start\""
            },
            {
              "value": "\"baseline\""
            },
            {
              "value": "\"stretch\""
            },
            {
              "value": "ResponsiveValue<AlignScale>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "wrap": {
        "defaultValue": {
          "value": "nowrap"
        },
        "description": "Specify whether items are forced onto one line or can wrap onto multiple lines",
        "name": "wrap",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Stack/Stack.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Wrap",
          "value": [
            {
              "value": "\"wrap\""
            },
            {
              "value": "\"nowrap\""
            },
            {
              "value": "ResponsiveValue<WrapScale>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "justify": {
        "defaultValue": {
          "value": "start"
        },
        "description": "Specify how items will be distributed in the stacking direction",
        "name": "justify",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Stack/Stack.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Justify",
          "value": [
            {
              "value": "\"center\""
            },
            {
              "value": "\"end\""
            },
            {
              "value": "\"start\""
            },
            {
              "value": "\"space-between\""
            },
            {
              "value": "\"space-evenly\""
            },
            {
              "value": "ResponsiveValue<JustifyScale>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "padding": {
        "defaultValue": {
          "value": "none"
        },
        "description": "Specify the padding of the stack container",
        "name": "padding",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Stack/Stack.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Padding",
          "value": [
            {
              "value": "\"normal\""
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"condensed\""
            },
            {
              "value": "\"spacious\""
            },
            {
              "value": "ResponsiveValue<PaddingScale>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Stack/Stack.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/Stack/Stack.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Stack.Item",
      "primerparentid": "stack"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Stack/Stack.tsx",
    "description": "A child to lay out in the Stack",
    "displayName": "Stack.Item",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "Customize the element type of the rendered container",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Stack/Stack.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ElementType",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "grow": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Allow item to keep size or expand to fill the available space",
        "name": "grow",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Stack/Stack.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean | ResponsiveValue<boolean>",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ResponsiveValue<boolean>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Stack/Stack.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/Stack/Stack.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "state_label",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/StateLabel/StateLabel.tsx",
    "description": "State label is used for rendering the status of an item.",
    "displayName": "StateLabel",
    "methods": [],
    "props": {
      "status": {
        "defaultValue": null,
        "description": "Kind of status the label represents",
        "name": "status",
        "declarations": [
          {
            "fileName": "react/packages/react/src/StateLabel/StateLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "\"unavailable\" | \"issueClosed\" | \"issueClosedNotPlanned\" | \"pullClosed\" | \"pullMerged\" | \"pullQueued\" | \"issueOpened\" | \"pullOpened\" | \"draft\" | \"issueDraft\"",
          "value": [
            {
              "value": "\"unavailable\""
            },
            {
              "value": "\"issueClosed\""
            },
            {
              "value": "\"issueClosedNotPlanned\""
            },
            {
              "value": "\"pullClosed\""
            },
            {
              "value": "\"pullMerged\""
            },
            {
              "value": "\"pullQueued\""
            },
            {
              "value": "\"issueOpened\""
            },
            {
              "value": "\"pullOpened\""
            },
            {
              "value": "\"draft\""
            },
            {
              "value": "\"issueDraft\""
            }
          ]
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Size variant",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/StateLabel/StateLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"small\" | \"normal\"",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"normal\""
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "sub_nav",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/SubNav/SubNav.tsx",
    "description": "Use the sub nav component for navigation on a dashboard-type interface with another set of navigation components above it.",
    "displayName": "SubNav",
    "methods": [],
    "props": {
      "label": {
        "defaultValue": null,
        "description": "Used to set the `aria-label` on the top level `<nav>` element.",
        "name": "label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SubNav/SubNav.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "align": {
        "defaultValue": null,
        "description": "Use `right` to have navigation items aligned right.",
        "name": "align",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SubNav/SubNav.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"right\"",
          "value": [
            {
              "value": "\"right\""
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "full": {
        "defaultValue": null,
        "description": "Used to make navigation fill the width of the container.",
        "name": "full",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SubNav/SubNav.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "actions": {
        "defaultValue": null,
        "description": "Place another element, such as a button, to the opposite side of the navigation items.",
        "name": "actions",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SubNav/SubNav.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/SubNav/SubNav.tsx",
    "description": "",
    "displayName": "StyledSubNavLinks",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "alias": "SubNav.Links",
      "primerparentid": "sub_nav"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/SubNav/SubNav.tsx",
    "description": "Container for the set of links in the SubNav.",
    "displayName": "SubNav.Links",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "SubNav.Link",
      "primerparentid": "sub_nav"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/SubNav/SubNav.tsx",
    "description": "An individual link in the SubNav.",
    "displayName": "SubNav.Link",
    "methods": [],
    "props": {
      "to": {
        "defaultValue": null,
        "description": "Used when the item is rendered using a component like React Router's `Link`. The path to navigate to.",
        "name": "to",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SubNav/SubNav.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "To",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "Partial<Path>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "selected": {
        "defaultValue": null,
        "description": "Whether this item represents the current page",
        "name": "selected",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SubNav/SubNav.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "tab_nav",
      "primerstatus": "alpha",
      "primera11yreviewed": "false",
      "deprecated": ""
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/TabNav/TabNav.tsx",
    "description": "Tab nav contains a set of links that let users navigate between different views in the same context.",
    "displayName": "TabNav",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "TabNav.Link",
      "primerparentid": "tab_nav",
      "deprecated": ""
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/TabNav/TabNav.tsx",
    "description": "An individual link in the TabNav.",
    "displayName": "TabNav.Link",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | ... 162 more ... | FunctionComponent<...>",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<unknown, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<unknown>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "to": {
        "defaultValue": null,
        "description": "Used when the item is rendered using a component like React Router's `Link`. The path to navigate to.",
        "name": "to",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TabNav/TabNav.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "To",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "Partial<Path>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "selected": {
        "defaultValue": null,
        "description": "Whether this item represents the current page",
        "name": "selected",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TabNav/TabNav.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "href": {
        "defaultValue": null,
        "description": "Used to populate the `href` attribute when using an `<a>` tag",
        "name": "href",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TabNav/TabNav.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/TestComponent/TestComponent.tsx",
    "description": "",
    "displayName": "TestComponentWithForwardRef",
    "methods": [],
    "props": {
      "name": {
        "defaultValue": {
          "value": "Mona"
        },
        "description": "The name of the thing",
        "name": "name",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TestComponent/TestComponent.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "color": {
        "defaultValue": {
          "value": "blue"
        },
        "description": "The color of the thing",
        "name": "color",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TestComponent/TestComponent.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"blue\" | \"green\" | \"red\"",
          "value": [
            {
              "value": "\"blue\""
            },
            {
              "value": "\"green\""
            },
            {
              "value": "\"red\""
            }
          ]
        }
      },
      "metadata": {
        "defaultValue": null,
        "description": "Metadata about the thing",
        "name": "metadata",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TestComponent/TestComponent.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "{ age: number; location: string; }",
          "value": [
            {
              "value": "{ age: number; location: string; }",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "order": {
        "defaultValue": {
          "value": 0
        },
        "description": "The order of the thing",
        "name": "order",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TestComponent/TestComponent.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "isReal": {
        "defaultValue": null,
        "description": "Whether the thing is real",
        "name": "isReal",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TestComponent/TestComponent.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/TestComponent/TestComponent.tsx",
    "description": "",
    "displayName": "TestComponent",
    "methods": [],
    "props": {
      "name": {
        "defaultValue": {
          "value": "Mona"
        },
        "description": "The name of the thing",
        "name": "name",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TestComponent/TestComponent.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "color": {
        "defaultValue": {
          "value": "blue"
        },
        "description": "The color of the thing",
        "name": "color",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TestComponent/TestComponent.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"blue\" | \"green\" | \"red\"",
          "value": [
            {
              "value": "\"blue\""
            },
            {
              "value": "\"green\""
            },
            {
              "value": "\"red\""
            }
          ]
        }
      },
      "metadata": {
        "defaultValue": null,
        "description": "Metadata about the thing",
        "name": "metadata",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TestComponent/TestComponent.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "{ age: number; location: string; }",
          "value": [
            {
              "value": "{ age: number; location: string; }",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "order": {
        "defaultValue": {
          "value": 0
        },
        "description": "The order of the thing",
        "name": "order",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TestComponent/TestComponent.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "isReal": {
        "defaultValue": null,
        "description": "Whether the thing is real",
        "name": "isReal",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TestComponent/TestComponent.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "text",
      "primerstatus": "alpha",
      "primera11yreviewed": "true"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Text/Text.tsx",
    "description": "Text styles a string.",
    "displayName": "Text",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": null,
        "description": "The size of the text.",
        "name": "size",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Text/Text.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"small\" | \"large\" | \"medium\"",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            }
          ]
        }
      },
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Text/Text.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/styled-components/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "undefined"
        }
      },
      "whiteSpace": {
        "defaultValue": null,
        "description": "",
        "name": "whiteSpace",
        "parent": {
          "fileName": "react/packages/react/src/constants.ts",
          "name": "SystemTypographyProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/constants.ts",
            "name": "SystemTypographyProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"pre\" | \"normal\" | \"nowrap\" | \"pre-wrap\" | \"pre-line\"",
          "value": [
            {
              "value": "\"pre\""
            },
            {
              "value": "\"normal\""
            },
            {
              "value": "\"nowrap\""
            },
            {
              "value": "\"pre-wrap\""
            },
            {
              "value": "\"pre-line\""
            }
          ]
        }
      },
      "weight": {
        "defaultValue": null,
        "description": "The weight of the text.",
        "name": "weight",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Text/Text.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"medium\" | \"normal\" | \"light\" | \"semibold\"",
          "value": [
            {
              "value": "\"medium\""
            },
            {
              "value": "\"normal\""
            },
            {
              "value": "\"light\""
            },
            {
              "value": "\"semibold\""
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "text_input",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/TextInput/TextInput.tsx",
    "description": "Text input is used to set a value that is a single line of text.",
    "displayName": "TextInput",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | ... 162 more ... | FunctionComponent<...>",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<unknown, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<unknown>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "@deprecated Use `leadingVisual` or `trailingVisual` prop instead",
        "name": "icon",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TextInput/TextInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ElementType<any, keyof IntrinsicElements>",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "loading": {
        "defaultValue": null,
        "description": "Whether the to show a loading indicator in the input",
        "name": "loading",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TextInput/TextInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "loaderPosition": {
        "defaultValue": null,
        "description": "Which position to render the loading indicator\n'auto' (default): at the end of the input, unless a `leadingVisual` is passed. Then, it will render at the beginning\n'leading': at the beginning of the input\n'trailing': at the end of the input",
        "name": "loaderPosition",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TextInput/TextInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"auto\" | \"leading\" | \"trailing\"",
          "value": [
            {
              "value": "\"auto\""
            },
            {
              "value": "\"leading\""
            },
            {
              "value": "\"trailing\""
            }
          ]
        }
      },
      "loaderText": {
        "defaultValue": null,
        "description": "Text for screen readers to convey the loading state",
        "name": "loaderText",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TextInput/TextInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "leadingVisual": {
        "defaultValue": null,
        "description": "A visual that renders inside the input before the typing area",
        "name": "leadingVisual",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TextInput/TextInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ... 4 more ...",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "trailingVisual": {
        "defaultValue": null,
        "description": "A visual that renders inside the input after the typing area",
        "name": "trailingVisual",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TextInput/TextInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ... 4 more ...",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "trailingAction": {
        "defaultValue": null,
        "description": "A visual that renders inside the input after the typing area",
        "name": "trailingAction",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TextInput/TextInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactElement<HTMLProps<HTMLButtonElement>, string | JSXElementConstructor<any>>",
          "value": [
            {
              "value": "ReactElement<HTMLProps<HTMLButtonElement>, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            }
          ]
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the input is styled to look disabled.",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "size": {
        "defaultValue": null,
        "description": "The size of the input.",
        "name": "size",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "TextInputSizes",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            }
          ]
        }
      },
      "block": {
        "defaultValue": null,
        "description": "Whether the input takes up the full width of its parent",
        "name": "block",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "monospace": {
        "defaultValue": null,
        "description": "Whether the text rendered in the input is in a monospace font.",
        "name": "monospace",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "@deprecated Use `size` prop instead",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "TextInputSizes",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "contrast": {
        "defaultValue": null,
        "description": "Whether the background color of the input has contrast against the default background color.",
        "name": "contrast",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "validationStatus": {
        "defaultValue": null,
        "description": "The result of validation on the input.",
        "name": "validationStatus",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "FormValidationStatus",
          "value": [
            {
              "value": "\"success\""
            },
            {
              "value": "\"error\""
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "TextInput.Action",
      "primerparentid": "text_input"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/TextInput/TextInputInnerAction.tsx",
    "description": "An action button that can be used inside a `TextInput` component.",
    "displayName": "TextInput.Action",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "@deprecated Text input action buttons should only use icon buttons",
        "name": "children",
        "parent": {
          "fileName": "react/node_modules/@types/react/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "DOMAttributes"
          },
          {
            "fileName": "react/packages/react/src/TextInput/TextInputInnerAction.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "Text that appears in a tooltip. If an icon is passed, this is also used as the label used by assistive technologies.",
        "name": "aria-label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TextInput/TextInputInnerAction.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "tooltipDirection": {
        "defaultValue": null,
        "description": "Position of tooltip. If no position is passed or defaults to \"n\"",
        "name": "tooltipDirection",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TextInput/TextInputInnerAction.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"s\" | \"nw\" | \"n\" | \"ne\" | \"e\" | \"se\" | \"sw\" | \"w\"",
          "value": [
            {
              "value": "\"s\""
            },
            {
              "value": "\"nw\""
            },
            {
              "value": "\"n\""
            },
            {
              "value": "\"ne\""
            },
            {
              "value": "\"e\""
            },
            {
              "value": "\"se\""
            },
            {
              "value": "\"sw\""
            },
            {
              "value": "\"w\""
            }
          ]
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "The icon to render inside the button",
        "name": "icon",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TextInput/TextInputInnerAction.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "FunctionComponent<PropsWithChildren<IconProps>>",
          "value": [
            {
              "value": "FunctionComponent<PropsWithChildren<IconProps>>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "variant": {
        "defaultValue": {
          "value": "invisible"
        },
        "description": "@deprecated Text input action buttons should only use the 'invisible' button variant\nDetermine's the styles on a button one of 'default' | 'primary' | 'invisible' | 'danger'",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TextInput/TextInputInnerAction.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "VariantType",
          "value": [
            {
              "value": "\"link\""
            },
            {
              "value": "\"default\""
            },
            {
              "value": "\"danger\""
            },
            {
              "value": "\"primary\""
            },
            {
              "value": "\"invisible\""
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "text_input_with_tokens",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/TextInputWithTokens/TextInputWithTokens.tsx",
    "description": "Text input with tokens is an input for a value that is a list.",
    "displayName": "TextInputWithTokens",
    "methods": [],
    "props": {
      "tokens": {
        "defaultValue": null,
        "description": "The array of tokens to render",
        "name": "tokens",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TextInputWithTokens/TextInputWithTokens.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "any[] | (Omit<(Omit<DetailedHTMLProps<AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>, \"ref\"> & { ...; }) | (Omit<...> & { ...; }) | (Omit<...> & { ...; }), keyof TokenProps> & TokenProps & { ...; })[]",
          "value": [
            {
              "value": "any[]",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "(Omit<(Omit<DetailedHTMLProps<AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>, \"ref\"> & { ...; }) | (Omit<...> & { ...; }) | (Omit<...> & { ...; }), keyof TokenProps> & TokenProps & { ...; })[]",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "onTokenRemove": {
        "defaultValue": null,
        "description": "The function that gets called when a token is removed",
        "name": "onTokenRemove",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TextInputWithTokens/TextInputWithTokens.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "(tokenId: string | number) => void"
        }
      },
      "tokenComponent": {
        "defaultValue": {
          "value": "Token"
        },
        "description": "The component used to render each token",
        "name": "tokenComponent",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TextInputWithTokens/TextInputWithTokens.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "AnyReactComponent | ForwardRefComponent<\"a\" | \"button\" | \"span\", TokenProps>",
          "value": [
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            },
            {
              "value": "ForwardRefComponent<\"a\" | \"button\" | \"span\", TokenProps>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "maxHeight": {
        "defaultValue": null,
        "description": "The maximum height of the component. If the content in the input exceeds this height,\nit will scroll vertically",
        "name": "maxHeight",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TextInputWithTokens/TextInputWithTokens.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "MaxHeight<string | number>",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "string & {}"
            }
          ]
        }
      },
      "preventTokenWrapping": {
        "defaultValue": null,
        "description": "Whether tokens should render inline horizontally. By default, tokens wrap to new lines.",
        "name": "preventTokenWrapping",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TextInputWithTokens/TextInputWithTokens.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "size": {
        "defaultValue": {
          "value": "xlarge"
        },
        "description": "The size of the tokens and text input",
        "name": "size",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TextInputWithTokens/TextInputWithTokens.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "TokenSizeKeys",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            },
            {
              "value": "\"xlarge\""
            }
          ]
        }
      },
      "hideTokenRemoveButtons": {
        "defaultValue": null,
        "description": "Whether the remove buttons should be rendered in the tokens",
        "name": "hideTokenRemoveButtons",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TextInputWithTokens/TextInputWithTokens.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "visibleTokenCount": {
        "defaultValue": null,
        "description": "The number of tokens to display before truncating",
        "name": "visibleTokenCount",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TextInputWithTokens/TextInputWithTokens.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "number",
          "value": [
            {
              "value": "number"
            }
          ]
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the input is styled to look disabled.",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "loading": {
        "defaultValue": null,
        "description": "Whether the to show a loading indicator in the input",
        "name": "loading",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TextInput/TextInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "block": {
        "defaultValue": null,
        "description": "Whether the input takes up the full width of its parent",
        "name": "block",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "monospace": {
        "defaultValue": null,
        "description": "Whether the text rendered in the input is in a monospace font.",
        "name": "monospace",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "@deprecated Use `size` prop instead",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "TextInputSizes",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            }
          ]
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "@deprecated Use `leadingVisual` or `trailingVisual` prop instead",
        "name": "icon",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TextInput/TextInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ElementType<any, keyof IntrinsicElements>",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "leadingVisual": {
        "defaultValue": null,
        "description": "A visual that renders inside the input before the typing area",
        "name": "leadingVisual",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TextInput/TextInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ... 4 more ...",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "trailingVisual": {
        "defaultValue": null,
        "description": "A visual that renders inside the input after the typing area",
        "name": "trailingVisual",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TextInput/TextInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ... 4 more ...",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "trailingAction": {
        "defaultValue": null,
        "description": "A visual that renders inside the input after the typing area",
        "name": "trailingAction",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TextInput/TextInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactElement<HTMLProps<HTMLButtonElement>, string | JSXElementConstructor<any>>",
          "value": [
            {
              "value": "ReactElement<HTMLProps<HTMLButtonElement>, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            }
          ]
        }
      },
      "contrast": {
        "defaultValue": null,
        "description": "Whether the background color of the input has contrast against the default background color.",
        "name": "contrast",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "validationStatus": {
        "defaultValue": null,
        "description": "The result of validation on the input.",
        "name": "validationStatus",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "FormValidationStatus",
          "value": [
            {
              "value": "\"success\""
            },
            {
              "value": "\"error\""
            }
          ]
        }
      },
      "loaderPosition": {
        "defaultValue": null,
        "description": "Which position to render the loading indicator\n'auto' (default): at the end of the input, unless a `leadingVisual` is passed. Then, it will render at the beginning\n'leading': at the beginning of the input\n'trailing': at the end of the input",
        "name": "loaderPosition",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TextInput/TextInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"auto\" | \"leading\" | \"trailing\"",
          "value": [
            {
              "value": "\"auto\""
            },
            {
              "value": "\"leading\""
            },
            {
              "value": "\"trailing\""
            }
          ]
        }
      },
      "loaderText": {
        "defaultValue": null,
        "description": "Text for screen readers to convey the loading state",
        "name": "loaderText",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TextInput/TextInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "textarea",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Textarea/Textarea.tsx",
    "description": "An accessible, native textarea component that supports validation states.\nThis component accepts all native HTML <textarea> attributes as props.",
    "displayName": "Textarea",
    "methods": [],
    "props": {
      "disabled": {
        "defaultValue": null,
        "description": "Apply inactive visual appearance to the Textarea",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Textarea/Textarea.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "TextareaHTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "validationStatus": {
        "defaultValue": null,
        "description": "Indicates whether the Textarea validation state",
        "name": "validationStatus",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Textarea/Textarea.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "FormValidationStatus",
          "value": [
            {
              "value": "\"success\""
            },
            {
              "value": "\"error\""
            }
          ]
        }
      },
      "block": {
        "defaultValue": null,
        "description": "Expands with width of the component to fill the parent elements",
        "name": "block",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Textarea/Textarea.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "resize": {
        "defaultValue": {
          "value": "both"
        },
        "description": "Allows resizing of the textarea",
        "name": "resize",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Textarea/Textarea.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"vertical\" | \"none\" | \"both\" | \"horizontal\"",
          "value": [
            {
              "value": "\"vertical\""
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"both\""
            },
            {
              "value": "\"horizontal\""
            }
          ]
        }
      },
      "contrast": {
        "defaultValue": null,
        "description": "apply a high contrast color to background",
        "name": "contrast",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Textarea/Textarea.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "className": {
        "defaultValue": null,
        "description": "The className to apply to the wrapper element",
        "name": "className",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Textarea/Textarea.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "timeline",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Timeline/Timeline.tsx",
    "description": "The timeline component is used to display items on a vertical timeline, connected by timeline elements.",
    "displayName": "Timeline",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "clipSidebar": {
        "defaultValue": null,
        "description": "Hides the sidebar above the first Timeline.Item and below the last Timeline.Item.",
        "name": "clipSidebar",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Timeline/Timeline.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Timeline.Item",
      "primerparentid": "timeline"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Timeline/Timeline.tsx",
    "description": "An individual item on a timeline.",
    "displayName": "Timeline.Item",
    "methods": [],
    "props": {
      "condensed": {
        "defaultValue": null,
        "description": "Reduces vertical padding and removes background from an item's badge.",
        "name": "condensed",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Timeline/Timeline.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Timeline.Badge",
      "primerparentid": "timeline"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Timeline/Timeline.tsx",
    "description": "The \"badge\" that prepends a timeline item's body content.",
    "displayName": "Timeline.Badge",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "",
        "name": "children",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Timeline/Timeline.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Timeline.Body",
      "primerparentid": "timeline"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Timeline/Timeline.tsx",
    "description": "A timeline item's body content.",
    "displayName": "Timeline.Body",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Timeline.Break",
      "primerparentid": "timeline"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Timeline/Timeline.tsx",
    "description": "A visual break in the timeline.",
    "displayName": "Timeline.Break",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "toggle_switch",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ToggleSwitch/ToggleSwitch.tsx",
    "description": "Toggle switch is used to immediately toggle a setting on or off.",
    "displayName": "ToggleSwitch",
    "methods": [],
    "props": {
      "aria-describedby": {
        "defaultValue": null,
        "description": "The ID(s) of the DOM node(s) that describes the switch",
        "name": "aria-describedby",
        "parent": {
          "fileName": "react/packages/react/src/ToggleSwitch/ToggleSwitch.tsx",
          "name": "ToggleSwitchProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/ToggleSwitch/ToggleSwitch.tsx",
            "name": "ToggleSwitchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "The ID of the DOM node that labels the switch",
        "name": "aria-labelledby",
        "parent": {
          "fileName": "react/packages/react/src/ToggleSwitch/ToggleSwitch.tsx",
          "name": "ToggleSwitchProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/ToggleSwitch/ToggleSwitch.tsx",
            "name": "ToggleSwitchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "defaultChecked": {
        "defaultValue": null,
        "description": "Uncontrolled - whether the switch is turned on",
        "name": "defaultChecked",
        "parent": {
          "fileName": "react/packages/react/src/ToggleSwitch/ToggleSwitch.tsx",
          "name": "ToggleSwitchProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/ToggleSwitch/ToggleSwitch.tsx",
            "name": "ToggleSwitchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the switch is ready for user input",
        "name": "disabled",
        "parent": {
          "fileName": "react/packages/react/src/ToggleSwitch/ToggleSwitch.tsx",
          "name": "ToggleSwitchProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/ToggleSwitch/ToggleSwitch.tsx",
            "name": "ToggleSwitchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "loading": {
        "defaultValue": null,
        "description": "Whether the switch's value is being calculated",
        "name": "loading",
        "parent": {
          "fileName": "react/packages/react/src/ToggleSwitch/ToggleSwitch.tsx",
          "name": "ToggleSwitchProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/ToggleSwitch/ToggleSwitch.tsx",
            "name": "ToggleSwitchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "checked": {
        "defaultValue": null,
        "description": "Whether the switch is turned on",
        "name": "checked",
        "parent": {
          "fileName": "react/packages/react/src/ToggleSwitch/ToggleSwitch.tsx",
          "name": "ToggleSwitchProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/ToggleSwitch/ToggleSwitch.tsx",
            "name": "ToggleSwitchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "The callback that is called when the switch is toggled on or off",
        "name": "onChange",
        "parent": {
          "fileName": "react/packages/react/src/ToggleSwitch/ToggleSwitch.tsx",
          "name": "ToggleSwitchProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/ToggleSwitch/ToggleSwitch.tsx",
            "name": "ToggleSwitchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "((checked: boolean) => void)",
          "value": [
            {
              "value": "(checked: boolean) => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "onClick": {
        "defaultValue": null,
        "description": "The callback that is called when the switch is clicked",
        "name": "onClick",
        "parent": {
          "fileName": "react/packages/react/src/ToggleSwitch/ToggleSwitch.tsx",
          "name": "ToggleSwitchProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/ToggleSwitch/ToggleSwitch.tsx",
            "name": "ToggleSwitchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "MouseEventHandler",
          "value": [
            {
              "value": "MouseEventHandler",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Size of the switch",
        "name": "size",
        "parent": {
          "fileName": "react/packages/react/src/ToggleSwitch/ToggleSwitch.tsx",
          "name": "ToggleSwitchProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/ToggleSwitch/ToggleSwitch.tsx",
            "name": "ToggleSwitchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"small\" | \"medium\"",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"medium\""
            }
          ]
        }
      },
      "statusLabelPosition": {
        "defaultValue": null,
        "description": "Whether the \"on\" and \"off\" labels should appear before or after the switch.\n**This should only be changed when the switch's alignment needs to be adjusted.** For example: It needs to be left-aligned because the label appears above it and the caption appears below it.",
        "name": "statusLabelPosition",
        "parent": {
          "fileName": "react/packages/react/src/ToggleSwitch/ToggleSwitch.tsx",
          "name": "ToggleSwitchProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/ToggleSwitch/ToggleSwitch.tsx",
            "name": "ToggleSwitchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "CellAlignment",
          "value": [
            {
              "value": "\"end\""
            },
            {
              "value": "\"start\""
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ToggleSwitch/ToggleSwitchStoryWrapper.tsx",
    "description": "",
    "displayName": "ToggleSwitchStoryWrapper",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "primerid": "avatar_token",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Token/AvatarToken.tsx",
    "description": "An abstraction of Token that includes an avatar image as a leading visual.",
    "displayName": "AvatarToken",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          },
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"a\" | \"button\" | \"span\" | (\"button\" & (ComponentClass<unknown, any> | FunctionComponent<unknown>)) | (\"a\" & (ComponentClass<unknown, any> | FunctionComponent<...>)) | (\"span\" & (ComponentClass<...> | FunctionComponent<...>))",
          "value": [
            {
              "value": "\"a\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"button\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"button\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"a\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"a\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"span\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"span\" & FunctionComponent<unknown>"
            }
          ]
        }
      },
      "avatarSrc": {
        "defaultValue": null,
        "description": "",
        "name": "avatarSrc",
        "parent": {
          "fileName": "react/packages/react/src/Token/AvatarToken.tsx",
          "name": "AvatarTokenProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/AvatarToken.tsx",
            "name": "AvatarTokenProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "onRemove": {
        "defaultValue": null,
        "description": "The function that gets called when a user clicks the remove button, or keys \"Backspace\" or \"Delete\" when focused on the token",
        "name": "onRemove",
        "parent": {
          "fileName": "react/packages/react/src/Token/TokenBase.tsx",
          "name": "TokenBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "(() => void)",
          "value": [
            {
              "value": "() => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "hideRemoveButton": {
        "defaultValue": null,
        "description": "Whether the remove button should be rendered in the token",
        "name": "hideRemoveButton",
        "parent": {
          "fileName": "react/packages/react/src/Token/TokenBase.tsx",
          "name": "TokenBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "isSelected": {
        "defaultValue": null,
        "description": "Whether the token is selected",
        "name": "isSelected",
        "parent": {
          "fileName": "react/packages/react/src/Token/TokenBase.tsx",
          "name": "TokenBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "text": {
        "defaultValue": null,
        "description": "The text label inside the token",
        "name": "text",
        "parent": {
          "fileName": "react/packages/react/src/Token/TokenBase.tsx",
          "name": "TokenBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A unique identifier that can be associated with the token",
        "name": "id",
        "parent": {
          "fileName": "react/packages/react/src/Token/TokenBase.tsx",
          "name": "TokenBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string | number",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "number"
            }
          ]
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Which size the token will be rendered at",
        "name": "size",
        "parent": {
          "fileName": "react/packages/react/src/Token/TokenBase.tsx",
          "name": "TokenBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "TokenSizeKeys",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            },
            {
              "value": "\"xlarge\""
            }
          ]
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether or not the token is disabled (non-interactive).",
        "name": "disabled",
        "parent": {
          "fileName": "react/packages/react/src/Token/TokenBase.tsx",
          "name": "TokenBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "issue_label_token",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Token/IssueLabelToken.tsx",
    "description": "An abstraction of Token that includes a color fill to render a token in the style of GitHub issue labels.",
    "displayName": "IssueLabelToken",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          },
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"a\" | \"button\" | \"span\" | (\"button\" & (ComponentClass<unknown, any> | FunctionComponent<unknown>)) | (\"a\" & (ComponentClass<unknown, any> | FunctionComponent<...>)) | (\"span\" & (ComponentClass<...> | FunctionComponent<...>))",
          "value": [
            {
              "value": "\"a\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"button\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"button\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"a\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"a\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"span\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"span\" & FunctionComponent<unknown>"
            }
          ]
        }
      },
      "fillColor": {
        "defaultValue": {
          "value": "#999"
        },
        "description": "The color that corresponds to the label",
        "name": "fillColor",
        "parent": {
          "fileName": "react/packages/react/src/Token/IssueLabelToken.tsx",
          "name": "IssueLabelTokenProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/IssueLabelToken.tsx",
            "name": "IssueLabelTokenProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "onRemove": {
        "defaultValue": null,
        "description": "The function that gets called when a user clicks the remove button, or keys \"Backspace\" or \"Delete\" when focused on the token",
        "name": "onRemove",
        "parent": {
          "fileName": "react/packages/react/src/Token/TokenBase.tsx",
          "name": "TokenBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "(() => void)",
          "value": [
            {
              "value": "() => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "hideRemoveButton": {
        "defaultValue": null,
        "description": "Whether the remove button should be rendered in the token",
        "name": "hideRemoveButton",
        "parent": {
          "fileName": "react/packages/react/src/Token/TokenBase.tsx",
          "name": "TokenBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "isSelected": {
        "defaultValue": null,
        "description": "Whether the token is selected",
        "name": "isSelected",
        "parent": {
          "fileName": "react/packages/react/src/Token/TokenBase.tsx",
          "name": "TokenBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "text": {
        "defaultValue": null,
        "description": "The text label inside the token",
        "name": "text",
        "parent": {
          "fileName": "react/packages/react/src/Token/TokenBase.tsx",
          "name": "TokenBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A unique identifier that can be associated with the token",
        "name": "id",
        "parent": {
          "fileName": "react/packages/react/src/Token/TokenBase.tsx",
          "name": "TokenBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string | number",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "number"
            }
          ]
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Which size the token will be rendered at",
        "name": "size",
        "parent": {
          "fileName": "react/packages/react/src/Token/TokenBase.tsx",
          "name": "TokenBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "TokenSizeKeys",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            },
            {
              "value": "\"xlarge\""
            }
          ]
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether or not the token is disabled (non-interactive).",
        "name": "disabled",
        "parent": {
          "fileName": "react/packages/react/src/Token/TokenBase.tsx",
          "name": "TokenBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "token",
      "primerstatus": "alpha",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Token/Token.tsx",
    "description": "Token is a compact representation of an object, and is typically used to show a collection of related metadata.",
    "displayName": "Token",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          },
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"a\" | \"button\" | \"span\" | (\"button\" & (ComponentClass<unknown, any> | FunctionComponent<unknown>)) | (\"a\" & (ComponentClass<unknown, any> | FunctionComponent<...>)) | (\"span\" & (ComponentClass<...> | FunctionComponent<...>))",
          "value": [
            {
              "value": "\"a\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"button\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"button\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"a\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"a\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"span\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"span\" & FunctionComponent<unknown>"
            }
          ]
        }
      },
      "leadingVisual": {
        "defaultValue": null,
        "description": "A component that renders before the token text",
        "name": "leadingVisual",
        "parent": {
          "fileName": "react/packages/react/src/Token/Token.tsx",
          "name": "TokenProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/Token.tsx",
            "name": "TokenProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ElementType<any, keyof IntrinsicElements>",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "onRemove": {
        "defaultValue": null,
        "description": "The function that gets called when a user clicks the remove button, or keys \"Backspace\" or \"Delete\" when focused on the token",
        "name": "onRemove",
        "parent": {
          "fileName": "react/packages/react/src/Token/TokenBase.tsx",
          "name": "TokenBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "(() => void)",
          "value": [
            {
              "value": "() => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "hideRemoveButton": {
        "defaultValue": null,
        "description": "Whether the remove button should be rendered in the token",
        "name": "hideRemoveButton",
        "parent": {
          "fileName": "react/packages/react/src/Token/TokenBase.tsx",
          "name": "TokenBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "isSelected": {
        "defaultValue": null,
        "description": "Whether the token is selected",
        "name": "isSelected",
        "parent": {
          "fileName": "react/packages/react/src/Token/TokenBase.tsx",
          "name": "TokenBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "text": {
        "defaultValue": null,
        "description": "The text label inside the token",
        "name": "text",
        "parent": {
          "fileName": "react/packages/react/src/Token/TokenBase.tsx",
          "name": "TokenBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A unique identifier that can be associated with the token",
        "name": "id",
        "parent": {
          "fileName": "react/packages/react/src/Token/TokenBase.tsx",
          "name": "TokenBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string | number",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "number"
            }
          ]
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Which size the token will be rendered at",
        "name": "size",
        "parent": {
          "fileName": "react/packages/react/src/Token/TokenBase.tsx",
          "name": "TokenBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "TokenSizeKeys",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            },
            {
              "value": "\"xlarge\""
            }
          ]
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether or not the token is disabled (non-interactive).",
        "name": "disabled",
        "parent": {
          "fileName": "react/packages/react/src/Token/TokenBase.tsx",
          "name": "TokenBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Token/TokenBase.tsx",
    "description": "",
    "displayName": "isTokenInteractive",
    "methods": [],
    "props": {
      "disabled": {
        "defaultValue": null,
        "description": "Whether or not the token is disabled (non-interactive).",
        "name": "disabled",
        "parent": {
          "fileName": "react/packages/react/src/Token/TokenBase.tsx",
          "name": "TokenBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "as": {
        "defaultValue": {
          "value": "span"
        },
        "description": "",
        "name": "as",
        "parent": {
          "fileName": "react/packages/react/src/Token/TokenBase.tsx",
          "name": "TokenBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"a\" | \"button\" | \"span\"",
          "value": [
            {
              "value": "\"a\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"span\""
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Token/_RemoveTokenButton.tsx",
    "description": "",
    "displayName": "RemoveTokenButton",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "react/packages/react/src/Token/_RemoveTokenButton.tsx",
          "name": "TokenButtonProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/_RemoveTokenButton.tsx",
            "name": "TokenButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "TokenSizeKeys",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            },
            {
              "value": "\"xlarge\""
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "borderOffset": {
        "defaultValue": null,
        "description": "",
        "name": "borderOffset",
        "parent": {
          "fileName": "react/packages/react/src/Token/_RemoveTokenButton.tsx",
          "name": "TokenButtonProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/_RemoveTokenButton.tsx",
            "name": "TokenButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "number",
          "value": [
            {
              "value": "number"
            }
          ]
        }
      },
      "isParentInteractive": {
        "defaultValue": null,
        "description": "",
        "name": "isParentInteractive",
        "parent": {
          "fileName": "react/packages/react/src/Token/_RemoveTokenButton.tsx",
          "name": "TokenButtonProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/_RemoveTokenButton.tsx",
            "name": "TokenButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Token/_TokenTextContainer.tsx",
    "description": "",
    "displayName": "TokenTextContainer",
    "methods": [],
    "props": {
      "text": {
        "defaultValue": null,
        "description": "The text label inside the token",
        "name": "text",
        "parent": {
          "fileName": "react/packages/react/src/Token/TokenBase.tsx",
          "name": "TokenBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A unique identifier that can be associated with the token",
        "name": "id",
        "parent": {
          "fileName": "react/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          },
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether or not the token is disabled (non-interactive).",
        "name": "disabled",
        "parent": {
          "fileName": "react/packages/react/src/Token/TokenBase.tsx",
          "name": "TokenBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Which size the token will be rendered at",
        "name": "size",
        "parent": {
          "fileName": "react/packages/react/src/Token/TokenBase.tsx",
          "name": "TokenBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "TokenSizeKeys",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            },
            {
              "value": "\"xlarge\""
            }
          ]
        }
      },
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "parent": {
          "fileName": "react/packages/react/src/Token/TokenBase.tsx",
          "name": "TokenBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          },
          {
            "fileName": "react/node_modules/@types/styled-components/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "undefined"
        }
      },
      "onRemove": {
        "defaultValue": null,
        "description": "The function that gets called when a user clicks the remove button, or keys \"Backspace\" or \"Delete\" when focused on the token",
        "name": "onRemove",
        "parent": {
          "fileName": "react/packages/react/src/Token/TokenBase.tsx",
          "name": "TokenBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "(() => void)",
          "value": [
            {
              "value": "() => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "hideRemoveButton": {
        "defaultValue": null,
        "description": "Whether the remove button should be rendered in the token",
        "name": "hideRemoveButton",
        "parent": {
          "fileName": "react/packages/react/src/Token/TokenBase.tsx",
          "name": "TokenBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "isSelected": {
        "defaultValue": null,
        "description": "Whether the token is selected",
        "name": "isSelected",
        "parent": {
          "fileName": "react/packages/react/src/Token/TokenBase.tsx",
          "name": "TokenBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "tooltip",
      "primerdocsid": "tooltip",
      "primerstatus": "deprecated",
      "primera11yreviewed": "false",
      "deprecated": ""
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Tooltip/Tooltip.tsx",
    "description": "Tooltips add additional context to interactive UI elements and appear on mouse hover or keyboard focus.",
    "displayName": "Tooltip",
    "methods": [],
    "props": {
      "direction": {
        "defaultValue": {
          "value": "n"
        },
        "description": "Sets where the tooltip renders in relation to the target.",
        "name": "direction",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Tooltip/Tooltip.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"s\" | \"nw\" | \"n\" | \"ne\" | \"e\" | \"se\" | \"sw\" | \"w\"",
          "value": [
            {
              "value": "\"s\""
            },
            {
              "value": "\"nw\""
            },
            {
              "value": "\"n\""
            },
            {
              "value": "\"ne\""
            },
            {
              "value": "\"e\""
            },
            {
              "value": "\"se\""
            },
            {
              "value": "\"sw\""
            },
            {
              "value": "\"w\""
            }
          ]
        }
      },
      "text": {
        "defaultValue": null,
        "description": "Text content of the tooltip. Also used as an aria-label.",
        "name": "text",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Tooltip/Tooltip.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "noDelay": {
        "defaultValue": null,
        "description": "When set to `true`, tooltip appears without any delay.",
        "name": "noDelay",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Tooltip/Tooltip.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "align": {
        "defaultValue": null,
        "description": "",
        "name": "align",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Tooltip/Tooltip.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"left\" | \"right\"",
          "value": [
            {
              "value": "\"left\""
            },
            {
              "value": "\"right\""
            }
          ]
        }
      },
      "wrap": {
        "defaultValue": null,
        "description": "Use `true` to allow text within tooltip to wrap.",
        "name": "wrap",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Tooltip/Tooltip.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "tooltip_v2",
      "primerdocsid": "tooltip",
      "primerstatus": "beta",
      "primera11yreviewed": "true"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/TooltipV2/Tooltip.tsx",
    "description": "Tooltips add additional context to interactive UI elements and appear on mouse hover or keyboard focus.",
    "displayName": "Tooltip",
    "methods": [],
    "props": {
      "direction": {
        "defaultValue": {
          "value": "s"
        },
        "description": "TSets where the tooltip renders in relation to the target.",
        "name": "direction",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TooltipV2/Tooltip.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "TooltipDirection",
          "value": [
            {
              "value": "\"s\""
            },
            {
              "value": "\"nw\""
            },
            {
              "value": "\"n\""
            },
            {
              "value": "\"ne\""
            },
            {
              "value": "\"e\""
            },
            {
              "value": "\"se\""
            },
            {
              "value": "\"sw\""
            },
            {
              "value": "\"w\""
            }
          ]
        }
      },
      "text": {
        "defaultValue": null,
        "description": "The text to be displayed in the tooltip",
        "name": "text",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TooltipV2/Tooltip.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "type": {
        "defaultValue": {
          "value": "description"
        },
        "description": "The type of tooltip. `label` is used for labelling the element that triggers tooltip. `description` is used for describing or adding a suplementary information to the element that triggers the tooltip.",
        "name": "type",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TooltipV2/Tooltip.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"label\" | \"description\"",
          "value": [
            {
              "value": "\"label\""
            },
            {
              "value": "\"description\""
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "tree_view",
      "primerstatus": "beta",
      "primera11yreviewed": "true"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/TreeView/TreeView.tsx",
    "description": "Tree view is a hierarchical list of items that may have a parent-child relationship where children can be toggled into view by expanding or collapsing their parent item.",
    "displayName": "TreeView",
    "methods": [],
    "props": {
      "aria-label": {
        "defaultValue": null,
        "description": "",
        "name": "aria-label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TreeView/TreeView.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "",
        "name": "aria-labelledby",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TreeView/TreeView.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "children": {
        "defaultValue": null,
        "description": "",
        "name": "children",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TreeView/TreeView.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "flat": {
        "defaultValue": null,
        "description": "Prevents the tree from indenting items. This should only be used when the tree is used to display a flat list of items.",
        "name": "flat",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TreeView/TreeView.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "truncate": {
        "defaultValue": {
          "value": true
        },
        "description": "Whether to truncate node text",
        "name": "truncate",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TreeView/TreeView.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Class name(s) used to customize styles",
        "name": "className",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TreeView/TreeView.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "TreeView.Item",
      "primerparentid": "tree_view"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/TreeView/TreeView.tsx",
    "description": "A node in the tree view. May contain a TreeView.SubTree of child nodes.",
    "displayName": "TreeView.Item",
    "methods": [],
    "props": {
      "aria-label": {
        "defaultValue": null,
        "description": "",
        "name": "aria-label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TreeView/TreeView.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "",
        "name": "aria-labelledby",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TreeView/TreeView.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A unique identifier for the item.",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TreeView/TreeView.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "",
        "name": "children",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TreeView/TreeView.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "containIntrinsicSize": {
        "defaultValue": null,
        "description": "The size of this item's contents. Passing this will set 'content-visiblity: auto' on the content container, delaying rendering until the item is in the viewport.",
        "name": "containIntrinsicSize",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TreeView/TreeView.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "current": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Indicates whether the item is the current item. No more than one item should be current at once. The path to the current item will be expanded by default.",
        "name": "current",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TreeView/TreeView.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "defaultExpanded": {
        "defaultValue": null,
        "description": "The expanded state of the item when it is initially rendered. Use when you do not need to control the state.",
        "name": "defaultExpanded",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TreeView/TreeView.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "expanded": {
        "defaultValue": null,
        "description": "The controlled expanded state of item. Must be used in conjunction with onExpandedChange.",
        "name": "expanded",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TreeView/TreeView.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean | null",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "onExpandedChange": {
        "defaultValue": null,
        "description": "Event handler called when the expanded state of the item changes.",
        "name": "onExpandedChange",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TreeView/TreeView.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "((expanded: boolean) => void)",
          "value": [
            {
              "value": "(expanded: boolean) => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "onSelect": {
        "defaultValue": null,
        "description": "Callback when a tree view node is activated",
        "name": "onSelect",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TreeView/TreeView.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "((event: KeyboardEvent<HTMLElement> | MouseEvent<HTMLElement, MouseEvent>) => void)",
          "value": [
            {
              "value": "(event: KeyboardEvent<HTMLElement> | MouseEvent<HTMLElement, MouseEvent>) => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Class name(s) used to customize styles",
        "name": "className",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TreeView/TreeView.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "TreeView.SubTree",
      "primerparentid": "tree_view"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/TreeView/TreeView.tsx",
    "description": "A subtree of items that are nested under a parent node (TreeView.Item) in the tree view.",
    "displayName": "TreeView.SubTree",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "",
        "name": "children",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TreeView/TreeView.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "state": {
        "defaultValue": null,
        "description": "Specify a state if items in the subtree are loaded asynchronously. An asynchronous subtree can be in one of the following states: 'initial', 'loading', 'done', or 'error'. In the 'initial' state, items are neither loaded nor loading. In the 'loading' state, items are loading and the subtree will render a loading indicator. In the 'done' state, items are loaded. Screen readers will announce when a subtree enters the 'done' state. An 'error' state means that an error occured while loading items.",
        "name": "state",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TreeView/TreeView.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "SubTreeState",
          "value": [
            {
              "value": "\"loading\""
            },
            {
              "value": "\"initial\""
            },
            {
              "value": "\"done\""
            },
            {
              "value": "\"error\""
            }
          ]
        }
      },
      "count": {
        "defaultValue": null,
        "description": "The number of items expected to be in the subtree. When in the loading state, the subtree will render a skeleton loading placeholder with the specified count of items",
        "name": "count",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TreeView/TreeView.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "number",
          "value": [
            {
              "value": "number"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "TreeView.LeadingVisual",
      "primerparentid": "tree_view"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/TreeView/TreeView.tsx",
    "description": "A visual that appears at the beginning of a tree view node (after the TreeView.LeadingAction if one is passed).",
    "displayName": "TreeView.LeadingVisual",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "",
        "name": "children",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TreeView/TreeView.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "ReactNode | ((props: { isExpanded: boolean; }) => ReactNode)",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "(props: { isExpanded: boolean; }) => ReactNode",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Provide an accessible label for the visual. This is not necessary for decorative visuals.",
        "name": "label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TreeView/TreeView.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "TreeView.TrailingVisual",
      "primerparentid": "tree_view"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/TreeView/TreeView.tsx",
    "description": "A visual that appears at the end of a tree view node.",
    "displayName": "TreeView.TrailingVisual",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "",
        "name": "children",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TreeView/TreeView.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "ReactNode | ((props: { isExpanded: boolean; }) => ReactNode)",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "(props: { isExpanded: boolean; }) => ReactNode",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Provide an accessible label for the visual. This is not necessary for decorative visuals.",
        "name": "label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TreeView/TreeView.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "TreeView.LeadingAction",
      "primerparentid": "tree_view"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/TreeView/TreeView.tsx",
    "description": "An interactive element appears at the beginning of a tree view node (before the leading visual).",
    "displayName": "TreeView.LeadingAction",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "",
        "name": "children",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TreeView/TreeView.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "ReactNode | ((props: { isExpanded: boolean; }) => ReactNode)",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "(props: { isExpanded: boolean; }) => ReactNode",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Provide an accessible label for the visual. This is not necessary for decorative visuals.",
        "name": "label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TreeView/TreeView.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "TreeView.ErrorDialog",
      "primerparentid": "tree_view"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/TreeView/TreeView.tsx",
    "description": "A dialog that may be used to show a dialog with an error message when an error occurs that prevents the tree view from rendering.",
    "displayName": "TreeView.ErrorDialog",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "The content of the dialog. This is usually a message explaining the error.",
        "name": "children",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TreeView/TreeView.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "title": {
        "defaultValue": {
          "value": "Error"
        },
        "description": "The title of the dialog. This is usually a short description of the error.",
        "name": "title",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TreeView/TreeView.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "onRetry": {
        "defaultValue": null,
        "description": "Event handler called when the user clicks the retry button.",
        "name": "onRetry",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TreeView/TreeView.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "(() => void)",
          "value": [
            {
              "value": "() => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "onDismiss": {
        "defaultValue": null,
        "description": "Event handler called when the dialog is dismissed.",
        "name": "onDismiss",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TreeView/TreeView.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "(() => void)",
          "value": [
            {
              "value": "() => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "truncate",
      "primerstatus": "alpha",
      "a11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Truncate/Truncate.tsx",
    "description": "Use Truncate to shorten overflowing text with an ellipsis.",
    "displayName": "Truncate",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | ... 162 more ... | FunctionComponent<...>",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<unknown, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<unknown>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "title": {
        "defaultValue": null,
        "description": "@deprecated use children instead",
        "name": "title",
        "parent": {
          "fileName": "react/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          },
          {
            "fileName": "react/packages/react/src/Truncate/Truncate.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inline": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Displays text as inline block and vertical aligns to the top.",
        "name": "inline",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Truncate/Truncate.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "expandable": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Displays text as inline block and vertical aligns to the top.",
        "name": "expandable",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Truncate/Truncate.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/UnderlineNav/UnderlineNav.tsx",
    "description": "",
    "displayName": "NavigationList",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/UnderlineNav/UnderlineNav.tsx",
    "description": "",
    "displayName": "MoreMenuListItem",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/UnderlineNav/UnderlineNav.tsx",
    "description": "",
    "displayName": "getValidChildren",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "primerid": "underline_nav",
      "primerstatus": "beta",
      "primera11yreviewed": "true"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/UnderlineNav/UnderlineNav.tsx",
    "description": "The underline nav is used to display navigation in a horizontal tabbed format.",
    "displayName": "UnderlineNav",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "",
        "name": "children",
        "declarations": [
          {
            "fileName": "react/packages/react/src/UnderlineNav/UnderlineNav.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "A unique name for the rendered 'nav' landmark. It will also be used to label the arrow\\nbuttons that control the scroll behaviour on coarse pointer devices. (I.e.\\n'Scroll ${aria-label} left/right')\\n",
        "name": "aria-label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/UnderlineNav/UnderlineNav.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "as": {
        "defaultValue": {
          "value": "nav"
        },
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/UnderlineNav/UnderlineNav.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ElementType<any, keyof IntrinsicElements>",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "declarations": [
          {
            "fileName": "react/packages/react/src/UnderlineNav/UnderlineNav.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "loadingCounters": {
        "defaultValue": {
          "value": false
        },
        "description": "Whether the navigation items are in loading state. Component waits for all the counters to finish loading to prevent multiple layout shifts.",
        "name": "loadingCounters",
        "declarations": [
          {
            "fileName": "react/packages/react/src/UnderlineNav/UnderlineNav.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "UnderlineNav.Item",
      "primerparentid": "underline_nav"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/UnderlineNav/UnderlineNavItem.tsx",
    "description": "A link in the UnderlineNav",
    "displayName": "UnderlineNav.Item",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "Renders `UnderlineNav.Item` as given component i.e. react-router's Link",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/UnderlineNav/UnderlineNavItem.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/UnderlineNav/UnderlineNavItem.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/UnderlineNav/UnderlineNavItem.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | ... 704 more ... | (\"tab-container\" & (ComponentClass<...> | FunctionComponent<...>))",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "\"h1\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"h1\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"h2\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"h2\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"h3\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"h3\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"h4\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"h4\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"h5\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"h5\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"h6\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"h6\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"button\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"button\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"a\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"a\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"symbol\" & ComponentClass<any, any>"
            },
            {
              "value": "\"symbol\" & FunctionComponent<any>"
            },
            {
              "value": "\"object\" & ComponentClass<any, any>"
            },
            {
              "value": "\"object\" & FunctionComponent<any>"
            },
            {
              "value": "\"a\" & ComponentClass<any, any>"
            },
            {
              "value": "\"a\" & FunctionComponent<any>"
            },
            {
              "value": "\"abbr\" & ComponentClass<any, any>"
            },
            {
              "value": "\"abbr\" & FunctionComponent<any>"
            },
            {
              "value": "\"address\" & ComponentClass<any, any>"
            },
            {
              "value": "\"address\" & FunctionComponent<any>"
            },
            {
              "value": "\"area\" & ComponentClass<any, any>"
            },
            {
              "value": "\"area\" & FunctionComponent<any>"
            },
            {
              "value": "\"article\" & ComponentClass<any, any>"
            },
            {
              "value": "\"article\" & FunctionComponent<any>"
            },
            {
              "value": "\"aside\" & ComponentClass<any, any>"
            },
            {
              "value": "\"aside\" & FunctionComponent<any>"
            },
            {
              "value": "\"audio\" & ComponentClass<any, any>"
            },
            {
              "value": "\"audio\" & FunctionComponent<any>"
            },
            {
              "value": "\"b\" & ComponentClass<any, any>"
            },
            {
              "value": "\"b\" & FunctionComponent<any>"
            },
            {
              "value": "\"base\" & ComponentClass<any, any>"
            },
            {
              "value": "\"base\" & FunctionComponent<any>"
            },
            {
              "value": "\"bdi\" & ComponentClass<any, any>"
            },
            {
              "value": "\"bdi\" & FunctionComponent<any>"
            },
            {
              "value": "\"bdo\" & ComponentClass<any, any>"
            },
            {
              "value": "\"bdo\" & FunctionComponent<any>"
            },
            {
              "value": "\"big\" & ComponentClass<any, any>"
            },
            {
              "value": "\"big\" & FunctionComponent<any>"
            },
            {
              "value": "\"blockquote\" & ComponentClass<any, any>"
            },
            {
              "value": "\"blockquote\" & FunctionComponent<any>"
            },
            {
              "value": "\"body\" & ComponentClass<any, any>"
            },
            {
              "value": "\"body\" & FunctionComponent<any>"
            },
            {
              "value": "\"br\" & ComponentClass<any, any>"
            },
            {
              "value": "\"br\" & FunctionComponent<any>"
            },
            {
              "value": "\"button\" & ComponentClass<any, any>"
            },
            {
              "value": "\"button\" & FunctionComponent<any>"
            },
            {
              "value": "\"canvas\" & ComponentClass<any, any>"
            },
            {
              "value": "\"canvas\" & FunctionComponent<any>"
            },
            {
              "value": "\"caption\" & ComponentClass<any, any>"
            },
            {
              "value": "\"caption\" & FunctionComponent<any>"
            },
            {
              "value": "\"center\" & ComponentClass<any, any>"
            },
            {
              "value": "\"center\" & FunctionComponent<any>"
            },
            {
              "value": "\"cite\" & ComponentClass<any, any>"
            },
            {
              "value": "\"cite\" & FunctionComponent<any>"
            },
            {
              "value": "\"code\" & ComponentClass<any, any>"
            },
            {
              "value": "\"code\" & FunctionComponent<any>"
            },
            {
              "value": "\"col\" & ComponentClass<any, any>"
            },
            {
              "value": "\"col\" & FunctionComponent<any>"
            },
            {
              "value": "\"colgroup\" & ComponentClass<any, any>"
            },
            {
              "value": "\"colgroup\" & FunctionComponent<any>"
            },
            {
              "value": "\"data\" & ComponentClass<any, any>"
            },
            {
              "value": "\"data\" & FunctionComponent<any>"
            },
            {
              "value": "\"datalist\" & ComponentClass<any, any>"
            },
            {
              "value": "\"datalist\" & FunctionComponent<any>"
            },
            {
              "value": "\"dd\" & ComponentClass<any, any>"
            },
            {
              "value": "\"dd\" & FunctionComponent<any>"
            },
            {
              "value": "\"del\" & ComponentClass<any, any>"
            },
            {
              "value": "\"del\" & FunctionComponent<any>"
            },
            {
              "value": "\"details\" & ComponentClass<any, any>"
            },
            {
              "value": "\"details\" & FunctionComponent<any>"
            },
            {
              "value": "\"dfn\" & ComponentClass<any, any>"
            },
            {
              "value": "\"dfn\" & FunctionComponent<any>"
            },
            {
              "value": "\"dialog\" & ComponentClass<any, any>"
            },
            {
              "value": "\"dialog\" & FunctionComponent<any>"
            },
            {
              "value": "\"div\" & ComponentClass<any, any>"
            },
            {
              "value": "\"div\" & FunctionComponent<any>"
            },
            {
              "value": "\"dl\" & ComponentClass<any, any>"
            },
            {
              "value": "\"dl\" & FunctionComponent<any>"
            },
            {
              "value": "\"dt\" & ComponentClass<any, any>"
            },
            {
              "value": "\"dt\" & FunctionComponent<any>"
            },
            {
              "value": "\"em\" & ComponentClass<any, any>"
            },
            {
              "value": "\"em\" & FunctionComponent<any>"
            },
            {
              "value": "\"embed\" & ComponentClass<any, any>"
            },
            {
              "value": "\"embed\" & FunctionComponent<any>"
            },
            {
              "value": "\"fieldset\" & ComponentClass<any, any>"
            },
            {
              "value": "\"fieldset\" & FunctionComponent<any>"
            },
            {
              "value": "\"figcaption\" & ComponentClass<any, any>"
            },
            {
              "value": "\"figcaption\" & FunctionComponent<any>"
            },
            {
              "value": "\"figure\" & ComponentClass<any, any>"
            },
            {
              "value": "\"figure\" & FunctionComponent<any>"
            },
            {
              "value": "\"footer\" & ComponentClass<any, any>"
            },
            {
              "value": "\"footer\" & FunctionComponent<any>"
            },
            {
              "value": "\"form\" & ComponentClass<any, any>"
            },
            {
              "value": "\"form\" & FunctionComponent<any>"
            },
            {
              "value": "\"h1\" & ComponentClass<any, any>"
            },
            {
              "value": "\"h1\" & FunctionComponent<any>"
            },
            {
              "value": "\"h2\" & ComponentClass<any, any>"
            },
            {
              "value": "\"h2\" & FunctionComponent<any>"
            },
            {
              "value": "\"h3\" & ComponentClass<any, any>"
            },
            {
              "value": "\"h3\" & FunctionComponent<any>"
            },
            {
              "value": "\"h4\" & ComponentClass<any, any>"
            },
            {
              "value": "\"h4\" & FunctionComponent<any>"
            },
            {
              "value": "\"h5\" & ComponentClass<any, any>"
            },
            {
              "value": "\"h5\" & FunctionComponent<any>"
            },
            {
              "value": "\"h6\" & ComponentClass<any, any>"
            },
            {
              "value": "\"h6\" & FunctionComponent<any>"
            },
            {
              "value": "\"head\" & ComponentClass<any, any>"
            },
            {
              "value": "\"head\" & FunctionComponent<any>"
            },
            {
              "value": "\"header\" & ComponentClass<any, any>"
            },
            {
              "value": "\"header\" & FunctionComponent<any>"
            },
            {
              "value": "\"hgroup\" & ComponentClass<any, any>"
            },
            {
              "value": "\"hgroup\" & FunctionComponent<any>"
            },
            {
              "value": "\"hr\" & ComponentClass<any, any>"
            },
            {
              "value": "\"hr\" & FunctionComponent<any>"
            },
            {
              "value": "\"html\" & ComponentClass<any, any>"
            },
            {
              "value": "\"html\" & FunctionComponent<any>"
            },
            {
              "value": "\"i\" & ComponentClass<any, any>"
            },
            {
              "value": "\"i\" & FunctionComponent<any>"
            },
            {
              "value": "\"iframe\" & ComponentClass<any, any>"
            },
            {
              "value": "\"iframe\" & FunctionComponent<any>"
            },
            {
              "value": "\"img\" & ComponentClass<any, any>"
            },
            {
              "value": "\"img\" & FunctionComponent<any>"
            },
            {
              "value": "\"input\" & ComponentClass<any, any>"
            },
            {
              "value": "\"input\" & FunctionComponent<any>"
            },
            {
              "value": "\"ins\" & ComponentClass<any, any>"
            },
            {
              "value": "\"ins\" & FunctionComponent<any>"
            },
            {
              "value": "\"kbd\" & ComponentClass<any, any>"
            },
            {
              "value": "\"kbd\" & FunctionComponent<any>"
            },
            {
              "value": "\"keygen\" & ComponentClass<any, any>"
            },
            {
              "value": "\"keygen\" & FunctionComponent<any>"
            },
            {
              "value": "\"label\" & ComponentClass<any, any>"
            },
            {
              "value": "\"label\" & FunctionComponent<any>"
            },
            {
              "value": "\"legend\" & ComponentClass<any, any>"
            },
            {
              "value": "\"legend\" & FunctionComponent<any>"
            },
            {
              "value": "\"li\" & ComponentClass<any, any>"
            },
            {
              "value": "\"li\" & FunctionComponent<any>"
            },
            {
              "value": "\"link\" & ComponentClass<any, any>"
            },
            {
              "value": "\"link\" & FunctionComponent<any>"
            },
            {
              "value": "\"main\" & ComponentClass<any, any>"
            },
            {
              "value": "\"main\" & FunctionComponent<any>"
            },
            {
              "value": "\"map\" & ComponentClass<any, any>"
            },
            {
              "value": "\"map\" & FunctionComponent<any>"
            },
            {
              "value": "\"mark\" & ComponentClass<any, any>"
            },
            {
              "value": "\"mark\" & FunctionComponent<any>"
            },
            {
              "value": "\"menu\" & ComponentClass<any, any>"
            },
            {
              "value": "\"menu\" & FunctionComponent<any>"
            },
            {
              "value": "\"menuitem\" & ComponentClass<any, any>"
            },
            {
              "value": "\"menuitem\" & FunctionComponent<any>"
            },
            {
              "value": "\"meta\" & ComponentClass<any, any>"
            },
            {
              "value": "\"meta\" & FunctionComponent<any>"
            },
            {
              "value": "\"meter\" & ComponentClass<any, any>"
            },
            {
              "value": "\"meter\" & FunctionComponent<any>"
            },
            {
              "value": "\"nav\" & ComponentClass<any, any>"
            },
            {
              "value": "\"nav\" & FunctionComponent<any>"
            },
            {
              "value": "\"noindex\" & ComponentClass<any, any>"
            },
            {
              "value": "\"noindex\" & FunctionComponent<any>"
            },
            {
              "value": "\"noscript\" & ComponentClass<any, any>"
            },
            {
              "value": "\"noscript\" & FunctionComponent<any>"
            },
            {
              "value": "\"ol\" & ComponentClass<any, any>"
            },
            {
              "value": "\"ol\" & FunctionComponent<any>"
            },
            {
              "value": "\"optgroup\" & ComponentClass<any, any>"
            },
            {
              "value": "\"optgroup\" & FunctionComponent<any>"
            },
            {
              "value": "\"option\" & ComponentClass<any, any>"
            },
            {
              "value": "\"option\" & FunctionComponent<any>"
            },
            {
              "value": "\"output\" & ComponentClass<any, any>"
            },
            {
              "value": "\"output\" & FunctionComponent<any>"
            },
            {
              "value": "\"p\" & ComponentClass<any, any>"
            },
            {
              "value": "\"p\" & FunctionComponent<any>"
            },
            {
              "value": "\"param\" & ComponentClass<any, any>"
            },
            {
              "value": "\"param\" & FunctionComponent<any>"
            },
            {
              "value": "\"picture\" & ComponentClass<any, any>"
            },
            {
              "value": "\"picture\" & FunctionComponent<any>"
            },
            {
              "value": "\"pre\" & ComponentClass<any, any>"
            },
            {
              "value": "\"pre\" & FunctionComponent<any>"
            },
            {
              "value": "\"progress\" & ComponentClass<any, any>"
            },
            {
              "value": "\"progress\" & FunctionComponent<any>"
            },
            {
              "value": "\"q\" & ComponentClass<any, any>"
            },
            {
              "value": "\"q\" & FunctionComponent<any>"
            },
            {
              "value": "\"rp\" & ComponentClass<any, any>"
            },
            {
              "value": "\"rp\" & FunctionComponent<any>"
            },
            {
              "value": "\"rt\" & ComponentClass<any, any>"
            },
            {
              "value": "\"rt\" & FunctionComponent<any>"
            },
            {
              "value": "\"ruby\" & ComponentClass<any, any>"
            },
            {
              "value": "\"ruby\" & FunctionComponent<any>"
            },
            {
              "value": "\"s\" & ComponentClass<any, any>"
            },
            {
              "value": "\"s\" & FunctionComponent<any>"
            },
            {
              "value": "\"samp\" & ComponentClass<any, any>"
            },
            {
              "value": "\"samp\" & FunctionComponent<any>"
            },
            {
              "value": "\"search\" & ComponentClass<any, any>"
            },
            {
              "value": "\"search\" & FunctionComponent<any>"
            },
            {
              "value": "\"slot\" & ComponentClass<any, any>"
            },
            {
              "value": "\"slot\" & FunctionComponent<any>"
            },
            {
              "value": "\"script\" & ComponentClass<any, any>"
            },
            {
              "value": "\"script\" & FunctionComponent<any>"
            },
            {
              "value": "\"section\" & ComponentClass<any, any>"
            },
            {
              "value": "\"section\" & FunctionComponent<any>"
            },
            {
              "value": "\"select\" & ComponentClass<any, any>"
            },
            {
              "value": "\"select\" & FunctionComponent<any>"
            },
            {
              "value": "\"small\" & ComponentClass<any, any>"
            },
            {
              "value": "\"small\" & FunctionComponent<any>"
            },
            {
              "value": "\"source\" & ComponentClass<any, any>"
            },
            {
              "value": "\"source\" & FunctionComponent<any>"
            },
            {
              "value": "\"span\" & ComponentClass<any, any>"
            },
            {
              "value": "\"span\" & FunctionComponent<any>"
            },
            {
              "value": "\"strong\" & ComponentClass<any, any>"
            },
            {
              "value": "\"strong\" & FunctionComponent<any>"
            },
            {
              "value": "\"style\" & ComponentClass<any, any>"
            },
            {
              "value": "\"style\" & FunctionComponent<any>"
            },
            {
              "value": "\"sub\" & ComponentClass<any, any>"
            },
            {
              "value": "\"sub\" & FunctionComponent<any>"
            },
            {
              "value": "\"summary\" & ComponentClass<any, any>"
            },
            {
              "value": "\"summary\" & FunctionComponent<any>"
            },
            {
              "value": "\"sup\" & ComponentClass<any, any>"
            },
            {
              "value": "\"sup\" & FunctionComponent<any>"
            },
            {
              "value": "\"table\" & ComponentClass<any, any>"
            },
            {
              "value": "\"table\" & FunctionComponent<any>"
            },
            {
              "value": "\"template\" & ComponentClass<any, any>"
            },
            {
              "value": "\"template\" & FunctionComponent<any>"
            },
            {
              "value": "\"tbody\" & ComponentClass<any, any>"
            },
            {
              "value": "\"tbody\" & FunctionComponent<any>"
            },
            {
              "value": "\"td\" & ComponentClass<any, any>"
            },
            {
              "value": "\"td\" & FunctionComponent<any>"
            },
            {
              "value": "\"textarea\" & ComponentClass<any, any>"
            },
            {
              "value": "\"textarea\" & FunctionComponent<any>"
            },
            {
              "value": "\"tfoot\" & ComponentClass<any, any>"
            },
            {
              "value": "\"tfoot\" & FunctionComponent<any>"
            },
            {
              "value": "\"th\" & ComponentClass<any, any>"
            },
            {
              "value": "\"th\" & FunctionComponent<any>"
            },
            {
              "value": "\"thead\" & ComponentClass<any, any>"
            },
            {
              "value": "\"thead\" & FunctionComponent<any>"
            },
            {
              "value": "\"time\" & ComponentClass<any, any>"
            },
            {
              "value": "\"time\" & FunctionComponent<any>"
            },
            {
              "value": "\"title\" & ComponentClass<any, any>"
            },
            {
              "value": "\"title\" & FunctionComponent<any>"
            },
            {
              "value": "\"tr\" & ComponentClass<any, any>"
            },
            {
              "value": "\"tr\" & FunctionComponent<any>"
            },
            {
              "value": "\"track\" & ComponentClass<any, any>"
            },
            {
              "value": "\"track\" & FunctionComponent<any>"
            },
            {
              "value": "\"u\" & ComponentClass<any, any>"
            },
            {
              "value": "\"u\" & FunctionComponent<any>"
            },
            {
              "value": "\"ul\" & ComponentClass<any, any>"
            },
            {
              "value": "\"ul\" & FunctionComponent<any>"
            },
            {
              "value": "\"var\" & ComponentClass<any, any>"
            },
            {
              "value": "\"var\" & FunctionComponent<any>"
            },
            {
              "value": "\"video\" & ComponentClass<any, any>"
            },
            {
              "value": "\"video\" & FunctionComponent<any>"
            },
            {
              "value": "\"wbr\" & ComponentClass<any, any>"
            },
            {
              "value": "\"wbr\" & FunctionComponent<any>"
            },
            {
              "value": "\"webview\" & ComponentClass<any, any>"
            },
            {
              "value": "\"webview\" & FunctionComponent<any>"
            },
            {
              "value": "\"svg\" & ComponentClass<any, any>"
            },
            {
              "value": "\"svg\" & FunctionComponent<any>"
            },
            {
              "value": "\"animate\" & ComponentClass<any, any>"
            },
            {
              "value": "\"animate\" & FunctionComponent<any>"
            },
            {
              "value": "\"animateMotion\" & ComponentClass<any, any>"
            },
            {
              "value": "\"animateMotion\" & FunctionComponent<any>"
            },
            {
              "value": "\"animateTransform\" & ComponentClass<any, any>"
            },
            {
              "value": "\"animateTransform\" & FunctionComponent<any>"
            },
            {
              "value": "\"circle\" & ComponentClass<any, any>"
            },
            {
              "value": "\"circle\" & FunctionComponent<any>"
            },
            {
              "value": "\"clipPath\" & ComponentClass<any, any>"
            },
            {
              "value": "\"clipPath\" & FunctionComponent<any>"
            },
            {
              "value": "\"defs\" & ComponentClass<any, any>"
            },
            {
              "value": "\"defs\" & FunctionComponent<any>"
            },
            {
              "value": "\"desc\" & ComponentClass<any, any>"
            },
            {
              "value": "\"desc\" & FunctionComponent<any>"
            },
            {
              "value": "\"ellipse\" & ComponentClass<any, any>"
            },
            {
              "value": "\"ellipse\" & FunctionComponent<any>"
            },
            {
              "value": "\"feBlend\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feBlend\" & FunctionComponent<any>"
            },
            {
              "value": "\"feColorMatrix\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feColorMatrix\" & FunctionComponent<any>"
            },
            {
              "value": "\"feComponentTransfer\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feComponentTransfer\" & FunctionComponent<any>"
            },
            {
              "value": "\"feComposite\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feComposite\" & FunctionComponent<any>"
            },
            {
              "value": "\"feConvolveMatrix\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feConvolveMatrix\" & FunctionComponent<any>"
            },
            {
              "value": "\"feDiffuseLighting\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feDiffuseLighting\" & FunctionComponent<any>"
            },
            {
              "value": "\"feDisplacementMap\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feDisplacementMap\" & FunctionComponent<any>"
            },
            {
              "value": "\"feDistantLight\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feDistantLight\" & FunctionComponent<any>"
            },
            {
              "value": "\"feDropShadow\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feDropShadow\" & FunctionComponent<any>"
            },
            {
              "value": "\"feFlood\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feFlood\" & FunctionComponent<any>"
            },
            {
              "value": "\"feFuncA\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feFuncA\" & FunctionComponent<any>"
            },
            {
              "value": "\"feFuncB\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feFuncB\" & FunctionComponent<any>"
            },
            {
              "value": "\"feFuncG\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feFuncG\" & FunctionComponent<any>"
            },
            {
              "value": "\"feFuncR\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feFuncR\" & FunctionComponent<any>"
            },
            {
              "value": "\"feGaussianBlur\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feGaussianBlur\" & FunctionComponent<any>"
            },
            {
              "value": "\"feImage\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feImage\" & FunctionComponent<any>"
            },
            {
              "value": "\"feMerge\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feMerge\" & FunctionComponent<any>"
            },
            {
              "value": "\"feMergeNode\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feMergeNode\" & FunctionComponent<any>"
            },
            {
              "value": "\"feMorphology\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feMorphology\" & FunctionComponent<any>"
            },
            {
              "value": "\"feOffset\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feOffset\" & FunctionComponent<any>"
            },
            {
              "value": "\"fePointLight\" & ComponentClass<any, any>"
            },
            {
              "value": "\"fePointLight\" & FunctionComponent<any>"
            },
            {
              "value": "\"feSpecularLighting\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feSpecularLighting\" & FunctionComponent<any>"
            },
            {
              "value": "\"feSpotLight\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feSpotLight\" & FunctionComponent<any>"
            },
            {
              "value": "\"feTile\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feTile\" & FunctionComponent<any>"
            },
            {
              "value": "\"feTurbulence\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feTurbulence\" & FunctionComponent<any>"
            },
            {
              "value": "\"filter\" & ComponentClass<any, any>"
            },
            {
              "value": "\"filter\" & FunctionComponent<any>"
            },
            {
              "value": "\"foreignObject\" & ComponentClass<any, any>"
            },
            {
              "value": "\"foreignObject\" & FunctionComponent<any>"
            },
            {
              "value": "\"g\" & ComponentClass<any, any>"
            },
            {
              "value": "\"g\" & FunctionComponent<any>"
            },
            {
              "value": "\"image\" & ComponentClass<any, any>"
            },
            {
              "value": "\"image\" & FunctionComponent<any>"
            },
            {
              "value": "\"line\" & ComponentClass<any, any>"
            },
            {
              "value": "\"line\" & FunctionComponent<any>"
            },
            {
              "value": "\"linearGradient\" & ComponentClass<any, any>"
            },
            {
              "value": "\"linearGradient\" & FunctionComponent<any>"
            },
            {
              "value": "\"marker\" & ComponentClass<any, any>"
            },
            {
              "value": "\"marker\" & FunctionComponent<any>"
            },
            {
              "value": "\"mask\" & ComponentClass<any, any>"
            },
            {
              "value": "\"mask\" & FunctionComponent<any>"
            },
            {
              "value": "\"metadata\" & ComponentClass<any, any>"
            },
            {
              "value": "\"metadata\" & FunctionComponent<any>"
            },
            {
              "value": "\"mpath\" & ComponentClass<any, any>"
            },
            {
              "value": "\"mpath\" & FunctionComponent<any>"
            },
            {
              "value": "\"path\" & ComponentClass<any, any>"
            },
            {
              "value": "\"path\" & FunctionComponent<any>"
            },
            {
              "value": "\"pattern\" & ComponentClass<any, any>"
            },
            {
              "value": "\"pattern\" & FunctionComponent<any>"
            },
            {
              "value": "\"polygon\" & ComponentClass<any, any>"
            },
            {
              "value": "\"polygon\" & FunctionComponent<any>"
            },
            {
              "value": "\"polyline\" & ComponentClass<any, any>"
            },
            {
              "value": "\"polyline\" & FunctionComponent<any>"
            },
            {
              "value": "\"radialGradient\" & ComponentClass<any, any>"
            },
            {
              "value": "\"radialGradient\" & FunctionComponent<any>"
            },
            {
              "value": "\"rect\" & ComponentClass<any, any>"
            },
            {
              "value": "\"rect\" & FunctionComponent<any>"
            },
            {
              "value": "\"set\" & ComponentClass<any, any>"
            },
            {
              "value": "\"set\" & FunctionComponent<any>"
            },
            {
              "value": "\"stop\" & ComponentClass<any, any>"
            },
            {
              "value": "\"stop\" & FunctionComponent<any>"
            },
            {
              "value": "\"switch\" & ComponentClass<any, any>"
            },
            {
              "value": "\"switch\" & FunctionComponent<any>"
            },
            {
              "value": "\"text\" & ComponentClass<any, any>"
            },
            {
              "value": "\"text\" & FunctionComponent<any>"
            },
            {
              "value": "\"textPath\" & ComponentClass<any, any>"
            },
            {
              "value": "\"textPath\" & FunctionComponent<any>"
            },
            {
              "value": "\"tspan\" & ComponentClass<any, any>"
            },
            {
              "value": "\"tspan\" & FunctionComponent<any>"
            },
            {
              "value": "\"use\" & ComponentClass<any, any>"
            },
            {
              "value": "\"use\" & FunctionComponent<any>"
            },
            {
              "value": "\"view\" & ComponentClass<any, any>"
            },
            {
              "value": "\"view\" & FunctionComponent<any>"
            },
            {
              "value": "\"relative-time\" & ComponentClass<any, any>"
            },
            {
              "value": "\"relative-time\" & FunctionComponent<any>"
            },
            {
              "value": "\"tab-container\" & ComponentClass<any, any>"
            },
            {
              "value": "\"tab-container\" & FunctionComponent<any>"
            },
            {
              "value": "ComponentClass<any, any> & ComponentClass<unknown, any>"
            },
            {
              "value": "ComponentClass<any, any> & FunctionComponent<unknown>"
            },
            {
              "value": "FunctionComponent<any> & ComponentClass<unknown, any>"
            },
            {
              "value": "FunctionComponent<any> & FunctionComponent<unknown>"
            },
            {
              "value": "ComponentClass<any, any> & \"symbol\""
            },
            {
              "value": "ComponentClass<any, any> & \"object\""
            },
            {
              "value": "ComponentClass<any, any> & \"a\""
            },
            {
              "value": "ComponentClass<any, any> & \"abbr\""
            },
            {
              "value": "ComponentClass<any, any> & \"address\""
            },
            {
              "value": "ComponentClass<any, any> & \"area\""
            },
            {
              "value": "ComponentClass<any, any> & \"article\""
            },
            {
              "value": "ComponentClass<any, any> & \"aside\""
            },
            {
              "value": "ComponentClass<any, any> & \"audio\""
            },
            {
              "value": "ComponentClass<any, any> & \"b\""
            },
            {
              "value": "ComponentClass<any, any> & \"base\""
            },
            {
              "value": "ComponentClass<any, any> & \"bdi\""
            },
            {
              "value": "ComponentClass<any, any> & \"bdo\""
            },
            {
              "value": "ComponentClass<any, any> & \"big\""
            },
            {
              "value": "ComponentClass<any, any> & \"blockquote\""
            },
            {
              "value": "ComponentClass<any, any> & \"body\""
            },
            {
              "value": "ComponentClass<any, any> & \"br\""
            },
            {
              "value": "ComponentClass<any, any> & \"button\""
            },
            {
              "value": "ComponentClass<any, any> & \"canvas\""
            },
            {
              "value": "ComponentClass<any, any> & \"caption\""
            },
            {
              "value": "ComponentClass<any, any> & \"center\""
            },
            {
              "value": "ComponentClass<any, any> & \"cite\""
            },
            {
              "value": "ComponentClass<any, any> & \"code\""
            },
            {
              "value": "ComponentClass<any, any> & \"col\""
            },
            {
              "value": "ComponentClass<any, any> & \"colgroup\""
            },
            {
              "value": "ComponentClass<any, any> & \"data\""
            },
            {
              "value": "ComponentClass<any, any> & \"datalist\""
            },
            {
              "value": "ComponentClass<any, any> & \"dd\""
            },
            {
              "value": "ComponentClass<any, any> & \"del\""
            },
            {
              "value": "ComponentClass<any, any> & \"details\""
            },
            {
              "value": "ComponentClass<any, any> & \"dfn\""
            },
            {
              "value": "ComponentClass<any, any> & \"dialog\""
            },
            {
              "value": "ComponentClass<any, any> & \"div\""
            },
            {
              "value": "ComponentClass<any, any> & \"dl\""
            },
            {
              "value": "ComponentClass<any, any> & \"dt\""
            },
            {
              "value": "ComponentClass<any, any> & \"em\""
            },
            {
              "value": "ComponentClass<any, any> & \"embed\""
            },
            {
              "value": "ComponentClass<any, any> & \"fieldset\""
            },
            {
              "value": "ComponentClass<any, any> & \"figcaption\""
            },
            {
              "value": "ComponentClass<any, any> & \"figure\""
            },
            {
              "value": "ComponentClass<any, any> & \"footer\""
            },
            {
              "value": "ComponentClass<any, any> & \"form\""
            },
            {
              "value": "ComponentClass<any, any> & \"h1\""
            },
            {
              "value": "ComponentClass<any, any> & \"h2\""
            },
            {
              "value": "ComponentClass<any, any> & \"h3\""
            },
            {
              "value": "ComponentClass<any, any> & \"h4\""
            },
            {
              "value": "ComponentClass<any, any> & \"h5\""
            },
            {
              "value": "ComponentClass<any, any> & \"h6\""
            },
            {
              "value": "ComponentClass<any, any> & \"head\""
            },
            {
              "value": "ComponentClass<any, any> & \"header\""
            },
            {
              "value": "ComponentClass<any, any> & \"hgroup\""
            },
            {
              "value": "ComponentClass<any, any> & \"hr\""
            },
            {
              "value": "ComponentClass<any, any> & \"html\""
            },
            {
              "value": "ComponentClass<any, any> & \"i\""
            },
            {
              "value": "ComponentClass<any, any> & \"iframe\""
            },
            {
              "value": "ComponentClass<any, any> & \"img\""
            },
            {
              "value": "ComponentClass<any, any> & \"input\""
            },
            {
              "value": "ComponentClass<any, any> & \"ins\""
            },
            {
              "value": "ComponentClass<any, any> & \"kbd\""
            },
            {
              "value": "ComponentClass<any, any> & \"keygen\""
            },
            {
              "value": "ComponentClass<any, any> & \"label\""
            },
            {
              "value": "ComponentClass<any, any> & \"legend\""
            },
            {
              "value": "ComponentClass<any, any> & \"li\""
            },
            {
              "value": "ComponentClass<any, any> & \"link\""
            },
            {
              "value": "ComponentClass<any, any> & \"main\""
            },
            {
              "value": "ComponentClass<any, any> & \"map\""
            },
            {
              "value": "ComponentClass<any, any> & \"mark\""
            },
            {
              "value": "ComponentClass<any, any> & \"menu\""
            },
            {
              "value": "ComponentClass<any, any> & \"menuitem\""
            },
            {
              "value": "ComponentClass<any, any> & \"meta\""
            },
            {
              "value": "ComponentClass<any, any> & \"meter\""
            },
            {
              "value": "ComponentClass<any, any> & \"nav\""
            },
            {
              "value": "ComponentClass<any, any> & \"noindex\""
            },
            {
              "value": "ComponentClass<any, any> & \"noscript\""
            },
            {
              "value": "ComponentClass<any, any> & \"ol\""
            },
            {
              "value": "ComponentClass<any, any> & \"optgroup\""
            },
            {
              "value": "ComponentClass<any, any> & \"option\""
            },
            {
              "value": "ComponentClass<any, any> & \"output\""
            },
            {
              "value": "ComponentClass<any, any> & \"p\""
            },
            {
              "value": "ComponentClass<any, any> & \"param\""
            },
            {
              "value": "ComponentClass<any, any> & \"picture\""
            },
            {
              "value": "ComponentClass<any, any> & \"pre\""
            },
            {
              "value": "ComponentClass<any, any> & \"progress\""
            },
            {
              "value": "ComponentClass<any, any> & \"q\""
            },
            {
              "value": "ComponentClass<any, any> & \"rp\""
            },
            {
              "value": "ComponentClass<any, any> & \"rt\""
            },
            {
              "value": "ComponentClass<any, any> & \"ruby\""
            },
            {
              "value": "ComponentClass<any, any> & \"s\""
            },
            {
              "value": "ComponentClass<any, any> & \"samp\""
            },
            {
              "value": "ComponentClass<any, any> & \"search\""
            },
            {
              "value": "ComponentClass<any, any> & \"slot\""
            },
            {
              "value": "ComponentClass<any, any> & \"script\""
            },
            {
              "value": "ComponentClass<any, any> & \"section\""
            },
            {
              "value": "ComponentClass<any, any> & \"select\""
            },
            {
              "value": "ComponentClass<any, any> & \"small\""
            },
            {
              "value": "ComponentClass<any, any> & \"source\""
            },
            {
              "value": "ComponentClass<any, any> & \"span\""
            },
            {
              "value": "ComponentClass<any, any> & \"strong\""
            },
            {
              "value": "ComponentClass<any, any> & \"style\""
            },
            {
              "value": "ComponentClass<any, any> & \"sub\""
            },
            {
              "value": "ComponentClass<any, any> & \"summary\""
            },
            {
              "value": "ComponentClass<any, any> & \"sup\""
            },
            {
              "value": "ComponentClass<any, any> & \"table\""
            },
            {
              "value": "ComponentClass<any, any> & \"template\""
            },
            {
              "value": "ComponentClass<any, any> & \"tbody\""
            },
            {
              "value": "ComponentClass<any, any> & \"td\""
            },
            {
              "value": "ComponentClass<any, any> & \"textarea\""
            },
            {
              "value": "ComponentClass<any, any> & \"tfoot\""
            },
            {
              "value": "ComponentClass<any, any> & \"th\""
            },
            {
              "value": "ComponentClass<any, any> & \"thead\""
            },
            {
              "value": "ComponentClass<any, any> & \"time\""
            },
            {
              "value": "ComponentClass<any, any> & \"title\""
            },
            {
              "value": "ComponentClass<any, any> & \"tr\""
            },
            {
              "value": "ComponentClass<any, any> & \"track\""
            },
            {
              "value": "ComponentClass<any, any> & \"u\""
            },
            {
              "value": "ComponentClass<any, any> & \"ul\""
            },
            {
              "value": "ComponentClass<any, any> & \"var\""
            },
            {
              "value": "ComponentClass<any, any> & \"video\""
            },
            {
              "value": "ComponentClass<any, any> & \"wbr\""
            },
            {
              "value": "ComponentClass<any, any> & \"webview\""
            },
            {
              "value": "ComponentClass<any, any> & \"svg\""
            },
            {
              "value": "ComponentClass<any, any> & \"animate\""
            },
            {
              "value": "ComponentClass<any, any> & \"animateMotion\""
            },
            {
              "value": "ComponentClass<any, any> & \"animateTransform\""
            },
            {
              "value": "ComponentClass<any, any> & \"circle\""
            },
            {
              "value": "ComponentClass<any, any> & \"clipPath\""
            },
            {
              "value": "ComponentClass<any, any> & \"defs\""
            },
            {
              "value": "ComponentClass<any, any> & \"desc\""
            },
            {
              "value": "ComponentClass<any, any> & \"ellipse\""
            },
            {
              "value": "ComponentClass<any, any> & \"feBlend\""
            },
            {
              "value": "ComponentClass<any, any> & \"feColorMatrix\""
            },
            {
              "value": "ComponentClass<any, any> & \"feComponentTransfer\""
            },
            {
              "value": "ComponentClass<any, any> & \"feComposite\""
            },
            {
              "value": "ComponentClass<any, any> & \"feConvolveMatrix\""
            },
            {
              "value": "ComponentClass<any, any> & \"feDiffuseLighting\""
            },
            {
              "value": "ComponentClass<any, any> & \"feDisplacementMap\""
            },
            {
              "value": "ComponentClass<any, any> & \"feDistantLight\""
            },
            {
              "value": "ComponentClass<any, any> & \"feDropShadow\""
            },
            {
              "value": "ComponentClass<any, any> & \"feFlood\""
            },
            {
              "value": "ComponentClass<any, any> & \"feFuncA\""
            },
            {
              "value": "ComponentClass<any, any> & \"feFuncB\""
            },
            {
              "value": "ComponentClass<any, any> & \"feFuncG\""
            },
            {
              "value": "ComponentClass<any, any> & \"feFuncR\""
            },
            {
              "value": "ComponentClass<any, any> & \"feGaussianBlur\""
            },
            {
              "value": "ComponentClass<any, any> & \"feImage\""
            },
            {
              "value": "ComponentClass<any, any> & \"feMerge\""
            },
            {
              "value": "ComponentClass<any, any> & \"feMergeNode\""
            },
            {
              "value": "ComponentClass<any, any> & \"feMorphology\""
            },
            {
              "value": "ComponentClass<any, any> & \"feOffset\""
            },
            {
              "value": "ComponentClass<any, any> & \"fePointLight\""
            },
            {
              "value": "ComponentClass<any, any> & \"feSpecularLighting\""
            },
            {
              "value": "ComponentClass<any, any> & \"feSpotLight\""
            },
            {
              "value": "ComponentClass<any, any> & \"feTile\""
            },
            {
              "value": "ComponentClass<any, any> & \"feTurbulence\""
            },
            {
              "value": "ComponentClass<any, any> & \"filter\""
            },
            {
              "value": "ComponentClass<any, any> & \"foreignObject\""
            },
            {
              "value": "ComponentClass<any, any> & \"g\""
            },
            {
              "value": "ComponentClass<any, any> & \"image\""
            },
            {
              "value": "ComponentClass<any, any> & \"line\""
            },
            {
              "value": "ComponentClass<any, any> & \"linearGradient\""
            },
            {
              "value": "ComponentClass<any, any> & \"marker\""
            },
            {
              "value": "ComponentClass<any, any> & \"mask\""
            },
            {
              "value": "ComponentClass<any, any> & \"metadata\""
            },
            {
              "value": "ComponentClass<any, any> & \"mpath\""
            },
            {
              "value": "ComponentClass<any, any> & \"path\""
            },
            {
              "value": "ComponentClass<any, any> & \"pattern\""
            },
            {
              "value": "ComponentClass<any, any> & \"polygon\""
            },
            {
              "value": "ComponentClass<any, any> & \"polyline\""
            },
            {
              "value": "ComponentClass<any, any> & \"radialGradient\""
            },
            {
              "value": "ComponentClass<any, any> & \"rect\""
            },
            {
              "value": "ComponentClass<any, any> & \"set\""
            },
            {
              "value": "ComponentClass<any, any> & \"stop\""
            },
            {
              "value": "ComponentClass<any, any> & \"switch\""
            },
            {
              "value": "ComponentClass<any, any> & \"text\""
            },
            {
              "value": "ComponentClass<any, any> & \"textPath\""
            },
            {
              "value": "ComponentClass<any, any> & \"tspan\""
            },
            {
              "value": "ComponentClass<any, any> & \"use\""
            },
            {
              "value": "ComponentClass<any, any> & \"view\""
            },
            {
              "value": "ComponentClass<any, any> & \"relative-time\""
            },
            {
              "value": "ComponentClass<any, any> & \"tab-container\""
            },
            {
              "value": "FunctionComponent<any> & \"symbol\""
            },
            {
              "value": "FunctionComponent<any> & \"object\""
            },
            {
              "value": "FunctionComponent<any> & \"a\""
            },
            {
              "value": "FunctionComponent<any> & \"abbr\""
            },
            {
              "value": "FunctionComponent<any> & \"address\""
            },
            {
              "value": "FunctionComponent<any> & \"area\""
            },
            {
              "value": "FunctionComponent<any> & \"article\""
            },
            {
              "value": "FunctionComponent<any> & \"aside\""
            },
            {
              "value": "FunctionComponent<any> & \"audio\""
            },
            {
              "value": "FunctionComponent<any> & \"b\""
            },
            {
              "value": "FunctionComponent<any> & \"base\""
            },
            {
              "value": "FunctionComponent<any> & \"bdi\""
            },
            {
              "value": "FunctionComponent<any> & \"bdo\""
            },
            {
              "value": "FunctionComponent<any> & \"big\""
            },
            {
              "value": "FunctionComponent<any> & \"blockquote\""
            },
            {
              "value": "FunctionComponent<any> & \"body\""
            },
            {
              "value": "FunctionComponent<any> & \"br\""
            },
            {
              "value": "FunctionComponent<any> & \"button\""
            },
            {
              "value": "FunctionComponent<any> & \"canvas\""
            },
            {
              "value": "FunctionComponent<any> & \"caption\""
            },
            {
              "value": "FunctionComponent<any> & \"center\""
            },
            {
              "value": "FunctionComponent<any> & \"cite\""
            },
            {
              "value": "FunctionComponent<any> & \"code\""
            },
            {
              "value": "FunctionComponent<any> & \"col\""
            },
            {
              "value": "FunctionComponent<any> & \"colgroup\""
            },
            {
              "value": "FunctionComponent<any> & \"data\""
            },
            {
              "value": "FunctionComponent<any> & \"datalist\""
            },
            {
              "value": "FunctionComponent<any> & \"dd\""
            },
            {
              "value": "FunctionComponent<any> & \"del\""
            },
            {
              "value": "FunctionComponent<any> & \"details\""
            },
            {
              "value": "FunctionComponent<any> & \"dfn\""
            },
            {
              "value": "FunctionComponent<any> & \"dialog\""
            },
            {
              "value": "FunctionComponent<any> & \"div\""
            },
            {
              "value": "FunctionComponent<any> & \"dl\""
            },
            {
              "value": "FunctionComponent<any> & \"dt\""
            },
            {
              "value": "FunctionComponent<any> & \"em\""
            },
            {
              "value": "FunctionComponent<any> & \"embed\""
            },
            {
              "value": "FunctionComponent<any> & \"fieldset\""
            },
            {
              "value": "FunctionComponent<any> & \"figcaption\""
            },
            {
              "value": "FunctionComponent<any> & \"figure\""
            },
            {
              "value": "FunctionComponent<any> & \"footer\""
            },
            {
              "value": "FunctionComponent<any> & \"form\""
            },
            {
              "value": "FunctionComponent<any> & \"h1\""
            },
            {
              "value": "FunctionComponent<any> & \"h2\""
            },
            {
              "value": "FunctionComponent<any> & \"h3\""
            },
            {
              "value": "FunctionComponent<any> & \"h4\""
            },
            {
              "value": "FunctionComponent<any> & \"h5\""
            },
            {
              "value": "FunctionComponent<any> & \"h6\""
            },
            {
              "value": "FunctionComponent<any> & \"head\""
            },
            {
              "value": "FunctionComponent<any> & \"header\""
            },
            {
              "value": "FunctionComponent<any> & \"hgroup\""
            },
            {
              "value": "FunctionComponent<any> & \"hr\""
            },
            {
              "value": "FunctionComponent<any> & \"html\""
            },
            {
              "value": "FunctionComponent<any> & \"i\""
            },
            {
              "value": "FunctionComponent<any> & \"iframe\""
            },
            {
              "value": "FunctionComponent<any> & \"img\""
            },
            {
              "value": "FunctionComponent<any> & \"input\""
            },
            {
              "value": "FunctionComponent<any> & \"ins\""
            },
            {
              "value": "FunctionComponent<any> & \"kbd\""
            },
            {
              "value": "FunctionComponent<any> & \"keygen\""
            },
            {
              "value": "FunctionComponent<any> & \"label\""
            },
            {
              "value": "FunctionComponent<any> & \"legend\""
            },
            {
              "value": "FunctionComponent<any> & \"li\""
            },
            {
              "value": "FunctionComponent<any> & \"link\""
            },
            {
              "value": "FunctionComponent<any> & \"main\""
            },
            {
              "value": "FunctionComponent<any> & \"map\""
            },
            {
              "value": "FunctionComponent<any> & \"mark\""
            },
            {
              "value": "FunctionComponent<any> & \"menu\""
            },
            {
              "value": "FunctionComponent<any> & \"menuitem\""
            },
            {
              "value": "FunctionComponent<any> & \"meta\""
            },
            {
              "value": "FunctionComponent<any> & \"meter\""
            },
            {
              "value": "FunctionComponent<any> & \"nav\""
            },
            {
              "value": "FunctionComponent<any> & \"noindex\""
            },
            {
              "value": "FunctionComponent<any> & \"noscript\""
            },
            {
              "value": "FunctionComponent<any> & \"ol\""
            },
            {
              "value": "FunctionComponent<any> & \"optgroup\""
            },
            {
              "value": "FunctionComponent<any> & \"option\""
            },
            {
              "value": "FunctionComponent<any> & \"output\""
            },
            {
              "value": "FunctionComponent<any> & \"p\""
            },
            {
              "value": "FunctionComponent<any> & \"param\""
            },
            {
              "value": "FunctionComponent<any> & \"picture\""
            },
            {
              "value": "FunctionComponent<any> & \"pre\""
            },
            {
              "value": "FunctionComponent<any> & \"progress\""
            },
            {
              "value": "FunctionComponent<any> & \"q\""
            },
            {
              "value": "FunctionComponent<any> & \"rp\""
            },
            {
              "value": "FunctionComponent<any> & \"rt\""
            },
            {
              "value": "FunctionComponent<any> & \"ruby\""
            },
            {
              "value": "FunctionComponent<any> & \"s\""
            },
            {
              "value": "FunctionComponent<any> & \"samp\""
            },
            {
              "value": "FunctionComponent<any> & \"search\""
            },
            {
              "value": "FunctionComponent<any> & \"slot\""
            },
            {
              "value": "FunctionComponent<any> & \"script\""
            },
            {
              "value": "FunctionComponent<any> & \"section\""
            },
            {
              "value": "FunctionComponent<any> & \"select\""
            },
            {
              "value": "FunctionComponent<any> & \"small\""
            },
            {
              "value": "FunctionComponent<any> & \"source\""
            },
            {
              "value": "FunctionComponent<any> & \"span\""
            },
            {
              "value": "FunctionComponent<any> & \"strong\""
            },
            {
              "value": "FunctionComponent<any> & \"style\""
            },
            {
              "value": "FunctionComponent<any> & \"sub\""
            },
            {
              "value": "FunctionComponent<any> & \"summary\""
            },
            {
              "value": "FunctionComponent<any> & \"sup\""
            },
            {
              "value": "FunctionComponent<any> & \"table\""
            },
            {
              "value": "FunctionComponent<any> & \"template\""
            },
            {
              "value": "FunctionComponent<any> & \"tbody\""
            },
            {
              "value": "FunctionComponent<any> & \"td\""
            },
            {
              "value": "FunctionComponent<any> & \"textarea\""
            },
            {
              "value": "FunctionComponent<any> & \"tfoot\""
            },
            {
              "value": "FunctionComponent<any> & \"th\""
            },
            {
              "value": "FunctionComponent<any> & \"thead\""
            },
            {
              "value": "FunctionComponent<any> & \"time\""
            },
            {
              "value": "FunctionComponent<any> & \"title\""
            },
            {
              "value": "FunctionComponent<any> & \"tr\""
            },
            {
              "value": "FunctionComponent<any> & \"track\""
            },
            {
              "value": "FunctionComponent<any> & \"u\""
            },
            {
              "value": "FunctionComponent<any> & \"ul\""
            },
            {
              "value": "FunctionComponent<any> & \"var\""
            },
            {
              "value": "FunctionComponent<any> & \"video\""
            },
            {
              "value": "FunctionComponent<any> & \"wbr\""
            },
            {
              "value": "FunctionComponent<any> & \"webview\""
            },
            {
              "value": "FunctionComponent<any> & \"svg\""
            },
            {
              "value": "FunctionComponent<any> & \"animate\""
            },
            {
              "value": "FunctionComponent<any> & \"animateMotion\""
            },
            {
              "value": "FunctionComponent<any> & \"animateTransform\""
            },
            {
              "value": "FunctionComponent<any> & \"circle\""
            },
            {
              "value": "FunctionComponent<any> & \"clipPath\""
            },
            {
              "value": "FunctionComponent<any> & \"defs\""
            },
            {
              "value": "FunctionComponent<any> & \"desc\""
            },
            {
              "value": "FunctionComponent<any> & \"ellipse\""
            },
            {
              "value": "FunctionComponent<any> & \"feBlend\""
            },
            {
              "value": "FunctionComponent<any> & \"feColorMatrix\""
            },
            {
              "value": "FunctionComponent<any> & \"feComponentTransfer\""
            },
            {
              "value": "FunctionComponent<any> & \"feComposite\""
            },
            {
              "value": "FunctionComponent<any> & \"feConvolveMatrix\""
            },
            {
              "value": "FunctionComponent<any> & \"feDiffuseLighting\""
            },
            {
              "value": "FunctionComponent<any> & \"feDisplacementMap\""
            },
            {
              "value": "FunctionComponent<any> & \"feDistantLight\""
            },
            {
              "value": "FunctionComponent<any> & \"feDropShadow\""
            },
            {
              "value": "FunctionComponent<any> & \"feFlood\""
            },
            {
              "value": "FunctionComponent<any> & \"feFuncA\""
            },
            {
              "value": "FunctionComponent<any> & \"feFuncB\""
            },
            {
              "value": "FunctionComponent<any> & \"feFuncG\""
            },
            {
              "value": "FunctionComponent<any> & \"feFuncR\""
            },
            {
              "value": "FunctionComponent<any> & \"feGaussianBlur\""
            },
            {
              "value": "FunctionComponent<any> & \"feImage\""
            },
            {
              "value": "FunctionComponent<any> & \"feMerge\""
            },
            {
              "value": "FunctionComponent<any> & \"feMergeNode\""
            },
            {
              "value": "FunctionComponent<any> & \"feMorphology\""
            },
            {
              "value": "FunctionComponent<any> & \"feOffset\""
            },
            {
              "value": "FunctionComponent<any> & \"fePointLight\""
            },
            {
              "value": "FunctionComponent<any> & \"feSpecularLighting\""
            },
            {
              "value": "FunctionComponent<any> & \"feSpotLight\""
            },
            {
              "value": "FunctionComponent<any> & \"feTile\""
            },
            {
              "value": "FunctionComponent<any> & \"feTurbulence\""
            },
            {
              "value": "FunctionComponent<any> & \"filter\""
            },
            {
              "value": "FunctionComponent<any> & \"foreignObject\""
            },
            {
              "value": "FunctionComponent<any> & \"g\""
            },
            {
              "value": "FunctionComponent<any> & \"image\""
            },
            {
              "value": "FunctionComponent<any> & \"line\""
            },
            {
              "value": "FunctionComponent<any> & \"linearGradient\""
            },
            {
              "value": "FunctionComponent<any> & \"marker\""
            },
            {
              "value": "FunctionComponent<any> & \"mask\""
            },
            {
              "value": "FunctionComponent<any> & \"metadata\""
            },
            {
              "value": "FunctionComponent<any> & \"mpath\""
            },
            {
              "value": "FunctionComponent<any> & \"path\""
            },
            {
              "value": "FunctionComponent<any> & \"pattern\""
            },
            {
              "value": "FunctionComponent<any> & \"polygon\""
            },
            {
              "value": "FunctionComponent<any> & \"polyline\""
            },
            {
              "value": "FunctionComponent<any> & \"radialGradient\""
            },
            {
              "value": "FunctionComponent<any> & \"rect\""
            },
            {
              "value": "FunctionComponent<any> & \"set\""
            },
            {
              "value": "FunctionComponent<any> & \"stop\""
            },
            {
              "value": "FunctionComponent<any> & \"switch\""
            },
            {
              "value": "FunctionComponent<any> & \"text\""
            },
            {
              "value": "FunctionComponent<any> & \"textPath\""
            },
            {
              "value": "FunctionComponent<any> & \"tspan\""
            },
            {
              "value": "FunctionComponent<any> & \"use\""
            },
            {
              "value": "FunctionComponent<any> & \"view\""
            },
            {
              "value": "FunctionComponent<any> & \"relative-time\""
            },
            {
              "value": "FunctionComponent<any> & \"tab-container\""
            },
            {
              "value": "\"symbol\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"symbol\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"object\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"object\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"abbr\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"abbr\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"address\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"address\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"area\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"area\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"article\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"article\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"aside\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"aside\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"audio\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"audio\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"b\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"b\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"base\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"base\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"bdi\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"bdi\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"bdo\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"bdo\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"big\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"big\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"blockquote\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"blockquote\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"body\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"body\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"br\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"br\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"canvas\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"canvas\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"caption\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"caption\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"center\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"center\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"cite\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"cite\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"code\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"code\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"col\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"col\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"colgroup\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"colgroup\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"data\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"data\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"datalist\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"datalist\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"dd\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"dd\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"del\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"del\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"details\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"details\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"dfn\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"dfn\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"dialog\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"dialog\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"div\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"div\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"dl\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"dl\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"dt\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"dt\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"em\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"em\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"embed\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"embed\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"fieldset\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"fieldset\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"figcaption\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"figcaption\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"figure\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"figure\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"footer\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"footer\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"form\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"form\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"head\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"head\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"header\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"header\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"hgroup\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"hgroup\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"hr\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"hr\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"html\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"html\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"i\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"i\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"iframe\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"iframe\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"img\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"img\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"input\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"input\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"ins\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"ins\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"kbd\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"kbd\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"keygen\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"keygen\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"label\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"label\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"legend\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"legend\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"li\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"li\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"link\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"link\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"main\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"main\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"map\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"map\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"mark\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"mark\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"menu\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"menu\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"menuitem\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"menuitem\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"meta\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"meta\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"meter\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"meter\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"nav\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"nav\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"noindex\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"noindex\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"noscript\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"noscript\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"ol\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"ol\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"optgroup\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"optgroup\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"option\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"option\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"output\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"output\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"p\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"p\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"param\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"param\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"picture\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"picture\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"pre\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"pre\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"progress\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"progress\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"q\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"q\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"rp\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"rp\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"rt\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"rt\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"ruby\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"ruby\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"s\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"s\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"samp\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"samp\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"search\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"search\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"slot\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"slot\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"script\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"script\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"section\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"section\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"select\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"select\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"small\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"small\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"source\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"source\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"span\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"span\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"strong\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"strong\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"style\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"style\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"sub\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"sub\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"summary\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"summary\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"sup\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"sup\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"table\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"table\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"template\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"template\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"tbody\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"tbody\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"td\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"td\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"textarea\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"textarea\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"tfoot\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"tfoot\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"th\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"th\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"thead\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"thead\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"time\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"time\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"title\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"title\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"tr\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"tr\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"track\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"track\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"u\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"u\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"ul\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"ul\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"var\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"var\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"video\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"video\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"wbr\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"wbr\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"webview\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"webview\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"svg\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"svg\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"animate\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"animate\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"animateMotion\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"animateMotion\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"animateTransform\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"animateTransform\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"circle\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"circle\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"clipPath\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"clipPath\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"defs\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"defs\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"desc\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"desc\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"ellipse\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"ellipse\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feBlend\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feBlend\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feColorMatrix\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feColorMatrix\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feComponentTransfer\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feComponentTransfer\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feComposite\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feComposite\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feConvolveMatrix\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feConvolveMatrix\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feDiffuseLighting\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feDiffuseLighting\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feDisplacementMap\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feDisplacementMap\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feDistantLight\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feDistantLight\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feDropShadow\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feDropShadow\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feFlood\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feFlood\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feFuncA\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feFuncA\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feFuncB\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feFuncB\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feFuncG\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feFuncG\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feFuncR\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feFuncR\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feGaussianBlur\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feGaussianBlur\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feImage\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feImage\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feMerge\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feMerge\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feMergeNode\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feMergeNode\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feMorphology\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feMorphology\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feOffset\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feOffset\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"fePointLight\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"fePointLight\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feSpecularLighting\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feSpecularLighting\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feSpotLight\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feSpotLight\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feTile\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feTile\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feTurbulence\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feTurbulence\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"filter\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"filter\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"foreignObject\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"foreignObject\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"g\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"g\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"image\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"image\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"line\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"line\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"linearGradient\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"linearGradient\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"marker\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"marker\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"mask\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"mask\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"metadata\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"metadata\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"mpath\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"mpath\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"path\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"path\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"pattern\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"pattern\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"polygon\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"polygon\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"polyline\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"polyline\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"radialGradient\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"radialGradient\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"rect\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"rect\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"set\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"set\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"stop\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"stop\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"switch\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"switch\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"text\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"text\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"textPath\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"textPath\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"tspan\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"tspan\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"use\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"use\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"view\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"view\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"relative-time\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"relative-time\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"tab-container\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"tab-container\" & FunctionComponent<unknown>"
            }
          ]
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Primary content for an UnderlineNav",
        "name": "children",
        "declarations": [
          {
            "fileName": "react/packages/react/src/UnderlineNav/UnderlineNavItem.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "onSelect": {
        "defaultValue": null,
        "description": "Callback that will trigger both on click selection and keyboard selection.",
        "name": "onSelect",
        "declarations": [
          {
            "fileName": "react/packages/react/src/UnderlineNav/UnderlineNavItem.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "((event: KeyboardEvent<HTMLAnchorElement> | MouseEvent<HTMLAnchorElement, MouseEvent>) => void)",
          "value": [
            {
              "value": "(event: KeyboardEvent<HTMLAnchorElement> | MouseEvent<HTMLAnchorElement, MouseEvent>) => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "aria-current": {
        "defaultValue": null,
        "description": "Is `UnderlineNav.Item` current page?",
        "name": "aria-current",
        "declarations": [
          {
            "fileName": "react/packages/react/src/UnderlineNav/UnderlineNavItem.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean | \"time\" | \"step\" | \"date\" | \"true\" | \"false\" | \"page\" | \"location\"",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"step\""
            },
            {
              "value": "\"date\""
            },
            {
              "value": "\"true\""
            },
            {
              "value": "\"false\""
            },
            {
              "value": "\"page\""
            },
            {
              "value": "\"location\""
            }
          ]
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon before the text",
        "name": "icon",
        "declarations": [
          {
            "fileName": "react/packages/react/src/UnderlineNav/UnderlineNavItem.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactElement<any, string | JSXElementConstructor<any>> | FunctionComponent<IconProps>",
          "value": [
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "FunctionComponent<IconProps>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "counter": {
        "defaultValue": null,
        "description": "Counter",
        "name": "counter",
        "declarations": [
          {
            "fileName": "react/packages/react/src/UnderlineNav/UnderlineNavItem.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string | number",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "number"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "download": {
        "defaultValue": null,
        "description": "",
        "name": "download",
        "declarations": [
          {
            "fileName": "react/packages/react/src/UnderlineNav/UnderlineNavItem.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "href": {
        "defaultValue": null,
        "description": "",
        "name": "href",
        "declarations": [
          {
            "fileName": "react/packages/react/src/UnderlineNav/UnderlineNavItem.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "hrefLang": {
        "defaultValue": null,
        "description": "",
        "name": "hrefLang",
        "declarations": [
          {
            "fileName": "react/packages/react/src/UnderlineNav/UnderlineNavItem.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "media": {
        "defaultValue": null,
        "description": "",
        "name": "media",
        "declarations": [
          {
            "fileName": "react/packages/react/src/UnderlineNav/UnderlineNavItem.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "ping": {
        "defaultValue": null,
        "description": "",
        "name": "ping",
        "declarations": [
          {
            "fileName": "react/packages/react/src/UnderlineNav/UnderlineNavItem.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "rel": {
        "defaultValue": null,
        "description": "",
        "name": "rel",
        "declarations": [
          {
            "fileName": "react/packages/react/src/UnderlineNav/UnderlineNavItem.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "target": {
        "defaultValue": null,
        "description": "",
        "name": "target",
        "declarations": [
          {
            "fileName": "react/packages/react/src/UnderlineNav/UnderlineNavItem.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "type": {
        "defaultValue": null,
        "description": "",
        "name": "type",
        "declarations": [
          {
            "fileName": "react/packages/react/src/UnderlineNav/UnderlineNavItem.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "referrerPolicy": {
        "defaultValue": null,
        "description": "",
        "name": "referrerPolicy",
        "declarations": [
          {
            "fileName": "react/packages/react/src/UnderlineNav/UnderlineNavItem.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "HTMLAttributeReferrerPolicy",
          "value": [
            {
              "value": "\"\""
            },
            {
              "value": "\"origin\""
            },
            {
              "value": "\"no-referrer\""
            },
            {
              "value": "\"no-referrer-when-downgrade\""
            },
            {
              "value": "\"origin-when-cross-origin\""
            },
            {
              "value": "\"same-origin\""
            },
            {
              "value": "\"strict-origin\""
            },
            {
              "value": "\"strict-origin-when-cross-origin\""
            },
            {
              "value": "\"unsafe-url\""
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/VisuallyHidden/VisuallyHidden.tsx",
    "description": "",
    "displayName": "VisuallyHidden",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "react/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          },
          {
            "fileName": "react/packages/react/src/VisuallyHidden/VisuallyHidden.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "deprecated": "Use ActionMenu with composable API instead. See https://primer.style/react/ActionMenu for more details."
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/deprecated/ActionMenu.tsx",
    "description": "",
    "displayName": "ActionMenu",
    "methods": [],
    "props": {
      "anchorContent": {
        "defaultValue": null,
        "description": "Content that is passed into the renderAnchor component, which is a button by default.",
        "name": "anchorContent",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionMenu.tsx",
          "name": "ActionMenuBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionMenu.tsx",
            "name": "ActionMenuBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "onAction": {
        "defaultValue": null,
        "description": "A callback that triggers both on clicks and keyboard events. This callback will be overridden by item level `onAction` callbacks.",
        "name": "onAction",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionMenu.tsx",
          "name": "ActionMenuBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionMenu.tsx",
            "name": "ActionMenuBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "((props: ItemProps, event?: KeyboardEvent<HTMLDivElement> | MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined",
          "value": [
            {
              "value": "(props: ItemProps, event?: KeyboardEvent<HTMLDivElement> | MouseEvent<HTMLDivElement, MouseEvent> | undefined) => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "open": {
        "defaultValue": null,
        "description": "If defined, will control the open/closed state of the overlay. Must be used in conjuction with `setOpen`.",
        "name": "open",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionMenu.tsx",
          "name": "ActionMenuBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionMenu.tsx",
            "name": "ActionMenuBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "setOpen": {
        "defaultValue": null,
        "description": "If defined, will control the open/closed state of the overlay. Must be used in conjuction with `open`.",
        "name": "setOpen",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionMenu.tsx",
          "name": "ActionMenuBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionMenu.tsx",
            "name": "ActionMenuBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "((s: boolean) => void)",
          "value": [
            {
              "value": "(s: boolean) => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "overlayProps": {
        "defaultValue": null,
        "description": "Props to be spread on the internal `Overlay` component.",
        "name": "overlayProps",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionMenu.tsx",
          "name": "ActionMenuBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionMenu.tsx",
            "name": "ActionMenuBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Partial<Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"ref\"> & { ...; }, \"style\" | ... 8 more ... | keyof BaseOverlayProps> & Omit<...> & BaseOverlayProps & { ...; }>",
          "value": [
            {
              "value": "Partial<Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"ref\"> & { ...; }, \"style\" | ... 8 more ... | keyof BaseOverlayProps> & Omit<...> & BaseOverlayProps & { ...; }>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "groupMetadata": {
        "defaultValue": null,
        "description": "A collection of `Group` props (except `items`), plus a unique group identifier\nand `Group`-level custom `Item` or `Group` renderers.",
        "name": "groupMetadata",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "GroupedListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "GroupedListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "((Omit<GroupProps, \"items\"> | Omit<Partial<GroupProps> & { renderItem?: RenderItemFn; renderGroup?: (({ header, items, ...props }: GroupProps) => Element) | undefined; }, \"items\">) & { ...; })[] | undefined",
          "value": [
            {
              "value": "((Omit<GroupProps, \"items\"> | Omit<Partial<GroupProps> & { renderItem?: RenderItemFn | undefined; renderGroup?: (({ header, items, ...props }: GroupProps) => Element) | undefined; }, \"items\">) & { ...; })[]",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "items": {
        "defaultValue": null,
        "description": "A collection of `Item` props and `Item`-level custom `Item` renderers.",
        "name": "items",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": true,
        "type": {
          "name": "ItemInput[]"
        }
      },
      "role": {
        "defaultValue": null,
        "description": "The ARIA role describing the function of `List` component. `listbox` is a common value.",
        "name": "role",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "AriaRole",
          "value": [
            {
              "value": "\"article\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"list\""
            },
            {
              "value": "\"alert\""
            },
            {
              "value": "\"alertdialog\""
            },
            {
              "value": "\"application\""
            },
            {
              "value": "\"banner\""
            },
            {
              "value": "\"cell\""
            },
            {
              "value": "\"checkbox\""
            },
            {
              "value": "\"columnheader\""
            },
            {
              "value": "\"combobox\""
            },
            {
              "value": "\"complementary\""
            },
            {
              "value": "\"contentinfo\""
            },
            {
              "value": "\"definition\""
            },
            {
              "value": "\"directory\""
            },
            {
              "value": "\"document\""
            },
            {
              "value": "\"feed\""
            },
            {
              "value": "\"grid\""
            },
            {
              "value": "\"gridcell\""
            },
            {
              "value": "\"group\""
            },
            {
              "value": "\"heading\""
            },
            {
              "value": "\"listbox\""
            },
            {
              "value": "\"listitem\""
            },
            {
              "value": "\"log\""
            },
            {
              "value": "\"marquee\""
            },
            {
              "value": "\"math\""
            },
            {
              "value": "\"menubar\""
            },
            {
              "value": "\"menuitemcheckbox\""
            },
            {
              "value": "\"menuitemradio\""
            },
            {
              "value": "\"navigation\""
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"note\""
            },
            {
              "value": "\"presentation\""
            },
            {
              "value": "\"progressbar\""
            },
            {
              "value": "\"radio\""
            },
            {
              "value": "\"radiogroup\""
            },
            {
              "value": "\"region\""
            },
            {
              "value": "\"row\""
            },
            {
              "value": "\"rowgroup\""
            },
            {
              "value": "\"rowheader\""
            },
            {
              "value": "\"scrollbar\""
            },
            {
              "value": "\"searchbox\""
            },
            {
              "value": "\"separator\""
            },
            {
              "value": "\"slider\""
            },
            {
              "value": "\"spinbutton\""
            },
            {
              "value": "\"status\""
            },
            {
              "value": "\"tab\""
            },
            {
              "value": "\"tablist\""
            },
            {
              "value": "\"tabpanel\""
            },
            {
              "value": "\"term\""
            },
            {
              "value": "\"textbox\""
            },
            {
              "value": "\"timer\""
            },
            {
              "value": "\"toolbar\""
            },
            {
              "value": "\"tooltip\""
            },
            {
              "value": "\"tree\""
            },
            {
              "value": "\"treegrid\""
            },
            {
              "value": "\"treeitem\""
            }
          ]
        }
      },
      "id": {
        "defaultValue": null,
        "description": "id to attach to the base DOM node of the list",
        "name": "id",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "aria-label to attach to the base DOM node of the list",
        "name": "aria-label",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "renderItem": {
        "defaultValue": null,
        "description": "A `List`-level custom `Item` renderer. Every `Item` within this `List`\nwithout a `Group`-level or `Item`-level custom `Item` renderer will be\nrendered using this function component.",
        "name": "renderItem",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "RenderItemFn",
          "value": [
            {
              "value": "RenderItemFn",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "renderGroup": {
        "defaultValue": null,
        "description": "A `List`-level custom `Group` renderer. Every `Group` within this `List`\nwithout a `Group`-level custom `Item` renderer will be rendered using\nthis function component.",
        "name": "renderGroup",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "(({ header, items, ...props }: GroupProps) => Element)",
          "value": [
            {
              "value": "({ header, items, ...props }: GroupProps) => Element",
              "description": "Collects related `Items` in an `ActionList`.",
              "fullComment": "Collects related `Items` in an `ActionList`.",
              "tags": {}
            }
          ]
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Style variations. Usage is discretionary.\n\n- `\"inset\"` - `List` children are offset (vertically and horizontally) from `List`’s edges\n- `\"full\"` - `List` children are flush (vertically and horizontally) with `List` edges",
        "name": "variant",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"inset\" | \"full\"",
          "value": [
            {
              "value": "\"inset\""
            },
            {
              "value": "\"full\""
            }
          ]
        }
      },
      "selectionVariant": {
        "defaultValue": null,
        "description": "For `Item`s which can be selected, whether `multiple` `Item`s or a `single` `Item` can be selected",
        "name": "selectionVariant",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"multiple\" | \"single\"",
          "value": [
            {
              "value": "\"multiple\""
            },
            {
              "value": "\"single\""
            }
          ]
        }
      },
      "showItemDividers": {
        "defaultValue": null,
        "description": "Whether to display a divider above each `Item` in this `List` when it does not follow a `Header` or `Divider`.",
        "name": "showItemDividers",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "renderAnchor": {
        "defaultValue": {
          "value": "<T extends ButtonProps>(props: T) => <Button {...props} />"
        },
        "description": "A custom function component used to render the anchor element.\nWhen renderAnchor is null, an anchorRef is required.\nA custom function component used to render the anchor element.\nWill receive the selected text as `children` prop when an item is activated.",
        "name": "renderAnchor",
        "parent": {
          "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
          "name": "AnchoredOverlayPropsWithoutAnchor"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayPropsWithoutAnchor"
          },
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayPropsWithAnchor"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "(<T extends React.HTMLAttributes<HTMLElement>>(props: T) => Element) | null",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "<T extends React.HTMLAttributes<HTMLElement>>(props: T) => Element",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "anchorRef": {
        "defaultValue": null,
        "description": "An override to the internal renderAnchor ref that will be used to position the overlay.\nWhen renderAnchor is null this can be used to make an anchor that is detached from ActionMenu.\nAn override to the internal ref that will be spread on to the renderAnchor",
        "name": "anchorRef",
        "parent": {
          "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
          "name": "AnchoredOverlayPropsWithoutAnchor"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayPropsWithoutAnchor"
          },
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayPropsWithAnchor"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "RefObject<HTMLElement>",
          "value": [
            {
              "value": "RefObject<HTMLElement>",
              "description": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.",
              "fullComment": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.\n@template T The type of the ref's value.\n@example ```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```",
              "tags": {
                "template": "T The type of the ref's value.",
                "example": "```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```"
              }
            }
          ]
        }
      },
      "anchorId": {
        "defaultValue": null,
        "description": "An override to the internal id that will be spread on to the renderAnchor",
        "name": "anchorId",
        "parent": {
          "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
          "name": "AnchoredOverlayPropsWithoutAnchor"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayPropsWithoutAnchor"
          },
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayPropsWithAnchor"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/hooks/useDetails.tsx",
    "description": "",
    "displayName": "useDetails",
    "methods": [],
    "props": {
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "react/packages/react/src/hooks/useDetails.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "RefObject<HTMLDetailsElement>",
          "value": [
            {
              "value": "RefObject<HTMLDetailsElement>",
              "description": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.",
              "fullComment": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.\n@template T The type of the ref's value.\n@example ```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```",
              "tags": {
                "template": "T The type of the ref's value.",
                "example": "```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```"
              }
            }
          ]
        }
      },
      "closeOnOutsideClick": {
        "defaultValue": null,
        "description": "",
        "name": "closeOnOutsideClick",
        "declarations": [
          {
            "fileName": "react/packages/react/src/hooks/useDetails.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "defaultOpen": {
        "defaultValue": null,
        "description": "",
        "name": "defaultOpen",
        "declarations": [
          {
            "fileName": "react/packages/react/src/hooks/useDetails.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "onClickOutside": {
        "defaultValue": null,
        "description": "",
        "name": "onClickOutside",
        "declarations": [
          {
            "fileName": "react/packages/react/src/hooks/useDetails.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "((event: MouseEvent) => void)",
          "value": [
            {
              "value": "(event: MouseEvent) => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "param": "mediaQueryString - CSS media query string used to scope styles. For example: '(pointer: coarse)'\ndefaultState - When server side rendering, defaultState should be defined to prevent a hydration mismatches.",
      "example": "function Example() {\n  const coarsePointer = useMedia('(pointer: coarse)');\n  // ...\n}"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/hooks/useMedia.tsx",
    "description": "`useMedia` will use the given `mediaQueryString` with `matchMedia` to\ndetermine if the document matches the media query string.\n\nIf `MatchMedia` is used as an ancestor, `useMedia` will instead use the\nvalue of the media query string, if available",
    "displayName": "useMedia",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "example": "<MatchMedia features={{ \"(pointer: coarse)\": true}}>\n  <Children />\n</MatchMedia>"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/hooks/useMedia.tsx",
    "description": "Use `MatchMedia` to emulate media conditions by passing in feature\nqueries to the `features` prop. If a component uses `useMedia` with the\nfeature passed in to `MatchMedia` it will force its value to match what is\nprovided to `MatchMedia`\n\nThis should be used for development and documentation only in situations\nwhere devtools cannot emulate this feature",
    "displayName": "MatchMedia",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "",
        "name": "children",
        "declarations": [
          {
            "fileName": "react/packages/react/src/hooks/useMedia.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "features": {
        "defaultValue": {
          "value": "{}"
        },
        "description": "",
        "name": "features",
        "declarations": [
          {
            "fileName": "react/packages/react/src/hooks/useMedia.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "MediaQueryFeatures",
          "value": [
            {
              "value": "MediaQueryFeatures",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/hooks/useOnOutsideClick.tsx",
    "description": "",
    "displayName": "useOnOutsideClick",
    "methods": [],
    "props": {
      "containerRef": {
        "defaultValue": null,
        "description": "",
        "name": "containerRef",
        "declarations": [
          {
            "fileName": "react/packages/react/src/hooks/useOnOutsideClick.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "RefObject<HTMLDivElement> | RefObject<HTMLUListElement>",
          "value": [
            {
              "value": "RefObject<HTMLDivElement>",
              "description": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.",
              "fullComment": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.\n@template T The type of the ref's value.\n@example ```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```",
              "tags": {
                "template": "T The type of the ref's value.",
                "example": "```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```"
              }
            },
            {
              "value": "RefObject<HTMLUListElement>",
              "description": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.",
              "fullComment": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.\n@template T The type of the ref's value.\n@example ```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```",
              "tags": {
                "template": "T The type of the ref's value.",
                "example": "```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```"
              }
            }
          ]
        }
      },
      "ignoreClickRefs": {
        "defaultValue": null,
        "description": "",
        "name": "ignoreClickRefs",
        "declarations": [
          {
            "fileName": "react/packages/react/src/hooks/useOnOutsideClick.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "RefObject<HTMLElement>[]",
          "value": [
            {
              "value": "RefObject<HTMLElement>[]",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "onClickOutside": {
        "defaultValue": null,
        "description": "",
        "name": "onClickOutside",
        "declarations": [
          {
            "fileName": "react/packages/react/src/hooks/useOnOutsideClick.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "(e: TouchOrMouseEvent) => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/hooks/useOverlay.tsx",
    "description": "",
    "displayName": "useOverlay",
    "methods": [],
    "props": {
      "ignoreClickRefs": {
        "defaultValue": null,
        "description": "",
        "name": "ignoreClickRefs",
        "declarations": [
          {
            "fileName": "react/packages/react/src/hooks/useOverlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "RefObject<HTMLElement>[]",
          "value": [
            {
              "value": "RefObject<HTMLElement>[]",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "initialFocusRef": {
        "defaultValue": null,
        "description": "",
        "name": "initialFocusRef",
        "declarations": [
          {
            "fileName": "react/packages/react/src/hooks/useOverlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "RefObject<HTMLElement>",
          "value": [
            {
              "value": "RefObject<HTMLElement>",
              "description": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.",
              "fullComment": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.\n@template T The type of the ref's value.\n@example ```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```",
              "tags": {
                "template": "T The type of the ref's value.",
                "example": "```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```"
              }
            }
          ]
        }
      },
      "returnFocusRef": {
        "defaultValue": null,
        "description": "",
        "name": "returnFocusRef",
        "declarations": [
          {
            "fileName": "react/packages/react/src/hooks/useOverlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "RefObject<HTMLElement>"
        }
      },
      "onEscape": {
        "defaultValue": null,
        "description": "",
        "name": "onEscape",
        "declarations": [
          {
            "fileName": "react/packages/react/src/hooks/useOverlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "(e: KeyboardEvent) => void"
        }
      },
      "onClickOutside": {
        "defaultValue": null,
        "description": "",
        "name": "onClickOutside",
        "declarations": [
          {
            "fileName": "react/packages/react/src/hooks/useOverlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "(e: TouchOrMouseEvent) => void"
        }
      },
      "overlayRef": {
        "defaultValue": null,
        "description": "",
        "name": "overlayRef",
        "declarations": [
          {
            "fileName": "react/packages/react/src/hooks/useOverlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "RefObject<HTMLDivElement>",
          "value": [
            {
              "value": "RefObject<HTMLDivElement>",
              "description": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.",
              "fullComment": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.\n@template T The type of the ref's value.\n@example ```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```",
              "tags": {
                "template": "T The type of the ref's value.",
                "example": "```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```"
              }
            }
          ]
        }
      },
      "preventFocusOnOpen": {
        "defaultValue": null,
        "description": "",
        "name": "preventFocusOnOpen",
        "declarations": [
          {
            "fileName": "react/packages/react/src/hooks/useOverlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/hooks/useSyncedState.tsx",
    "description": "When the value that initialized the state changes\nthis hook will update the state to the new value, immediately.\n\nThis uses an Object.is comparison to determine if the value has changed by default\n\nIf you use a non-primitive value as the initial value, you should provide a custom isEqual function\n\nThis is adapted almost directly from https://beta.reactjs.org/learn/you-might-not-need-an-effect#adjusting-some-state-when-a-prop-changes",
    "displayName": "useSyncedState",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/live-region/Announce.tsx",
    "description": "`Announce` is a component that will announce the text content of the\n`children` passed in to screen readers using the given politeness level. It\nwill also announce any changes to the text content of `children`",
    "displayName": "Announce",
    "methods": [],
    "props": {
      "announceOnShow": {
        "defaultValue": {
          "value": true
        },
        "description": "Specify if the content of the element should be announced when this\ncomponent is rendered and is not hidden",
        "name": "announceOnShow",
        "declarations": [
          {
            "fileName": "react/packages/react/src/live-region/Announce.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "hidden": {
        "defaultValue": {
          "value": false
        },
        "description": "Specify if the element is hidden",
        "name": "hidden",
        "declarations": [
          {
            "fileName": "react/packages/react/src/live-region/Announce.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "delayMs": {
        "defaultValue": null,
        "description": "Provide a delay in milliseconds before the announcement is made. This will\nonly work with `polite` announcements",
        "name": "delayMs",
        "declarations": [
          {
            "fileName": "react/packages/react/src/live-region/Announce.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "number",
          "value": [
            {
              "value": "number"
            }
          ]
        }
      },
      "politeness": {
        "defaultValue": {
          "value": "polite"
        },
        "description": "The politeness level to use for the announcement",
        "name": "politeness",
        "declarations": [
          {
            "fileName": "react/packages/react/src/live-region/Announce.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"assertive\" | \"polite\"",
          "value": [
            {
              "value": "\"assertive\""
            },
            {
              "value": "\"polite\""
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/live-region/AriaAlert.tsx",
    "description": "",
    "displayName": "AriaAlert",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "Customize the element type of the rendered container",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/live-region/AriaAlert.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ElementType",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "announceOnShow": {
        "defaultValue": {
          "value": true
        },
        "description": "Specify if the content of the element should be announced when this\ncomponent is rendered and is not hidden",
        "name": "announceOnShow",
        "declarations": [
          {
            "fileName": "react/packages/react/src/live-region/AriaAlert.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "hidden": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Specify if the element is hidden",
        "name": "hidden",
        "declarations": [
          {
            "fileName": "react/packages/react/src/live-region/AriaAlert.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/live-region/AriaAlert.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/live-region/AriaStatus.tsx",
    "description": "",
    "displayName": "AriaStatus",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "Customize the element type of the rendered container",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/live-region/AriaStatus.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ElementType",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "announceOnShow": {
        "defaultValue": {
          "value": false
        },
        "description": "Specify if the content of the element should be announced when this\ncomponent is rendered and is not hidden",
        "name": "announceOnShow",
        "declarations": [
          {
            "fileName": "react/packages/react/src/live-region/AriaStatus.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "hidden": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Specify if the element is hidden",
        "name": "hidden",
        "declarations": [
          {
            "fileName": "react/packages/react/src/live-region/AriaStatus.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/live-region/AriaStatus.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "delayMs": {
        "defaultValue": null,
        "description": "Provide a delay in milliseconds before the announcement is made",
        "name": "delayMs",
        "declarations": [
          {
            "fileName": "react/packages/react/src/live-region/AriaStatus.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "number",
          "value": [
            {
              "value": "number"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/utils/form-story-helpers.tsx",
    "description": "",
    "displayName": "getTextInputArgTypes",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/utils/form-story-helpers.tsx",
    "description": "",
    "displayName": "getFormControlArgsByChildComponent",
    "methods": [],
    "props": {
      "disabled": {
        "defaultValue": null,
        "description": "Whether the control allows user input",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "react/packages/react/src/FormControl/FormControl.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "required": {
        "defaultValue": null,
        "description": "If true, the user must specify a value for the input before the owning form can be submitted",
        "name": "required",
        "declarations": [
          {
            "fileName": "react/packages/react/src/FormControl/FormControl.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "id": {
        "defaultValue": null,
        "description": "When `as` prop is 'label', it may be used to override the `htmlFor` given to the <label> element by FormControl's React Context.\nWhen 'as' prop is 'legend' or 'span', it is used as the `id` for the element.\nCustom ID to override the ID set by FormControl's React Context\nMay be used to override the ID assigned by FormControl's React Context",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlCaption.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlValidation.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "htmlFor": {
        "defaultValue": null,
        "description": "This prop may be used to override the `htmlFor` set from FormControl's React Context.\nThe unique identifier for the associated input",
        "name": "htmlFor",
        "declarations": [
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          },
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          },
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "visuallyHidden": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Whether the label should be visually hidden",
        "name": "visuallyHidden",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "requiredText": {
        "defaultValue": {
          "value": "*"
        },
        "description": "The text to display when the field is required",
        "name": "requiredText",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "requiredIndicator": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether to show or hide the required text in the accessibility tree, the required text is still shown visually.",
        "name": "requiredIndicator",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "labelChildren": {
        "defaultValue": null,
        "description": "",
        "name": "labelChildren",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/form-story-helpers.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "captionChildren": {
        "defaultValue": null,
        "description": "",
        "name": "captionChildren",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/form-story-helpers.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Changes the visual style to match the validation status",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlValidation.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "FormValidationStatus",
          "value": [
            {
              "value": "\"success\""
            },
            {
              "value": "\"error\""
            }
          ]
        }
      },
      "validationChildren": {
        "defaultValue": null,
        "description": "",
        "name": "validationChildren",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/form-story-helpers.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/utils/isNumeric.tsx",
    "description": "",
    "displayName": "isNumeric",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/utils/story-helpers.tsx",
    "description": "",
    "displayName": "getTextInputArgTypes",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/utils/story-helpers.tsx",
    "description": "",
    "displayName": "getFormControlArgsByChildComponent",
    "methods": [],
    "props": {
      "disabled": {
        "defaultValue": null,
        "description": "Whether the control allows user input",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "react/packages/react/src/FormControl/FormControl.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "required": {
        "defaultValue": null,
        "description": "If true, the user must specify a value for the input before the owning form can be submitted",
        "name": "required",
        "declarations": [
          {
            "fileName": "react/packages/react/src/FormControl/FormControl.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "id": {
        "defaultValue": null,
        "description": "When `as` prop is 'label', it may be used to override the `htmlFor` given to the <label> element by FormControl's React Context.\nWhen 'as' prop is 'legend' or 'span', it is used as the `id` for the element.\nCustom ID to override the ID set by FormControl's React Context\nMay be used to override the ID assigned by FormControl's React Context",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlCaption.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlValidation.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "htmlFor": {
        "defaultValue": null,
        "description": "This prop may be used to override the `htmlFor` set from FormControl's React Context.\nThe unique identifier for the associated input",
        "name": "htmlFor",
        "declarations": [
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          },
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          },
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "visuallyHidden": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Whether the label should be visually hidden",
        "name": "visuallyHidden",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "requiredText": {
        "defaultValue": {
          "value": "*"
        },
        "description": "The text to display when the field is required",
        "name": "requiredText",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "requiredIndicator": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether to show or hide the required text in the accessibility tree, the required text is still shown visually.",
        "name": "requiredIndicator",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "labelChildren": {
        "defaultValue": null,
        "description": "",
        "name": "labelChildren",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/story-helpers.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "captionChildren": {
        "defaultValue": null,
        "description": "",
        "name": "captionChildren",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/story-helpers.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Changes the visual style to match the validation status",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlValidation.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "FormValidationStatus",
          "value": [
            {
              "value": "\"success\""
            },
            {
              "value": "\"error\""
            }
          ]
        }
      },
      "validationChildren": {
        "defaultValue": null,
        "description": "",
        "name": "validationChildren",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/story-helpers.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/utils/story-helpers.tsx",
    "description": "",
    "displayName": "OcticonArgType",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/utils/testing.tsx",
    "description": "Render the component (a React.createElement() or JSX expression)\ninto its intermediate object representation with 'type',\n'props', and 'children' keys\n\nThe returned object can be matched with expect().toEqual(), e.g.\n\n```js\nexpect(render(<Foo />)).toEqual(render(<div foo='bar' />))\n```",
    "displayName": "render",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/utils/testing.tsx",
    "description": "Render the component (a React.createElement() or JSX expression)\nusing react-test-renderer and return the root node\n```",
    "displayName": "renderRoot",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/utils/testing.tsx",
    "description": "Get the HTML class names rendered by the component instance\nas an array.\n\n```js\nexpect(renderClasses(<div className='a b' />))\n  .toEqual(['a', 'b'])\n```",
    "displayName": "renderClasses",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/utils/testing.tsx",
    "description": "Returns true if a node renders with a single class.",
    "displayName": "rendersClass",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/utils/testing.tsx",
    "description": "",
    "displayName": "px",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/utils/testing.tsx",
    "description": "",
    "displayName": "percent",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/utils/testing.tsx",
    "description": "",
    "displayName": "renderStyles",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/utils/testing.tsx",
    "description": "This provides a layer of compatibility between the render() function from\nreact-test-renderer and Enzyme's mount()",
    "displayName": "getProps",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/utils/testing.tsx",
    "description": "",
    "displayName": "getClassName",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/utils/testing.tsx",
    "description": "",
    "displayName": "getClasses",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/utils/testing.tsx",
    "description": "",
    "displayName": "loadCSS",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/utils/testing.tsx",
    "description": "",
    "displayName": "unloadCSS",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/utils/testing.tsx",
    "description": "",
    "displayName": "behavesAsComponent",
    "methods": [],
    "props": {
      "Component": {
        "defaultValue": null,
        "description": "",
        "name": "Component",
        "parent": {
          "fileName": "react/packages/react/src/utils/testing.tsx",
          "name": "BehavesAsComponent"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/testing.tsx",
            "name": "BehavesAsComponent"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "ComponentType<any>",
          "value": [
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "toRender": {
        "defaultValue": null,
        "description": "",
        "name": "toRender",
        "parent": {
          "fileName": "react/packages/react/src/utils/testing.tsx",
          "name": "BehavesAsComponent"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/testing.tsx",
            "name": "BehavesAsComponent"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "(() => ReactElement<any, string | JSXElementConstructor<any>>)",
          "value": [
            {
              "value": "() => ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "options": {
        "defaultValue": null,
        "description": "",
        "name": "options",
        "parent": {
          "fileName": "react/packages/react/src/utils/testing.tsx",
          "name": "BehavesAsComponent"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/testing.tsx",
            "name": "BehavesAsComponent"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Options",
          "value": [
            {
              "value": "Options",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/KeybindingHint/components/Chord.tsx",
    "description": "",
    "displayName": "Chord",
    "methods": [],
    "props": {
      "keys": {
        "defaultValue": null,
        "description": "The keys involved in this keybinding. These should be the full names of the keys as would\nbe returned by `KeyboardEvent.key` (e.g. \"Control\", \"Shift\", \"ArrowUp\", \"a\", etc.).\n\nCombine keys with the \"+\" character to form chords. To represent the \"+\" key, use \"Plus\".\n\nCombine chords/keys with \" \" to form sequences that should be pressed one after the other. For example, \"a b\"\nrepresents \"a then b\". To represent the \" \" key, use \"Space\".\n\nThe fake key name \"Mod\" can be used to represent \"Command\" on macOS and \"Control\" on other platforms.\n\nSee https://github.com/github/hotkey for format details.",
        "name": "keys",
        "parent": {
          "fileName": "react/packages/react/src/KeybindingHint/props.ts",
          "name": "KeybindingHintProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/KeybindingHint/props.ts",
            "name": "KeybindingHintProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "format": {
        "defaultValue": {
          "value": "condensed"
        },
        "description": "Control the display format. Condensed is most useful in menus and tooltips, while\nthe full form is better for prose.",
        "name": "format",
        "parent": {
          "fileName": "react/packages/react/src/KeybindingHint/props.ts",
          "name": "KeybindingHintProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/KeybindingHint/props.ts",
            "name": "KeybindingHintProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "KeybindingHintFormat",
          "value": [
            {
              "value": "\"condensed\""
            },
            {
              "value": "\"full\""
            }
          ]
        }
      },
      "variant": {
        "defaultValue": {
          "value": "normal"
        },
        "description": "Set to `onEmphasis` for display on emphasis colors.",
        "name": "variant",
        "parent": {
          "fileName": "react/packages/react/src/KeybindingHint/props.ts",
          "name": "KeybindingHintProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/KeybindingHint/props.ts",
            "name": "KeybindingHintProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "KeybindingHintVariant",
          "value": [
            {
              "value": "\"normal\""
            },
            {
              "value": "\"onEmphasis\""
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/KeybindingHint/components/Chord.tsx",
    "description": "Plain string version of `Chord` for use in `aria` string attributes.",
    "displayName": "accessibleChordString",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/KeybindingHint/components/Key.tsx",
    "description": "Renders a single key with accessible alternative text.",
    "displayName": "Key",
    "methods": [],
    "props": {
      "name": {
        "defaultValue": null,
        "description": "",
        "name": "name",
        "parent": {
          "fileName": "react/packages/react/src/KeybindingHint/components/Key.tsx",
          "name": "KeyProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/KeybindingHint/components/Key.tsx",
            "name": "KeyProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "format": {
        "defaultValue": null,
        "description": "",
        "name": "format",
        "parent": {
          "fileName": "react/packages/react/src/KeybindingHint/components/Key.tsx",
          "name": "KeyProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/KeybindingHint/components/Key.tsx",
            "name": "KeyProps"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "KeybindingHintFormat",
          "value": [
            {
              "value": "\"condensed\""
            },
            {
              "value": "\"full\""
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/KeybindingHint/components/Sequence.tsx",
    "description": "",
    "displayName": "Sequence",
    "methods": [],
    "props": {
      "keys": {
        "defaultValue": null,
        "description": "The keys involved in this keybinding. These should be the full names of the keys as would\nbe returned by `KeyboardEvent.key` (e.g. \"Control\", \"Shift\", \"ArrowUp\", \"a\", etc.).\n\nCombine keys with the \"+\" character to form chords. To represent the \"+\" key, use \"Plus\".\n\nCombine chords/keys with \" \" to form sequences that should be pressed one after the other. For example, \"a b\"\nrepresents \"a then b\". To represent the \" \" key, use \"Space\".\n\nThe fake key name \"Mod\" can be used to represent \"Command\" on macOS and \"Control\" on other platforms.\n\nSee https://github.com/github/hotkey for format details.",
        "name": "keys",
        "parent": {
          "fileName": "react/packages/react/src/KeybindingHint/props.ts",
          "name": "KeybindingHintProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/KeybindingHint/props.ts",
            "name": "KeybindingHintProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "format": {
        "defaultValue": {
          "value": "condensed"
        },
        "description": "Control the display format. Condensed is most useful in menus and tooltips, while\nthe full form is better for prose.",
        "name": "format",
        "parent": {
          "fileName": "react/packages/react/src/KeybindingHint/props.ts",
          "name": "KeybindingHintProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/KeybindingHint/props.ts",
            "name": "KeybindingHintProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "KeybindingHintFormat",
          "value": [
            {
              "value": "\"condensed\""
            },
            {
              "value": "\"full\""
            }
          ]
        }
      },
      "variant": {
        "defaultValue": {
          "value": "normal"
        },
        "description": "Set to `onEmphasis` for display on emphasis colors.",
        "name": "variant",
        "parent": {
          "fileName": "react/packages/react/src/KeybindingHint/props.ts",
          "name": "KeybindingHintProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/KeybindingHint/props.ts",
            "name": "KeybindingHintProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "KeybindingHintVariant",
          "value": [
            {
              "value": "\"normal\""
            },
            {
              "value": "\"onEmphasis\""
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/KeybindingHint/components/Sequence.tsx",
    "description": "Plain string version of `Sequence` for use in `aria` string attributes.",
    "displayName": "accessibleSequenceString",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/deprecated/ActionList/Divider.tsx",
    "description": "Visually separates `Item`s or `Group`s in an `ActionList`.",
    "displayName": "Divider",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/deprecated/ActionList/Divider.tsx",
    "description": "Visually separates `Item`s or `Group`s in an `ActionList`.",
    "displayName": "Divider.renderItem",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/deprecated/ActionList/Divider.tsx",
    "description": "",
    "displayName": "StyledDivider",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/deprecated/ActionList/Group.tsx",
    "description": "Collects related `Items` in an `ActionList`.",
    "displayName": "Group",
    "methods": [],
    "props": {
      "header": {
        "defaultValue": null,
        "description": "Props for a `Header` to render in the `Group`.",
        "name": "header",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/Group.tsx",
          "name": "GroupProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/Group.tsx",
            "name": "GroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "HeaderProps",
          "value": [
            {
              "value": "HeaderProps",
              "description": "Contract for props passed to the `Header` component.",
              "fullComment": "Contract for props passed to the `Header` component.",
              "tags": {}
            }
          ]
        }
      },
      "groupId": {
        "defaultValue": null,
        "description": "The id of the group.",
        "name": "groupId",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/Group.tsx",
          "name": "GroupProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/Group.tsx",
            "name": "GroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "items": {
        "defaultValue": null,
        "description": "`Items` to render in the `Group`.",
        "name": "items",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/Group.tsx",
          "name": "GroupProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/Group.tsx",
            "name": "GroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Element[]",
          "value": [
            {
              "value": "Element[]",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "showItemDividers": {
        "defaultValue": null,
        "description": "Whether to display a divider above each `Item` in this `Group` when it does not follow a `Header` or `Divider`.",
        "name": "showItemDividers",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/Group.tsx",
          "name": "GroupProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/Group.tsx",
            "name": "GroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/deprecated/ActionList/Header.tsx",
    "description": "Displays the name and description of a `Group`.",
    "displayName": "Header",
    "methods": [],
    "props": {
      "variant": {
        "defaultValue": {
          "value": "subtle"
        },
        "description": "Style variations. Usage is discretionary.\n\n- `\"filled\"` - Superimposed on a background, offset from nearby content\n- `\"subtle\"` - Relatively less offset from nearby content",
        "name": "variant",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/Header.tsx",
          "name": "HeaderProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/Header.tsx",
            "name": "HeaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"subtle\" | \"filled\"",
          "value": [
            {
              "value": "\"subtle\""
            },
            {
              "value": "\"filled\""
            }
          ]
        }
      },
      "title": {
        "defaultValue": null,
        "description": "Primary text which names a `Group`.",
        "name": "title",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/Header.tsx",
          "name": "HeaderProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/Header.tsx",
            "name": "HeaderProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "auxiliaryText": {
        "defaultValue": null,
        "description": "Secondary text which provides additional information about a `Group`.",
        "name": "auxiliaryText",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/Header.tsx",
          "name": "HeaderProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/Header.tsx",
            "name": "HeaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/deprecated/ActionList/Header.tsx",
    "description": "",
    "displayName": "StyledHeader",
    "methods": [],
    "props": {
      "variant": {
        "defaultValue": null,
        "description": "",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/Header.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "\"subtle\" | \"filled\" | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "\"subtle\""
            },
            {
              "value": "\"filled\""
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/deprecated/ActionList/Item.tsx",
    "description": "",
    "displayName": "TextContainer",
    "methods": [],
    "props": {
      "dangerouslySetInnerHtml": {
        "defaultValue": null,
        "description": "",
        "name": "dangerouslySetInnerHtml",
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/Item.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "{ __html: string | TrustedHTML; }",
          "value": [
            {
              "value": "{ __html: string | TrustedHTML; }",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/deprecated/ActionList/Item.tsx",
    "description": "An actionable or selectable `Item` with an optional icon and description.",
    "displayName": "ActionList.Item",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | ... 162 more ... | FunctionComponent<...>",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<unknown, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<unknown>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "text": {
        "defaultValue": null,
        "description": "Primary text which names an `Item`.",
        "name": "text",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/Item.tsx",
          "name": "ItemProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/Item.tsx",
            "name": "ItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Secondary text which provides additional information about an `Item`.",
        "name": "description",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/Item.tsx",
          "name": "ItemProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/Item.tsx",
            "name": "ItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "descriptionVariant": {
        "defaultValue": null,
        "description": "Secondary text style variations. Usage is discretionary.\n\n- `\"inline\"` - Secondary text is positioned beside primary text.\n- `\"block\"` - Secondary text is positioned below primary text.",
        "name": "descriptionVariant",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/Item.tsx",
          "name": "ItemProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/Item.tsx",
            "name": "ItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"block\" | \"inline\"",
          "value": [
            {
              "value": "\"block\""
            },
            {
              "value": "\"inline\""
            }
          ]
        }
      },
      "leadingVisual": {
        "defaultValue": null,
        "description": "Icon (or similar) positioned before `Item` text.",
        "name": "leadingVisual",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/Item.tsx",
          "name": "ItemProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/Item.tsx",
            "name": "ItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ElementType<any, keyof IntrinsicElements>",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "trailingIcon": {
        "defaultValue": null,
        "description": "@deprecated Use `trailingVisual` instead\nIcon (or similar) positioned after `Item` text.",
        "name": "trailingIcon",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/Item.tsx",
          "name": "ItemProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/Item.tsx",
            "name": "ItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ElementType<any, keyof IntrinsicElements>",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "trailingText": {
        "defaultValue": null,
        "description": "@deprecated Use `trailingVisual` instead\nText positioned after `Item` text and optional trailing icon.",
        "name": "trailingText",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/Item.tsx",
          "name": "ItemProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/Item.tsx",
            "name": "ItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "trailingVisual": {
        "defaultValue": null,
        "description": "Icon or text positioned after `Item` text.",
        "name": "trailingVisual",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/Item.tsx",
          "name": "ItemProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/Item.tsx",
            "name": "ItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ... 4 more ...",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Style variations associated with various `Item` types.\n\n- `\"default\"` - An action `Item`.\n- `\"danger\"` - A destructive action `Item`.",
        "name": "variant",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/Item.tsx",
          "name": "ItemProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/Item.tsx",
            "name": "ItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"default\" | \"danger\"",
          "value": [
            {
              "value": "\"default\""
            },
            {
              "value": "\"danger\""
            }
          ]
        }
      },
      "showDivider": {
        "defaultValue": null,
        "description": "Whether to display a divider above the `Item` when it does not follow a `Header` or `Divider`.",
        "name": "showDivider",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/Item.tsx",
          "name": "ItemProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/Item.tsx",
            "name": "ItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "selected": {
        "defaultValue": null,
        "description": "For `Item`s which can be selected, whether the `Item` is currently selected.",
        "name": "selected",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/Item.tsx",
          "name": "ItemProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/Item.tsx",
            "name": "ItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "selectionVariant": {
        "defaultValue": null,
        "description": "For `Item`s which can be selected, whether `multiple` `Item`s or a `single` `Item` can be selected",
        "name": "selectionVariant",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/Item.tsx",
          "name": "ItemProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/Item.tsx",
            "name": "ItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"multiple\" | \"single\"",
          "value": [
            {
              "value": "\"multiple\""
            },
            {
              "value": "\"single\""
            }
          ]
        }
      },
      "groupId": {
        "defaultValue": null,
        "description": "Designates the group that an item belongs to.",
        "name": "groupId",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/Item.tsx",
          "name": "ItemProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/Item.tsx",
            "name": "ItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Items that are disabled can not be clicked, selected, or navigated through.",
        "name": "disabled",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/Item.tsx",
          "name": "ItemProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/Item.tsx",
            "name": "ItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "onAction": {
        "defaultValue": null,
        "description": "Callback that will trigger both on click selection and keyboard selection.",
        "name": "onAction",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/Item.tsx",
          "name": "ItemProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/Item.tsx",
            "name": "ItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "((item: ItemProps, event: KeyboardEvent<HTMLDivElement> | MouseEvent<HTMLDivElement, MouseEvent>) => void)",
          "value": [
            {
              "value": "(item: ItemProps, event: KeyboardEvent<HTMLDivElement> | MouseEvent<HTMLDivElement, MouseEvent>) => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An id associated with this item.  Should be unique between items",
        "name": "id",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/Item.tsx",
          "name": "ItemProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/Item.tsx",
            "name": "ItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string | number",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "number"
            }
          ]
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Node to be included inside the item before the text.",
        "name": "children",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/Item.tsx",
          "name": "ItemProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/Item.tsx",
            "name": "ItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "role": {
        "defaultValue": null,
        "description": "The ARIA role describing the function of `List` component. `option` is a common value.",
        "name": "role",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/Item.tsx",
          "name": "ItemProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/Item.tsx",
            "name": "ItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "AriaRole",
          "value": [
            {
              "value": "\"article\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"list\""
            },
            {
              "value": "\"alert\""
            },
            {
              "value": "\"alertdialog\""
            },
            {
              "value": "\"application\""
            },
            {
              "value": "\"banner\""
            },
            {
              "value": "\"cell\""
            },
            {
              "value": "\"checkbox\""
            },
            {
              "value": "\"columnheader\""
            },
            {
              "value": "\"combobox\""
            },
            {
              "value": "\"complementary\""
            },
            {
              "value": "\"contentinfo\""
            },
            {
              "value": "\"definition\""
            },
            {
              "value": "\"directory\""
            },
            {
              "value": "\"document\""
            },
            {
              "value": "\"feed\""
            },
            {
              "value": "\"grid\""
            },
            {
              "value": "\"gridcell\""
            },
            {
              "value": "\"group\""
            },
            {
              "value": "\"heading\""
            },
            {
              "value": "\"listbox\""
            },
            {
              "value": "\"listitem\""
            },
            {
              "value": "\"log\""
            },
            {
              "value": "\"marquee\""
            },
            {
              "value": "\"math\""
            },
            {
              "value": "\"menubar\""
            },
            {
              "value": "\"menuitemcheckbox\""
            },
            {
              "value": "\"menuitemradio\""
            },
            {
              "value": "\"navigation\""
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"note\""
            },
            {
              "value": "\"presentation\""
            },
            {
              "value": "\"progressbar\""
            },
            {
              "value": "\"radio\""
            },
            {
              "value": "\"radiogroup\""
            },
            {
              "value": "\"region\""
            },
            {
              "value": "\"row\""
            },
            {
              "value": "\"rowgroup\""
            },
            {
              "value": "\"rowheader\""
            },
            {
              "value": "\"scrollbar\""
            },
            {
              "value": "\"searchbox\""
            },
            {
              "value": "\"separator\""
            },
            {
              "value": "\"slider\""
            },
            {
              "value": "\"spinbutton\""
            },
            {
              "value": "\"status\""
            },
            {
              "value": "\"tab\""
            },
            {
              "value": "\"tablist\""
            },
            {
              "value": "\"tabpanel\""
            },
            {
              "value": "\"term\""
            },
            {
              "value": "\"textbox\""
            },
            {
              "value": "\"timer\""
            },
            {
              "value": "\"toolbar\""
            },
            {
              "value": "\"tooltip\""
            },
            {
              "value": "\"tree\""
            },
            {
              "value": "\"treegrid\""
            },
            {
              "value": "\"treeitem\""
            }
          ]
        }
      },
      "item": {
        "defaultValue": null,
        "description": "An item to pass back in the `onAction` callback, meant as",
        "name": "item",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/Item.tsx",
          "name": "ItemProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/Item.tsx",
            "name": "ItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ItemInput",
          "value": [
            {
              "value": "Merge<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"ref\">, ItemProps>"
            },
            {
              "value": "Partial<ItemProps> & { renderItem: RenderItemFn; } & { key?: Key | undefined; }"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/deprecated/ActionList/List.tsx",
    "description": "Lists `Item`s, either grouped or ungrouped, with a `Divider` between each `Group`.",
    "displayName": "ActionList",
    "methods": [],
    "props": {
      "groupMetadata": {
        "defaultValue": null,
        "description": "A collection of `Group` props (except `items`), plus a unique group identifier\nand `Group`-level custom `Item` or `Group` renderers.",
        "name": "groupMetadata",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "GroupedListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "GroupedListProps"
          }
        ],
        "required": true,
        "type": {
          "name": "((Omit<GroupProps, \"items\"> | Omit<Partial<GroupProps> & { renderItem?: RenderItemFn | undefined; renderGroup?: (({ header, items, ...props }: GroupProps) => Element) | undefined; }, \"items\">) & { ...; })[]"
        }
      },
      "items": {
        "defaultValue": null,
        "description": "A collection of `Item` props, plus associated group identifiers\nand `Item`-level custom `Item` renderers.\nA collection of `Item` props and `Item`-level custom `Item` renderers.",
        "name": "items",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "GroupedListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "GroupedListProps"
          },
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "ItemInput[] | ((ItemProps | (Partial<ItemProps> & { renderItem: RenderItemFn; })) & { groupId: string; })[]",
          "value": [
            {
              "value": "ItemInput[]",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "((ItemProps | (Partial<ItemProps> & { renderItem: RenderItemFn; })) & { groupId: string; })[]",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "role": {
        "defaultValue": null,
        "description": "The ARIA role describing the function of `List` component. `listbox` is a common value.",
        "name": "role",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "AriaRole",
          "value": [
            {
              "value": "\"article\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"list\""
            },
            {
              "value": "\"alert\""
            },
            {
              "value": "\"alertdialog\""
            },
            {
              "value": "\"application\""
            },
            {
              "value": "\"banner\""
            },
            {
              "value": "\"cell\""
            },
            {
              "value": "\"checkbox\""
            },
            {
              "value": "\"columnheader\""
            },
            {
              "value": "\"combobox\""
            },
            {
              "value": "\"complementary\""
            },
            {
              "value": "\"contentinfo\""
            },
            {
              "value": "\"definition\""
            },
            {
              "value": "\"directory\""
            },
            {
              "value": "\"document\""
            },
            {
              "value": "\"feed\""
            },
            {
              "value": "\"grid\""
            },
            {
              "value": "\"gridcell\""
            },
            {
              "value": "\"group\""
            },
            {
              "value": "\"heading\""
            },
            {
              "value": "\"listbox\""
            },
            {
              "value": "\"listitem\""
            },
            {
              "value": "\"log\""
            },
            {
              "value": "\"marquee\""
            },
            {
              "value": "\"math\""
            },
            {
              "value": "\"menubar\""
            },
            {
              "value": "\"menuitemcheckbox\""
            },
            {
              "value": "\"menuitemradio\""
            },
            {
              "value": "\"navigation\""
            },
            {
              "value": "\"none\""
            },
            {
              "value": "\"note\""
            },
            {
              "value": "\"presentation\""
            },
            {
              "value": "\"progressbar\""
            },
            {
              "value": "\"radio\""
            },
            {
              "value": "\"radiogroup\""
            },
            {
              "value": "\"region\""
            },
            {
              "value": "\"row\""
            },
            {
              "value": "\"rowgroup\""
            },
            {
              "value": "\"rowheader\""
            },
            {
              "value": "\"scrollbar\""
            },
            {
              "value": "\"searchbox\""
            },
            {
              "value": "\"separator\""
            },
            {
              "value": "\"slider\""
            },
            {
              "value": "\"spinbutton\""
            },
            {
              "value": "\"status\""
            },
            {
              "value": "\"tab\""
            },
            {
              "value": "\"tablist\""
            },
            {
              "value": "\"tabpanel\""
            },
            {
              "value": "\"term\""
            },
            {
              "value": "\"textbox\""
            },
            {
              "value": "\"timer\""
            },
            {
              "value": "\"toolbar\""
            },
            {
              "value": "\"tooltip\""
            },
            {
              "value": "\"tree\""
            },
            {
              "value": "\"treegrid\""
            },
            {
              "value": "\"treeitem\""
            }
          ]
        }
      },
      "id": {
        "defaultValue": null,
        "description": "id to attach to the base DOM node of the list",
        "name": "id",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "aria-label to attach to the base DOM node of the list",
        "name": "aria-label",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "renderItem": {
        "defaultValue": null,
        "description": "A `List`-level custom `Item` renderer. Every `Item` within this `List`\nwithout a `Group`-level or `Item`-level custom `Item` renderer will be\nrendered using this function component.",
        "name": "renderItem",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "RenderItemFn",
          "value": [
            {
              "value": "RenderItemFn",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "renderGroup": {
        "defaultValue": null,
        "description": "A `List`-level custom `Group` renderer. Every `Group` within this `List`\nwithout a `Group`-level custom `Item` renderer will be rendered using\nthis function component.",
        "name": "renderGroup",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "(({ header, items, ...props }: GroupProps) => Element)",
          "value": [
            {
              "value": "({ header, items, ...props }: GroupProps) => Element",
              "description": "Collects related `Items` in an `ActionList`.",
              "fullComment": "Collects related `Items` in an `ActionList`.",
              "tags": {}
            }
          ]
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Style variations. Usage is discretionary.\n\n- `\"inset\"` - `List` children are offset (vertically and horizontally) from `List`’s edges\n- `\"full\"` - `List` children are flush (vertically and horizontally) with `List` edges",
        "name": "variant",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"inset\" | \"full\"",
          "value": [
            {
              "value": "\"inset\""
            },
            {
              "value": "\"full\""
            }
          ]
        }
      },
      "selectionVariant": {
        "defaultValue": null,
        "description": "For `Item`s which can be selected, whether `multiple` `Item`s or a `single` `Item` can be selected",
        "name": "selectionVariant",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"multiple\" | \"single\"",
          "value": [
            {
              "value": "\"multiple\""
            },
            {
              "value": "\"single\""
            }
          ]
        }
      },
      "showItemDividers": {
        "defaultValue": null,
        "description": "Whether to display a divider above each `Item` in this `List` when it does not follow a `Header` or `Divider`.",
        "name": "showItemDividers",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "deprecated": "A new filter component is in progress.\nUntil the new filter component is ready, you can use Button + TextInput + ActionList to reproduce this pattern.",
      "primerid": "filtered_search",
      "primerstatus": "deprecated",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/deprecated/FilteredSearch/FilteredSearch.tsx",
    "description": "",
    "displayName": "FilteredSearch",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "deprecated": "UnderlineNav is deprecated and will be replaced by the draft `UnderlineNav` in the next major release. See https://primer.style/react/drafts/UnderlineNav2 for more details.",
      "primerid": "legacy_underline_nav",
      "primerstatus": "deprecated",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/deprecated/UnderlineNav/UnderlineNav.tsx",
    "description": "The underline nav is used to display navigation in a horizontal tabbed format.",
    "displayName": "UnderlineNav",
    "methods": [],
    "props": {
      "actions": {
        "defaultValue": null,
        "description": "Place another element, such as a button, to the opposite side of the navigation items.",
        "name": "actions",
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/UnderlineNav/UnderlineNav.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "align": {
        "defaultValue": null,
        "description": "Use `right` to have navigation items aligned right.",
        "name": "align",
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/UnderlineNav/UnderlineNav.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"right\"",
          "value": [
            {
              "value": "\"right\""
            }
          ]
        }
      },
      "full": {
        "defaultValue": null,
        "description": "Used to make navigation fill the width of the container.",
        "name": "full",
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/UnderlineNav/UnderlineNav.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Used to set the `aria-label` on the top level `<nav>` element.",
        "name": "label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/UnderlineNav/UnderlineNav.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "UnderlineNav.Link",
      "primerparentid": "legacy_underline_nav"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/deprecated/UnderlineNav/UnderlineNav.tsx",
    "description": "Links in the UnderlineNav",
    "displayName": "UnderlineNav.Link",
    "methods": [],
    "props": {
      "to": {
        "defaultValue": null,
        "description": "Used when the link is rendered using a component like React Router's `Link`. The path to navigate to.",
        "name": "to",
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/UnderlineNav/UnderlineNav.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "To",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "Partial<Path>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "selected": {
        "defaultValue": null,
        "description": "Whether this child represents the current page",
        "name": "selected",
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/UnderlineNav/UnderlineNav.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "deprecated": "Use the `useSlots` hook instead.\n\ncreateSlots is a factory that can create a\ntypesafe Slots + Slot pair to use in a component definition\nFor example: ActionList.Item uses createSlots to get a Slots wrapper\n+ Slot component that is used by LeadingVisual, Description"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/deprecated/utils/create-slots.tsx",
    "description": "",
    "displayName": "createslots",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/experimental/CSSComponent/index.tsx",
    "description": "",
    "displayName": "Component",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/experimental/IssueLabel/IssueLabel.tsx",
    "description": "",
    "displayName": "IssueLabel",
    "methods": [],
    "props": {
      "fillColor": {
        "defaultValue": null,
        "description": "",
        "name": "fillColor",
        "parent": {
          "fileName": "react/packages/react/src/experimental/IssueLabel/IssueLabel.tsx",
          "name": "IssueLabelProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/IssueLabel/IssueLabel.tsx",
            "name": "IssueLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "`#${string}`",
          "value": [
            {
              "value": "`#${string}`"
            }
          ]
        }
      },
      "variant": {
        "defaultValue": {
          "value": "gray"
        },
        "description": "",
        "name": "variant",
        "parent": {
          "fileName": "react/packages/react/src/experimental/IssueLabel/IssueLabel.tsx",
          "name": "IssueLabelProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/IssueLabel/IssueLabel.tsx",
            "name": "IssueLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "LabelColorVariant",
          "value": [
            {
              "value": "\"blue\""
            },
            {
              "value": "\"brown\""
            },
            {
              "value": "\"coral\""
            },
            {
              "value": "\"cyan\""
            },
            {
              "value": "\"gray\""
            },
            {
              "value": "\"green\""
            },
            {
              "value": "\"indigo\""
            },
            {
              "value": "\"lime\""
            },
            {
              "value": "\"olive\""
            },
            {
              "value": "\"orange\""
            },
            {
              "value": "\"pink\""
            },
            {
              "value": "\"plum\""
            },
            {
              "value": "\"purple\""
            },
            {
              "value": "\"red\""
            },
            {
              "value": "\"teal\""
            },
            {
              "value": "\"yellow\""
            },
            {
              "value": "\"pine\""
            },
            {
              "value": "\"lemon\""
            },
            {
              "value": "\"auburn\""
            }
          ]
        }
      },
      "href": {
        "defaultValue": null,
        "description": "",
        "name": "href",
        "parent": {
          "fileName": "react/packages/react/src/experimental/IssueLabel/IssueLabel.tsx",
          "name": "IssueLabelProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/IssueLabel/IssueLabel.tsx",
            "name": "IssueLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "parent": {
          "fileName": "react/packages/react/src/experimental/IssueLabel/IssueLabel.tsx",
          "name": "IssueLabelProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/IssueLabel/IssueLabel.tsx",
            "name": "IssueLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"a\" | \"button\" | \"span\"",
          "value": [
            {
              "value": "\"a\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"span\""
            }
          ]
        }
      },
      "text": {
        "defaultValue": null,
        "description": "",
        "name": "text",
        "parent": {
          "fileName": "react/packages/react/src/experimental/IssueLabel/IssueLabel.tsx",
          "name": "IssueLabelProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/IssueLabel/IssueLabel.tsx",
            "name": "IssueLabelProps"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "id": {
        "defaultValue": null,
        "description": "",
        "name": "id",
        "parent": {
          "fileName": "react/packages/react/src/experimental/IssueLabel/IssueLabel.tsx",
          "name": "IssueLabelProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/IssueLabel/IssueLabel.tsx",
            "name": "IssueLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string | number",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "number"
            }
          ]
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "react/packages/react/src/experimental/IssueLabel/IssueLabel.tsx",
          "name": "IssueLabelProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/IssueLabel/IssueLabel.tsx",
            "name": "IssueLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "onClick": {
        "defaultValue": null,
        "description": "",
        "name": "onClick",
        "parent": {
          "fileName": "react/packages/react/src/experimental/IssueLabel/IssueLabel.tsx",
          "name": "IssueLabelProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/IssueLabel/IssueLabel.tsx",
            "name": "IssueLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "MouseEventHandler<HTMLAnchorElement | HTMLButtonElement | HTMLSpanElement>",
          "value": [
            {
              "value": "MouseEventHandler<HTMLAnchorElement | HTMLButtonElement | HTMLSpanElement>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "onFocus": {
        "defaultValue": null,
        "description": "",
        "name": "onFocus",
        "parent": {
          "fileName": "react/packages/react/src/experimental/IssueLabel/IssueLabel.tsx",
          "name": "IssueLabelProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/IssueLabel/IssueLabel.tsx",
            "name": "IssueLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "FocusEventHandler<HTMLAnchorElement | HTMLButtonElement | HTMLSpanElement>",
          "value": [
            {
              "value": "FocusEventHandler<HTMLAnchorElement | HTMLButtonElement | HTMLSpanElement>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "SelectPanel",
      "primerid": "select_panel_v2",
      "primerdocsid": "select_panel",
      "primerstatus": "draft",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
    "description": "Select panel is a semantic dialog that allows for complex selection options within an overlay.",
    "displayName": "SelectPanel",
    "methods": [],
    "props": {
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "",
        "name": "description",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "variant": {
        "defaultValue": {
          "value": "warning"
        },
        "description": "",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"anchored\" | \"modal\" | ResponsiveValue<\"anchored\" | \"modal\", \"full-screen\" | \"bottom-sheet\">",
          "value": [
            {
              "value": "\"anchored\""
            },
            {
              "value": "\"modal\""
            },
            {
              "value": "ResponsiveValue<\"anchored\" | \"modal\", \"full-screen\" | \"bottom-sheet\">",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "selectionVariant": {
        "defaultValue": {
          "value": "multiple"
        },
        "description": "",
        "name": "selectionVariant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"multiple\" | \"single\" | \"instant\"",
          "value": [
            {
              "value": "\"multiple\""
            },
            {
              "value": "\"single\""
            },
            {
              "value": "\"instant\""
            }
          ]
        }
      },
      "id": {
        "defaultValue": null,
        "description": "",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "defaultOpen": {
        "defaultValue": {
          "value": false
        },
        "description": "",
        "name": "defaultOpen",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "open": {
        "defaultValue": null,
        "description": "",
        "name": "open",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "anchorRef": {
        "defaultValue": null,
        "description": "",
        "name": "anchorRef",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "RefObject<HTMLButtonElement>",
          "value": [
            {
              "value": "RefObject<HTMLButtonElement>",
              "description": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.",
              "fullComment": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.\n@template T The type of the ref's value.\n@example ```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```",
              "tags": {
                "template": "T The type of the ref's value.",
                "example": "```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```"
              }
            }
          ]
        }
      },
      "onCancel": {
        "defaultValue": null,
        "description": "",
        "name": "onCancel",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "(() => void)",
          "value": [
            {
              "value": "() => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "onClearSelection": {
        "defaultValue": null,
        "description": "",
        "name": "onClearSelection",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "(() => void)",
          "value": [
            {
              "value": "() => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "onSubmit": {
        "defaultValue": null,
        "description": "",
        "name": "onSubmit",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "((event?: FormEvent<HTMLFormElement>) => void) | undefined",
          "value": [
            {
              "value": "(event?: FormEvent<HTMLFormElement> | undefined) => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "width": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "",
        "name": "width",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"small\" | \"large\" | \"medium\" | \"auto\" | \"xlarge\" | \"xxlarge\"",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"xlarge\""
            },
            {
              "value": "\"xxlarge\""
            }
          ]
        }
      },
      "height": {
        "defaultValue": null,
        "description": "",
        "name": "height",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"fit-content\"",
          "value": [
            {
              "value": "\"fit-content\""
            }
          ]
        }
      },
      "maxHeight": {
        "defaultValue": {
          "value": "large"
        },
        "description": "",
        "name": "maxHeight",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"small\" | \"large\" | \"medium\" | \"fit-content\" | \"xlarge\"",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            },
            {
              "value": "\"fit-content\""
            },
            {
              "value": "\"xlarge\""
            }
          ]
        }
      },
      "children": {
        "defaultValue": {
          "value": "Fetching items..."
        },
        "description": "",
        "name": "children",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "SelectPanel.Button",
      "primerparentid": "select_panel_v2"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
    "description": "The button that toggles the SelectPanel.",
    "displayName": "SelectPanel.Button",
    "methods": [],
    "props": {
      "alignContent": {
        "defaultValue": null,
        "description": "Content alignment for when visuals are present",
        "name": "alignContent",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "AlignContent",
          "value": [
            {
              "value": "\"center\""
            },
            {
              "value": "\"start\""
            }
          ]
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "The icon for the IconButton",
        "name": "icon",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactElement<any, string | JSXElementConstructor<any>> | ElementType<any, keyof IntrinsicElements> | FunctionComponent<...> | null",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "FunctionComponent<IconProps>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "leadingVisual": {
        "defaultValue": null,
        "description": "The leading visual which comes before the button content",
        "name": "leadingVisual",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactElement<any, string | JSXElementConstructor<any>> | ElementType<any, keyof IntrinsicElements> | null",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            }
          ]
        }
      },
      "trailingVisual": {
        "defaultValue": null,
        "description": "The trailing visual which comes after the button content",
        "name": "trailingVisual",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactElement<any, string | JSXElementConstructor<any>> | ElementType<any, keyof IntrinsicElements> | null",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            }
          ]
        }
      },
      "trailingAction": {
        "defaultValue": null,
        "description": "Trailing action appears to the right of the trailing visual and is always locked to the end",
        "name": "trailingAction",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ElementType<any, keyof IntrinsicElements> | null",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "children": {
        "defaultValue": {
          "value": "Fetching items..."
        },
        "description": "",
        "name": "children",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "count": {
        "defaultValue": null,
        "description": "",
        "name": "count",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "number",
          "value": [
            {
              "value": "number"
            }
          ]
        }
      },
      "variant": {
        "defaultValue": {
          "value": "warning"
        },
        "description": "Determine's the styles on a button one of 'default' | 'primary' | 'invisible' | 'danger'",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "VariantType",
          "value": [
            {
              "value": "\"link\""
            },
            {
              "value": "\"default\""
            },
            {
              "value": "\"danger\""
            },
            {
              "value": "\"primary\""
            },
            {
              "value": "\"invisible\""
            }
          ]
        }
      },
      "size": {
        "defaultValue": {
          "value": "variant === 'empty' ? 'full' : 'inline'"
        },
        "description": "Size of button and fontSize of text in button",
        "name": "size",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Size",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            }
          ]
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Items that are disabled can not be clicked, selected, or navigated through.",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "ButtonHTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "block": {
        "defaultValue": null,
        "description": "Allow button width to fill its container.",
        "name": "block",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "loading": {
        "defaultValue": null,
        "description": "When true, the button is in a loading state.",
        "name": "loading",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "loadingAnnouncement": {
        "defaultValue": null,
        "description": "The content to announce to screen readers when loading.",
        "name": "loadingAnnouncement",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "inactive": {
        "defaultValue": null,
        "description": "",
        "name": "inactive",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "labelWrap": {
        "defaultValue": null,
        "description": "Whether the button label should wrap to multiple lines of it is longer than the button width.",
        "name": "labelWrap",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "SelectPanel.Header",
      "primerparentid": "select_panel_v2"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
    "description": "The header area of the SelectPanel.",
    "displayName": "SelectPanel.Header",
    "methods": [],
    "props": {
      "onBack": {
        "defaultValue": null,
        "description": "",
        "name": "onBack",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "(() => void)",
          "value": [
            {
              "value": "() => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "SelectPanel.SearchInput",
      "primerparentid": "select_panel_v2"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
    "description": "The search/filter input at the top of the SelectPanel.",
    "displayName": "SelectPanel.SearchInput",
    "methods": [],
    "props": {
      "icon": {
        "defaultValue": null,
        "description": "@deprecated Use `leadingVisual` or `trailingVisual` prop instead",
        "name": "icon",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TextInput/TextInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ElementType<any, keyof IntrinsicElements>",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "loading": {
        "defaultValue": null,
        "description": "Whether the to show a loading indicator in the input",
        "name": "loading",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TextInput/TextInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "loaderPosition": {
        "defaultValue": null,
        "description": "Which position to render the loading indicator\n'auto' (default): at the end of the input, unless a `leadingVisual` is passed. Then, it will render at the beginning\n'leading': at the beginning of the input\n'trailing': at the end of the input",
        "name": "loaderPosition",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TextInput/TextInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"auto\" | \"leading\" | \"trailing\"",
          "value": [
            {
              "value": "\"auto\""
            },
            {
              "value": "\"leading\""
            },
            {
              "value": "\"trailing\""
            }
          ]
        }
      },
      "loaderText": {
        "defaultValue": null,
        "description": "Text for screen readers to convey the loading state",
        "name": "loaderText",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TextInput/TextInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "leadingVisual": {
        "defaultValue": null,
        "description": "A visual that renders inside the input before the typing area",
        "name": "leadingVisual",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TextInput/TextInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ... 4 more ...",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "trailingVisual": {
        "defaultValue": null,
        "description": "A visual that renders inside the input after the typing area",
        "name": "trailingVisual",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TextInput/TextInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ... 4 more ...",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "trailingAction": {
        "defaultValue": null,
        "description": "A visual that renders inside the input after the typing area",
        "name": "trailingAction",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TextInput/TextInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactElement<HTMLProps<HTMLButtonElement>, string | JSXElementConstructor<any>>",
          "value": [
            {
              "value": "ReactElement<HTMLProps<HTMLButtonElement>, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            }
          ]
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the input is styled to look disabled.",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "size": {
        "defaultValue": {
          "value": "variant === 'empty' ? 'full' : 'inline'"
        },
        "description": "The size of the input.",
        "name": "size",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "TextInputSizes",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            }
          ]
        }
      },
      "block": {
        "defaultValue": null,
        "description": "Whether the input takes up the full width of its parent",
        "name": "block",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "monospace": {
        "defaultValue": null,
        "description": "Whether the text rendered in the input is in a monospace font.",
        "name": "monospace",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "variant": {
        "defaultValue": {
          "value": "warning"
        },
        "description": "@deprecated Use `size` prop instead",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "TextInputSizes",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "contrast": {
        "defaultValue": null,
        "description": "Whether the background color of the input has contrast against the default background color.",
        "name": "contrast",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "validationStatus": {
        "defaultValue": null,
        "description": "The result of validation on the input.",
        "name": "validationStatus",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "FormValidationStatus",
          "value": [
            {
              "value": "\"success\""
            },
            {
              "value": "\"error\""
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "SelectPanel.Footer",
      "primerparentid": "select_panel_v2"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
    "description": "The footer area of the SelectPanel.",
    "displayName": "SelectPanel.Footer",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "alias": "SelectPanel.SecondaryAction",
      "primerparentid": "select_panel_v2"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
    "description": "The secondary action in the footer area of the SelectPanel. Often a \"cancel\" action.",
    "displayName": "SelectPanel.SecondaryAction",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": {
          "value": "Fetching items..."
        },
        "description": "",
        "name": "children",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "DOMAttributes"
          },
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "DOMAttributes"
          },
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "variant": {
        "defaultValue": {
          "value": "warning"
        },
        "description": "",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"button\" | \"link\" | \"checkbox\"",
          "value": [
            {
              "value": "\"button\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"checkbox\""
            }
          ]
        }
      },
      "id": {
        "defaultValue": null,
        "description": "",
        "name": "id",
        "parent": {
          "fileName": "react/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          },
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Items that are disabled can not be clicked, selected, or navigated through.\nApply inactive visual appearance to the checkbox",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "ButtonHTMLAttributes"
          },
          {
            "fileName": "react/packages/react/src/Checkbox/Checkbox.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "InputHTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "value": {
        "defaultValue": null,
        "description": "A unique value that is never shown to the user.\nUsed during form submission and to identify which checkbox inputs are selected",
        "name": "value",
        "parent": {
          "fileName": "react/node_modules/@types/react/index.d.ts",
          "name": "ButtonHTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "ButtonHTMLAttributes"
          },
          {
            "fileName": "react/packages/react/src/Checkbox/Checkbox.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "InputHTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string | number | readonly string[] | (string & readonly string[])",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "readonly string[]",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "string & readonly string[]"
            }
          ]
        }
      },
      "loading": {
        "defaultValue": null,
        "description": "When true, the button is in a loading state.",
        "name": "loading",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "size": {
        "defaultValue": {
          "value": "variant === 'empty' ? 'full' : 'inline'"
        },
        "description": "Size of button and fontSize of text in button",
        "name": "size",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "InputHTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "number | Size",
          "value": [
            {
              "value": "number"
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            }
          ]
        }
      },
      "block": {
        "defaultValue": null,
        "description": "Allow button width to fill its container.",
        "name": "block",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "alignContent": {
        "defaultValue": null,
        "description": "Content alignment for when visuals are present",
        "name": "alignContent",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "AlignContent",
          "value": [
            {
              "value": "\"center\""
            },
            {
              "value": "\"start\""
            }
          ]
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "The icon for the IconButton",
        "name": "icon",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactElement<any, string | JSXElementConstructor<any>> | ElementType<any, keyof IntrinsicElements> | FunctionComponent<...> | null",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "FunctionComponent<IconProps>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          },
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          },
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "loadingAnnouncement": {
        "defaultValue": null,
        "description": "The content to announce to screen readers when loading.",
        "name": "loadingAnnouncement",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "inactive": {
        "defaultValue": null,
        "description": "",
        "name": "inactive",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "labelWrap": {
        "defaultValue": null,
        "description": "Whether the button label should wrap to multiple lines of it is longer than the button width.",
        "name": "labelWrap",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "leadingVisual": {
        "defaultValue": null,
        "description": "The leading visual which comes before the button content",
        "name": "leadingVisual",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactElement<any, string | JSXElementConstructor<any>> | ElementType<any, keyof IntrinsicElements> | null",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            }
          ]
        }
      },
      "trailingVisual": {
        "defaultValue": null,
        "description": "The trailing visual which comes after the button content",
        "name": "trailingVisual",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactElement<any, string | JSXElementConstructor<any>> | ElementType<any, keyof IntrinsicElements> | null",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            }
          ]
        }
      },
      "trailingAction": {
        "defaultValue": null,
        "description": "Trailing action appears to the right of the trailing visual and is always locked to the end",
        "name": "trailingAction",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ElementType<any, keyof IntrinsicElements> | null",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "ComponentClass<any, any>",
              "description": "Represents a component class in React.",
              "fullComment": "Represents a component class in React.\n@template P The props the component accepts.\n@template S The internal state of the component.",
              "tags": {
                "template": "P The props the component accepts.\nS The internal state of the component."
              }
            },
            {
              "value": "FunctionComponent<any>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "count": {
        "defaultValue": null,
        "description": "",
        "name": "count",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Button/types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "number",
          "value": [
            {
              "value": "number"
            }
          ]
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Forward a ref to the underlying input element",
        "name": "ref",
        "declarations": [
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/Checkbox/Checkbox.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "((instance: HTMLAnchorElement | null) => void) | RefObject<HTMLAnchorElement> | RefObject<HTMLInputElement> | null",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "(instance: HTMLAnchorElement | null) => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "RefObject<HTMLAnchorElement>",
              "description": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.",
              "fullComment": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.\n@template T The type of the ref's value.\n@example ```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```",
              "tags": {
                "template": "T The type of the ref's value.",
                "example": "```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```"
              }
            },
            {
              "value": "RefObject<HTMLInputElement>",
              "description": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.",
              "fullComment": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.\n@template T The type of the ref's value.\n@example ```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```",
              "tags": {
                "template": "T The type of the ref's value.",
                "example": "```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```"
              }
            }
          ]
        }
      },
      "hoverColor": {
        "defaultValue": null,
        "description": "@deprecated use CSS modules to style hover color",
        "name": "hoverColor",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Link/Link.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "muted": {
        "defaultValue": null,
        "description": "Uses a less prominent shade for Link color, and the default link shade on hover.",
        "name": "muted",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Link/Link.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "underline": {
        "defaultValue": null,
        "description": "@deprecated use `inline` to specify the type of link instead",
        "name": "underline",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Link/Link.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "inline": {
        "defaultValue": null,
        "description": "Set to true for links adjacent to text, underlining them for clear visibility and improved accessibility.",
        "name": "inline",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Link/Link.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"a\"",
          "value": [
            {
              "value": "\"a\""
            }
          ]
        }
      },
      "indeterminate": {
        "defaultValue": null,
        "description": "Apply indeterminate visual appearance to the checkbox",
        "name": "indeterminate",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Checkbox/Checkbox.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Indicates whether the checkbox must be checked",
        "name": "required",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Checkbox/Checkbox.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "InputHTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "validationStatus": {
        "defaultValue": null,
        "description": "Only used to inform ARIA attributes. Individual checkboxes do not have validation styles.",
        "name": "validationStatus",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Checkbox/Checkbox.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "FormValidationStatus",
          "value": [
            {
              "value": "\"success\""
            },
            {
              "value": "\"error\""
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "SelectPanel.Loading",
      "primerparentid": "select_panel_v2"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
    "description": "The loading indicator used when the data for the SelectPanel content is still loading",
    "displayName": "SelectPanel.Loading",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "alias": "SelectPanel.Message",
      "primerparentid": "select_panel_v2"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
    "description": "A message to render in the SelectPanel to indicate some kind of status or error.",
    "displayName": "SelectPanel.Message",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": {
          "value": "Fetching items..."
        },
        "description": "",
        "name": "children",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "size": {
        "defaultValue": {
          "value": "variant === 'empty' ? 'full' : 'inline'"
        },
        "description": "",
        "name": "size",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"inline\" | \"full\"",
          "value": [
            {
              "value": "\"inline\""
            },
            {
              "value": "\"full\""
            }
          ]
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "variant": {
        "defaultValue": {
          "value": "warning"
        },
        "description": "",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"warning\" | \"error\" | \"empty\"",
          "value": [
            {
              "value": "\"warning\""
            },
            {
              "value": "\"error\""
            },
            {
              "value": "\"empty\""
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/experimental/SelectPanel2/index.tsx",
    "description": "",
    "displayName": "SelectPanel",
    "methods": [],
    "props": {
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "",
        "name": "description",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"anchored\" | \"modal\" | ResponsiveValue<\"anchored\" | \"modal\", \"full-screen\" | \"bottom-sheet\">",
          "value": [
            {
              "value": "\"anchored\""
            },
            {
              "value": "\"modal\""
            },
            {
              "value": "ResponsiveValue<\"anchored\" | \"modal\", \"full-screen\" | \"bottom-sheet\">",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "selectionVariant": {
        "defaultValue": null,
        "description": "",
        "name": "selectionVariant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"multiple\" | \"single\" | \"instant\"",
          "value": [
            {
              "value": "\"multiple\""
            },
            {
              "value": "\"single\""
            },
            {
              "value": "\"instant\""
            }
          ]
        }
      },
      "id": {
        "defaultValue": null,
        "description": "",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "defaultOpen": {
        "defaultValue": null,
        "description": "",
        "name": "defaultOpen",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "open": {
        "defaultValue": null,
        "description": "",
        "name": "open",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "anchorRef": {
        "defaultValue": null,
        "description": "",
        "name": "anchorRef",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "RefObject<HTMLButtonElement>",
          "value": [
            {
              "value": "RefObject<HTMLButtonElement>",
              "description": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.",
              "fullComment": "A readonly ref container where {@link current} cannot be mutated.\n\nCreated by {@link createRef}, or {@link useRef} when passed `null`.\n@template T The type of the ref's value.\n@example ```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```",
              "tags": {
                "template": "T The type of the ref's value.",
                "example": "```tsx\nconst ref = createRef<HTMLDivElement>();\n\nref.current = document.createElement('div'); // Error\n```"
              }
            }
          ]
        }
      },
      "onCancel": {
        "defaultValue": null,
        "description": "",
        "name": "onCancel",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "(() => void)",
          "value": [
            {
              "value": "() => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "onClearSelection": {
        "defaultValue": null,
        "description": "",
        "name": "onClearSelection",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "(() => void)",
          "value": [
            {
              "value": "() => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "onSubmit": {
        "defaultValue": null,
        "description": "",
        "name": "onSubmit",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "((event?: FormEvent<HTMLFormElement>) => void) | undefined",
          "value": [
            {
              "value": "(event?: FormEvent<HTMLFormElement> | undefined) => void",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "width": {
        "defaultValue": null,
        "description": "",
        "name": "width",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"small\" | \"large\" | \"medium\" | \"auto\" | \"xlarge\" | \"xxlarge\"",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            },
            {
              "value": "\"auto\""
            },
            {
              "value": "\"xlarge\""
            },
            {
              "value": "\"xxlarge\""
            }
          ]
        }
      },
      "height": {
        "defaultValue": null,
        "description": "",
        "name": "height",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"fit-content\"",
          "value": [
            {
              "value": "\"fit-content\""
            }
          ]
        }
      },
      "maxHeight": {
        "defaultValue": null,
        "description": "",
        "name": "maxHeight",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"small\" | \"large\" | \"medium\" | \"fit-content\" | \"xlarge\"",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            },
            {
              "value": "\"fit-content\""
            },
            {
              "value": "\"xlarge\""
            }
          ]
        }
      },
      "children": {
        "defaultValue": null,
        "description": "",
        "name": "children",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "skeleton_avatar",
      "primerstatus": "draft",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/experimental/Skeleton/SkeletonAvatar.tsx",
    "description": "Skeleton avatars may be used to improve perceived performance by rendering a rough representation of an avatar in a block of content that is still loading.",
    "displayName": "SkeletonAvatar",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": {
          "value": 20
        },
        "description": "Sets the width and height of the avatar.",
        "name": "size",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Avatar/Avatar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "number | ResponsiveValue<number>",
          "value": [
            {
              "value": "number"
            },
            {
              "value": "ResponsiveValue<number>",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "square": {
        "defaultValue": null,
        "description": "Sets the shape of the avatar to a square if true. If false, the avatar will be circular.",
        "name": "square",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Avatar/Avatar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Class name for custom styling",
        "name": "className",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/Skeleton/SkeletonAvatar.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "skeleton_box",
      "primerstatus": "draft",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/experimental/Skeleton/SkeletonBox.tsx",
    "description": "SkeletonBox is a low-level component used to create a skeleton loading animation.",
    "displayName": "SkeletonBox",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "The className of the skeleton box",
        "name": "className",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/Skeleton/SkeletonBox.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the skeleton \"box\". Accepts any valid CSS `height` value.",
        "name": "height",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/Skeleton/SkeletonBox.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "AllHTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string | number",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "number"
            }
          ]
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the skeleton \"box\". Accepts any valid CSS `width` value.",
        "name": "width",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/Skeleton/SkeletonBox.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "AllHTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string | number",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "number"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "skeleton_text",
      "primerstatus": "draft",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/experimental/Skeleton/SkeletonText.tsx",
    "description": "SkeletonText is a component that renders a loading state for text content.",
    "displayName": "SkeletonText",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": {
          "value": "bodyMedium"
        },
        "description": "Size of the text that the skeleton is replacing.",
        "name": "size",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/Skeleton/SkeletonText.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"display\" | \"subtitle\" | \"titleLarge\" | \"titleMedium\" | \"titleSmall\" | \"bodyLarge\" | \"bodyMedium\" | \"bodySmall\"",
          "value": [
            {
              "value": "\"display\""
            },
            {
              "value": "\"subtitle\""
            },
            {
              "value": "\"titleLarge\""
            },
            {
              "value": "\"titleMedium\""
            },
            {
              "value": "\"titleSmall\""
            },
            {
              "value": "\"bodyLarge\""
            },
            {
              "value": "\"bodyMedium\""
            },
            {
              "value": "\"bodySmall\""
            }
          ]
        }
      },
      "lines": {
        "defaultValue": {
          "value": 1
        },
        "description": "Number of lines of skeleton text to render.",
        "name": "lines",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/Skeleton/SkeletonText.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "number",
          "value": [
            {
              "value": "number"
            }
          ]
        }
      },
      "maxWidth": {
        "defaultValue": null,
        "description": "Maximum width that the line(s) of skeleton text can take up.  Accepts any valid CSS `max-width` value.",
        "name": "maxWidth",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/Skeleton/SkeletonText.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "MaxWidth<string | number>",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "string & {}"
            }
          ]
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Class name for custom styling",
        "name": "className",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/Skeleton/SkeletonText.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "primerid": "underline_panels",
      "primerstatus": "draft",
      "primera11yreviewed": "false"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/experimental/UnderlinePanels/UnderlinePanels.tsx",
    "description": "The underline panels are used to break related content into tabbed panels.",
    "displayName": "UnderlinePanels",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Tabs (UnderlinePanels.Tab) and panels (UnderlinePanels.Panel) to render",
        "name": "children",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/UnderlinePanels/UnderlinePanels.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "Accessible name for the tab list",
        "name": "aria-label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/UnderlinePanels/UnderlinePanels.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "ID of the element containing the name for the tab list",
        "name": "aria-labelledby",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/UnderlinePanels/UnderlinePanels.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Custom string to use when generating the IDs of tabs and `aria-labelledby` for the panels",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/UnderlinePanels/UnderlinePanels.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "loadingCounters": {
        "defaultValue": null,
        "description": "Loading state for all counters. It displays loading animation for individual counters until all are resolved. It is needed to prevent multiple layout shift.",
        "name": "loadingCounters",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/UnderlinePanels/UnderlinePanels.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "UnderlinePanels.Tab",
      "primerparentid": "underline_panels"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/experimental/UnderlinePanels/UnderlinePanels.tsx",
    "description": "A tab in the tablist of UnderlinePanels",
    "displayName": "UnderlinePanels.Tab",
    "methods": [],
    "props": {
      "aria-selected": {
        "defaultValue": null,
        "description": "Whether this is the selected tab",
        "name": "aria-selected",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/UnderlinePanels/UnderlinePanels.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "counter": {
        "defaultValue": null,
        "description": "Content of CounterLabel rendered after tab text label",
        "name": "counter",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/UnderlinePanels/UnderlinePanels.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string | number",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "number"
            }
          ]
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon rendered before the tab text label",
        "name": "icon",
        "declarations": [
          {
            "fileName": "react/packages/react/src/experimental/UnderlinePanels/UnderlinePanels.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "FC<IconProps>",
          "value": [
            {
              "value": "FC<IconProps>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "alias": "UnderlinePanels.Panel",
      "primerparentid": "underline_panels"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/experimental/UnderlinePanels/UnderlinePanels.tsx",
    "description": "A tabpanel associated with a UnderlinePanels.Tab in UnderlinePanels",
    "displayName": "UnderlinePanels.Panel",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/ButtonReset.tsx",
    "description": "Provides an unstyled button that can be styled as-needed for components",
    "displayName": "Button",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/ConditionalWrapper.tsx",
    "description": "",
    "displayName": "ConditionalWrapper",
    "methods": [],
    "props": {
      "if": {
        "defaultValue": null,
        "description": "",
        "name": "if",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/ConditionalWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/InputCaption.tsx",
    "description": "",
    "displayName": "InputCaption",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "The unique identifier used to associate the caption with an input",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputCaption.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the input associated with this caption is disabled",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputCaption.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/InputLabel.tsx",
    "description": "",
    "displayName": "InputLabel",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "required": {
        "defaultValue": null,
        "description": "",
        "name": "required",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "requiredText": {
        "defaultValue": null,
        "description": "",
        "name": "requiredText",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "requiredIndicator": {
        "defaultValue": null,
        "description": "",
        "name": "requiredIndicator",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "visuallyHidden": {
        "defaultValue": null,
        "description": "",
        "name": "visuallyHidden",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "id": {
        "defaultValue": null,
        "description": "",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "htmlFor": {
        "defaultValue": null,
        "description": "The unique identifier for the associated input",
        "name": "htmlFor",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "as": {
        "defaultValue": {
          "value": "label"
        },
        "description": "The label element can be changed to a 'legend' when it's being used to label a fieldset, or a 'span' when it's being used to label an element that is not a form input. For example: when using a FormControl to render a labeled SegementedControl, the label should be a 'span'",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"label\" | \"legend\" | \"span\"",
          "value": [
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"span\""
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/InputValidation.tsx",
    "description": "",
    "displayName": "InputValidation",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputValidation.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "validationStatus": {
        "defaultValue": null,
        "description": "",
        "name": "validationStatus",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputValidation.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "FormValidationStatus",
          "value": [
            {
              "value": "\"success\""
            },
            {
              "value": "\"error\""
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/LiveRegion.tsx",
    "description": "",
    "displayName": "LiveRegion",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/LiveRegion.tsx",
    "description": "",
    "displayName": "Message",
    "methods": [],
    "props": {
      "value": {
        "defaultValue": null,
        "description": "",
        "name": "value",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/LiveRegion.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/TextInputInnerAction.tsx",
    "description": "",
    "displayName": "TextInputInnerAction",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "@deprecated Text input action buttons should only use icon buttons",
        "name": "children",
        "parent": {
          "fileName": "react/node_modules/@types/react/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "DOMAttributes"
          },
          {
            "fileName": "react/packages/react/src/internal/components/TextInputInnerAction.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactNode",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "string"
            },
            {
              "value": "number"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            },
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "Iterable<ReactNode>",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "ReactPortal",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "Text that appears in a tooltip. If an icon is passed, this is also used as the label used by assistive technologies.",
        "name": "aria-label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputInnerAction.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "tooltipDirection": {
        "defaultValue": null,
        "description": "Position of tooltip. If no position is passed or defaults to \"n\"",
        "name": "tooltipDirection",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputInnerAction.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"s\" | \"nw\" | \"n\" | \"ne\" | \"e\" | \"se\" | \"sw\" | \"w\"",
          "value": [
            {
              "value": "\"s\""
            },
            {
              "value": "\"nw\""
            },
            {
              "value": "\"n\""
            },
            {
              "value": "\"ne\""
            },
            {
              "value": "\"e\""
            },
            {
              "value": "\"se\""
            },
            {
              "value": "\"sw\""
            },
            {
              "value": "\"w\""
            }
          ]
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "The icon to render inside the button",
        "name": "icon",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputInnerAction.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "FunctionComponent<PropsWithChildren<IconProps>>",
          "value": [
            {
              "value": "FunctionComponent<PropsWithChildren<IconProps>>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "variant": {
        "defaultValue": {
          "value": "invisible"
        },
        "description": "@deprecated Text input action buttons should only use the 'invisible' button variant\nDetermine's the styles on a button one of 'default' | 'primary' | 'invisible' | 'danger'",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputInnerAction.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "VariantType",
          "value": [
            {
              "value": "\"link\""
            },
            {
              "value": "\"default\""
            },
            {
              "value": "\"danger\""
            },
            {
              "value": "\"primary\""
            },
            {
              "value": "\"invisible\""
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/TextInputInnerVisualSlot.tsx",
    "description": "",
    "displayName": "TextInputInnerVisualSlot",
    "methods": [],
    "props": {
      "hasLoadingIndicator": {
        "defaultValue": null,
        "description": "Whether the input is expected to ever show a loading indicator",
        "name": "hasLoadingIndicator",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputInnerVisualSlot.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "showLoadingIndicator": {
        "defaultValue": null,
        "description": "Whether the to show the loading indicator",
        "name": "showLoadingIndicator",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputInnerVisualSlot.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "boolean | undefined",
          "value": [
            {
              "value": "undefined"
            },
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "visualPosition": {
        "defaultValue": null,
        "description": "Which side of this visual is being rendered",
        "name": "visualPosition",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputInnerVisualSlot.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "\"leading\" | \"trailing\"",
          "value": [
            {
              "value": "\"leading\""
            },
            {
              "value": "\"trailing\""
            }
          ]
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Used to provide a reference for usage with `aria-describedby`",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputInnerVisualSlot.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/TextInputWrapper.tsx",
    "description": "",
    "displayName": "TextInputBaseWrapper",
    "methods": [],
    "props": {
      "block": {
        "defaultValue": null,
        "description": "Whether the input takes up the full width of its parent",
        "name": "block",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "contrast": {
        "defaultValue": null,
        "description": "Whether the background color of the input has contrast against the default background color.",
        "name": "contrast",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the input is styled to look disabled.",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "hasTrailingAction": {
        "defaultValue": null,
        "description": "Whether the input has a trailing action.",
        "name": "hasTrailingAction",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "isInputFocused": {
        "defaultValue": null,
        "description": "Whether the input is focused.",
        "name": "isInputFocused",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "monospace": {
        "defaultValue": null,
        "description": "Whether the text rendered in the input is in a monospace font.",
        "name": "monospace",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "validationStatus": {
        "defaultValue": null,
        "description": "The result of validation on the input.",
        "name": "validationStatus",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "FormValidationStatus",
          "value": [
            {
              "value": "\"success\""
            },
            {
              "value": "\"error\""
            }
          ]
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "@deprecated Use `size` prop instead",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "TextInputSizes",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            }
          ]
        }
      },
      "size": {
        "defaultValue": null,
        "description": "The size of the input.",
        "name": "size",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "TextInputSizes",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/TextInputWrapper.tsx",
    "description": "",
    "displayName": "TextInputWrapper",
    "methods": [],
    "props": {
      "hasLeadingVisual": {
        "defaultValue": null,
        "description": "Whether the input has a leading visual.",
        "name": "hasLeadingVisual",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "hasTrailingVisual": {
        "defaultValue": null,
        "description": "Whether the input has a trailing visual.",
        "name": "hasTrailingVisual",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "block": {
        "defaultValue": null,
        "description": "Whether the input takes up the full width of its parent",
        "name": "block",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "contrast": {
        "defaultValue": null,
        "description": "Whether the background color of the input has contrast against the default background color.",
        "name": "contrast",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the input is styled to look disabled.",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "hasTrailingAction": {
        "defaultValue": null,
        "description": "Whether the input has a trailing action.",
        "name": "hasTrailingAction",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "isInputFocused": {
        "defaultValue": null,
        "description": "Whether the input is focused.",
        "name": "isInputFocused",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "monospace": {
        "defaultValue": null,
        "description": "Whether the text rendered in the input is in a monospace font.",
        "name": "monospace",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "validationStatus": {
        "defaultValue": null,
        "description": "The result of validation on the input.",
        "name": "validationStatus",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "FormValidationStatus",
          "value": [
            {
              "value": "\"success\""
            },
            {
              "value": "\"error\""
            }
          ]
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "@deprecated Use `size` prop instead",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "TextInputSizes",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            }
          ]
        }
      },
      "size": {
        "defaultValue": null,
        "description": "The size of the input.",
        "name": "size",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "TextInputSizes",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/TextInputWrapper.tsx",
    "description": "",
    "displayName": "StyledTextInputBaseWrapper",
    "methods": [],
    "props": {
      "disabled": {
        "defaultValue": null,
        "description": "Whether the input is styled to look disabled.",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "size": {
        "defaultValue": null,
        "description": "The size of the input.",
        "name": "size",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "TextInputSizes",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            }
          ]
        }
      },
      "block": {
        "defaultValue": null,
        "description": "Whether the input takes up the full width of its parent",
        "name": "block",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "monospace": {
        "defaultValue": null,
        "description": "Whether the text rendered in the input is in a monospace font.",
        "name": "monospace",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "@deprecated Use `size` prop instead",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "TextInputSizes",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"medium\""
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      },
      "contrast": {
        "defaultValue": null,
        "description": "Whether the background color of the input has contrast against the default background color.",
        "name": "contrast",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "validationStatus": {
        "defaultValue": null,
        "description": "The result of validation on the input.",
        "name": "validationStatus",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "FormValidationStatus",
          "value": [
            {
              "value": "\"success\""
            },
            {
              "value": "\"error\""
            }
          ]
        }
      },
      "hasTrailingAction": {
        "defaultValue": null,
        "description": "Whether the input has a trailing action.",
        "name": "hasTrailingAction",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "isInputFocused": {
        "defaultValue": null,
        "description": "Whether the input is focused.",
        "name": "isInputFocused",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/UnderlineTabbedInterface.tsx",
    "description": "",
    "displayName": "StyledUnderlineWrapper",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/UnderlineTabbedInterface.tsx",
    "description": "",
    "displayName": "StyledUnderlineItemList",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/UnderlineTabbedInterface.tsx",
    "description": "",
    "displayName": "StyledUnderlineItem",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/UnderlineTabbedInterface.tsx",
    "description": "",
    "displayName": "LoadingCounter",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/UnderlineTabbedInterface.tsx",
    "description": "",
    "displayName": "UnderlineItem",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/UnderlineTabbedInterface.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/UnderlineTabbedInterface.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/UnderlineTabbedInterface.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | ... 704 more ... | (\"tab-container\" & (ComponentClass<...> | FunctionComponent<...>))",
          "value": [
            {
              "value": "\"symbol\""
            },
            {
              "value": "\"object\""
            },
            {
              "value": "\"a\""
            },
            {
              "value": "\"abbr\""
            },
            {
              "value": "\"address\""
            },
            {
              "value": "\"area\""
            },
            {
              "value": "\"article\""
            },
            {
              "value": "\"aside\""
            },
            {
              "value": "\"audio\""
            },
            {
              "value": "\"b\""
            },
            {
              "value": "\"base\""
            },
            {
              "value": "\"bdi\""
            },
            {
              "value": "\"bdo\""
            },
            {
              "value": "\"big\""
            },
            {
              "value": "\"blockquote\""
            },
            {
              "value": "\"body\""
            },
            {
              "value": "\"br\""
            },
            {
              "value": "\"button\""
            },
            {
              "value": "\"canvas\""
            },
            {
              "value": "\"caption\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"cite\""
            },
            {
              "value": "\"code\""
            },
            {
              "value": "\"col\""
            },
            {
              "value": "\"colgroup\""
            },
            {
              "value": "\"data\""
            },
            {
              "value": "\"datalist\""
            },
            {
              "value": "\"dd\""
            },
            {
              "value": "\"del\""
            },
            {
              "value": "\"details\""
            },
            {
              "value": "\"dfn\""
            },
            {
              "value": "\"dialog\""
            },
            {
              "value": "\"div\""
            },
            {
              "value": "\"dl\""
            },
            {
              "value": "\"dt\""
            },
            {
              "value": "\"em\""
            },
            {
              "value": "\"embed\""
            },
            {
              "value": "\"fieldset\""
            },
            {
              "value": "\"figcaption\""
            },
            {
              "value": "\"figure\""
            },
            {
              "value": "\"footer\""
            },
            {
              "value": "\"form\""
            },
            {
              "value": "\"h1\""
            },
            {
              "value": "\"h2\""
            },
            {
              "value": "\"h3\""
            },
            {
              "value": "\"h4\""
            },
            {
              "value": "\"h5\""
            },
            {
              "value": "\"h6\""
            },
            {
              "value": "\"head\""
            },
            {
              "value": "\"header\""
            },
            {
              "value": "\"hgroup\""
            },
            {
              "value": "\"hr\""
            },
            {
              "value": "\"html\""
            },
            {
              "value": "\"i\""
            },
            {
              "value": "\"iframe\""
            },
            {
              "value": "\"img\""
            },
            {
              "value": "\"input\""
            },
            {
              "value": "\"ins\""
            },
            {
              "value": "\"kbd\""
            },
            {
              "value": "\"keygen\""
            },
            {
              "value": "\"label\""
            },
            {
              "value": "\"legend\""
            },
            {
              "value": "\"li\""
            },
            {
              "value": "\"link\""
            },
            {
              "value": "\"main\""
            },
            {
              "value": "\"map\""
            },
            {
              "value": "\"mark\""
            },
            {
              "value": "\"menu\""
            },
            {
              "value": "\"menuitem\""
            },
            {
              "value": "\"meta\""
            },
            {
              "value": "\"meter\""
            },
            {
              "value": "\"nav\""
            },
            {
              "value": "\"noindex\""
            },
            {
              "value": "\"noscript\""
            },
            {
              "value": "\"ol\""
            },
            {
              "value": "\"optgroup\""
            },
            {
              "value": "\"option\""
            },
            {
              "value": "\"output\""
            },
            {
              "value": "\"p\""
            },
            {
              "value": "\"param\""
            },
            {
              "value": "\"picture\""
            },
            {
              "value": "\"pre\""
            },
            {
              "value": "\"progress\""
            },
            {
              "value": "\"q\""
            },
            {
              "value": "\"rp\""
            },
            {
              "value": "\"rt\""
            },
            {
              "value": "\"ruby\""
            },
            {
              "value": "\"s\""
            },
            {
              "value": "\"samp\""
            },
            {
              "value": "\"search\""
            },
            {
              "value": "\"slot\""
            },
            {
              "value": "\"script\""
            },
            {
              "value": "\"section\""
            },
            {
              "value": "\"select\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"source\""
            },
            {
              "value": "\"span\""
            },
            {
              "value": "\"strong\""
            },
            {
              "value": "\"style\""
            },
            {
              "value": "\"sub\""
            },
            {
              "value": "\"summary\""
            },
            {
              "value": "\"sup\""
            },
            {
              "value": "\"table\""
            },
            {
              "value": "\"template\""
            },
            {
              "value": "\"tbody\""
            },
            {
              "value": "\"td\""
            },
            {
              "value": "\"textarea\""
            },
            {
              "value": "\"tfoot\""
            },
            {
              "value": "\"th\""
            },
            {
              "value": "\"thead\""
            },
            {
              "value": "\"time\""
            },
            {
              "value": "\"title\""
            },
            {
              "value": "\"tr\""
            },
            {
              "value": "\"track\""
            },
            {
              "value": "\"u\""
            },
            {
              "value": "\"ul\""
            },
            {
              "value": "\"var\""
            },
            {
              "value": "\"video\""
            },
            {
              "value": "\"wbr\""
            },
            {
              "value": "\"webview\""
            },
            {
              "value": "\"svg\""
            },
            {
              "value": "\"animate\""
            },
            {
              "value": "\"animateMotion\""
            },
            {
              "value": "\"animateTransform\""
            },
            {
              "value": "\"circle\""
            },
            {
              "value": "\"clipPath\""
            },
            {
              "value": "\"defs\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"ellipse\""
            },
            {
              "value": "\"feBlend\""
            },
            {
              "value": "\"feColorMatrix\""
            },
            {
              "value": "\"feComponentTransfer\""
            },
            {
              "value": "\"feComposite\""
            },
            {
              "value": "\"feConvolveMatrix\""
            },
            {
              "value": "\"feDiffuseLighting\""
            },
            {
              "value": "\"feDisplacementMap\""
            },
            {
              "value": "\"feDistantLight\""
            },
            {
              "value": "\"feDropShadow\""
            },
            {
              "value": "\"feFlood\""
            },
            {
              "value": "\"feFuncA\""
            },
            {
              "value": "\"feFuncB\""
            },
            {
              "value": "\"feFuncG\""
            },
            {
              "value": "\"feFuncR\""
            },
            {
              "value": "\"feGaussianBlur\""
            },
            {
              "value": "\"feImage\""
            },
            {
              "value": "\"feMerge\""
            },
            {
              "value": "\"feMergeNode\""
            },
            {
              "value": "\"feMorphology\""
            },
            {
              "value": "\"feOffset\""
            },
            {
              "value": "\"fePointLight\""
            },
            {
              "value": "\"feSpecularLighting\""
            },
            {
              "value": "\"feSpotLight\""
            },
            {
              "value": "\"feTile\""
            },
            {
              "value": "\"feTurbulence\""
            },
            {
              "value": "\"filter\""
            },
            {
              "value": "\"foreignObject\""
            },
            {
              "value": "\"g\""
            },
            {
              "value": "\"image\""
            },
            {
              "value": "\"line\""
            },
            {
              "value": "\"linearGradient\""
            },
            {
              "value": "\"marker\""
            },
            {
              "value": "\"mask\""
            },
            {
              "value": "\"metadata\""
            },
            {
              "value": "\"mpath\""
            },
            {
              "value": "\"path\""
            },
            {
              "value": "\"pattern\""
            },
            {
              "value": "\"polygon\""
            },
            {
              "value": "\"polyline\""
            },
            {
              "value": "\"radialGradient\""
            },
            {
              "value": "\"rect\""
            },
            {
              "value": "\"set\""
            },
            {
              "value": "\"stop\""
            },
            {
              "value": "\"switch\""
            },
            {
              "value": "\"text\""
            },
            {
              "value": "\"textPath\""
            },
            {
              "value": "\"tspan\""
            },
            {
              "value": "\"use\""
            },
            {
              "value": "\"view\""
            },
            {
              "value": "\"relative-time\""
            },
            {
              "value": "\"tab-container\""
            },
            {
              "value": "\"h1\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"h1\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"h2\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"h2\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"h3\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"h3\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"h4\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"h4\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"h5\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"h5\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"h6\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"h6\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"button\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"button\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"a\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"a\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"symbol\" & ComponentClass<any, any>"
            },
            {
              "value": "\"symbol\" & FunctionComponent<any>"
            },
            {
              "value": "\"object\" & ComponentClass<any, any>"
            },
            {
              "value": "\"object\" & FunctionComponent<any>"
            },
            {
              "value": "\"a\" & ComponentClass<any, any>"
            },
            {
              "value": "\"a\" & FunctionComponent<any>"
            },
            {
              "value": "\"abbr\" & ComponentClass<any, any>"
            },
            {
              "value": "\"abbr\" & FunctionComponent<any>"
            },
            {
              "value": "\"address\" & ComponentClass<any, any>"
            },
            {
              "value": "\"address\" & FunctionComponent<any>"
            },
            {
              "value": "\"area\" & ComponentClass<any, any>"
            },
            {
              "value": "\"area\" & FunctionComponent<any>"
            },
            {
              "value": "\"article\" & ComponentClass<any, any>"
            },
            {
              "value": "\"article\" & FunctionComponent<any>"
            },
            {
              "value": "\"aside\" & ComponentClass<any, any>"
            },
            {
              "value": "\"aside\" & FunctionComponent<any>"
            },
            {
              "value": "\"audio\" & ComponentClass<any, any>"
            },
            {
              "value": "\"audio\" & FunctionComponent<any>"
            },
            {
              "value": "\"b\" & ComponentClass<any, any>"
            },
            {
              "value": "\"b\" & FunctionComponent<any>"
            },
            {
              "value": "\"base\" & ComponentClass<any, any>"
            },
            {
              "value": "\"base\" & FunctionComponent<any>"
            },
            {
              "value": "\"bdi\" & ComponentClass<any, any>"
            },
            {
              "value": "\"bdi\" & FunctionComponent<any>"
            },
            {
              "value": "\"bdo\" & ComponentClass<any, any>"
            },
            {
              "value": "\"bdo\" & FunctionComponent<any>"
            },
            {
              "value": "\"big\" & ComponentClass<any, any>"
            },
            {
              "value": "\"big\" & FunctionComponent<any>"
            },
            {
              "value": "\"blockquote\" & ComponentClass<any, any>"
            },
            {
              "value": "\"blockquote\" & FunctionComponent<any>"
            },
            {
              "value": "\"body\" & ComponentClass<any, any>"
            },
            {
              "value": "\"body\" & FunctionComponent<any>"
            },
            {
              "value": "\"br\" & ComponentClass<any, any>"
            },
            {
              "value": "\"br\" & FunctionComponent<any>"
            },
            {
              "value": "\"button\" & ComponentClass<any, any>"
            },
            {
              "value": "\"button\" & FunctionComponent<any>"
            },
            {
              "value": "\"canvas\" & ComponentClass<any, any>"
            },
            {
              "value": "\"canvas\" & FunctionComponent<any>"
            },
            {
              "value": "\"caption\" & ComponentClass<any, any>"
            },
            {
              "value": "\"caption\" & FunctionComponent<any>"
            },
            {
              "value": "\"center\" & ComponentClass<any, any>"
            },
            {
              "value": "\"center\" & FunctionComponent<any>"
            },
            {
              "value": "\"cite\" & ComponentClass<any, any>"
            },
            {
              "value": "\"cite\" & FunctionComponent<any>"
            },
            {
              "value": "\"code\" & ComponentClass<any, any>"
            },
            {
              "value": "\"code\" & FunctionComponent<any>"
            },
            {
              "value": "\"col\" & ComponentClass<any, any>"
            },
            {
              "value": "\"col\" & FunctionComponent<any>"
            },
            {
              "value": "\"colgroup\" & ComponentClass<any, any>"
            },
            {
              "value": "\"colgroup\" & FunctionComponent<any>"
            },
            {
              "value": "\"data\" & ComponentClass<any, any>"
            },
            {
              "value": "\"data\" & FunctionComponent<any>"
            },
            {
              "value": "\"datalist\" & ComponentClass<any, any>"
            },
            {
              "value": "\"datalist\" & FunctionComponent<any>"
            },
            {
              "value": "\"dd\" & ComponentClass<any, any>"
            },
            {
              "value": "\"dd\" & FunctionComponent<any>"
            },
            {
              "value": "\"del\" & ComponentClass<any, any>"
            },
            {
              "value": "\"del\" & FunctionComponent<any>"
            },
            {
              "value": "\"details\" & ComponentClass<any, any>"
            },
            {
              "value": "\"details\" & FunctionComponent<any>"
            },
            {
              "value": "\"dfn\" & ComponentClass<any, any>"
            },
            {
              "value": "\"dfn\" & FunctionComponent<any>"
            },
            {
              "value": "\"dialog\" & ComponentClass<any, any>"
            },
            {
              "value": "\"dialog\" & FunctionComponent<any>"
            },
            {
              "value": "\"div\" & ComponentClass<any, any>"
            },
            {
              "value": "\"div\" & FunctionComponent<any>"
            },
            {
              "value": "\"dl\" & ComponentClass<any, any>"
            },
            {
              "value": "\"dl\" & FunctionComponent<any>"
            },
            {
              "value": "\"dt\" & ComponentClass<any, any>"
            },
            {
              "value": "\"dt\" & FunctionComponent<any>"
            },
            {
              "value": "\"em\" & ComponentClass<any, any>"
            },
            {
              "value": "\"em\" & FunctionComponent<any>"
            },
            {
              "value": "\"embed\" & ComponentClass<any, any>"
            },
            {
              "value": "\"embed\" & FunctionComponent<any>"
            },
            {
              "value": "\"fieldset\" & ComponentClass<any, any>"
            },
            {
              "value": "\"fieldset\" & FunctionComponent<any>"
            },
            {
              "value": "\"figcaption\" & ComponentClass<any, any>"
            },
            {
              "value": "\"figcaption\" & FunctionComponent<any>"
            },
            {
              "value": "\"figure\" & ComponentClass<any, any>"
            },
            {
              "value": "\"figure\" & FunctionComponent<any>"
            },
            {
              "value": "\"footer\" & ComponentClass<any, any>"
            },
            {
              "value": "\"footer\" & FunctionComponent<any>"
            },
            {
              "value": "\"form\" & ComponentClass<any, any>"
            },
            {
              "value": "\"form\" & FunctionComponent<any>"
            },
            {
              "value": "\"h1\" & ComponentClass<any, any>"
            },
            {
              "value": "\"h1\" & FunctionComponent<any>"
            },
            {
              "value": "\"h2\" & ComponentClass<any, any>"
            },
            {
              "value": "\"h2\" & FunctionComponent<any>"
            },
            {
              "value": "\"h3\" & ComponentClass<any, any>"
            },
            {
              "value": "\"h3\" & FunctionComponent<any>"
            },
            {
              "value": "\"h4\" & ComponentClass<any, any>"
            },
            {
              "value": "\"h4\" & FunctionComponent<any>"
            },
            {
              "value": "\"h5\" & ComponentClass<any, any>"
            },
            {
              "value": "\"h5\" & FunctionComponent<any>"
            },
            {
              "value": "\"h6\" & ComponentClass<any, any>"
            },
            {
              "value": "\"h6\" & FunctionComponent<any>"
            },
            {
              "value": "\"head\" & ComponentClass<any, any>"
            },
            {
              "value": "\"head\" & FunctionComponent<any>"
            },
            {
              "value": "\"header\" & ComponentClass<any, any>"
            },
            {
              "value": "\"header\" & FunctionComponent<any>"
            },
            {
              "value": "\"hgroup\" & ComponentClass<any, any>"
            },
            {
              "value": "\"hgroup\" & FunctionComponent<any>"
            },
            {
              "value": "\"hr\" & ComponentClass<any, any>"
            },
            {
              "value": "\"hr\" & FunctionComponent<any>"
            },
            {
              "value": "\"html\" & ComponentClass<any, any>"
            },
            {
              "value": "\"html\" & FunctionComponent<any>"
            },
            {
              "value": "\"i\" & ComponentClass<any, any>"
            },
            {
              "value": "\"i\" & FunctionComponent<any>"
            },
            {
              "value": "\"iframe\" & ComponentClass<any, any>"
            },
            {
              "value": "\"iframe\" & FunctionComponent<any>"
            },
            {
              "value": "\"img\" & ComponentClass<any, any>"
            },
            {
              "value": "\"img\" & FunctionComponent<any>"
            },
            {
              "value": "\"input\" & ComponentClass<any, any>"
            },
            {
              "value": "\"input\" & FunctionComponent<any>"
            },
            {
              "value": "\"ins\" & ComponentClass<any, any>"
            },
            {
              "value": "\"ins\" & FunctionComponent<any>"
            },
            {
              "value": "\"kbd\" & ComponentClass<any, any>"
            },
            {
              "value": "\"kbd\" & FunctionComponent<any>"
            },
            {
              "value": "\"keygen\" & ComponentClass<any, any>"
            },
            {
              "value": "\"keygen\" & FunctionComponent<any>"
            },
            {
              "value": "\"label\" & ComponentClass<any, any>"
            },
            {
              "value": "\"label\" & FunctionComponent<any>"
            },
            {
              "value": "\"legend\" & ComponentClass<any, any>"
            },
            {
              "value": "\"legend\" & FunctionComponent<any>"
            },
            {
              "value": "\"li\" & ComponentClass<any, any>"
            },
            {
              "value": "\"li\" & FunctionComponent<any>"
            },
            {
              "value": "\"link\" & ComponentClass<any, any>"
            },
            {
              "value": "\"link\" & FunctionComponent<any>"
            },
            {
              "value": "\"main\" & ComponentClass<any, any>"
            },
            {
              "value": "\"main\" & FunctionComponent<any>"
            },
            {
              "value": "\"map\" & ComponentClass<any, any>"
            },
            {
              "value": "\"map\" & FunctionComponent<any>"
            },
            {
              "value": "\"mark\" & ComponentClass<any, any>"
            },
            {
              "value": "\"mark\" & FunctionComponent<any>"
            },
            {
              "value": "\"menu\" & ComponentClass<any, any>"
            },
            {
              "value": "\"menu\" & FunctionComponent<any>"
            },
            {
              "value": "\"menuitem\" & ComponentClass<any, any>"
            },
            {
              "value": "\"menuitem\" & FunctionComponent<any>"
            },
            {
              "value": "\"meta\" & ComponentClass<any, any>"
            },
            {
              "value": "\"meta\" & FunctionComponent<any>"
            },
            {
              "value": "\"meter\" & ComponentClass<any, any>"
            },
            {
              "value": "\"meter\" & FunctionComponent<any>"
            },
            {
              "value": "\"nav\" & ComponentClass<any, any>"
            },
            {
              "value": "\"nav\" & FunctionComponent<any>"
            },
            {
              "value": "\"noindex\" & ComponentClass<any, any>"
            },
            {
              "value": "\"noindex\" & FunctionComponent<any>"
            },
            {
              "value": "\"noscript\" & ComponentClass<any, any>"
            },
            {
              "value": "\"noscript\" & FunctionComponent<any>"
            },
            {
              "value": "\"ol\" & ComponentClass<any, any>"
            },
            {
              "value": "\"ol\" & FunctionComponent<any>"
            },
            {
              "value": "\"optgroup\" & ComponentClass<any, any>"
            },
            {
              "value": "\"optgroup\" & FunctionComponent<any>"
            },
            {
              "value": "\"option\" & ComponentClass<any, any>"
            },
            {
              "value": "\"option\" & FunctionComponent<any>"
            },
            {
              "value": "\"output\" & ComponentClass<any, any>"
            },
            {
              "value": "\"output\" & FunctionComponent<any>"
            },
            {
              "value": "\"p\" & ComponentClass<any, any>"
            },
            {
              "value": "\"p\" & FunctionComponent<any>"
            },
            {
              "value": "\"param\" & ComponentClass<any, any>"
            },
            {
              "value": "\"param\" & FunctionComponent<any>"
            },
            {
              "value": "\"picture\" & ComponentClass<any, any>"
            },
            {
              "value": "\"picture\" & FunctionComponent<any>"
            },
            {
              "value": "\"pre\" & ComponentClass<any, any>"
            },
            {
              "value": "\"pre\" & FunctionComponent<any>"
            },
            {
              "value": "\"progress\" & ComponentClass<any, any>"
            },
            {
              "value": "\"progress\" & FunctionComponent<any>"
            },
            {
              "value": "\"q\" & ComponentClass<any, any>"
            },
            {
              "value": "\"q\" & FunctionComponent<any>"
            },
            {
              "value": "\"rp\" & ComponentClass<any, any>"
            },
            {
              "value": "\"rp\" & FunctionComponent<any>"
            },
            {
              "value": "\"rt\" & ComponentClass<any, any>"
            },
            {
              "value": "\"rt\" & FunctionComponent<any>"
            },
            {
              "value": "\"ruby\" & ComponentClass<any, any>"
            },
            {
              "value": "\"ruby\" & FunctionComponent<any>"
            },
            {
              "value": "\"s\" & ComponentClass<any, any>"
            },
            {
              "value": "\"s\" & FunctionComponent<any>"
            },
            {
              "value": "\"samp\" & ComponentClass<any, any>"
            },
            {
              "value": "\"samp\" & FunctionComponent<any>"
            },
            {
              "value": "\"search\" & ComponentClass<any, any>"
            },
            {
              "value": "\"search\" & FunctionComponent<any>"
            },
            {
              "value": "\"slot\" & ComponentClass<any, any>"
            },
            {
              "value": "\"slot\" & FunctionComponent<any>"
            },
            {
              "value": "\"script\" & ComponentClass<any, any>"
            },
            {
              "value": "\"script\" & FunctionComponent<any>"
            },
            {
              "value": "\"section\" & ComponentClass<any, any>"
            },
            {
              "value": "\"section\" & FunctionComponent<any>"
            },
            {
              "value": "\"select\" & ComponentClass<any, any>"
            },
            {
              "value": "\"select\" & FunctionComponent<any>"
            },
            {
              "value": "\"small\" & ComponentClass<any, any>"
            },
            {
              "value": "\"small\" & FunctionComponent<any>"
            },
            {
              "value": "\"source\" & ComponentClass<any, any>"
            },
            {
              "value": "\"source\" & FunctionComponent<any>"
            },
            {
              "value": "\"span\" & ComponentClass<any, any>"
            },
            {
              "value": "\"span\" & FunctionComponent<any>"
            },
            {
              "value": "\"strong\" & ComponentClass<any, any>"
            },
            {
              "value": "\"strong\" & FunctionComponent<any>"
            },
            {
              "value": "\"style\" & ComponentClass<any, any>"
            },
            {
              "value": "\"style\" & FunctionComponent<any>"
            },
            {
              "value": "\"sub\" & ComponentClass<any, any>"
            },
            {
              "value": "\"sub\" & FunctionComponent<any>"
            },
            {
              "value": "\"summary\" & ComponentClass<any, any>"
            },
            {
              "value": "\"summary\" & FunctionComponent<any>"
            },
            {
              "value": "\"sup\" & ComponentClass<any, any>"
            },
            {
              "value": "\"sup\" & FunctionComponent<any>"
            },
            {
              "value": "\"table\" & ComponentClass<any, any>"
            },
            {
              "value": "\"table\" & FunctionComponent<any>"
            },
            {
              "value": "\"template\" & ComponentClass<any, any>"
            },
            {
              "value": "\"template\" & FunctionComponent<any>"
            },
            {
              "value": "\"tbody\" & ComponentClass<any, any>"
            },
            {
              "value": "\"tbody\" & FunctionComponent<any>"
            },
            {
              "value": "\"td\" & ComponentClass<any, any>"
            },
            {
              "value": "\"td\" & FunctionComponent<any>"
            },
            {
              "value": "\"textarea\" & ComponentClass<any, any>"
            },
            {
              "value": "\"textarea\" & FunctionComponent<any>"
            },
            {
              "value": "\"tfoot\" & ComponentClass<any, any>"
            },
            {
              "value": "\"tfoot\" & FunctionComponent<any>"
            },
            {
              "value": "\"th\" & ComponentClass<any, any>"
            },
            {
              "value": "\"th\" & FunctionComponent<any>"
            },
            {
              "value": "\"thead\" & ComponentClass<any, any>"
            },
            {
              "value": "\"thead\" & FunctionComponent<any>"
            },
            {
              "value": "\"time\" & ComponentClass<any, any>"
            },
            {
              "value": "\"time\" & FunctionComponent<any>"
            },
            {
              "value": "\"title\" & ComponentClass<any, any>"
            },
            {
              "value": "\"title\" & FunctionComponent<any>"
            },
            {
              "value": "\"tr\" & ComponentClass<any, any>"
            },
            {
              "value": "\"tr\" & FunctionComponent<any>"
            },
            {
              "value": "\"track\" & ComponentClass<any, any>"
            },
            {
              "value": "\"track\" & FunctionComponent<any>"
            },
            {
              "value": "\"u\" & ComponentClass<any, any>"
            },
            {
              "value": "\"u\" & FunctionComponent<any>"
            },
            {
              "value": "\"ul\" & ComponentClass<any, any>"
            },
            {
              "value": "\"ul\" & FunctionComponent<any>"
            },
            {
              "value": "\"var\" & ComponentClass<any, any>"
            },
            {
              "value": "\"var\" & FunctionComponent<any>"
            },
            {
              "value": "\"video\" & ComponentClass<any, any>"
            },
            {
              "value": "\"video\" & FunctionComponent<any>"
            },
            {
              "value": "\"wbr\" & ComponentClass<any, any>"
            },
            {
              "value": "\"wbr\" & FunctionComponent<any>"
            },
            {
              "value": "\"webview\" & ComponentClass<any, any>"
            },
            {
              "value": "\"webview\" & FunctionComponent<any>"
            },
            {
              "value": "\"svg\" & ComponentClass<any, any>"
            },
            {
              "value": "\"svg\" & FunctionComponent<any>"
            },
            {
              "value": "\"animate\" & ComponentClass<any, any>"
            },
            {
              "value": "\"animate\" & FunctionComponent<any>"
            },
            {
              "value": "\"animateMotion\" & ComponentClass<any, any>"
            },
            {
              "value": "\"animateMotion\" & FunctionComponent<any>"
            },
            {
              "value": "\"animateTransform\" & ComponentClass<any, any>"
            },
            {
              "value": "\"animateTransform\" & FunctionComponent<any>"
            },
            {
              "value": "\"circle\" & ComponentClass<any, any>"
            },
            {
              "value": "\"circle\" & FunctionComponent<any>"
            },
            {
              "value": "\"clipPath\" & ComponentClass<any, any>"
            },
            {
              "value": "\"clipPath\" & FunctionComponent<any>"
            },
            {
              "value": "\"defs\" & ComponentClass<any, any>"
            },
            {
              "value": "\"defs\" & FunctionComponent<any>"
            },
            {
              "value": "\"desc\" & ComponentClass<any, any>"
            },
            {
              "value": "\"desc\" & FunctionComponent<any>"
            },
            {
              "value": "\"ellipse\" & ComponentClass<any, any>"
            },
            {
              "value": "\"ellipse\" & FunctionComponent<any>"
            },
            {
              "value": "\"feBlend\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feBlend\" & FunctionComponent<any>"
            },
            {
              "value": "\"feColorMatrix\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feColorMatrix\" & FunctionComponent<any>"
            },
            {
              "value": "\"feComponentTransfer\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feComponentTransfer\" & FunctionComponent<any>"
            },
            {
              "value": "\"feComposite\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feComposite\" & FunctionComponent<any>"
            },
            {
              "value": "\"feConvolveMatrix\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feConvolveMatrix\" & FunctionComponent<any>"
            },
            {
              "value": "\"feDiffuseLighting\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feDiffuseLighting\" & FunctionComponent<any>"
            },
            {
              "value": "\"feDisplacementMap\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feDisplacementMap\" & FunctionComponent<any>"
            },
            {
              "value": "\"feDistantLight\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feDistantLight\" & FunctionComponent<any>"
            },
            {
              "value": "\"feDropShadow\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feDropShadow\" & FunctionComponent<any>"
            },
            {
              "value": "\"feFlood\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feFlood\" & FunctionComponent<any>"
            },
            {
              "value": "\"feFuncA\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feFuncA\" & FunctionComponent<any>"
            },
            {
              "value": "\"feFuncB\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feFuncB\" & FunctionComponent<any>"
            },
            {
              "value": "\"feFuncG\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feFuncG\" & FunctionComponent<any>"
            },
            {
              "value": "\"feFuncR\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feFuncR\" & FunctionComponent<any>"
            },
            {
              "value": "\"feGaussianBlur\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feGaussianBlur\" & FunctionComponent<any>"
            },
            {
              "value": "\"feImage\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feImage\" & FunctionComponent<any>"
            },
            {
              "value": "\"feMerge\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feMerge\" & FunctionComponent<any>"
            },
            {
              "value": "\"feMergeNode\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feMergeNode\" & FunctionComponent<any>"
            },
            {
              "value": "\"feMorphology\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feMorphology\" & FunctionComponent<any>"
            },
            {
              "value": "\"feOffset\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feOffset\" & FunctionComponent<any>"
            },
            {
              "value": "\"fePointLight\" & ComponentClass<any, any>"
            },
            {
              "value": "\"fePointLight\" & FunctionComponent<any>"
            },
            {
              "value": "\"feSpecularLighting\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feSpecularLighting\" & FunctionComponent<any>"
            },
            {
              "value": "\"feSpotLight\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feSpotLight\" & FunctionComponent<any>"
            },
            {
              "value": "\"feTile\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feTile\" & FunctionComponent<any>"
            },
            {
              "value": "\"feTurbulence\" & ComponentClass<any, any>"
            },
            {
              "value": "\"feTurbulence\" & FunctionComponent<any>"
            },
            {
              "value": "\"filter\" & ComponentClass<any, any>"
            },
            {
              "value": "\"filter\" & FunctionComponent<any>"
            },
            {
              "value": "\"foreignObject\" & ComponentClass<any, any>"
            },
            {
              "value": "\"foreignObject\" & FunctionComponent<any>"
            },
            {
              "value": "\"g\" & ComponentClass<any, any>"
            },
            {
              "value": "\"g\" & FunctionComponent<any>"
            },
            {
              "value": "\"image\" & ComponentClass<any, any>"
            },
            {
              "value": "\"image\" & FunctionComponent<any>"
            },
            {
              "value": "\"line\" & ComponentClass<any, any>"
            },
            {
              "value": "\"line\" & FunctionComponent<any>"
            },
            {
              "value": "\"linearGradient\" & ComponentClass<any, any>"
            },
            {
              "value": "\"linearGradient\" & FunctionComponent<any>"
            },
            {
              "value": "\"marker\" & ComponentClass<any, any>"
            },
            {
              "value": "\"marker\" & FunctionComponent<any>"
            },
            {
              "value": "\"mask\" & ComponentClass<any, any>"
            },
            {
              "value": "\"mask\" & FunctionComponent<any>"
            },
            {
              "value": "\"metadata\" & ComponentClass<any, any>"
            },
            {
              "value": "\"metadata\" & FunctionComponent<any>"
            },
            {
              "value": "\"mpath\" & ComponentClass<any, any>"
            },
            {
              "value": "\"mpath\" & FunctionComponent<any>"
            },
            {
              "value": "\"path\" & ComponentClass<any, any>"
            },
            {
              "value": "\"path\" & FunctionComponent<any>"
            },
            {
              "value": "\"pattern\" & ComponentClass<any, any>"
            },
            {
              "value": "\"pattern\" & FunctionComponent<any>"
            },
            {
              "value": "\"polygon\" & ComponentClass<any, any>"
            },
            {
              "value": "\"polygon\" & FunctionComponent<any>"
            },
            {
              "value": "\"polyline\" & ComponentClass<any, any>"
            },
            {
              "value": "\"polyline\" & FunctionComponent<any>"
            },
            {
              "value": "\"radialGradient\" & ComponentClass<any, any>"
            },
            {
              "value": "\"radialGradient\" & FunctionComponent<any>"
            },
            {
              "value": "\"rect\" & ComponentClass<any, any>"
            },
            {
              "value": "\"rect\" & FunctionComponent<any>"
            },
            {
              "value": "\"set\" & ComponentClass<any, any>"
            },
            {
              "value": "\"set\" & FunctionComponent<any>"
            },
            {
              "value": "\"stop\" & ComponentClass<any, any>"
            },
            {
              "value": "\"stop\" & FunctionComponent<any>"
            },
            {
              "value": "\"switch\" & ComponentClass<any, any>"
            },
            {
              "value": "\"switch\" & FunctionComponent<any>"
            },
            {
              "value": "\"text\" & ComponentClass<any, any>"
            },
            {
              "value": "\"text\" & FunctionComponent<any>"
            },
            {
              "value": "\"textPath\" & ComponentClass<any, any>"
            },
            {
              "value": "\"textPath\" & FunctionComponent<any>"
            },
            {
              "value": "\"tspan\" & ComponentClass<any, any>"
            },
            {
              "value": "\"tspan\" & FunctionComponent<any>"
            },
            {
              "value": "\"use\" & ComponentClass<any, any>"
            },
            {
              "value": "\"use\" & FunctionComponent<any>"
            },
            {
              "value": "\"view\" & ComponentClass<any, any>"
            },
            {
              "value": "\"view\" & FunctionComponent<any>"
            },
            {
              "value": "\"relative-time\" & ComponentClass<any, any>"
            },
            {
              "value": "\"relative-time\" & FunctionComponent<any>"
            },
            {
              "value": "\"tab-container\" & ComponentClass<any, any>"
            },
            {
              "value": "\"tab-container\" & FunctionComponent<any>"
            },
            {
              "value": "ComponentClass<any, any> & ComponentClass<unknown, any>"
            },
            {
              "value": "ComponentClass<any, any> & FunctionComponent<unknown>"
            },
            {
              "value": "FunctionComponent<any> & ComponentClass<unknown, any>"
            },
            {
              "value": "FunctionComponent<any> & FunctionComponent<unknown>"
            },
            {
              "value": "ComponentClass<any, any> & \"symbol\""
            },
            {
              "value": "ComponentClass<any, any> & \"object\""
            },
            {
              "value": "ComponentClass<any, any> & \"a\""
            },
            {
              "value": "ComponentClass<any, any> & \"abbr\""
            },
            {
              "value": "ComponentClass<any, any> & \"address\""
            },
            {
              "value": "ComponentClass<any, any> & \"area\""
            },
            {
              "value": "ComponentClass<any, any> & \"article\""
            },
            {
              "value": "ComponentClass<any, any> & \"aside\""
            },
            {
              "value": "ComponentClass<any, any> & \"audio\""
            },
            {
              "value": "ComponentClass<any, any> & \"b\""
            },
            {
              "value": "ComponentClass<any, any> & \"base\""
            },
            {
              "value": "ComponentClass<any, any> & \"bdi\""
            },
            {
              "value": "ComponentClass<any, any> & \"bdo\""
            },
            {
              "value": "ComponentClass<any, any> & \"big\""
            },
            {
              "value": "ComponentClass<any, any> & \"blockquote\""
            },
            {
              "value": "ComponentClass<any, any> & \"body\""
            },
            {
              "value": "ComponentClass<any, any> & \"br\""
            },
            {
              "value": "ComponentClass<any, any> & \"button\""
            },
            {
              "value": "ComponentClass<any, any> & \"canvas\""
            },
            {
              "value": "ComponentClass<any, any> & \"caption\""
            },
            {
              "value": "ComponentClass<any, any> & \"center\""
            },
            {
              "value": "ComponentClass<any, any> & \"cite\""
            },
            {
              "value": "ComponentClass<any, any> & \"code\""
            },
            {
              "value": "ComponentClass<any, any> & \"col\""
            },
            {
              "value": "ComponentClass<any, any> & \"colgroup\""
            },
            {
              "value": "ComponentClass<any, any> & \"data\""
            },
            {
              "value": "ComponentClass<any, any> & \"datalist\""
            },
            {
              "value": "ComponentClass<any, any> & \"dd\""
            },
            {
              "value": "ComponentClass<any, any> & \"del\""
            },
            {
              "value": "ComponentClass<any, any> & \"details\""
            },
            {
              "value": "ComponentClass<any, any> & \"dfn\""
            },
            {
              "value": "ComponentClass<any, any> & \"dialog\""
            },
            {
              "value": "ComponentClass<any, any> & \"div\""
            },
            {
              "value": "ComponentClass<any, any> & \"dl\""
            },
            {
              "value": "ComponentClass<any, any> & \"dt\""
            },
            {
              "value": "ComponentClass<any, any> & \"em\""
            },
            {
              "value": "ComponentClass<any, any> & \"embed\""
            },
            {
              "value": "ComponentClass<any, any> & \"fieldset\""
            },
            {
              "value": "ComponentClass<any, any> & \"figcaption\""
            },
            {
              "value": "ComponentClass<any, any> & \"figure\""
            },
            {
              "value": "ComponentClass<any, any> & \"footer\""
            },
            {
              "value": "ComponentClass<any, any> & \"form\""
            },
            {
              "value": "ComponentClass<any, any> & \"h1\""
            },
            {
              "value": "ComponentClass<any, any> & \"h2\""
            },
            {
              "value": "ComponentClass<any, any> & \"h3\""
            },
            {
              "value": "ComponentClass<any, any> & \"h4\""
            },
            {
              "value": "ComponentClass<any, any> & \"h5\""
            },
            {
              "value": "ComponentClass<any, any> & \"h6\""
            },
            {
              "value": "ComponentClass<any, any> & \"head\""
            },
            {
              "value": "ComponentClass<any, any> & \"header\""
            },
            {
              "value": "ComponentClass<any, any> & \"hgroup\""
            },
            {
              "value": "ComponentClass<any, any> & \"hr\""
            },
            {
              "value": "ComponentClass<any, any> & \"html\""
            },
            {
              "value": "ComponentClass<any, any> & \"i\""
            },
            {
              "value": "ComponentClass<any, any> & \"iframe\""
            },
            {
              "value": "ComponentClass<any, any> & \"img\""
            },
            {
              "value": "ComponentClass<any, any> & \"input\""
            },
            {
              "value": "ComponentClass<any, any> & \"ins\""
            },
            {
              "value": "ComponentClass<any, any> & \"kbd\""
            },
            {
              "value": "ComponentClass<any, any> & \"keygen\""
            },
            {
              "value": "ComponentClass<any, any> & \"label\""
            },
            {
              "value": "ComponentClass<any, any> & \"legend\""
            },
            {
              "value": "ComponentClass<any, any> & \"li\""
            },
            {
              "value": "ComponentClass<any, any> & \"link\""
            },
            {
              "value": "ComponentClass<any, any> & \"main\""
            },
            {
              "value": "ComponentClass<any, any> & \"map\""
            },
            {
              "value": "ComponentClass<any, any> & \"mark\""
            },
            {
              "value": "ComponentClass<any, any> & \"menu\""
            },
            {
              "value": "ComponentClass<any, any> & \"menuitem\""
            },
            {
              "value": "ComponentClass<any, any> & \"meta\""
            },
            {
              "value": "ComponentClass<any, any> & \"meter\""
            },
            {
              "value": "ComponentClass<any, any> & \"nav\""
            },
            {
              "value": "ComponentClass<any, any> & \"noindex\""
            },
            {
              "value": "ComponentClass<any, any> & \"noscript\""
            },
            {
              "value": "ComponentClass<any, any> & \"ol\""
            },
            {
              "value": "ComponentClass<any, any> & \"optgroup\""
            },
            {
              "value": "ComponentClass<any, any> & \"option\""
            },
            {
              "value": "ComponentClass<any, any> & \"output\""
            },
            {
              "value": "ComponentClass<any, any> & \"p\""
            },
            {
              "value": "ComponentClass<any, any> & \"param\""
            },
            {
              "value": "ComponentClass<any, any> & \"picture\""
            },
            {
              "value": "ComponentClass<any, any> & \"pre\""
            },
            {
              "value": "ComponentClass<any, any> & \"progress\""
            },
            {
              "value": "ComponentClass<any, any> & \"q\""
            },
            {
              "value": "ComponentClass<any, any> & \"rp\""
            },
            {
              "value": "ComponentClass<any, any> & \"rt\""
            },
            {
              "value": "ComponentClass<any, any> & \"ruby\""
            },
            {
              "value": "ComponentClass<any, any> & \"s\""
            },
            {
              "value": "ComponentClass<any, any> & \"samp\""
            },
            {
              "value": "ComponentClass<any, any> & \"search\""
            },
            {
              "value": "ComponentClass<any, any> & \"slot\""
            },
            {
              "value": "ComponentClass<any, any> & \"script\""
            },
            {
              "value": "ComponentClass<any, any> & \"section\""
            },
            {
              "value": "ComponentClass<any, any> & \"select\""
            },
            {
              "value": "ComponentClass<any, any> & \"small\""
            },
            {
              "value": "ComponentClass<any, any> & \"source\""
            },
            {
              "value": "ComponentClass<any, any> & \"span\""
            },
            {
              "value": "ComponentClass<any, any> & \"strong\""
            },
            {
              "value": "ComponentClass<any, any> & \"style\""
            },
            {
              "value": "ComponentClass<any, any> & \"sub\""
            },
            {
              "value": "ComponentClass<any, any> & \"summary\""
            },
            {
              "value": "ComponentClass<any, any> & \"sup\""
            },
            {
              "value": "ComponentClass<any, any> & \"table\""
            },
            {
              "value": "ComponentClass<any, any> & \"template\""
            },
            {
              "value": "ComponentClass<any, any> & \"tbody\""
            },
            {
              "value": "ComponentClass<any, any> & \"td\""
            },
            {
              "value": "ComponentClass<any, any> & \"textarea\""
            },
            {
              "value": "ComponentClass<any, any> & \"tfoot\""
            },
            {
              "value": "ComponentClass<any, any> & \"th\""
            },
            {
              "value": "ComponentClass<any, any> & \"thead\""
            },
            {
              "value": "ComponentClass<any, any> & \"time\""
            },
            {
              "value": "ComponentClass<any, any> & \"title\""
            },
            {
              "value": "ComponentClass<any, any> & \"tr\""
            },
            {
              "value": "ComponentClass<any, any> & \"track\""
            },
            {
              "value": "ComponentClass<any, any> & \"u\""
            },
            {
              "value": "ComponentClass<any, any> & \"ul\""
            },
            {
              "value": "ComponentClass<any, any> & \"var\""
            },
            {
              "value": "ComponentClass<any, any> & \"video\""
            },
            {
              "value": "ComponentClass<any, any> & \"wbr\""
            },
            {
              "value": "ComponentClass<any, any> & \"webview\""
            },
            {
              "value": "ComponentClass<any, any> & \"svg\""
            },
            {
              "value": "ComponentClass<any, any> & \"animate\""
            },
            {
              "value": "ComponentClass<any, any> & \"animateMotion\""
            },
            {
              "value": "ComponentClass<any, any> & \"animateTransform\""
            },
            {
              "value": "ComponentClass<any, any> & \"circle\""
            },
            {
              "value": "ComponentClass<any, any> & \"clipPath\""
            },
            {
              "value": "ComponentClass<any, any> & \"defs\""
            },
            {
              "value": "ComponentClass<any, any> & \"desc\""
            },
            {
              "value": "ComponentClass<any, any> & \"ellipse\""
            },
            {
              "value": "ComponentClass<any, any> & \"feBlend\""
            },
            {
              "value": "ComponentClass<any, any> & \"feColorMatrix\""
            },
            {
              "value": "ComponentClass<any, any> & \"feComponentTransfer\""
            },
            {
              "value": "ComponentClass<any, any> & \"feComposite\""
            },
            {
              "value": "ComponentClass<any, any> & \"feConvolveMatrix\""
            },
            {
              "value": "ComponentClass<any, any> & \"feDiffuseLighting\""
            },
            {
              "value": "ComponentClass<any, any> & \"feDisplacementMap\""
            },
            {
              "value": "ComponentClass<any, any> & \"feDistantLight\""
            },
            {
              "value": "ComponentClass<any, any> & \"feDropShadow\""
            },
            {
              "value": "ComponentClass<any, any> & \"feFlood\""
            },
            {
              "value": "ComponentClass<any, any> & \"feFuncA\""
            },
            {
              "value": "ComponentClass<any, any> & \"feFuncB\""
            },
            {
              "value": "ComponentClass<any, any> & \"feFuncG\""
            },
            {
              "value": "ComponentClass<any, any> & \"feFuncR\""
            },
            {
              "value": "ComponentClass<any, any> & \"feGaussianBlur\""
            },
            {
              "value": "ComponentClass<any, any> & \"feImage\""
            },
            {
              "value": "ComponentClass<any, any> & \"feMerge\""
            },
            {
              "value": "ComponentClass<any, any> & \"feMergeNode\""
            },
            {
              "value": "ComponentClass<any, any> & \"feMorphology\""
            },
            {
              "value": "ComponentClass<any, any> & \"feOffset\""
            },
            {
              "value": "ComponentClass<any, any> & \"fePointLight\""
            },
            {
              "value": "ComponentClass<any, any> & \"feSpecularLighting\""
            },
            {
              "value": "ComponentClass<any, any> & \"feSpotLight\""
            },
            {
              "value": "ComponentClass<any, any> & \"feTile\""
            },
            {
              "value": "ComponentClass<any, any> & \"feTurbulence\""
            },
            {
              "value": "ComponentClass<any, any> & \"filter\""
            },
            {
              "value": "ComponentClass<any, any> & \"foreignObject\""
            },
            {
              "value": "ComponentClass<any, any> & \"g\""
            },
            {
              "value": "ComponentClass<any, any> & \"image\""
            },
            {
              "value": "ComponentClass<any, any> & \"line\""
            },
            {
              "value": "ComponentClass<any, any> & \"linearGradient\""
            },
            {
              "value": "ComponentClass<any, any> & \"marker\""
            },
            {
              "value": "ComponentClass<any, any> & \"mask\""
            },
            {
              "value": "ComponentClass<any, any> & \"metadata\""
            },
            {
              "value": "ComponentClass<any, any> & \"mpath\""
            },
            {
              "value": "ComponentClass<any, any> & \"path\""
            },
            {
              "value": "ComponentClass<any, any> & \"pattern\""
            },
            {
              "value": "ComponentClass<any, any> & \"polygon\""
            },
            {
              "value": "ComponentClass<any, any> & \"polyline\""
            },
            {
              "value": "ComponentClass<any, any> & \"radialGradient\""
            },
            {
              "value": "ComponentClass<any, any> & \"rect\""
            },
            {
              "value": "ComponentClass<any, any> & \"set\""
            },
            {
              "value": "ComponentClass<any, any> & \"stop\""
            },
            {
              "value": "ComponentClass<any, any> & \"switch\""
            },
            {
              "value": "ComponentClass<any, any> & \"text\""
            },
            {
              "value": "ComponentClass<any, any> & \"textPath\""
            },
            {
              "value": "ComponentClass<any, any> & \"tspan\""
            },
            {
              "value": "ComponentClass<any, any> & \"use\""
            },
            {
              "value": "ComponentClass<any, any> & \"view\""
            },
            {
              "value": "ComponentClass<any, any> & \"relative-time\""
            },
            {
              "value": "ComponentClass<any, any> & \"tab-container\""
            },
            {
              "value": "FunctionComponent<any> & \"symbol\""
            },
            {
              "value": "FunctionComponent<any> & \"object\""
            },
            {
              "value": "FunctionComponent<any> & \"a\""
            },
            {
              "value": "FunctionComponent<any> & \"abbr\""
            },
            {
              "value": "FunctionComponent<any> & \"address\""
            },
            {
              "value": "FunctionComponent<any> & \"area\""
            },
            {
              "value": "FunctionComponent<any> & \"article\""
            },
            {
              "value": "FunctionComponent<any> & \"aside\""
            },
            {
              "value": "FunctionComponent<any> & \"audio\""
            },
            {
              "value": "FunctionComponent<any> & \"b\""
            },
            {
              "value": "FunctionComponent<any> & \"base\""
            },
            {
              "value": "FunctionComponent<any> & \"bdi\""
            },
            {
              "value": "FunctionComponent<any> & \"bdo\""
            },
            {
              "value": "FunctionComponent<any> & \"big\""
            },
            {
              "value": "FunctionComponent<any> & \"blockquote\""
            },
            {
              "value": "FunctionComponent<any> & \"body\""
            },
            {
              "value": "FunctionComponent<any> & \"br\""
            },
            {
              "value": "FunctionComponent<any> & \"button\""
            },
            {
              "value": "FunctionComponent<any> & \"canvas\""
            },
            {
              "value": "FunctionComponent<any> & \"caption\""
            },
            {
              "value": "FunctionComponent<any> & \"center\""
            },
            {
              "value": "FunctionComponent<any> & \"cite\""
            },
            {
              "value": "FunctionComponent<any> & \"code\""
            },
            {
              "value": "FunctionComponent<any> & \"col\""
            },
            {
              "value": "FunctionComponent<any> & \"colgroup\""
            },
            {
              "value": "FunctionComponent<any> & \"data\""
            },
            {
              "value": "FunctionComponent<any> & \"datalist\""
            },
            {
              "value": "FunctionComponent<any> & \"dd\""
            },
            {
              "value": "FunctionComponent<any> & \"del\""
            },
            {
              "value": "FunctionComponent<any> & \"details\""
            },
            {
              "value": "FunctionComponent<any> & \"dfn\""
            },
            {
              "value": "FunctionComponent<any> & \"dialog\""
            },
            {
              "value": "FunctionComponent<any> & \"div\""
            },
            {
              "value": "FunctionComponent<any> & \"dl\""
            },
            {
              "value": "FunctionComponent<any> & \"dt\""
            },
            {
              "value": "FunctionComponent<any> & \"em\""
            },
            {
              "value": "FunctionComponent<any> & \"embed\""
            },
            {
              "value": "FunctionComponent<any> & \"fieldset\""
            },
            {
              "value": "FunctionComponent<any> & \"figcaption\""
            },
            {
              "value": "FunctionComponent<any> & \"figure\""
            },
            {
              "value": "FunctionComponent<any> & \"footer\""
            },
            {
              "value": "FunctionComponent<any> & \"form\""
            },
            {
              "value": "FunctionComponent<any> & \"h1\""
            },
            {
              "value": "FunctionComponent<any> & \"h2\""
            },
            {
              "value": "FunctionComponent<any> & \"h3\""
            },
            {
              "value": "FunctionComponent<any> & \"h4\""
            },
            {
              "value": "FunctionComponent<any> & \"h5\""
            },
            {
              "value": "FunctionComponent<any> & \"h6\""
            },
            {
              "value": "FunctionComponent<any> & \"head\""
            },
            {
              "value": "FunctionComponent<any> & \"header\""
            },
            {
              "value": "FunctionComponent<any> & \"hgroup\""
            },
            {
              "value": "FunctionComponent<any> & \"hr\""
            },
            {
              "value": "FunctionComponent<any> & \"html\""
            },
            {
              "value": "FunctionComponent<any> & \"i\""
            },
            {
              "value": "FunctionComponent<any> & \"iframe\""
            },
            {
              "value": "FunctionComponent<any> & \"img\""
            },
            {
              "value": "FunctionComponent<any> & \"input\""
            },
            {
              "value": "FunctionComponent<any> & \"ins\""
            },
            {
              "value": "FunctionComponent<any> & \"kbd\""
            },
            {
              "value": "FunctionComponent<any> & \"keygen\""
            },
            {
              "value": "FunctionComponent<any> & \"label\""
            },
            {
              "value": "FunctionComponent<any> & \"legend\""
            },
            {
              "value": "FunctionComponent<any> & \"li\""
            },
            {
              "value": "FunctionComponent<any> & \"link\""
            },
            {
              "value": "FunctionComponent<any> & \"main\""
            },
            {
              "value": "FunctionComponent<any> & \"map\""
            },
            {
              "value": "FunctionComponent<any> & \"mark\""
            },
            {
              "value": "FunctionComponent<any> & \"menu\""
            },
            {
              "value": "FunctionComponent<any> & \"menuitem\""
            },
            {
              "value": "FunctionComponent<any> & \"meta\""
            },
            {
              "value": "FunctionComponent<any> & \"meter\""
            },
            {
              "value": "FunctionComponent<any> & \"nav\""
            },
            {
              "value": "FunctionComponent<any> & \"noindex\""
            },
            {
              "value": "FunctionComponent<any> & \"noscript\""
            },
            {
              "value": "FunctionComponent<any> & \"ol\""
            },
            {
              "value": "FunctionComponent<any> & \"optgroup\""
            },
            {
              "value": "FunctionComponent<any> & \"option\""
            },
            {
              "value": "FunctionComponent<any> & \"output\""
            },
            {
              "value": "FunctionComponent<any> & \"p\""
            },
            {
              "value": "FunctionComponent<any> & \"param\""
            },
            {
              "value": "FunctionComponent<any> & \"picture\""
            },
            {
              "value": "FunctionComponent<any> & \"pre\""
            },
            {
              "value": "FunctionComponent<any> & \"progress\""
            },
            {
              "value": "FunctionComponent<any> & \"q\""
            },
            {
              "value": "FunctionComponent<any> & \"rp\""
            },
            {
              "value": "FunctionComponent<any> & \"rt\""
            },
            {
              "value": "FunctionComponent<any> & \"ruby\""
            },
            {
              "value": "FunctionComponent<any> & \"s\""
            },
            {
              "value": "FunctionComponent<any> & \"samp\""
            },
            {
              "value": "FunctionComponent<any> & \"search\""
            },
            {
              "value": "FunctionComponent<any> & \"slot\""
            },
            {
              "value": "FunctionComponent<any> & \"script\""
            },
            {
              "value": "FunctionComponent<any> & \"section\""
            },
            {
              "value": "FunctionComponent<any> & \"select\""
            },
            {
              "value": "FunctionComponent<any> & \"small\""
            },
            {
              "value": "FunctionComponent<any> & \"source\""
            },
            {
              "value": "FunctionComponent<any> & \"span\""
            },
            {
              "value": "FunctionComponent<any> & \"strong\""
            },
            {
              "value": "FunctionComponent<any> & \"style\""
            },
            {
              "value": "FunctionComponent<any> & \"sub\""
            },
            {
              "value": "FunctionComponent<any> & \"summary\""
            },
            {
              "value": "FunctionComponent<any> & \"sup\""
            },
            {
              "value": "FunctionComponent<any> & \"table\""
            },
            {
              "value": "FunctionComponent<any> & \"template\""
            },
            {
              "value": "FunctionComponent<any> & \"tbody\""
            },
            {
              "value": "FunctionComponent<any> & \"td\""
            },
            {
              "value": "FunctionComponent<any> & \"textarea\""
            },
            {
              "value": "FunctionComponent<any> & \"tfoot\""
            },
            {
              "value": "FunctionComponent<any> & \"th\""
            },
            {
              "value": "FunctionComponent<any> & \"thead\""
            },
            {
              "value": "FunctionComponent<any> & \"time\""
            },
            {
              "value": "FunctionComponent<any> & \"title\""
            },
            {
              "value": "FunctionComponent<any> & \"tr\""
            },
            {
              "value": "FunctionComponent<any> & \"track\""
            },
            {
              "value": "FunctionComponent<any> & \"u\""
            },
            {
              "value": "FunctionComponent<any> & \"ul\""
            },
            {
              "value": "FunctionComponent<any> & \"var\""
            },
            {
              "value": "FunctionComponent<any> & \"video\""
            },
            {
              "value": "FunctionComponent<any> & \"wbr\""
            },
            {
              "value": "FunctionComponent<any> & \"webview\""
            },
            {
              "value": "FunctionComponent<any> & \"svg\""
            },
            {
              "value": "FunctionComponent<any> & \"animate\""
            },
            {
              "value": "FunctionComponent<any> & \"animateMotion\""
            },
            {
              "value": "FunctionComponent<any> & \"animateTransform\""
            },
            {
              "value": "FunctionComponent<any> & \"circle\""
            },
            {
              "value": "FunctionComponent<any> & \"clipPath\""
            },
            {
              "value": "FunctionComponent<any> & \"defs\""
            },
            {
              "value": "FunctionComponent<any> & \"desc\""
            },
            {
              "value": "FunctionComponent<any> & \"ellipse\""
            },
            {
              "value": "FunctionComponent<any> & \"feBlend\""
            },
            {
              "value": "FunctionComponent<any> & \"feColorMatrix\""
            },
            {
              "value": "FunctionComponent<any> & \"feComponentTransfer\""
            },
            {
              "value": "FunctionComponent<any> & \"feComposite\""
            },
            {
              "value": "FunctionComponent<any> & \"feConvolveMatrix\""
            },
            {
              "value": "FunctionComponent<any> & \"feDiffuseLighting\""
            },
            {
              "value": "FunctionComponent<any> & \"feDisplacementMap\""
            },
            {
              "value": "FunctionComponent<any> & \"feDistantLight\""
            },
            {
              "value": "FunctionComponent<any> & \"feDropShadow\""
            },
            {
              "value": "FunctionComponent<any> & \"feFlood\""
            },
            {
              "value": "FunctionComponent<any> & \"feFuncA\""
            },
            {
              "value": "FunctionComponent<any> & \"feFuncB\""
            },
            {
              "value": "FunctionComponent<any> & \"feFuncG\""
            },
            {
              "value": "FunctionComponent<any> & \"feFuncR\""
            },
            {
              "value": "FunctionComponent<any> & \"feGaussianBlur\""
            },
            {
              "value": "FunctionComponent<any> & \"feImage\""
            },
            {
              "value": "FunctionComponent<any> & \"feMerge\""
            },
            {
              "value": "FunctionComponent<any> & \"feMergeNode\""
            },
            {
              "value": "FunctionComponent<any> & \"feMorphology\""
            },
            {
              "value": "FunctionComponent<any> & \"feOffset\""
            },
            {
              "value": "FunctionComponent<any> & \"fePointLight\""
            },
            {
              "value": "FunctionComponent<any> & \"feSpecularLighting\""
            },
            {
              "value": "FunctionComponent<any> & \"feSpotLight\""
            },
            {
              "value": "FunctionComponent<any> & \"feTile\""
            },
            {
              "value": "FunctionComponent<any> & \"feTurbulence\""
            },
            {
              "value": "FunctionComponent<any> & \"filter\""
            },
            {
              "value": "FunctionComponent<any> & \"foreignObject\""
            },
            {
              "value": "FunctionComponent<any> & \"g\""
            },
            {
              "value": "FunctionComponent<any> & \"image\""
            },
            {
              "value": "FunctionComponent<any> & \"line\""
            },
            {
              "value": "FunctionComponent<any> & \"linearGradient\""
            },
            {
              "value": "FunctionComponent<any> & \"marker\""
            },
            {
              "value": "FunctionComponent<any> & \"mask\""
            },
            {
              "value": "FunctionComponent<any> & \"metadata\""
            },
            {
              "value": "FunctionComponent<any> & \"mpath\""
            },
            {
              "value": "FunctionComponent<any> & \"path\""
            },
            {
              "value": "FunctionComponent<any> & \"pattern\""
            },
            {
              "value": "FunctionComponent<any> & \"polygon\""
            },
            {
              "value": "FunctionComponent<any> & \"polyline\""
            },
            {
              "value": "FunctionComponent<any> & \"radialGradient\""
            },
            {
              "value": "FunctionComponent<any> & \"rect\""
            },
            {
              "value": "FunctionComponent<any> & \"set\""
            },
            {
              "value": "FunctionComponent<any> & \"stop\""
            },
            {
              "value": "FunctionComponent<any> & \"switch\""
            },
            {
              "value": "FunctionComponent<any> & \"text\""
            },
            {
              "value": "FunctionComponent<any> & \"textPath\""
            },
            {
              "value": "FunctionComponent<any> & \"tspan\""
            },
            {
              "value": "FunctionComponent<any> & \"use\""
            },
            {
              "value": "FunctionComponent<any> & \"view\""
            },
            {
              "value": "FunctionComponent<any> & \"relative-time\""
            },
            {
              "value": "FunctionComponent<any> & \"tab-container\""
            },
            {
              "value": "\"symbol\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"symbol\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"object\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"object\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"abbr\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"abbr\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"address\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"address\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"area\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"area\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"article\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"article\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"aside\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"aside\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"audio\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"audio\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"b\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"b\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"base\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"base\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"bdi\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"bdi\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"bdo\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"bdo\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"big\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"big\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"blockquote\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"blockquote\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"body\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"body\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"br\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"br\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"canvas\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"canvas\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"caption\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"caption\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"center\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"center\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"cite\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"cite\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"code\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"code\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"col\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"col\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"colgroup\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"colgroup\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"data\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"data\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"datalist\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"datalist\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"dd\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"dd\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"del\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"del\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"details\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"details\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"dfn\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"dfn\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"dialog\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"dialog\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"div\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"div\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"dl\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"dl\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"dt\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"dt\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"em\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"em\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"embed\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"embed\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"fieldset\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"fieldset\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"figcaption\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"figcaption\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"figure\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"figure\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"footer\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"footer\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"form\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"form\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"head\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"head\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"header\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"header\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"hgroup\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"hgroup\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"hr\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"hr\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"html\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"html\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"i\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"i\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"iframe\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"iframe\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"img\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"img\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"input\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"input\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"ins\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"ins\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"kbd\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"kbd\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"keygen\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"keygen\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"label\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"label\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"legend\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"legend\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"li\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"li\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"link\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"link\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"main\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"main\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"map\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"map\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"mark\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"mark\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"menu\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"menu\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"menuitem\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"menuitem\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"meta\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"meta\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"meter\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"meter\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"nav\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"nav\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"noindex\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"noindex\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"noscript\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"noscript\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"ol\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"ol\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"optgroup\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"optgroup\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"option\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"option\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"output\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"output\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"p\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"p\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"param\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"param\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"picture\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"picture\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"pre\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"pre\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"progress\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"progress\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"q\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"q\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"rp\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"rp\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"rt\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"rt\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"ruby\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"ruby\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"s\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"s\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"samp\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"samp\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"search\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"search\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"slot\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"slot\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"script\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"script\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"section\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"section\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"select\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"select\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"small\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"small\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"source\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"source\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"span\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"span\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"strong\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"strong\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"style\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"style\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"sub\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"sub\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"summary\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"summary\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"sup\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"sup\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"table\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"table\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"template\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"template\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"tbody\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"tbody\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"td\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"td\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"textarea\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"textarea\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"tfoot\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"tfoot\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"th\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"th\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"thead\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"thead\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"time\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"time\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"title\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"title\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"tr\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"tr\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"track\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"track\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"u\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"u\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"ul\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"ul\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"var\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"var\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"video\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"video\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"wbr\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"wbr\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"webview\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"webview\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"svg\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"svg\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"animate\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"animate\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"animateMotion\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"animateMotion\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"animateTransform\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"animateTransform\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"circle\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"circle\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"clipPath\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"clipPath\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"defs\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"defs\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"desc\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"desc\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"ellipse\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"ellipse\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feBlend\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feBlend\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feColorMatrix\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feColorMatrix\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feComponentTransfer\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feComponentTransfer\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feComposite\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feComposite\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feConvolveMatrix\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feConvolveMatrix\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feDiffuseLighting\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feDiffuseLighting\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feDisplacementMap\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feDisplacementMap\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feDistantLight\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feDistantLight\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feDropShadow\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feDropShadow\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feFlood\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feFlood\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feFuncA\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feFuncA\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feFuncB\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feFuncB\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feFuncG\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feFuncG\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feFuncR\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feFuncR\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feGaussianBlur\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feGaussianBlur\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feImage\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feImage\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feMerge\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feMerge\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feMergeNode\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feMergeNode\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feMorphology\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feMorphology\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feOffset\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feOffset\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"fePointLight\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"fePointLight\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feSpecularLighting\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feSpecularLighting\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feSpotLight\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feSpotLight\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feTile\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feTile\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"feTurbulence\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"feTurbulence\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"filter\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"filter\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"foreignObject\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"foreignObject\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"g\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"g\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"image\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"image\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"line\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"line\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"linearGradient\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"linearGradient\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"marker\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"marker\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"mask\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"mask\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"metadata\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"metadata\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"mpath\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"mpath\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"path\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"path\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"pattern\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"pattern\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"polygon\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"polygon\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"polyline\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"polyline\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"radialGradient\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"radialGradient\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"rect\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"rect\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"set\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"set\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"stop\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"stop\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"switch\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"switch\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"text\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"text\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"textPath\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"textPath\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"tspan\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"tspan\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"use\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"use\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"view\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"view\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"relative-time\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"relative-time\" & FunctionComponent<unknown>"
            },
            {
              "value": "\"tab-container\" & ComponentClass<unknown, any>"
            },
            {
              "value": "\"tab-container\" & FunctionComponent<unknown>"
            }
          ]
        }
      },
      "iconsVisible": {
        "defaultValue": null,
        "description": "",
        "name": "iconsVisible",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/UnderlineTabbedInterface.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "loadingCounters": {
        "defaultValue": null,
        "description": "",
        "name": "loadingCounters",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/UnderlineTabbedInterface.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "counter": {
        "defaultValue": null,
        "description": "",
        "name": "counter",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/UnderlineTabbedInterface.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string | number",
          "value": [
            {
              "value": "string"
            },
            {
              "value": "number"
            }
          ]
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "",
        "name": "icon",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/UnderlineTabbedInterface.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ReactElement<any, string | JSXElementConstructor<any>> | FC<IconProps>",
          "value": [
            {
              "value": "ReactElement<any, string | JSXElementConstructor<any>>",
              "description": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.",
              "fullComment": "Represents a JSX element.\n\nWhere {@link ReactNode} represents everything that can be rendered, `ReactElement`\nonly represents JSX.\n@template P The type of the props object\n@template T The type of the component or tag\n@example ```tsx\nconst element: ReactElement = <div />;\n```",
              "tags": {
                "template": "P The type of the props object\nT The type of the component or tag",
                "example": "```tsx\nconst element: ReactElement = <div />;\n```"
              }
            },
            {
              "value": "FC<IconProps>",
              "description": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.",
              "fullComment": "Represents the type of a function component. Can optionally\nreceive a type argument that represents the props the component\naccepts.\n@template P The props the component accepts.\n@see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n@example ```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n@example ```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```",
              "tags": {
                "template": "P The props the component accepts.",
                "see": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}",
                "example": "```tsx\n// With props:\ntype Props = { name: string }\n\nconst MyComponent: FunctionComponent<Props> = (props) => {\n return <div>{props.name}</div>\n}\n```\n```tsx\n// Without props:\nconst MyComponentWithoutProps: FunctionComponent = () => {\n  return <div>MyComponentWithoutProps</div>\n}\n```"
              }
            }
          ]
        }
      },
      "id": {
        "defaultValue": null,
        "description": "",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/UnderlineTabbedInterface.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/UnstyledTextInput.tsx",
    "description": "",
    "displayName": "UnstyledTextInput",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/ValidationAnimationContainer.tsx",
    "description": "",
    "displayName": "ValidationAnimationContainer",
    "methods": [],
    "props": {
      "show": {
        "defaultValue": null,
        "description": "",
        "name": "show",
        "parent": {
          "fileName": "react/packages/react/src/internal/components/ValidationAnimationContainer.tsx",
          "name": "Props"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/ValidationAnimationContainer.tsx",
            "name": "Props"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "param": "flag - the feature flag that will control whether or not the provided\nstyled component is used\ndefaultAs - the default component to use when `as` is not provided\nComponent - the styled component that will be used if the feature flag\nis disabled"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/utils/toggleStyledComponent.tsx",
    "description": "Utility to toggle rendering a styled component or a \"plain\" component based\non the provided `as` prop. When the provided feature flag is enabled, the\nprops will be passed through to an element or component created with the `as`\nprop. When it is disabled, the provided styled component is used instead.",
    "displayName": "toggleStyledComponent",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroup.tsx",
    "description": "",
    "displayName": "CheckboxOrRadioGroup",
    "methods": [],
    "props": {
      "aria-labelledby": {
        "defaultValue": null,
        "description": "Used when associating the input group with a label other than `CheckboxOrRadioGroup.Label`",
        "name": "aria-labelledby",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroup.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "disabled": {
        "defaultValue": {
          "value": false
        },
        "description": "Whether the input group allows user input",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroup.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "id": {
        "defaultValue": null,
        "description": "The unique identifier for this input group. Used to associate the label, validation text, and caption text.\nYou may want a custom ID to make it easier to select elements in integration tests.",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroup.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "string",
          "value": [
            {
              "value": "string"
            }
          ]
        }
      },
      "required": {
        "defaultValue": {
          "value": false
        },
        "description": "If true, the user must make a selection before the owning form can be submitted",
        "name": "required",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroup.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroupCaption.tsx",
    "description": "",
    "displayName": "CheckboxOrRadioGroupCaption",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {
      "see": "{@link https://react.dev/learn/passing-data-deeply-with-context React Docs}\n{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/context/ React TypeScript Cheatsheet}",
      "example": "```tsx\nimport { createContext } from 'react';\n\nconst ThemeContext = createContext('light');\n```"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroupContext.tsx",
    "description": "Context lets components pass information deep down without explicitly\npassing props.\n\nCreated from {@link createContext}",
    "displayName": "Context",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroupLabel.tsx",
    "description": "",
    "displayName": "CheckboxOrRadioGroupLabel",
    "methods": [],
    "props": {
      "visuallyHidden": {
        "defaultValue": {
          "value": false
        },
        "description": "Whether to visually hide the fieldset legend",
        "name": "visuallyHidden",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroupLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "boolean",
          "value": [
            {
              "value": "false"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroupValidation.tsx",
    "description": "",
    "displayName": "CheckboxOrRadioGroupValidation",
    "methods": [],
    "props": {
      "variant": {
        "defaultValue": null,
        "description": "Changes the visual style to match the validation status",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroupValidation.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "FormValidationStatus",
          "value": [
            {
              "value": "\"success\""
            },
            {
              "value": "\"error\""
            }
          ]
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "A style object used to override styles using styled-components",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "BetterSystemStyleObject",
          "value": [
            {
              "value": "null"
            },
            {
              "value": "SystemCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSPseudoSelectorProps",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "Map all nested selectors",
              "fullComment": "Map all nested selectors",
              "tags": {}
            },
            {
              "value": "VariantProperty",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "UseThemeFunction",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "EmotionLabel",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "BetterCssProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSCustomProperties",
              "description": "",
              "fullComment": "",
              "tags": {}
            },
            {
              "value": "CSSSelectorObject",
              "description": "",
              "fullComment": "",
              "tags": {}
            }
          ]
        }
      }
    }
  }
]