name: Integration tests for a given PRC PR and a canary version
run-name: Integration tests for ${{github.event.inputs.primitives-pr}} and version ${{github.event.inputs.version}}

on:
  workflow_dispatch:
    inputs:
      primitives-pr:
        required: true
        description: 'Paste the link of the PR you would like to test'
        type: string
      version:
        required: true
        description: 'Specify the canary version of the above PR you would like to test'
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  # Check if there is an integration PR for the specified PRC PR
  check-integration-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Get the PR number from the given PR URL
        id: get-pr-number
        uses: actions/github-script@v6
        with:
          script: |
            const prNumber = '${{ github.event.inputs.primitives-pr }}'.split('/').pop()
            return Number(prNumber)
      - name: Check if integration PR exists for the specified PRC PR
        id: does-pr-exist
        uses: actions/github-script@v6
        with:
          script: |
            const allPulls = await github.rest.pulls.list({
               owner: context.repo.owner,
               repo: context.repo.repo,
               per_page: 100
            });
            const pulls = await github.paginate(allPulls)
            const result = pulls.find((pull) => {
              const prExist = pull.head.ref == 'prc-integration-test-for-' + '${{ steps.get-pr-number.outputs.result }}'
              return prExist ? pull : false
            });
            return result
      - run: echo "Does PR exist? - ${{ steps.does-pr-exist.outputs.result != false }}"
    outputs:
      prExists: ${{ steps.does-pr-exist.outputs.result }}
  create-integration-pr:
    needs: check-integration-pr
    runs-on: internal-actions-larger-runners-github-core-medium-mysql8
    if: ${{ needs.check-integration-pr.outputs.prExists == false }}
    steps:
      - name: Generate token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: 902635
          private-key: ${{ secrets.PRIMER_INTEGRATION_APP_PRIVATE_KEY }}
      - name: Get the PR number from the given PR URL
        id: get-pr-number
        uses: actions/github-script@v6
        with:
          script: |
            const prNumber = '${{ github.event.inputs.primitives-pr }}'.split('/').pop()
            return Number(prNumber)
      - run: echo "Thanks for testing your Primer React PR at github/github!"
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Setup JS
        uses: ./.github/actions/setup-js
      - name: Update @primer/react version on package.json with the specified version number
        id: primer-react-version
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs')
            const pkg = require('./npm-workspaces/primer/package.json')
            const package = pkg.dependencies['@primer/react']

            const specifiedVersion = '${{ github.event.inputs.version }}'

            if(package != specifiedVersion) {
              pkg.dependencies['@primer/react'] = specifiedVersion
              fs.writeFileSync('./npm-workspaces/primer/package.json', JSON.stringify(pkg, null, 2))
            }
            return pkg.dependencies['@primer/react']
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_GH_PAT: ${{ secrets.GH_GH_PAT }}
      - name: Install dependencies
        run: npm install --ignore-scripts
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_GH_PAT: ${{ secrets.GH_GH_PAT }}
      - name: Licensed Cache - NPM
        uses: ./.github/actions/licensed-cache-npm
      - name: Hoist npm dependencies
        run: script/hoist-node-modules
      # Create a new PR with the specified canary version
      - name: Create PR
        id: cpr
        uses: peter-evans/create-pull-request@v5.0.2
        with:
          token: ${{ steps.generate_token.outputs.token }}
          base: master
          branch: 'prc-integration-test-for-${{ steps.get-pr-number.outputs.result }}'
          draft: true
          delete-branch: true
          commit-message: 'Integration tests for PRC ${{ github.event.inputs.version }}'
          title: 'Integration tests for PRC PR ${{steps.get-pr-number.outputs.result}}'
          body: |
            <!-- primitives-pr-number: #${{steps.get-pr-number.outputs.result}} -->
            ⚠️ Please do not merge this PR.

            - Auto-generated by [primer-react-pr-rest github action](https://github.com/github/github/blob/master/.github/workflows/primer-react-pr-test.yml)
            - This PR is created to test the integration of Primer React PR ${{ github.event.inputs.primitives-pr }} with github/github.

            **Once the integration tests are completed, please close the PR.**
          labels: |
            dependencies
            PRC-integration-test
      - name: Print Pull Request URL
        if: ${{ steps.cpr.outputs.pull-request-url }}
        run: |
          echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}"
      - name: Get the Slack USER_ID from username
        id: get-slack-user-id
        run: |
          res=$(
            curl --get \
            --url "https://slack.com/api/users.lookupByEmail?email=${{ github.event.sender.login }}@github.com" \
            --header "Authorization: Bearer ${{ secrets.SLACK_FR_BOT_TOKEN }}" \
            --header "Content-Type: application/x-www-form-urlencoded"
          )
          id=$(echo "${res}" | jq -r ".user.id")
          echo "Slack user id: $id"
          echo "id=$id" >> $GITHUB_OUTPUT
      - name: Notify in Slack
        env:
          PR_ASSIGNEE: ${{ github.event.sender.login }}
        run: |
          curl -X POST \
          --url "https://slack.com/api/chat.postMessage" \
          --data "{\"channel\":\"${{ steps.get-slack-user-id.outputs.id }}\",\"text\":\":wave: Hi <@$PR_ASSIGNEE>! :primer: Your integration PR for ${{ github.event.inputs.primitives-pr }} is ready for you to take a look at when you are ready: ${{ steps.cpr.outputs.pull-request-url }}\"}" \
          --header "Authorization: Bearer ${{ secrets.SLACK_FR_BOT_TOKEN }}" \
          --header "Content-Type: application/json; charset=utf-8"
  commit-and-push:
    runs-on: internal-actions-larger-runners-github-core-medium-mysql8
    if: ${{ needs.check-integration-pr.outputs.prExists != false }}
    needs: check-integration-pr
    steps:
      - run: echo "Push a commit because PR already exists"
      - name: Generate token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: 382932
          private-key: ${{ secrets.TEST_PRIMER_ACTIONS_PRIVATE_KEY }}
      - name: Get the PR number from the given PR URL
        id: get-pr-number
        uses: actions/github-script@v6
        with:
          script: |
            const prNumber = '${{ github.event.inputs.primitives-pr }}'.split('/').pop()
            return Number(prNumber)
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          ref: prc-integration-test-for-${{ steps.get-pr-number.outputs.result }}
          token: ${{ steps.generate_token.outputs.token }}
      - name: Setup JS
        uses: ./.github/actions/setup-js
      - name: Update @primer/react version on package.json with the specified version number
        id: primer-react-version
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs')
            const pkg = require('./npm-workspaces/primer/package.json')
            const package = pkg.dependencies['@primer/react']

            const specifiedVersion = '${{ github.event.inputs.version }}'

            if(package != specifiedVersion) {
              pkg.dependencies['@primer/react'] = specifiedVersion
              fs.writeFileSync('./npm-workspaces/primer/package.json', JSON.stringify(pkg, null, 2))
            }
            return pkg.dependencies['@primer/react']
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_GH_PAT: ${{ secrets.GH_GH_PAT }}
      - name: Install dependencies
        run: npm install --ignore-scripts
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_GH_PAT: ${{ secrets.GH_GH_PAT }}
      - name: Licensed Cache - NPM
        uses: ./.github/actions/licensed-cache-npm
      - name: Hoist npm dependencies
        run: script/hoist-node-modules
      # Push a commit to the PR
      - name: Push a commit
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          skip_fetch: true
          commit_message: 'Integration tests for PRC ${{ github.event.inputs.version }}'
      # TODO: Take these type of repeted actions out to a composite action
      - name: Get the Slack USER_ID from username
        id: get-slack-user-id
        run: |
          res=$(
            curl --get \
            --url "https://slack.com/api/users.lookupByEmail?email=${{ github.event.sender.login }}@github.com" \
            --header "Authorization: Bearer ${{ secrets.SLACK_FR_BOT_TOKEN }}" \
            --header "Content-Type: application/x-www-form-urlencoded"
          )
          id=$(echo "${res}" | jq -r ".user.id")
          echo "Slack user id: $id"
          echo "id=$id" >> $GITHUB_OUTPUT
      - name: Notify in Slack
        env:
          PR_ASSIGNEE: ${{ github.event.sender.login }}
        run: |
          curl -X POST \
          --url "https://slack.com/api/chat.postMessage" \
          --data "{\"channel\":\"${{ steps.get-slack-user-id.outputs.id }}\",\"text\":\":wave: Hi <@$PR_ASSIGNEE>! :primer: Your integration PR for ${{ github.event.inputs.primitives-pr }} has a new commit and is ready for you to take a look at when you are ready: ${{ needs.check-integration-pr.outputs.prExists }}\"}" \
          --header "Authorization: Bearer ${{ secrets.SLACK_FR_BOT_TOKEN }}" \
          --header "Content-Type: application/json; charset=utf-8"
